
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080097d0  080097d0  0000a7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800985c  0800985c  0000b084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800985c  0800985c  0000a85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009864  08009864  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009864  08009864  0000a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009868  08009868  0000a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800986c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f8  20000084  080098f0  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000217c  080098f0  0000b17c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bfdc  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bf5  00000000  00000000  00037090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002408  00000000  00000000  0003cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001be3  00000000  00000000  0003f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027872  00000000  00000000  00040c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e55d  00000000  00000000  000684e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0a24  00000000  00000000  00096a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187466  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b80  00000000  00000000  001874ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019102c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097b8 	.word	0x080097b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	080097b8 	.word	0x080097b8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f009 f837 	bl	80095d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005b4:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005da:	f001 faf1 	bl	8001bc0 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005e4:	f000 fb42 	bl	8000c6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005f4:	f002 f87e 	bl	80026f4 <HAL_ADCEx_MultiModeConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005fe:	f000 fb35 	bl	8000c6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_ADC1_Init+0x120>)
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2306      	movs	r3, #6
 8000608:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060e:	237f      	movs	r3, #127	@ 0x7f
 8000610:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000612:	2304      	movs	r3, #4
 8000614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000620:	f001 fc52 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800062a:	f000 fb1f 	bl	8000c6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000638:	f001 fc46 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fb13 	bl	8000c6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000646:	2312      	movs	r3, #18
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000650:	f001 fc3a 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800065a:	f000 fb07 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	@ 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000a0 	.word	0x200000a0
 800066c:	2e300800 	.word	0x2e300800

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	@ 0x68
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f008 ffa1 	bl	80095d8 <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800069e:	d160      	bne.n	8000762 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f94f 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006bc:	f000 fad6 	bl	8000c6c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80006f0:	f641 0302 	movw	r3, #6146	@ 0x1802
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	@ (8000770 <HAL_ADC_MspInit+0x100>)
 8000706:	f003 f845 	bl	8003794 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <HAL_ADC_MspInit+0x108>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000712:	2205      	movs	r2, #5
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800072a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800073a:	2220      	movs	r2, #32
 800073c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000748:	f002 f958 	bl	80029fc <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000752:	f000 fa8b 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075a:	655a      	str	r2, [r3, #84]	@ 0x54
 800075c:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3768      	adds	r7, #104	@ 0x68
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	2000010c 	.word	0x2000010c
 8000778:	40020408 	.word	0x40020408

0800077c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <MX_FREERTOS_Init+0x18>)
 8000782:	2100      	movs	r1, #0
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_FREERTOS_Init+0x1c>)
 8000786:	f006 f952 	bl	8006a2e <osThreadNew>
 800078a:	4603      	mov	r3, r0
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <MX_FREERTOS_Init+0x20>)
 800078e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	080097f4 	.word	0x080097f4
 8000798:	0800142d 	.word	0x0800142d
 800079c:	2000016c 	.word	0x2000016c

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_DMA_Init+0x50>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007aa:	4a11      	ldr	r2, [pc, #68]	@ (80007f0 <MX_DMA_Init+0x50>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_DMA_Init+0x50>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_DMA_Init+0x50>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007c2:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <MX_DMA_Init+0x50>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_DMA_Init+0x50>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2105      	movs	r1, #5
 80007da:	2038      	movs	r0, #56	@ 0x38
 80007dc:	f002 f8e6 	bl	80029ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80007e0:	2038      	movs	r0, #56	@ 0x38
 80007e2:	f002 f8fd 	bl	80029e0 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 80007fa:	4a20      	ldr	r2, [pc, #128]	@ (800087c <MX_FDCAN1_Init+0x88>)
 80007fc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000812:	2200      	movs	r2, #0
 8000814:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000818:	2200      	movs	r2, #0
 800081a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 800081e:	2200      	movs	r2, #0
 8000820:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000824:	2214      	movs	r2, #20
 8000826:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 800082a:	2201      	movs	r2, #1
 800082c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000830:	220e      	movs	r2, #14
 8000832:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000836:	2202      	movs	r2, #2
 8000838:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 800083c:	2202      	movs	r2, #2
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000842:	2201      	movs	r2, #1
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000848:	220e      	movs	r2, #14
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 800084e:	2202      	movs	r2, #2
 8000850:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000854:	2202      	movs	r2, #2
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 800085a:	2200      	movs	r2, #0
 800085c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000860:	2200      	movs	r2, #0
 8000862:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_FDCAN1_Init+0x84>)
 8000866:	f002 fae5 	bl	8002e34 <HAL_FDCAN_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000870:	f000 f9fc 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000170 	.word	0x20000170
 800087c:	40006400 	.word	0x40006400

08000880 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09a      	sub	sp, #104	@ 0x68
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2244      	movs	r2, #68	@ 0x44
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f008 fe99 	bl	80095d8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a28      	ldr	r2, [pc, #160]	@ (800094c <HAL_FDCAN_MspInit+0xcc>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d149      	bne.n	8000944 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 f847 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008cc:	f000 f9ce 	bl	8000c6c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <HAL_FDCAN_MspInit+0xd0>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <HAL_FDCAN_MspInit+0xd0>)
 80008d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_FDCAN_MspInit+0xd0>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <HAL_FDCAN_MspInit+0xd0>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	4a18      	ldr	r2, [pc, #96]	@ (8000950 <HAL_FDCAN_MspInit+0xd0>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <HAL_FDCAN_MspInit+0xd0>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000900:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000904:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000912:	2309      	movs	r3, #9
 8000914:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f002 ff38 	bl	8003794 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2105      	movs	r1, #5
 8000928:	2015      	movs	r0, #21
 800092a:	f002 f83f 	bl	80029ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800092e:	2015      	movs	r0, #21
 8000930:	f002 f856 	bl	80029e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2105      	movs	r1, #5
 8000938:	2016      	movs	r0, #22
 800093a:	f002 f837 	bl	80029ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800093e:	2016      	movs	r0, #22
 8000940:	f002 f84e 	bl	80029e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3768      	adds	r7, #104	@ 0x68
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40006400 	.word	0x40006400
 8000950:	40021000 	.word	0x40021000

08000954 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_GPIO_Init+0x74>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a1a      	ldr	r2, [pc, #104]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_GPIO_Init+0x74>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_GPIO_Init+0x74>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_GPIO_Init+0x74>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <MX_GPIO_Init+0x74>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_GPIO_Init+0x74>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <MX_I2C1_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a08:	f003 f85e 	bl	8003ac8 <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 f92b 	bl	8000c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a1a:	f003 f8f0 	bl	8003bfe <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 f922 	bl	8000c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a2c:	f003 f932 	bl	8003c94 <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 f919 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001d4 	.word	0x200001d4
 8000a44:	40005400 	.word	0x40005400
 8000a48:	40b285c2 	.word	0x40b285c2

08000a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	@ 0x70
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	2244      	movs	r2, #68	@ 0x44
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 fdb3 	bl	80095d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a2d      	ldr	r2, [pc, #180]	@ (8000b2c <HAL_I2C_MspInit+0xe0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d153      	bne.n	8000b24 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a7c:	2340      	movs	r3, #64	@ 0x40
 8000a7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 ff63 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a94:	f000 f8ea 	bl	8000c6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	4a24      	ldr	r2, [pc, #144]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f002 fe54 	bl	8003794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b04:	4619      	mov	r1, r3
 8000b06:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <HAL_I2C_MspInit+0xe8>)
 8000b08:	f002 fe44 	bl	8003794 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b10:	4a07      	ldr	r2, [pc, #28]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000b12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b24:	bf00      	nop
 8000b26:	3770      	adds	r7, #112	@ 0x70
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000400 	.word	0x48000400

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fe34 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f836 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff ff06 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b48:	f7ff fe2a 	bl	80007a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b4c:	f7ff fcfe 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000b50:	f7ff fe50 	bl	80007f4 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000b54:	f000 f98e 	bl	8000e74 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000b58:	f7ff ff38 	bl	80009cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b5c:	f005 ff08 	bl	8006970 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b60:	f7ff fe0c 	bl	800077c <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fca7 	bl	80014b8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 fcd9 	bl	8001524 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <main+0x74>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b78:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <main+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <main+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <main+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <main+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b92:	4906      	ldr	r1, [pc, #24]	@ (8000bac <main+0x74>)
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 fd51 	bl	800163c <BSP_COM_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <main+0x6c>
  {
    Error_Handler();
 8000ba0:	f000 f864 	bl	8000c6c <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000ba4:	f005 ff08 	bl	80069b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <main+0x70>
 8000bac:	20000228 	.word	0x20000228

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	@ 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2238      	movs	r2, #56	@ 0x38
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fd0a 	bl	80095d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f003 f8aa 	bl	8003d2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	2340      	movs	r3, #64	@ 0x40
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bf2:	2355      	movs	r3, #85	@ 0x55
 8000bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f944 	bl	8003e94 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c12:	f000 f82b 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fc42 	bl	80044b8 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c3a:	f000 f817 	bl	8000c6c <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	@ 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d101      	bne.n	8000c5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5a:	f000 fdbd 	bl	80017d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40001000 	.word	0x40001000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_MspInit+0x50>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	4a11      	ldr	r2, [pc, #68]	@ (8000cc8 <HAL_MspInit+0x50>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <HAL_MspInit+0x50>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <HAL_MspInit+0x50>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <HAL_MspInit+0x50>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_MspInit+0x50>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210f      	movs	r1, #15
 8000cb2:	f06f 0001 	mvn.w	r0, #1
 8000cb6:	f001 fe79 	bl	80029ac <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cba:	f003 f8db 	bl	8003e74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <HAL_InitTick+0xc4>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d90 <HAL_InitTick+0xc4>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce8:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <HAL_InitTick+0xc4>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fdb0 	bl	8004864 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d04:	f003 fd82 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8000d08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0c:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <HAL_InitTick+0xc8>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3b01      	subs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d1a:	4a20      	ldr	r2, [pc, #128]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a1c      	ldr	r2, [pc, #112]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d38:	4817      	ldr	r0, [pc, #92]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d3a:	f003 fffb 	bl	8004d34 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d11b      	bne.n	8000d84 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d4c:	4812      	ldr	r0, [pc, #72]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d4e:	f004 f853 	bl	8004df8 <HAL_TIM_Base_Start_IT>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d111      	bne.n	8000d84 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d60:	2036      	movs	r0, #54	@ 0x36
 8000d62:	f001 fe3d 	bl	80029e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d808      	bhi.n	8000d7e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2036      	movs	r0, #54	@ 0x36
 8000d72:	f001 fe1b 	bl	80029ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_InitTick+0xd4>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e002      	b.n	8000d84 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3730      	adds	r7, #48	@ 0x30
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	431bde83 	.word	0x431bde83
 8000d98:	20000238 	.word	0x20000238
 8000d9c:	40001000 	.word	0x40001000
 8000da0:	20000028 	.word	0x20000028

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <FDCAN1_IT0_IRQHandler+0x10>)
 8000de2:	f002 fb11 	bl	8003408 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000170 	.word	0x20000170

08000df0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <FDCAN1_IT1_IRQHandler+0x10>)
 8000df6:	f002 fb07 	bl	8003408 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000170 	.word	0x20000170

08000e04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e0a:	f004 f8b6 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000284 	.word	0x20000284

08000e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 fbef 	bl	8001600 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <TIM6_DAC_IRQHandler+0x10>)
 8000e2e:	f004 f8a4 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000238 	.word	0x20000238

08000e3c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <DMA2_Channel1_IRQHandler+0x10>)
 8000e42:	f001 fe83 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000010c 	.word	0x2000010c

08000e50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b098      	sub	sp, #96	@ 0x60
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2234      	movs	r2, #52	@ 0x34
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f008 fb99 	bl	80095d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe8 <MX_TIM1_Init+0x174>)
 8000eaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8000eac:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000eae:	f244 2268 	movw	r2, #17000	@ 0x4268
 8000eb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8000eba:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b48      	ldr	r3, [pc, #288]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ec8:	4b46      	ldr	r3, [pc, #280]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b45      	ldr	r3, [pc, #276]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ed4:	4843      	ldr	r0, [pc, #268]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000ed6:	f003 fff9 	bl	8004ecc <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000ee0:	f7ff fec4 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8000ee8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eec:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	483a      	ldr	r0, [pc, #232]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000efa:	f004 fe5b 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f04:	f7ff feb2 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	2360      	movs	r3, #96	@ 0x60
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = TIM1_ARR/2;
 8000f0c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	482d      	ldr	r0, [pc, #180]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000f30:	f004 f972 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f3a:	f7ff fe97 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f46:	2204      	movs	r2, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4826      	ldr	r0, [pc, #152]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000f4c:	f004 f964 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000f56:	f7ff fe89 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f5e:	2208      	movs	r2, #8
 8000f60:	4619      	mov	r1, r3
 8000f62:	4820      	ldr	r0, [pc, #128]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000f64:	f004 f958 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f6e:	f7ff fe7d 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f76:	220c      	movs	r2, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481a      	ldr	r0, [pc, #104]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000f7c:	f004 f94c 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f86:	f7ff fe71 	bl	8000c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000fc8:	f004 fe76 	bl	8005cb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000fd2:	f7ff fe4b 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fd6:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <MX_TIM1_Init+0x170>)
 8000fd8:	f000 f82e 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000fdc:	bf00      	nop
 8000fde:	3760      	adds	r7, #96	@ 0x60
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000284 	.word	0x20000284
 8000fe8:	40012c00 	.word	0x40012c00

08000fec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <HAL_TIM_PWM_MspInit+0x44>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d113      	bne.n	8001026 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_TIM_PWM_MspInit+0x48>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_TIM_PWM_MspInit+0x48>)
 8001004:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001008:	6613      	str	r3, [r2, #96]	@ 0x60
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_TIM_PWM_MspInit+0x48>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	2019      	movs	r0, #25
 800101c:	f001 fcc6 	bl	80029ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001020:	2019      	movs	r0, #25
 8001022:	f001 fcdd 	bl	80029e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012c00 	.word	0x40012c00
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_TIM_MspPostInit+0x64>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d11b      	bne.n	8001092 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_TIM_MspPostInit+0x68>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <HAL_TIM_MspPostInit+0x68>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_TIM_MspPostInit+0x68>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001072:	230e      	movs	r3, #14
 8001074:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001082:	2302      	movs	r3, #2
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <HAL_TIM_MspPostInit+0x6c>)
 800108e:	f002 fb81 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000800 	.word	0x48000800

080010a8 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	7b1b      	ldrb	r3, [r3, #12]
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d308      	bcc.n	80010d4 <fdcan_pkt_get_byte+0x2c>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2300      	movs	r3, #0
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	6053      	str	r3, [r2, #4]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2207      	movs	r2, #7
 80010d0:	711a      	strb	r2, [r3, #4]
 80010d2:	e00b      	b.n	80010ec <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4413      	add	r3, r2
 80010da:	791a      	ldrb	r2, [r3, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	605a      	str	r2, [r3, #4]
}
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	3724      	adds	r7, #36	@ 0x24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <fdcan_pkt_pool_alloc+0x64>)
 8001102:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001106:	2b00      	cmp	r3, #0
 8001108:	d108      	bne.n	800111c <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	461a      	mov	r2, r3
 800110e:	2300      	movs	r3, #0
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	6053      	str	r3, [r2, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 800111a:	e019      	b.n	8001150 <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <fdcan_pkt_pool_alloc+0x64>)
 800111e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001122:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <fdcan_pkt_pool_alloc+0x64>)
 800112a:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <fdcan_pkt_pool_alloc+0x64>)
 8001136:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 800113a:	3b01      	subs	r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <fdcan_pkt_pool_alloc+0x64>)
 8001140:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	605a      	str	r2, [r3, #4]
}
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	3724      	adds	r7, #36	@ 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	200002d0 	.word	0x200002d0

08001160 <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3304      	adds	r3, #4
 800116c:	2208      	movs	r2, #8
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fa31 	bl	80095d8 <memset>
    pkt->len = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <fdcan_pkt_pool_free+0x48>)
 800117e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <fdcan_pkt_pool_free+0x48>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <fdcan_pkt_pool_free+0x48>)
 8001190:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001194:	3301      	adds	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <fdcan_pkt_pool_free+0x48>)
 800119a:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200002d0 	.word	0x200002d0

080011ac <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b08b      	sub	sp, #44	@ 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d308      	bcc.n	80011d6 <fdcan_pkt_buf_push+0x2a>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	461a      	mov	r2, r3
 80011c8:	2300      	movs	r3, #0
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	6053      	str	r3, [r2, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2206      	movs	r2, #6
 80011d2:	711a      	strb	r2, [r3, #4]
 80011d4:	e01e      	b.n	8001214 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4413      	add	r3, r2
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	68d2      	ldr	r2, [r2, #12]
 80011e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80011e8:	fb01 f202 	mul.w	r2, r1, r2
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
    self->len++;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	605a      	str	r2, [r3, #4]
}
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	372c      	adds	r7, #44	@ 0x2c
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_FDCAN_ErrorStatusCallback+0x30>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d107      	bne.n	8001242 <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000170 	.word	0x20000170
 8001254:	20000558 	.word	0x20000558

08001258 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f002 f840 	bl	80032f8 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 8001282:	f7ff fcf3 	bl	8000c6c <Error_Handler>
    }
}
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	@ 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d057      	beq.n	8001368 <HAL_FDCAN_RxFifo0Callback+0xc4>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff1b 	bl	80010f8 <fdcan_pkt_pool_alloc>
 80012c2:	7e3b      	ldrb	r3, [r7, #24]
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_FDCAN_RxFifo0Callback+0x36>
 80012ce:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80012d2:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	f7ff fcc9 	bl	8000c6c <Error_Handler>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	3304      	adds	r3, #4
 80012e2:	4a24      	ldr	r2, [pc, #144]	@ (8001374 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 80012e4:	2140      	movs	r1, #64	@ 0x40
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f001 fefe 	bl	80030e8 <HAL_FDCAN_GetRxMessage>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_FDCAN_RxFifo0Callback+0x5a>
 80012fa:	f7ff fcb7 	bl	8000c6c <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 8001306:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b1f      	cmp	r3, #31
 8001316:	d90c      	bls.n	8001332 <HAL_FDCAN_RxFifo0Callback+0x8e>
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b21      	cmp	r3, #33	@ 0x21
 800131e:	d808      	bhi.n	8001332 <HAL_FDCAN_RxFifo0Callback+0x8e>
        {
            instant_recv_proc(pkt);
 8001320:	463b      	mov	r3, r7
 8001322:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f835 	bl	8001394 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 800132a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800132c:	f7ff ff18 	bl	8001160 <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001330:	e01a      	b.n	8001368 <HAL_FDCAN_RxFifo0Callback+0xc4>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b21      	cmp	r3, #33	@ 0x21
 8001338:	d916      	bls.n	8001368 <HAL_FDCAN_RxFifo0Callback+0xc4>
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b23      	cmp	r3, #35	@ 0x23
 8001340:	d812      	bhi.n	8001368 <HAL_FDCAN_RxFifo0Callback+0xc4>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001348:	490b      	ldr	r1, [pc, #44]	@ (8001378 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff2e 	bl	80011ac <fdcan_pkt_buf_push>
 8001350:	7c3b      	ldrb	r3, [r7, #16]
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_FDCAN_RxFifo0Callback+0xc4>
 800135c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	f7ff fc82 	bl	8000c6c <Error_Handler>
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200005ac 	.word	0x200005ac
 8001374:	20000584 	.word	0x20000584
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 800139e:	f107 001c 	add.w	r0, r7, #28
 80013a2:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80013a6:	2200      	movs	r2, #0
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	f7ff fe7d 	bl	80010a8 <fdcan_pkt_get_byte>
 80013ae:	7f3b      	ldrb	r3, [r7, #28]
 80013b0:	f083 0301 	eor.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00c      	beq.n	80013d4 <instant_recv_proc+0x40>
 80013ba:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <instant_recv_proc+0x90>)
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	461a      	mov	r2, r3
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013ce:	e882 0003 	stmia.w	r2, {r0, r1}
        }
        #endif
        default: break;
    }
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
 80013d2:	e022      	b.n	800141a <instant_recv_proc+0x86>
    switch (code)
 80013d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013d8:	2b11      	cmp	r3, #17
 80013da:	d00b      	beq.n	80013f4 <instant_recv_proc+0x60>
 80013dc:	2b12      	cmp	r3, #18
 80013de:	d013      	beq.n	8001408 <instant_recv_proc+0x74>
        default: break;
 80013e0:	bf00      	nop
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2300      	movs	r3, #0
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	6053      	str	r3, [r2, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2207      	movs	r2, #7
 80013f0:	711a      	strb	r2, [r3, #4]
 80013f2:	e012      	b.n	800141a <instant_recv_proc+0x86>
            fdacn_data_store = FNC_DISABLE;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <instant_recv_proc+0x94>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
}
 8001406:	e008      	b.n	800141a <instant_recv_proc+0x86>
            fdacn_data_store = FNC_ENABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <instant_recv_proc+0x94>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
}
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	3730      	adds	r7, #48	@ 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200005ac 	.word	0x200005ac
 8001428:	20000559 	.word	0x20000559

0800142c <StartDefaultTask>:
#include "main/main.h"

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8001434:	2332      	movs	r3, #50	@ 0x32
 8001436:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8001438:	f005 fae4 	bl	8006a04 <osKernelGetTickCount>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001444:	f000 f9da 	bl	80017fc <HAL_GetTick>
 8001448:	4603      	mov	r3, r0
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <StartDefaultTask+0x34>)
 800144c:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f005 fb7f 	bl	8006b52 <osDelayUntil>
        next_wake += osPeriod;
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 800145c:	bf00      	nop
 800145e:	e7f1      	b.n	8001444 <StartDefaultTask+0x18>
 8001460:	200005b0 	.word	0x200005b0

08001464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001466:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff fcf2 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001492:	f008 f907 	bl	80096a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001496:	f7ff fb4f 	bl	8000b38 <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   r0, =_estack
 800149c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80014a8:	0800986c 	.word	0x0800986c
  ldr r2, =_sbss
 80014ac:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80014b0:	2000217c 	.word	0x2000217c

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <BSP_LED_Init+0x64>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <BSP_LED_Init+0x64>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <BSP_LED_Init+0x64>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80014da:	2320      	movs	r3, #32
 80014dc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <BSP_LED_Init+0x68>)
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f94b 	bl	8003794 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <BSP_LED_Init+0x68>)
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	2120      	movs	r1, #32
 8001508:	2200      	movs	r2, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fac4 	bl	8003a98 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	20000014 	.word	0x20000014

08001524 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	4613      	mov	r3, r2
 8001532:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001534:	4b2c      	ldr	r3, [pc, #176]	@ (80015e8 <BSP_PB_Init+0xc4>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	4a2b      	ldr	r2, [pc, #172]	@ (80015e8 <BSP_PB_Init+0xc4>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <BSP_PB_Init+0xc4>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800154c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001550:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001552:	2302      	movs	r3, #2
 8001554:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10c      	bne.n	800157a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <BSP_PB_Init+0xc8>)
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f002 f90e 	bl	8003794 <HAL_GPIO_Init>
 8001578:	e031      	b.n	80015de <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800157a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800157e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <BSP_PB_Init+0xc8>)
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f002 f900 	bl	8003794 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4a15      	ldr	r2, [pc, #84]	@ (80015f0 <BSP_PB_Init+0xcc>)
 800159a:	441a      	add	r2, r3
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4915      	ldr	r1, [pc, #84]	@ (80015f4 <BSP_PB_Init+0xd0>)
 80015a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f001 fbff 	bl	8002daa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4a0f      	ldr	r2, [pc, #60]	@ (80015f0 <BSP_PB_Init+0xcc>)
 80015b2:	1898      	adds	r0, r3, r2
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <BSP_PB_Init+0xd4>)
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	461a      	mov	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	f001 fbd6 	bl	8002d70 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80015c4:	2028      	movs	r0, #40	@ 0x28
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <BSP_PB_Init+0xd8>)
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	f001 f9eb 	bl	80029ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80015d6:	2328      	movs	r3, #40	@ 0x28
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fa01 	bl	80029e0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	20000018 	.word	0x20000018
 80015f0:	200005b4 	.word	0x200005b4
 80015f4:	08009830 	.word	0x08009830
 80015f8:	20000020 	.word	0x20000020
 80015fc:	20000024 	.word	0x20000024

08001600 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <BSP_PB_IRQHandler+0x20>)
 8001610:	4413      	add	r3, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fbde 	bl	8002dd4 <HAL_EXTI_IRQHandler>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200005b4 	.word	0x200005b4

08001624 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d903      	bls.n	800165a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001652:	f06f 0301 	mvn.w	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e018      	b.n	800168c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2294      	movs	r2, #148	@ 0x94
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <BSP_COM_Init+0x5c>)
 8001664:	4413      	add	r3, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f852 	bl	8001710 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2294      	movs	r2, #148	@ 0x94
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <BSP_COM_Init+0x5c>)
 8001676:	4413      	add	r3, r2
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f80e 	bl	800169c <MX_LPUART1_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001686:	f06f 0303 	mvn.w	r3, #3
 800168a:	e000      	b.n	800168e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200005bc 	.word	0x200005bc

0800169c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_LPUART1_Init+0x60>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	220c      	movs	r2, #12
 80016ba:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	895b      	ldrh	r3, [r3, #10]
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	891b      	ldrh	r3, [r3, #8]
 80016d2:	461a      	mov	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	899b      	ldrh	r3, [r3, #12]
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016e8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f004 fbb6 	bl	8005e5c <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000001c 	.word	0x2000001c

08001700 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff ff8d 	bl	8001624 <BSP_PB_Callback>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <COM1_MspInit+0x94>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <COM1_MspInit+0x94>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <COM1_MspInit+0x94>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <COM1_MspInit+0x94>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001734:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <COM1_MspInit+0x94>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <COM1_MspInit+0x94>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <COM1_MspInit+0x94>)
 800174a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174c:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <COM1_MspInit+0x94>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <COM1_MspInit+0x94>)
 8001756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001760:	2304      	movs	r3, #4
 8001762:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001770:	230c      	movs	r3, #12
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177e:	f002 f809 	bl	8003794 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001782:	2308      	movs	r3, #8
 8001784:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800178a:	230c      	movs	r3, #12
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001798:	f001 fffc 	bl	8003794 <HAL_GPIO_Init>
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b2:	2003      	movs	r0, #3
 80017b4:	f001 f8ef 	bl	8002996 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b8:	200f      	movs	r0, #15
 80017ba:	f7ff fa87 	bl	8000ccc <HAL_InitTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	e001      	b.n	80017ce <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ca:	f7ff fa55 	bl	8000c78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ce:	79fb      	ldrb	r3, [r7, #7]

}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_IncTick+0x1c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_IncTick+0x20>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a03      	ldr	r2, [pc, #12]	@ (80017f4 <HAL_IncTick+0x1c>)
 80017e8:	6013      	str	r3, [r2, #0]
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	20000650 	.word	0x20000650
 80017f8:	2000002c 	.word	0x2000002c

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000650 	.word	0x20000650

08001814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3360      	adds	r3, #96	@ 0x60
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <LL_ADC_SetOffset+0x44>)
 800189e:	4013      	ands	r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	03fff000 	.word	0x03fff000

080018c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3360      	adds	r3, #96	@ 0x60
 80018d2:	461a      	mov	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3360      	adds	r3, #96	@ 0x60
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001926:	b480      	push	{r7}
 8001928:	b087      	sub	sp, #28
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3360      	adds	r3, #96	@ 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	431a      	orrs	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3360      	adds	r3, #96	@ 0x60
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	615a      	str	r2, [r3, #20]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3330      	adds	r3, #48	@ 0x30
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	211f      	movs	r1, #31
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 011f 	and.w	r1, r3, #31
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3314      	adds	r3, #20
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0e5b      	lsrs	r3, r3, #25
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0d1b      	lsrs	r3, r3, #20
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0d1b      	lsrs	r3, r3, #20
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0318 	and.w	r3, r3, #24
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	400b      	ands	r3, r1
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0007ffff 	.word	0x0007ffff

08001ab0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6093      	str	r3, [r2, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ae8:	d101      	bne.n	8001aee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_IsEnabled+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_IsEnabled+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e167      	b.n	8001eaa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7fe fd41 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff67 	bl	8001ad4 <LL_ADC_IsDeepPowerDownEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff4d 	bl	8001ab0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff82 	bl	8001b24 <LL_ADC_IsInternalRegulatorEnabled>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff66 	bl	8001afc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c30:	4ba0      	ldr	r3, [pc, #640]	@ (8001eb4 <HAL_ADC_Init+0x2f4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	4aa0      	ldr	r2, [pc, #640]	@ (8001eb8 <HAL_ADC_Init+0x2f8>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff64 	bl	8001b24 <LL_ADC_IsInternalRegulatorEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff75 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8100 	bne.w	8001e98 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 80fc 	bne.w	8001e98 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ca8:	f043 0202 	orr.w	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff49 	bl	8001b4c <LL_ADC_IsEnabled>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d111      	bne.n	8001ce4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001cc4:	f7ff ff42 	bl	8001b4c <LL_ADC_IsEnabled>
 8001cc8:	4604      	mov	r4, r0
 8001cca:	487c      	ldr	r0, [pc, #496]	@ (8001ebc <HAL_ADC_Init+0x2fc>)
 8001ccc:	f7ff ff3e 	bl	8001b4c <LL_ADC_IsEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4878      	ldr	r0, [pc, #480]	@ (8001ec0 <HAL_ADC_Init+0x300>)
 8001ce0:	f7ff fd98 	bl	8001814 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7f5b      	ldrb	r3, [r3, #29]
 8001ce8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cf4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d106      	bne.n	8001d20 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	3b01      	subs	r3, #1
 8001d18:	045b      	lsls	r3, r3, #17
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b60      	ldr	r3, [pc, #384]	@ (8001ec4 <HAL_ADC_Init+0x304>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff14 	bl	8001b98 <LL_ADC_INJ_IsConversionOngoing>
 8001d70:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d16d      	bne.n	8001e54 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d16a      	bne.n	8001e54 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d82:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001dbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dc8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001dcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6911      	ldr	r1, [r2, #16]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001dde:	e013      	b.n	8001e08 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e04:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e34:	430a      	orrs	r2, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e007      	b.n	8001e54 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10c      	bne.n	8001e76 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f023 010f 	bic.w	r1, r3, #15
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e74:	e007      	b.n	8001e86 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 020f 	bic.w	r2, r2, #15
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e96:	e007      	b.n	8001ea8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	f043 0210 	orr.w	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	053e2d63 	.word	0x053e2d63
 8001ebc:	50000100 	.word	0x50000100
 8001ec0:	50000300 	.word	0x50000300
 8001ec4:	fff04007 	.word	0xfff04007

08001ec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0b6      	sub	sp, #216	@ 0xd8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x22>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e3c8      	b.n	800267c <HAL_ADC_ConfigChannel+0x7b4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe3b 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 83ad 	bne.w	800265e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fd51 	bl	80019b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fe29 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001f20:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe35 	bl	8001b98 <LL_ADC_INJ_IsConversionOngoing>
 8001f2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 81d9 	bne.w	80022ee <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 81d4 	bne.w	80022ee <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f4e:	d10f      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7ff fd58 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fd12 	bl	8001992 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f6e:	e00e      	b.n	8001f8e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff fd47 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fd02 	bl	8001992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d022      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fc0:	f7ff fc5c 	bl	800187c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6919      	ldr	r1, [r3, #16]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f7ff fca8 	bl	8001926 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x124>
 8001fe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fea:	e000      	b.n	8001fee <HAL_ADC_ConfigChannel+0x126>
 8001fec:	2300      	movs	r3, #0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f7ff fcb4 	bl	800195c <LL_ADC_SetOffsetSaturation>
 8001ff4:	e17b      	b.n	80022ee <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fc61 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x15a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fc56 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	0e9b      	lsrs	r3, r3, #26
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	e01e      	b.n	8002060 <HAL_ADC_ConfigChannel+0x198>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fc4b 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e004      	b.n	800205e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1b0>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	e018      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1e2>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800208c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e004      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80020a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc1a 	bl	80018f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fbfe 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x220>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fbf3 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	f003 021f 	and.w	r2, r3, #31
 80020e6:	e01e      	b.n	8002126 <HAL_ADC_ConfigChannel+0x25e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fbe8 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800210a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800210e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e004      	b.n	8002124 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800211a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_ADC_ConfigChannel+0x276>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	e018      	b.n	8002170 <HAL_ADC_ConfigChannel+0x2a8>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002152:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002156:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800215a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e004      	b.n	8002170 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002166:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002170:	429a      	cmp	r2, r3
 8002172:	d106      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	2101      	movs	r1, #1
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fbb7 	bl	80018f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2102      	movs	r1, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fb9b 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x2e6>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fb90 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80021a4:	4603      	mov	r3, r0
 80021a6:	0e9b      	lsrs	r3, r3, #26
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	e01e      	b.n	80021ec <HAL_ADC_ConfigChannel+0x324>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fb85 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e004      	b.n	80021ea <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80021e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x33c>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	e016      	b.n	8002232 <HAL_ADC_ConfigChannel+0x36a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002216:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800221c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e004      	b.n	8002232 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002232:	429a      	cmp	r2, r3
 8002234:	d106      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	2102      	movs	r1, #2
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb56 	bl	80018f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2103      	movs	r1, #3
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fb3a 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x3a8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2103      	movs	r1, #3
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fb2f 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	e017      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3d8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2103      	movs	r1, #3
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fb24 	bl	80018c4 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800228a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800228c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e003      	b.n	800229e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002296:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x3f0>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	e011      	b.n	80022dc <HAL_ADC_ConfigChannel+0x414>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e003      	b.n	80022dc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80022d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022dc:	429a      	cmp	r2, r3
 80022de:	d106      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	2103      	movs	r1, #3
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fb01 	bl	80018f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fc2a 	bl	8001b4c <LL_ADC_IsEnabled>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 8140 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff fbab 	bl	8001a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4a8f      	ldr	r2, [pc, #572]	@ (8002554 <HAL_ADC_ConfigChannel+0x68c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	f040 8131 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x47e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	3301      	adds	r3, #1
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2b09      	cmp	r3, #9
 800233c:	bf94      	ite	ls
 800233e:	2301      	movls	r3, #1
 8002340:	2300      	movhi	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	e019      	b.n	800237a <HAL_ADC_ConfigChannel+0x4b2>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002356:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e003      	b.n	800236a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2b09      	cmp	r3, #9
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237a:	2b00      	cmp	r3, #0
 800237c:	d079      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <HAL_ADC_ConfigChannel+0x4d2>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	0e9b      	lsrs	r3, r3, #26
 8002390:	3301      	adds	r3, #1
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002398:	e015      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x4fe>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e003      	b.n	80023be <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80023b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	069b      	lsls	r3, r3, #26
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x51e>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	e017      	b.n	8002416 <HAL_ADC_ConfigChannel+0x54e>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80023fe:	2320      	movs	r3, #32
 8002400:	e003      	b.n	800240a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	ea42 0103 	orr.w	r1, r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x574>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	3301      	adds	r3, #1
 800242e:	f003 021f 	and.w	r2, r3, #31
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	e018      	b.n	800246e <HAL_ADC_ConfigChannel+0x5a6>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800244a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800244e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800246e:	430b      	orrs	r3, r1
 8002470:	e081      	b.n	8002576 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <HAL_ADC_ConfigChannel+0x5c6>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	3301      	adds	r3, #1
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800248c:	e015      	b.n	80024ba <HAL_ADC_ConfigChannel+0x5f2>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e003      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	069b      	lsls	r3, r3, #26
 80024b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_ADC_ConfigChannel+0x612>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	e017      	b.n	800250a <HAL_ADC_ConfigChannel+0x642>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	61fb      	str	r3, [r7, #28]
  return result;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e003      	b.n	80024fe <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	ea42 0103 	orr.w	r1, r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x66e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	3301      	adds	r3, #1
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002534:	e01e      	b.n	8002574 <HAL_ADC_ConfigChannel+0x6ac>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	613b      	str	r3, [r7, #16]
  return result;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e006      	b.n	8002560 <HAL_ADC_ConfigChannel+0x698>
 8002552:	bf00      	nop
 8002554:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002574:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257a:	4619      	mov	r1, r3
 800257c:	f7ff fa48 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b3f      	ldr	r3, [pc, #252]	@ (8002684 <HAL_ADC_ConfigChannel+0x7bc>)
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d071      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258c:	483e      	ldr	r0, [pc, #248]	@ (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 800258e:	f7ff f967 	bl	8001860 <LL_ADC_GetCommonPathInternalCh>
 8002592:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a3c      	ldr	r2, [pc, #240]	@ (800268c <HAL_ADC_ConfigChannel+0x7c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x6e2>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002690 <HAL_ADC_ConfigChannel+0x7c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d127      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d121      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025be:	d157      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025c8:	4619      	mov	r1, r3
 80025ca:	482f      	ldr	r0, [pc, #188]	@ (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 80025cc:	f7ff f935 	bl	800183a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d0:	4b30      	ldr	r3, [pc, #192]	@ (8002694 <HAL_ADC_ConfigChannel+0x7cc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	4a30      	ldr	r2, [pc, #192]	@ (8002698 <HAL_ADC_ConfigChannel+0x7d0>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ea:	e002      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f8:	e03a      	b.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a27      	ldr	r2, [pc, #156]	@ (800269c <HAL_ADC_ConfigChannel+0x7d4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d113      	bne.n	800262c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02a      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800261a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002622:	4619      	mov	r1, r3
 8002624:	4818      	ldr	r0, [pc, #96]	@ (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 8002626:	f7ff f908 	bl	800183a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800262a:	e021      	b.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d11c      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d011      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002654:	4619      	mov	r1, r3
 8002656:	480c      	ldr	r0, [pc, #48]	@ (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 8002658:	f7ff f8ef 	bl	800183a <LL_ADC_SetCommonPathInternalCh>
 800265c:	e008      	b.n	8002670 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002678:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800267c:	4618      	mov	r0, r3
 800267e:	37d8      	adds	r7, #216	@ 0xd8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	80080000 	.word	0x80080000
 8002688:	50000300 	.word	0x50000300
 800268c:	c3210000 	.word	0xc3210000
 8002690:	90c00010 	.word	0x90c00010
 8002694:	20000000 	.word	0x20000000
 8002698:	053e2d63 	.word	0x053e2d63
 800269c:	c7520000 	.word	0xc7520000
 80026a0:	50000100 	.word	0x50000100
 80026a4:	cb840000 	.word	0xcb840000

080026a8 <LL_ADC_IsEnabled>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <LL_ADC_IsEnabled+0x18>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <LL_ADC_IsEnabled+0x1a>
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_REG_IsConversionOngoing>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b0a1      	sub	sp, #132	@ 0x84
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800270e:	2302      	movs	r3, #2
 8002710:	e08b      	b.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800271a:	2300      	movs	r3, #0
 800271c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800271e:	2300      	movs	r3, #0
 8002720:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800272a:	d102      	bne.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	e001      	b.n	8002736 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e06a      	b.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ffb9 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 800275c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ffb3 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d14c      	bne.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800276e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002770:	2b00      	cmp	r3, #0
 8002772:	d149      	bne.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002774:	4b30      	ldr	r3, [pc, #192]	@ (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002776:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d028      	beq.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002792:	035b      	lsls	r3, r3, #13
 8002794:	430b      	orrs	r3, r1
 8002796:	431a      	orrs	r2, r3
 8002798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800279a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800279c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027a0:	f7ff ff82 	bl	80026a8 <LL_ADC_IsEnabled>
 80027a4:	4604      	mov	r4, r0
 80027a6:	4823      	ldr	r0, [pc, #140]	@ (8002834 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027a8:	f7ff ff7e 	bl	80026a8 <LL_ADC_IsEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4323      	orrs	r3, r4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d133      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027bc:	f023 030f 	bic.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6892      	ldr	r2, [r2, #8]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027d0:	e024      	b.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027de:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027e2:	f7ff ff61 	bl	80026a8 <LL_ADC_IsEnabled>
 80027e6:	4604      	mov	r4, r0
 80027e8:	4812      	ldr	r0, [pc, #72]	@ (8002834 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027ea:	f7ff ff5d 	bl	80026a8 <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4323      	orrs	r3, r4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d112      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027fe:	f023 030f 	bic.w	r3, r3, #15
 8002802:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002804:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002806:	e009      	b.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800281a:	e000      	b.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800281c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002826:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800282a:	4618      	mov	r0, r3
 800282c:	3784      	adds	r7, #132	@ 0x84
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	bf00      	nop
 8002834:	50000100 	.word	0x50000100
 8002838:	50000300 	.word	0x50000300

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4907      	ldr	r1, [pc, #28]	@ (80028d8 <__NVIC_EnableIRQ+0x38>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	@ (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ff4c 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ba:	f7ff ff63 	bl	8002884 <__NVIC_GetPriorityGrouping>
 80029be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	6978      	ldr	r0, [r7, #20]
 80029c6:	f7ff ffb3 	bl	8002930 <NVIC_EncodePriority>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff82 	bl	80028dc <__NVIC_SetPriority>
}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff56 	bl	80028a0 <__NVIC_EnableIRQ>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e08d      	b.n	8002b2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_DMA_Init+0x138>)
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d80f      	bhi.n	8002a3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b45      	ldr	r3, [pc, #276]	@ (8002b38 <HAL_DMA_Init+0x13c>)
 8002a22:	4413      	add	r3, r2
 8002a24:	4a45      	ldr	r2, [pc, #276]	@ (8002b3c <HAL_DMA_Init+0x140>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	009a      	lsls	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a42      	ldr	r2, [pc, #264]	@ (8002b40 <HAL_DMA_Init+0x144>)
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a38:	e00e      	b.n	8002a58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <HAL_DMA_Init+0x148>)
 8002a42:	4413      	add	r3, r2
 8002a44:	4a3d      	ldr	r2, [pc, #244]	@ (8002b3c <HAL_DMA_Init+0x140>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	009a      	lsls	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a3c      	ldr	r2, [pc, #240]	@ (8002b48 <HAL_DMA_Init+0x14c>)
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8fe 	bl	8002cac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ab8:	d102      	bne.n	8002ac0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ad4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_DMA_Init+0x104>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d80c      	bhi.n	8002b00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f91e 	bl	8002d28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e008      	b.n	8002b12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40020407 	.word	0x40020407
 8002b38:	bffdfff8 	.word	0xbffdfff8
 8002b3c:	cccccccd 	.word	0xcccccccd
 8002b40:	40020000 	.word	0x40020000
 8002b44:	bffdfbf8 	.word	0xbffdfbf8
 8002b48:	40020400 	.word	0x40020400

08002b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d026      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x7a>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d021      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	2104      	movs	r1, #4
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d071      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002bc4:	e06c      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2202      	movs	r2, #2
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02e      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d029      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 020a 	bic.w	r2, r2, #10
 8002c00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	2102      	movs	r1, #2
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d038      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c36:	e033      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2208      	movs	r2, #8
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02a      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d025      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 020e 	bic.w	r2, r2, #14
 8002c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
}
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b16      	ldr	r3, [pc, #88]	@ (8002d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d802      	bhi.n	8002cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	e001      	b.n	8002cca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002cc8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3b08      	subs	r3, #8
 8002cd6:	4a12      	ldr	r2, [pc, #72]	@ (8002d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	009a      	lsls	r2, r3, #2
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8002d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2201      	movs	r2, #1
 8002d00:	409a      	lsls	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40020407 	.word	0x40020407
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020820 	.word	0x40020820
 8002d20:	cccccccd 	.word	0xcccccccd
 8002d24:	40020880 	.word	0x40020880

08002d28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a08      	ldr	r2, [pc, #32]	@ (8002d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d4a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2201      	movs	r2, #1
 8002d56:	409a      	lsls	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	1000823f 	.word	0x1000823f
 8002d6c:	40020940 	.word	0x40020940

08002d70 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	605a      	str	r2, [r3, #4]
      break;
 8002d8e:	e005      	b.n	8002d9c <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9a:	bf00      	nop
  }

  return status;
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e003      	b.n	8002dc6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2201      	movs	r2, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <HAL_EXTI_IRQHandler+0x5c>)
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4798      	blx	r3
    }
  }
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40010414 	.word	0x40010414

08002e34 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e147      	b.n	80030d6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fd10 	bl	8000880 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0210 	bic.w	r2, r2, #16
 8002e6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e70:	f7fe fcc4 	bl	80017fc <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e76:	e012      	b.n	8002e9e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e78:	f7fe fcc0 	bl	80017fc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b0a      	cmp	r3, #10
 8002e84:	d90b      	bls.n	8002e9e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e11b      	b.n	80030d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d0e5      	beq.n	8002e78 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ebc:	f7fe fc9e 	bl	80017fc <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ec2:	e012      	b.n	8002eea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ec4:	f7fe fc9a 	bl	80017fc <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b0a      	cmp	r3, #10
 8002ed0:	d90b      	bls.n	8002eea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0f5      	b.n	80030d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0e5      	beq.n	8002ec4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0202 	orr.w	r2, r2, #2
 8002f06:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a74      	ldr	r2, [pc, #464]	@ (80030e0 <HAL_FDCAN_Init+0x2ac>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d103      	bne.n	8002f1a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002f12:	4a74      	ldr	r2, [pc, #464]	@ (80030e4 <HAL_FDCAN_Init+0x2b0>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7c1b      	ldrb	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f30:	619a      	str	r2, [r3, #24]
 8002f32:	e007      	b.n	8002f44 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f42:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7c5b      	ldrb	r3, [r3, #17]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5a:	619a      	str	r2, [r3, #24]
 8002f5c:	e007      	b.n	8002f6e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7c9b      	ldrb	r3, [r3, #18]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d108      	bne.n	8002f88 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f84:	619a      	str	r2, [r3, #24]
 8002f86:	e007      	b.n	8002f98 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f96:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002fbc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0210 	bic.w	r2, r2, #16
 8002fcc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0204 	orr.w	r2, r2, #4
 8002fe4:	619a      	str	r2, [r3, #24]
 8002fe6:	e02c      	b.n	8003042 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d028      	beq.n	8003042 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d01c      	beq.n	8003032 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003006:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0210 	orr.w	r2, r2, #16
 8003016:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d110      	bne.n	8003042 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	619a      	str	r2, [r3, #24]
 8003030:	e007      	b.n	8003042 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0220 	orr.w	r2, r2, #32
 8003040:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	3b01      	subs	r3, #1
 8003048:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	3b01      	subs	r3, #1
 8003050:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003052:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800305a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	3b01      	subs	r3, #1
 8003064:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800306a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800306c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003076:	d115      	bne.n	80030a4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	3b01      	subs	r3, #1
 8003084:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003086:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	3b01      	subs	r3, #1
 800308e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003090:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	3b01      	subs	r3, #1
 800309a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80030a0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80030a2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb14 	bl	80036e8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40006400 	.word	0x40006400
 80030e4:	40006500 	.word	0x40006500

080030e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	@ 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003100:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003102:	7efb      	ldrb	r3, [r7, #27]
 8003104:	2b02      	cmp	r3, #2
 8003106:	f040 80e8 	bne.w	80032da <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d137      	bne.n	8003180 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003124:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0db      	b.n	80032e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003140:	d10a      	bne.n	8003158 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800314e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003152:	d101      	bne.n	8003158 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
 800317e:	e036      	b.n	80031ee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003194:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0a3      	b.n	80032e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b0:	d10a      	bne.n	80031c8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c2:	d101      	bne.n	80031c8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80031c4:	2301      	movs	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e005      	b.n	800321e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	3304      	adds	r3, #4
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0fda      	lsrs	r2, r3, #31
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	3304      	adds	r3, #4
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	e00a      	b.n	80032aa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	441a      	add	r2, r3
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	440b      	add	r3, r1
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	3301      	adds	r3, #1
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	461a      	mov	r2, r3
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d3ec      	bcc.n	8003294 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b40      	cmp	r3, #64	@ 0x40
 80032be:	d105      	bne.n	80032cc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80032ca:	e004      	b.n	80032d6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e006      	b.n	80032e8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	372c      	adds	r7, #44	@ 0x2c
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	08009834 	.word	0x08009834

080032f8 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003308:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d16e      	bne.n	80033ee <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003324:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e065      	b.n	80033fc <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0c9b      	lsrs	r3, r3, #18
 8003366:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e005      	b.n	800337c <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29a      	uxth	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0e1a      	lsrs	r2, r3, #24
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e006      	b.n	80033fc <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f2:	f043 0208 	orr.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	@ 0x30
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003416:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	4013      	ands	r3, r2
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800343c:	4013      	ands	r3, r2
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003454:	4013      	ands	r3, r2
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003462:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	4013      	ands	r3, r2
 800346e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800347a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	4013      	ands	r3, r2
 8003486:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003496:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00c      	beq.n	80034be <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f901 	bl	80036c0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01a      	beq.n	8003500 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034de:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80034f8:	6939      	ldr	r1, [r7, #16]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8c1 	bl	8003682 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800350c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800350e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fd fea1 	bl	8001258 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003522:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd febc 	bl	80012a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003538:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800353a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd ff1d 	bl	800137c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	0a5b      	lsrs	r3, r3, #9
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003562:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f882 	bl	800366e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	09db      	lsrs	r3, r3, #7
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	09db      	lsrs	r3, r3, #7
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d013      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800358a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4013      	ands	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80035a2:	68f9      	ldr	r1, [r7, #12]
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fe72 	bl	800128e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	0b5b      	lsrs	r3, r3, #13
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	0b5b      	lsrs	r3, r3, #13
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f863 	bl	8003698 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0bdb      	lsrs	r3, r3, #15
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	0bdb      	lsrs	r3, r3, #15
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80035f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f859 	bl	80036ac <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	0b9b      	lsrs	r3, r3, #14
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d010      	beq.n	8003628 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	0b9b      	lsrs	r3, r3, #14
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800361a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003636:	69f9      	ldr	r1, [r7, #28]
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd fdf1 	bl	8001220 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f837 	bl	80036d4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003666:	bf00      	nop
 8003668:	3730      	adds	r7, #48	@ 0x30
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80036f0:	4b27      	ldr	r3, [pc, #156]	@ (8003790 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80036f2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003702:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370a:	041a      	lsls	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003728:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	061a      	lsls	r2, r3, #24
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e005      	b.n	8003776 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3304      	adds	r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3f3      	bcc.n	800376a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	4000a400 	.word	0x4000a400

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037a2:	e15a      	b.n	8003a5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 814c 	beq.w	8003a54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d005      	beq.n	80037d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d130      	bne.n	8003836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800380a:	2201      	movs	r2, #1
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0201 	and.w	r2, r3, #1
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b03      	cmp	r3, #3
 8003840:	d017      	beq.n	8003872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d123      	bne.n	80038c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	6939      	ldr	r1, [r7, #16]
 80038c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80a6 	beq.w	8003a54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003908:	4b5b      	ldr	r3, [pc, #364]	@ (8003a78 <HAL_GPIO_Init+0x2e4>)
 800390a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a78 <HAL_GPIO_Init+0x2e4>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6613      	str	r3, [r2, #96]	@ 0x60
 8003914:	4b58      	ldr	r3, [pc, #352]	@ (8003a78 <HAL_GPIO_Init+0x2e4>)
 8003916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003920:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_GPIO_Init+0x2e8>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800394a:	d01f      	beq.n	800398c <HAL_GPIO_Init+0x1f8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a80 <HAL_GPIO_Init+0x2ec>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d019      	beq.n	8003988 <HAL_GPIO_Init+0x1f4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a4b      	ldr	r2, [pc, #300]	@ (8003a84 <HAL_GPIO_Init+0x2f0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_GPIO_Init+0x1f0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a88 <HAL_GPIO_Init+0x2f4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00d      	beq.n	8003980 <HAL_GPIO_Init+0x1ec>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a49      	ldr	r2, [pc, #292]	@ (8003a8c <HAL_GPIO_Init+0x2f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <HAL_GPIO_Init+0x1e8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a48      	ldr	r2, [pc, #288]	@ (8003a90 <HAL_GPIO_Init+0x2fc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_GPIO_Init+0x1e4>
 8003974:	2305      	movs	r3, #5
 8003976:	e00a      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003978:	2306      	movs	r3, #6
 800397a:	e008      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 800397c:	2304      	movs	r3, #4
 800397e:	e006      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003980:	2303      	movs	r3, #3
 8003982:	e004      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003984:	2302      	movs	r3, #2
 8003986:	e002      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 800398c:	2300      	movs	r3, #0
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	f002 0203 	and.w	r2, r2, #3
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	4093      	lsls	r3, r2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399e:	4937      	ldr	r1, [pc, #220]	@ (8003a7c <HAL_GPIO_Init+0x2e8>)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ac:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039d0:	4a30      	ldr	r2, [pc, #192]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039fa:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a00:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a4e:	4a11      	ldr	r2, [pc, #68]	@ (8003a94 <HAL_GPIO_Init+0x300>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3301      	adds	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f ae9d 	bne.w	80037a4 <HAL_GPIO_Init+0x10>
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	48000400 	.word	0x48000400
 8003a84:	48000800 	.word	0x48000800
 8003a88:	48000c00 	.word	0x48000c00
 8003a8c:	48001000 	.word	0x48001000
 8003a90:	48001400 	.word	0x48001400
 8003a94:	40010400 	.word	0x40010400

08003a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e08d      	b.n	8003bf6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fc ffac 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	e006      	b.n	8003b50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d108      	bne.n	8003b6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	e007      	b.n	8003b7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69d9      	ldr	r1, [r3, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d138      	bne.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e032      	b.n	8003c88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2224      	movs	r2, #36	@ 0x24
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d139      	bne.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e033      	b.n	8003d20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	@ 0x24
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ce6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d141      	bne.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d46:	d131      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d48:	4b47      	ldr	r3, [pc, #284]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4e:	4a46      	ldr	r2, [pc, #280]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d58:	4b43      	ldr	r3, [pc, #268]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d60:	4a41      	ldr	r2, [pc, #260]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d68:	4b40      	ldr	r3, [pc, #256]	@ (8003e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2232      	movs	r2, #50	@ 0x32
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	4a3f      	ldr	r2, [pc, #252]	@ (8003e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	0c9b      	lsrs	r3, r3, #18
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7e:	e002      	b.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d86:	4b38      	ldr	r3, [pc, #224]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d92:	d102      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f2      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9a:	4b33      	ldr	r3, [pc, #204]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da6:	d158      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e057      	b.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dac:	4b2e      	ldr	r3, [pc, #184]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003dbc:	e04d      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc4:	d141      	bne.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc6:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd2:	d131      	bne.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd4:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dda:	4a23      	ldr	r2, [pc, #140]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de4:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dec:	4a1e      	ldr	r2, [pc, #120]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2232      	movs	r2, #50	@ 0x32
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	0c9b      	lsrs	r3, r3, #18
 8003e06:	3301      	adds	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0a:	e002      	b.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d102      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f2      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e26:	4b10      	ldr	r3, [pc, #64]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e32:	d112      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e011      	b.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e48:	e007      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e52:	4a05      	ldr	r2, [pc, #20]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	431bde83 	.word	0x431bde83

08003e74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e82:	6093      	str	r3, [r2, #8]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40007000 	.word	0x40007000

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e2fe      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d075      	beq.n	8003f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4b97      	ldr	r3, [pc, #604]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ebc:	4b94      	ldr	r3, [pc, #592]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d102      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3e>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d002      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x44>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	4b8d      	ldr	r3, [pc, #564]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05b      	beq.n	8003f9c <HAL_RCC_OscConfig+0x108>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d157      	bne.n	8003f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e2d9      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_OscConfig+0x74>
 8003efa:	4b85      	ldr	r3, [pc, #532]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a84      	ldr	r2, [pc, #528]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e01d      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x98>
 8003f12:	4b7f      	ldr	r3, [pc, #508]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7e      	ldr	r2, [pc, #504]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7b      	ldr	r2, [pc, #492]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	4b78      	ldr	r3, [pc, #480]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a77      	ldr	r2, [pc, #476]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b75      	ldr	r3, [pc, #468]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a74      	ldr	r2, [pc, #464]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fc56 	bl	80017fc <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fd fc52 	bl	80017fc <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	@ 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e29e      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f66:	4b6a      	ldr	r3, [pc, #424]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0xc0>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fc42 	bl	80017fc <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fc3e 	bl	80017fc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	@ 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e28a      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8e:	4b60      	ldr	r3, [pc, #384]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0xe8>
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d075      	beq.n	8004096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003faa:	4b59      	ldr	r3, [pc, #356]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb4:	4b56      	ldr	r3, [pc, #344]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d102      	bne.n	8003fca <HAL_RCC_OscConfig+0x136>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x13c>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11f      	bne.n	8004010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x154>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e25d      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b49      	ldr	r3, [pc, #292]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	4946      	ldr	r1, [pc, #280]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ffc:	4b45      	ldr	r3, [pc, #276]	@ (8004114 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fe63 	bl	8000ccc <HAL_InitTick>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d043      	beq.n	8004094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e249      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d023      	beq.n	8004060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004018:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3c      	ldr	r2, [pc, #240]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd fbea 	bl	80017fc <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402c:	f7fd fbe6 	bl	80017fc <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e232      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800403e:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404a:	4b31      	ldr	r3, [pc, #196]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	492d      	ldr	r1, [pc, #180]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
 800405e:	e01a      	b.n	8004096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004060:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2a      	ldr	r2, [pc, #168]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8004066:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fbc6 	bl	80017fc <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004074:	f7fd fbc2 	bl	80017fc <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e20e      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004086:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x1e0>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d041      	beq.n	8004126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b0:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fd fb9f 	bl	80017fc <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fd fb9b 	bl	80017fc <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1e7      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ef      	beq.n	80040c2 <HAL_RCC_OscConfig+0x22e>
 80040e2:	e020      	b.n	8004126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd fb82 	bl	80017fc <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040fa:	e00d      	b.n	8004118 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd fb7e 	bl	80017fc <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d906      	bls.n	8004118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1ca      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004118:	4b8c      	ldr	r3, [pc, #560]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1ea      	bne.n	80040fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80a6 	beq.w	8004280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004138:	4b84      	ldr	r3, [pc, #528]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_OscConfig+0x2b4>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x2b6>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4b7f      	ldr	r3, [pc, #508]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	4a7e      	ldr	r2, [pc, #504]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004158:	6593      	str	r3, [r2, #88]	@ 0x58
 800415a:	4b7c      	ldr	r3, [pc, #496]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416a:	4b79      	ldr	r3, [pc, #484]	@ (8004350 <HAL_RCC_OscConfig+0x4bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004176:	4b76      	ldr	r3, [pc, #472]	@ (8004350 <HAL_RCC_OscConfig+0x4bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a75      	ldr	r2, [pc, #468]	@ (8004350 <HAL_RCC_OscConfig+0x4bc>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7fd fb3b 	bl	80017fc <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7fd fb37 	bl	80017fc <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e183      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419c:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <HAL_RCC_OscConfig+0x4bc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d108      	bne.n	80041c2 <HAL_RCC_OscConfig+0x32e>
 80041b0:	4b66      	ldr	r3, [pc, #408]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	4a65      	ldr	r2, [pc, #404]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c0:	e024      	b.n	800420c <HAL_RCC_OscConfig+0x378>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d110      	bne.n	80041ec <HAL_RCC_OscConfig+0x358>
 80041ca:	4b60      	ldr	r3, [pc, #384]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d0:	4a5e      	ldr	r2, [pc, #376]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041d2:	f043 0304 	orr.w	r3, r3, #4
 80041d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041da:	4b5c      	ldr	r3, [pc, #368]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	4a5a      	ldr	r2, [pc, #360]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041ea:	e00f      	b.n	800420c <HAL_RCC_OscConfig+0x378>
 80041ec:	4b57      	ldr	r3, [pc, #348]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f2:	4a56      	ldr	r2, [pc, #344]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041fc:	4b53      	ldr	r3, [pc, #332]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	4a52      	ldr	r2, [pc, #328]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd faf2 	bl	80017fc <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	e00a      	b.n	8004232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fd faee 	bl	80017fc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e138      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004232:	4b46      	ldr	r3, [pc, #280]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ed      	beq.n	800421c <HAL_RCC_OscConfig+0x388>
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd fadb 	bl	80017fc <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fd fad7 	bl	80017fc <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e121      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004260:	4b3a      	ldr	r3, [pc, #232]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ed      	bne.n	800424a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800426e:	7ffb      	ldrb	r3, [r7, #31]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004274:	4b35      	ldr	r3, [pc, #212]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004278:	4a34      	ldr	r2, [pc, #208]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800427e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d03c      	beq.n	8004306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01c      	beq.n	80042ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004294:	4b2d      	ldr	r3, [pc, #180]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800429a:	4a2c      	ldr	r2, [pc, #176]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fd faaa 	bl	80017fc <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ac:	f7fd faa6 	bl	80017fc <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0f2      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042be:	4b23      	ldr	r3, [pc, #140]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80042c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ef      	beq.n	80042ac <HAL_RCC_OscConfig+0x418>
 80042cc:	e01b      	b.n	8004306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ce:	4b1f      	ldr	r3, [pc, #124]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80042d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042d4:	4a1d      	ldr	r2, [pc, #116]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042de:	f7fd fa8d 	bl	80017fc <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e6:	f7fd fa89 	bl	80017fc <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0d5      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f8:	4b14      	ldr	r3, [pc, #80]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ef      	bne.n	80042e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80c9 	beq.w	80044a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004310:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b0c      	cmp	r3, #12
 800431a:	f000 8083 	beq.w	8004424 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d15e      	bne.n	80043e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b09      	ldr	r3, [pc, #36]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a08      	ldr	r2, [pc, #32]	@ (800434c <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fa63 	bl	80017fc <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004338:	e00c      	b.n	8004354 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd fa5f 	bl	80017fc <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d905      	bls.n	8004354 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0ab      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004354:	4b55      	ldr	r3, [pc, #340]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ec      	bne.n	800433a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004360:	4b52      	ldr	r3, [pc, #328]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	4b52      	ldr	r3, [pc, #328]	@ (80044b0 <HAL_RCC_OscConfig+0x61c>)
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6a11      	ldr	r1, [r2, #32]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004370:	3a01      	subs	r2, #1
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800437a:	0212      	lsls	r2, r2, #8
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0552      	lsls	r2, r2, #21
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800438e:	0852      	lsrs	r2, r2, #1
 8004390:	3a01      	subs	r2, #1
 8004392:	0652      	lsls	r2, r2, #25
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800439a:	06d2      	lsls	r2, r2, #27
 800439c:	430a      	orrs	r2, r1
 800439e:	4943      	ldr	r1, [pc, #268]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a40      	ldr	r2, [pc, #256]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a3d      	ldr	r2, [pc, #244]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd fa1e 	bl	80017fc <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fa1a 	bl	80017fc <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e066      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d6:	4b35      	ldr	r3, [pc, #212]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x530>
 80043e2:	e05e      	b.n	80044a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a30      	ldr	r2, [pc, #192]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fa04 	bl	80017fc <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd fa00 	bl	80017fc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04c      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440a:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004416:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	4924      	ldr	r1, [pc, #144]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <HAL_RCC_OscConfig+0x620>)
 800441e:	4013      	ands	r3, r2
 8004420:	60cb      	str	r3, [r1, #12]
 8004422:	e03e      	b.n	80044a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e039      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004430:	4b1e      	ldr	r3, [pc, #120]	@ (80044ac <HAL_RCC_OscConfig+0x618>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0203 	and.w	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	429a      	cmp	r2, r3
 8004442:	d12c      	bne.n	800449e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	3b01      	subs	r3, #1
 8004450:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d123      	bne.n	800449e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d11b      	bne.n	800449e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d113      	bne.n	800449e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	3b01      	subs	r3, #1
 8004484:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d109      	bne.n	800449e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	3b01      	subs	r3, #1
 8004498:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	019f800c 	.word	0x019f800c
 80044b4:	feeefffc 	.word	0xfeeefffc

080044b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e11e      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b91      	ldr	r3, [pc, #580]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d910      	bls.n	8004500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b8e      	ldr	r3, [pc, #568]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 020f 	bic.w	r2, r3, #15
 80044e6:	498c      	ldr	r1, [pc, #560]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e106      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d073      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d129      	bne.n	8004568 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004514:	4b81      	ldr	r3, [pc, #516]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0f4      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004524:	f000 f9d0 	bl	80048c8 <RCC_GetSysClockFreqFromPLLSource>
 8004528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4a7c      	ldr	r2, [pc, #496]	@ (8004720 <HAL_RCC_ClockConfig+0x268>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d93f      	bls.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004532:	4b7a      	ldr	r3, [pc, #488]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004546:	2b00      	cmp	r3, #0
 8004548:	d033      	beq.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800454e:	2b00      	cmp	r3, #0
 8004550:	d12f      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004552:	4b72      	ldr	r3, [pc, #456]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800455a:	4a70      	ldr	r2, [pc, #448]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 800455c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e024      	b.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d107      	bne.n	8004580 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004570:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0c6      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004580:	4b66      	ldr	r3, [pc, #408]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0be      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004590:	f000 f8ce 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8004594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4a61      	ldr	r2, [pc, #388]	@ (8004720 <HAL_RCC_ClockConfig+0x268>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d909      	bls.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800459e:	4b5f      	ldr	r3, [pc, #380]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045a6:	4a5d      	ldr	r2, [pc, #372]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80045a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045ae:	2380      	movs	r3, #128	@ 0x80
 80045b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045b2:	4b5a      	ldr	r3, [pc, #360]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 0203 	bic.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4957      	ldr	r1, [pc, #348]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd f91a 	bl	80017fc <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fd f916 	bl	80017fc <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e095      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b4e      	ldr	r3, [pc, #312]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 020c 	and.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1eb      	bne.n	80045cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d023      	beq.n	8004648 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460c:	4b43      	ldr	r3, [pc, #268]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a42      	ldr	r2, [pc, #264]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004616:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004624:	4b3d      	ldr	r3, [pc, #244]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800462c:	4a3b      	ldr	r2, [pc, #236]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 800462e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b39      	ldr	r3, [pc, #228]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4936      	ldr	r1, [pc, #216]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
 8004646:	e008      	b.n	800465a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2b80      	cmp	r3, #128	@ 0x80
 800464c:	d105      	bne.n	800465a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800464e:	4b33      	ldr	r3, [pc, #204]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4a32      	ldr	r2, [pc, #200]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 8004654:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004658:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800465a:	4b2f      	ldr	r3, [pc, #188]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d21d      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004668:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f023 020f 	bic.w	r2, r3, #15
 8004670:	4929      	ldr	r1, [pc, #164]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004678:	f7fd f8c0 	bl	80017fc <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fd f8bc 	bl	80017fc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e03b      	b.n	800470e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b20      	ldr	r3, [pc, #128]	@ (8004718 <HAL_RCC_ClockConfig+0x260>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1ed      	bne.n	8004680 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4917      	ldr	r1, [pc, #92]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b13      	ldr	r3, [pc, #76]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490f      	ldr	r1, [pc, #60]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e2:	f000 f825 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_RCC_ClockConfig+0x264>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490c      	ldr	r1, [pc, #48]	@ (8004724 <HAL_RCC_ClockConfig+0x26c>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004728 <HAL_RCC_ClockConfig+0x270>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <HAL_RCC_ClockConfig+0x274>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fae0 	bl	8000ccc <HAL_InitTick>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40022000 	.word	0x40022000
 800471c:	40021000 	.word	0x40021000
 8004720:	04c4b400 	.word	0x04c4b400
 8004724:	08009818 	.word	0x08009818
 8004728:	20000000 	.word	0x20000000
 800472c:	20000028 	.word	0x20000028

08004730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004736:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d102      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004742:	4b2a      	ldr	r3, [pc, #168]	@ (80047ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e047      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004748:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b08      	cmp	r3, #8
 8004752:	d102      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004754:	4b26      	ldr	r3, [pc, #152]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e03e      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800475a:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b0c      	cmp	r3, #12
 8004764:	d136      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	3301      	adds	r3, #1
 800477c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d10c      	bne.n	800479e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004784:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800478e:	68d2      	ldr	r2, [r2, #12]
 8004790:	0a12      	lsrs	r2, r2, #8
 8004792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	617b      	str	r3, [r7, #20]
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800479e:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4a10      	ldr	r2, [pc, #64]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a8:	68d2      	ldr	r2, [r2, #12]
 80047aa:	0a12      	lsrs	r2, r2, #8
 80047ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
      break;
 80047b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	0e5b      	lsrs	r3, r3, #25
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	3301      	adds	r3, #1
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e001      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047d8:	693b      	ldr	r3, [r7, #16]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	00f42400 	.word	0x00f42400
 80047f0:	016e3600 	.word	0x016e3600

080047f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f8:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x14>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000000 	.word	0x20000000

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004810:	f7ff fff0 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	08009828 	.word	0x08009828

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800483c:	f7ff ffda 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0adb      	lsrs	r3, r3, #11
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4904      	ldr	r1, [pc, #16]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	08009828 	.word	0x08009828

08004864 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	220f      	movs	r2, #15
 8004872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004874:	4b12      	ldr	r3, [pc, #72]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0203 	and.w	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800488c:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048a6:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <HAL_RCC_GetClockConfig+0x60>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 020f 	and.w	r2, r3, #15
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40022000 	.word	0x40022000

080048c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d10c      	bne.n	8004906 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ec:	4a17      	ldr	r2, [pc, #92]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	4a14      	ldr	r2, [pc, #80]	@ (8004948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048f6:	68d2      	ldr	r2, [r2, #12]
 80048f8:	0a12      	lsrs	r2, r2, #8
 80048fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
    break;
 8004904:	e00c      	b.n	8004920 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004906:	4a12      	ldr	r2, [pc, #72]	@ (8004950 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	4a0e      	ldr	r2, [pc, #56]	@ (8004948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	0a12      	lsrs	r2, r2, #8
 8004914:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
    break;
 800491e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004920:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0e5b      	lsrs	r3, r3, #25
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	3301      	adds	r3, #1
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800493a:	687b      	ldr	r3, [r7, #4]
}
 800493c:	4618      	mov	r0, r3
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40021000 	.word	0x40021000
 800494c:	016e3600 	.word	0x016e3600
 8004950:	00f42400 	.word	0x00f42400

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800495c:	2300      	movs	r3, #0
 800495e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004960:	2300      	movs	r3, #0
 8004962:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8098 	beq.w	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2300      	movs	r3, #0
 8004974:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004976:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10d      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	4b40      	ldr	r3, [pc, #256]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	4a3f      	ldr	r2, [pc, #252]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6593      	str	r3, [r2, #88]	@ 0x58
 800498e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499a:	2301      	movs	r3, #1
 800499c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a39      	ldr	r2, [pc, #228]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049aa:	f7fc ff27 	bl	80017fc <HAL_GetTick>
 80049ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049b0:	e009      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fc ff23 	bl	80017fc <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d902      	bls.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	74fb      	strb	r3, [r7, #19]
        break;
 80049c4:	e005      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c6:	4b30      	ldr	r3, [pc, #192]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d159      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01e      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d019      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f4:	4b23      	ldr	r3, [pc, #140]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a00:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	4a1f      	ldr	r2, [pc, #124]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a10:	4b1c      	ldr	r3, [pc, #112]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	4a1b      	ldr	r2, [pc, #108]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a20:	4a18      	ldr	r2, [pc, #96]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fc fee3 	bl	80017fc <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a38:	e00b      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fc fedf 	bl	80017fc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d902      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ec      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a66:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	4903      	ldr	r1, [pc, #12]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a7c:	e008      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	74bb      	strb	r3, [r7, #18]
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a90:	7c7b      	ldrb	r3, [r7, #17]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a96:	4ba6      	ldr	r3, [pc, #664]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	4aa5      	ldr	r2, [pc, #660]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aae:	4ba0      	ldr	r3, [pc, #640]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f023 0203 	bic.w	r2, r3, #3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	499c      	ldr	r1, [pc, #624]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ad0:	4b97      	ldr	r3, [pc, #604]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f023 020c 	bic.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	4994      	ldr	r1, [pc, #592]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004af2:	4b8f      	ldr	r3, [pc, #572]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	498b      	ldr	r1, [pc, #556]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b14:	4b86      	ldr	r3, [pc, #536]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	4983      	ldr	r1, [pc, #524]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b36:	4b7e      	ldr	r3, [pc, #504]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	497a      	ldr	r1, [pc, #488]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b58:	4b75      	ldr	r3, [pc, #468]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4972      	ldr	r1, [pc, #456]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	4969      	ldr	r1, [pc, #420]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b9c:	4b64      	ldr	r3, [pc, #400]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4961      	ldr	r1, [pc, #388]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	4958      	ldr	r1, [pc, #352]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be0:	4b53      	ldr	r3, [pc, #332]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	4950      	ldr	r1, [pc, #320]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b4b      	ldr	r3, [pc, #300]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a4a      	ldr	r2, [pc, #296]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c18:	4b45      	ldr	r3, [pc, #276]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4942      	ldr	r1, [pc, #264]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c36:	d105      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b3d      	ldr	r3, [pc, #244]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c50:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	4934      	ldr	r1, [pc, #208]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c70:	4b2f      	ldr	r3, [pc, #188]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a2e      	ldr	r2, [pc, #184]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c88:	4b29      	ldr	r3, [pc, #164]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c96:	4926      	ldr	r1, [pc, #152]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b21      	ldr	r3, [pc, #132]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a20      	ldr	r2, [pc, #128]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	4918      	ldr	r1, [pc, #96]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cde:	d105      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a12      	ldr	r2, [pc, #72]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d015      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d06:	490a      	ldr	r1, [pc, #40]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e049      	b.n	8004dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f841 	bl	8004de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 fb8c 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e04a      	b.n	8004ea6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	@ (8004eb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d013      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d115      	bne.n	8004e90 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d015      	beq.n	8004ea2 <HAL_TIM_Base_Start_IT+0xaa>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7c:	d011      	beq.n	8004ea2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e000      	b.n	8004ea4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	00010007 	.word	0x00010007

08004ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e049      	b.n	8004f72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc f87a 	bl	8000fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f000 fac0 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f06f 0202 	mvn.w	r2, #2
 8004fae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa45 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8004fca:	e005      	b.n	8004fd8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa37 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa48 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01b      	beq.n	800502a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f06f 0204 	mvn.w	r2, #4
 8004ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fa1f 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005016:	e005      	b.n	8005024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa11 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa22 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01b      	beq.n	8005076 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0208 	mvn.w	r2, #8
 8005046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2204      	movs	r2, #4
 800504c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9f9 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005062:	e005      	b.n	8005070 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9eb 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9fc 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01b      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f06f 0210 	mvn.w	r2, #16
 8005092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2208      	movs	r2, #8
 8005098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9d3 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050ae:	e005      	b.n	80050bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9c5 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9d6 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0201 	mvn.w	r2, #1
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fb fdb1 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fe68 	bl	8005de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fe60 	bl	8005df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f990 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fe28 	bl	8005dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fe34 	bl	8005e0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fe2c 	bl	8005e20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80051e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fe24 	bl	8005e34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fe1c 	bl	8005e48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005232:	2302      	movs	r3, #2
 8005234:	e0ff      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b14      	cmp	r3, #20
 8005242:	f200 80f0 	bhi.w	8005426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005427 	.word	0x08005427
 8005254:	08005427 	.word	0x08005427
 8005258:	08005427 	.word	0x08005427
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005427 	.word	0x08005427
 8005264:	08005427 	.word	0x08005427
 8005268:	08005427 	.word	0x08005427
 800526c:	08005323 	.word	0x08005323
 8005270:	08005427 	.word	0x08005427
 8005274:	08005427 	.word	0x08005427
 8005278:	08005427 	.word	0x08005427
 800527c:	08005363 	.word	0x08005363
 8005280:	08005427 	.word	0x08005427
 8005284:	08005427 	.word	0x08005427
 8005288:	08005427 	.word	0x08005427
 800528c:	080053a5 	.word	0x080053a5
 8005290:	08005427 	.word	0x08005427
 8005294:	08005427 	.word	0x08005427
 8005298:	08005427 	.word	0x08005427
 800529c:	080053e5 	.word	0x080053e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f98e 	bl	80055c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e0a5      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f9fe 	bl	80056e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e084      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa67 	bl	80057fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e064      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 facf 	bl	800590c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e043      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fb38 	bl	8005a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80053e2:	e023      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fb7c 	bl	8005ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005424:	e002      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
      break;
 800542a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a42      	ldr	r2, [pc, #264]	@ (80055ac <TIM_Base_SetConfig+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d00b      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3f      	ldr	r2, [pc, #252]	@ (80055b0 <TIM_Base_SetConfig+0x120>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <TIM_Base_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3d      	ldr	r2, [pc, #244]	@ (80055b8 <TIM_Base_SetConfig+0x128>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a33      	ldr	r2, [pc, #204]	@ (80055ac <TIM_Base_SetConfig+0x11c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a30      	ldr	r2, [pc, #192]	@ (80055b0 <TIM_Base_SetConfig+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2f      	ldr	r2, [pc, #188]	@ (80055b4 <TIM_Base_SetConfig+0x124>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2e      	ldr	r2, [pc, #184]	@ (80055b8 <TIM_Base_SetConfig+0x128>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2d      	ldr	r2, [pc, #180]	@ (80055bc <TIM_Base_SetConfig+0x12c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2c      	ldr	r2, [pc, #176]	@ (80055c0 <TIM_Base_SetConfig+0x130>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2b      	ldr	r2, [pc, #172]	@ (80055c4 <TIM_Base_SetConfig+0x134>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a16      	ldr	r2, [pc, #88]	@ (80055ac <TIM_Base_SetConfig+0x11c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00f      	beq.n	8005578 <TIM_Base_SetConfig+0xe8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a17      	ldr	r2, [pc, #92]	@ (80055b8 <TIM_Base_SetConfig+0x128>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_Base_SetConfig+0xe8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <TIM_Base_SetConfig+0x12c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_Base_SetConfig+0xe8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <TIM_Base_SetConfig+0x130>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0xe8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a14      	ldr	r2, [pc, #80]	@ (80055c4 <TIM_Base_SetConfig+0x134>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d103      	bne.n	8005580 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]
  }
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0201 	bic.w	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 0302 	bic.w	r3, r3, #2
 8005614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <TIM_OC1_SetConfig+0x10c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00f      	beq.n	8005648 <TIM_OC1_SetConfig+0x80>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a2b      	ldr	r2, [pc, #172]	@ (80056d8 <TIM_OC1_SetConfig+0x110>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_OC1_SetConfig+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a2a      	ldr	r2, [pc, #168]	@ (80056dc <TIM_OC1_SetConfig+0x114>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_OC1_SetConfig+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a29      	ldr	r2, [pc, #164]	@ (80056e0 <TIM_OC1_SetConfig+0x118>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC1_SetConfig+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a28      	ldr	r2, [pc, #160]	@ (80056e4 <TIM_OC1_SetConfig+0x11c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10c      	bne.n	8005662 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0308 	bic.w	r3, r3, #8
 800564e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1b      	ldr	r2, [pc, #108]	@ (80056d4 <TIM_OC1_SetConfig+0x10c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00f      	beq.n	800568a <TIM_OC1_SetConfig+0xc2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <TIM_OC1_SetConfig+0x110>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_OC1_SetConfig+0xc2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <TIM_OC1_SetConfig+0x114>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_OC1_SetConfig+0xc2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a18      	ldr	r2, [pc, #96]	@ (80056e0 <TIM_OC1_SetConfig+0x118>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_OC1_SetConfig+0xc2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <TIM_OC1_SetConfig+0x11c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d111      	bne.n	80056ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f023 0210 	bic.w	r2, r3, #16
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0320 	bic.w	r3, r3, #32
 8005736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a28      	ldr	r2, [pc, #160]	@ (80057e8 <TIM_OC2_SetConfig+0x100>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC2_SetConfig+0x6c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a27      	ldr	r2, [pc, #156]	@ (80057ec <TIM_OC2_SetConfig+0x104>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d10d      	bne.n	8005770 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800575a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <TIM_OC2_SetConfig+0x100>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00f      	beq.n	8005798 <TIM_OC2_SetConfig+0xb0>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1c      	ldr	r2, [pc, #112]	@ (80057ec <TIM_OC2_SetConfig+0x104>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_OC2_SetConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1b      	ldr	r2, [pc, #108]	@ (80057f0 <TIM_OC2_SetConfig+0x108>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC2_SetConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1a      	ldr	r2, [pc, #104]	@ (80057f4 <TIM_OC2_SetConfig+0x10c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC2_SetConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <TIM_OC2_SetConfig+0x110>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800579e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a27      	ldr	r2, [pc, #156]	@ (80058f8 <TIM_OC3_SetConfig+0xfc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_OC3_SetConfig+0x6a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a26      	ldr	r2, [pc, #152]	@ (80058fc <TIM_OC3_SetConfig+0x100>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10d      	bne.n	8005882 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800586c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1c      	ldr	r2, [pc, #112]	@ (80058f8 <TIM_OC3_SetConfig+0xfc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00f      	beq.n	80058aa <TIM_OC3_SetConfig+0xae>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1b      	ldr	r2, [pc, #108]	@ (80058fc <TIM_OC3_SetConfig+0x100>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00b      	beq.n	80058aa <TIM_OC3_SetConfig+0xae>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <TIM_OC3_SetConfig+0x104>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_OC3_SetConfig+0xae>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <TIM_OC3_SetConfig+0x108>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC3_SetConfig+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <TIM_OC3_SetConfig+0x10c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d113      	bne.n	80058d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800595a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a28      	ldr	r2, [pc, #160]	@ (8005a0c <TIM_OC4_SetConfig+0x100>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC4_SetConfig+0x6c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a27      	ldr	r2, [pc, #156]	@ (8005a10 <TIM_OC4_SetConfig+0x104>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10d      	bne.n	8005994 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	031b      	lsls	r3, r3, #12
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <TIM_OC4_SetConfig+0x100>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00f      	beq.n	80059bc <TIM_OC4_SetConfig+0xb0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a10 <TIM_OC4_SetConfig+0x104>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_OC4_SetConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <TIM_OC4_SetConfig+0x108>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC4_SetConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005a18 <TIM_OC4_SetConfig+0x10c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC4_SetConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a19      	ldr	r2, [pc, #100]	@ (8005a1c <TIM_OC4_SetConfig+0x110>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d113      	bne.n	80059e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a17      	ldr	r2, [pc, #92]	@ (8005ad4 <TIM_OC5_SetConfig+0xb4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00f      	beq.n	8005a9a <TIM_OC5_SetConfig+0x7a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ad8 <TIM_OC5_SetConfig+0xb8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <TIM_OC5_SetConfig+0x7a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <TIM_OC5_SetConfig+0xbc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <TIM_OC5_SetConfig+0x7a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ae0 <TIM_OC5_SetConfig+0xc0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_OC5_SetConfig+0x7a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a13      	ldr	r2, [pc, #76]	@ (8005ae4 <TIM_OC5_SetConfig+0xc4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d109      	bne.n	8005aae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40013400 	.word	0x40013400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800

08005ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <TIM_OC6_SetConfig+0xb8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00f      	beq.n	8005b64 <TIM_OC6_SetConfig+0x7c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	@ (8005ba4 <TIM_OC6_SetConfig+0xbc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_OC6_SetConfig+0x7c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	@ (8005ba8 <TIM_OC6_SetConfig+0xc0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_OC6_SetConfig+0x7c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a15      	ldr	r2, [pc, #84]	@ (8005bac <TIM_OC6_SetConfig+0xc4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_OC6_SetConfig+0x7c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	@ (8005bb0 <TIM_OC6_SetConfig+0xc8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d109      	bne.n	8005b78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40013400 	.word	0x40013400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e065      	b.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c42:	d013      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a17      	ldr	r2, [pc, #92]	@ (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a13      	ldr	r2, [pc, #76]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40014000 	.word	0x40014000

08005cb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e073      	b.n	8005dbc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a19      	ldr	r2, [pc, #100]	@ (8005dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a18      	ldr	r2, [pc, #96]	@ (8005dcc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d11c      	bne.n	8005daa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	051b      	lsls	r3, r3, #20
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40013400 	.word	0x40013400

08005dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e042      	b.n	8005ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f83b 	bl	8005efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	@ 0x24
 8005e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fafe 	bl	80064a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f82f 	bl	8005f10 <UART_SetConfig>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e01b      	b.n	8005ef4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fb7d 	bl	80065ec <UART_CheckIdleState>
 8005ef2:	4603      	mov	r3, r0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f14:	b08c      	sub	sp, #48	@ 0x30
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4bab      	ldr	r3, [pc, #684]	@ (80061ec <UART_SetConfig+0x2dc>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4aa0      	ldr	r2, [pc, #640]	@ (80061f0 <UART_SetConfig+0x2e0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005f86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	f023 010f 	bic.w	r1, r3, #15
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a91      	ldr	r2, [pc, #580]	@ (80061f4 <UART_SetConfig+0x2e4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d125      	bne.n	8006000 <UART_SetConfig+0xf0>
 8005fb4:	4b90      	ldr	r3, [pc, #576]	@ (80061f8 <UART_SetConfig+0x2e8>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d81a      	bhi.n	8005ff8 <UART_SetConfig+0xe8>
 8005fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc8 <UART_SetConfig+0xb8>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005fe9 	.word	0x08005fe9
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fde:	e0d6      	b.n	800618e <UART_SetConfig+0x27e>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe6:	e0d2      	b.n	800618e <UART_SetConfig+0x27e>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fee:	e0ce      	b.n	800618e <UART_SetConfig+0x27e>
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff6:	e0ca      	b.n	800618e <UART_SetConfig+0x27e>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffe:	e0c6      	b.n	800618e <UART_SetConfig+0x27e>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a7d      	ldr	r2, [pc, #500]	@ (80061fc <UART_SetConfig+0x2ec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d138      	bne.n	800607c <UART_SetConfig+0x16c>
 800600a:	4b7b      	ldr	r3, [pc, #492]	@ (80061f8 <UART_SetConfig+0x2e8>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b0c      	cmp	r3, #12
 8006016:	d82d      	bhi.n	8006074 <UART_SetConfig+0x164>
 8006018:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0x110>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006055 	.word	0x08006055
 8006024:	08006075 	.word	0x08006075
 8006028:	08006075 	.word	0x08006075
 800602c:	08006075 	.word	0x08006075
 8006030:	08006065 	.word	0x08006065
 8006034:	08006075 	.word	0x08006075
 8006038:	08006075 	.word	0x08006075
 800603c:	08006075 	.word	0x08006075
 8006040:	0800605d 	.word	0x0800605d
 8006044:	08006075 	.word	0x08006075
 8006048:	08006075 	.word	0x08006075
 800604c:	08006075 	.word	0x08006075
 8006050:	0800606d 	.word	0x0800606d
 8006054:	2300      	movs	r3, #0
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605a:	e098      	b.n	800618e <UART_SetConfig+0x27e>
 800605c:	2302      	movs	r3, #2
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006062:	e094      	b.n	800618e <UART_SetConfig+0x27e>
 8006064:	2304      	movs	r3, #4
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800606a:	e090      	b.n	800618e <UART_SetConfig+0x27e>
 800606c:	2308      	movs	r3, #8
 800606e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006072:	e08c      	b.n	800618e <UART_SetConfig+0x27e>
 8006074:	2310      	movs	r3, #16
 8006076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607a:	e088      	b.n	800618e <UART_SetConfig+0x27e>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5f      	ldr	r2, [pc, #380]	@ (8006200 <UART_SetConfig+0x2f0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d125      	bne.n	80060d2 <UART_SetConfig+0x1c2>
 8006086:	4b5c      	ldr	r3, [pc, #368]	@ (80061f8 <UART_SetConfig+0x2e8>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006090:	2b30      	cmp	r3, #48	@ 0x30
 8006092:	d016      	beq.n	80060c2 <UART_SetConfig+0x1b2>
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d818      	bhi.n	80060ca <UART_SetConfig+0x1ba>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d00a      	beq.n	80060b2 <UART_SetConfig+0x1a2>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d814      	bhi.n	80060ca <UART_SetConfig+0x1ba>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <UART_SetConfig+0x19a>
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d008      	beq.n	80060ba <UART_SetConfig+0x1aa>
 80060a8:	e00f      	b.n	80060ca <UART_SetConfig+0x1ba>
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b0:	e06d      	b.n	800618e <UART_SetConfig+0x27e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b8:	e069      	b.n	800618e <UART_SetConfig+0x27e>
 80060ba:	2304      	movs	r3, #4
 80060bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c0:	e065      	b.n	800618e <UART_SetConfig+0x27e>
 80060c2:	2308      	movs	r3, #8
 80060c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c8:	e061      	b.n	800618e <UART_SetConfig+0x27e>
 80060ca:	2310      	movs	r3, #16
 80060cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d0:	e05d      	b.n	800618e <UART_SetConfig+0x27e>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a4b      	ldr	r2, [pc, #300]	@ (8006204 <UART_SetConfig+0x2f4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d125      	bne.n	8006128 <UART_SetConfig+0x218>
 80060dc:	4b46      	ldr	r3, [pc, #280]	@ (80061f8 <UART_SetConfig+0x2e8>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060e8:	d016      	beq.n	8006118 <UART_SetConfig+0x208>
 80060ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80060ec:	d818      	bhi.n	8006120 <UART_SetConfig+0x210>
 80060ee:	2b80      	cmp	r3, #128	@ 0x80
 80060f0:	d00a      	beq.n	8006108 <UART_SetConfig+0x1f8>
 80060f2:	2b80      	cmp	r3, #128	@ 0x80
 80060f4:	d814      	bhi.n	8006120 <UART_SetConfig+0x210>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <UART_SetConfig+0x1f0>
 80060fa:	2b40      	cmp	r3, #64	@ 0x40
 80060fc:	d008      	beq.n	8006110 <UART_SetConfig+0x200>
 80060fe:	e00f      	b.n	8006120 <UART_SetConfig+0x210>
 8006100:	2300      	movs	r3, #0
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006106:	e042      	b.n	800618e <UART_SetConfig+0x27e>
 8006108:	2302      	movs	r3, #2
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610e:	e03e      	b.n	800618e <UART_SetConfig+0x27e>
 8006110:	2304      	movs	r3, #4
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006116:	e03a      	b.n	800618e <UART_SetConfig+0x27e>
 8006118:	2308      	movs	r3, #8
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611e:	e036      	b.n	800618e <UART_SetConfig+0x27e>
 8006120:	2310      	movs	r3, #16
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006126:	e032      	b.n	800618e <UART_SetConfig+0x27e>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <UART_SetConfig+0x2e0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d12a      	bne.n	8006188 <UART_SetConfig+0x278>
 8006132:	4b31      	ldr	r3, [pc, #196]	@ (80061f8 <UART_SetConfig+0x2e8>)
 8006134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800613c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006140:	d01a      	beq.n	8006178 <UART_SetConfig+0x268>
 8006142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006146:	d81b      	bhi.n	8006180 <UART_SetConfig+0x270>
 8006148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800614c:	d00c      	beq.n	8006168 <UART_SetConfig+0x258>
 800614e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006152:	d815      	bhi.n	8006180 <UART_SetConfig+0x270>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <UART_SetConfig+0x250>
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800615c:	d008      	beq.n	8006170 <UART_SetConfig+0x260>
 800615e:	e00f      	b.n	8006180 <UART_SetConfig+0x270>
 8006160:	2300      	movs	r3, #0
 8006162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006166:	e012      	b.n	800618e <UART_SetConfig+0x27e>
 8006168:	2302      	movs	r3, #2
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616e:	e00e      	b.n	800618e <UART_SetConfig+0x27e>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006176:	e00a      	b.n	800618e <UART_SetConfig+0x27e>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617e:	e006      	b.n	800618e <UART_SetConfig+0x27e>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006186:	e002      	b.n	800618e <UART_SetConfig+0x27e>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a17      	ldr	r2, [pc, #92]	@ (80061f0 <UART_SetConfig+0x2e0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	f040 80a8 	bne.w	80062ea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800619a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d834      	bhi.n	800620c <UART_SetConfig+0x2fc>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x298>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	0800620d 	.word	0x0800620d
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	080061db 	.word	0x080061db
 80061bc:	0800620d 	.word	0x0800620d
 80061c0:	0800620d 	.word	0x0800620d
 80061c4:	0800620d 	.word	0x0800620d
 80061c8:	080061e3 	.word	0x080061e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fe fb1e 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061d2:	e021      	b.n	8006218 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006208 <UART_SetConfig+0x2f8>)
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061d8:	e01e      	b.n	8006218 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061da:	f7fe faa9 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80061de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061e0:	e01a      	b.n	8006218 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061e8:	e016      	b.n	8006218 <UART_SetConfig+0x308>
 80061ea:	bf00      	nop
 80061ec:	cfff69f3 	.word	0xcfff69f3
 80061f0:	40008000 	.word	0x40008000
 80061f4:	40013800 	.word	0x40013800
 80061f8:	40021000 	.word	0x40021000
 80061fc:	40004400 	.word	0x40004400
 8006200:	40004800 	.word	0x40004800
 8006204:	40004c00 	.word	0x40004c00
 8006208:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006216:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 812a 	beq.w	8006474 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	4a9e      	ldr	r2, [pc, #632]	@ (80064a0 <UART_SetConfig+0x590>)
 8006226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622a:	461a      	mov	r2, r3
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006232:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	4413      	add	r3, r2
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	429a      	cmp	r2, r3
 8006242:	d305      	bcc.n	8006250 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	429a      	cmp	r2, r3
 800624e:	d903      	bls.n	8006258 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006256:	e10d      	b.n	8006474 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	2200      	movs	r2, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	60fa      	str	r2, [r7, #12]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	4a8e      	ldr	r2, [pc, #568]	@ (80064a0 <UART_SetConfig+0x590>)
 8006266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800626a:	b29b      	uxth	r3, r3
 800626c:	2200      	movs	r2, #0
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800627a:	f7f9 ffd1 	bl	8000220 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	020b      	lsls	r3, r1, #8
 8006290:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006294:	0202      	lsls	r2, r0, #8
 8006296:	6979      	ldr	r1, [r7, #20]
 8006298:	6849      	ldr	r1, [r1, #4]
 800629a:	0849      	lsrs	r1, r1, #1
 800629c:	2000      	movs	r0, #0
 800629e:	460c      	mov	r4, r1
 80062a0:	4605      	mov	r5, r0
 80062a2:	eb12 0804 	adds.w	r8, r2, r4
 80062a6:	eb43 0905 	adc.w	r9, r3, r5
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	469a      	mov	sl, r3
 80062b2:	4693      	mov	fp, r2
 80062b4:	4652      	mov	r2, sl
 80062b6:	465b      	mov	r3, fp
 80062b8:	4640      	mov	r0, r8
 80062ba:	4649      	mov	r1, r9
 80062bc:	f7f9 ffb0 	bl	8000220 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4613      	mov	r3, r2
 80062c6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ce:	d308      	bcc.n	80062e2 <UART_SetConfig+0x3d2>
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d6:	d204      	bcs.n	80062e2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	e0c8      	b.n	8006474 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062e8:	e0c4      	b.n	8006474 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f2:	d167      	bne.n	80063c4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80062f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d828      	bhi.n	800634e <UART_SetConfig+0x43e>
 80062fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <UART_SetConfig+0x3f4>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006329 	.word	0x08006329
 8006308:	08006331 	.word	0x08006331
 800630c:	08006339 	.word	0x08006339
 8006310:	0800634f 	.word	0x0800634f
 8006314:	0800633f 	.word	0x0800633f
 8006318:	0800634f 	.word	0x0800634f
 800631c:	0800634f 	.word	0x0800634f
 8006320:	0800634f 	.word	0x0800634f
 8006324:	08006347 	.word	0x08006347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006328:	f7fe fa70 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800632e:	e014      	b.n	800635a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006330:	f7fe fa82 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8006334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006336:	e010      	b.n	800635a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006338:	4b5a      	ldr	r3, [pc, #360]	@ (80064a4 <UART_SetConfig+0x594>)
 800633a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800633c:	e00d      	b.n	800635a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633e:	f7fe f9f7 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8006342:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006344:	e009      	b.n	800635a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800634a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800634c:	e005      	b.n	800635a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8089 	beq.w	8006474 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	4a4e      	ldr	r2, [pc, #312]	@ (80064a0 <UART_SetConfig+0x590>)
 8006368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636c:	461a      	mov	r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	fbb3 f3f2 	udiv	r3, r3, r2
 8006374:	005a      	lsls	r2, r3, #1
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	441a      	add	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	fbb2 f3f3 	udiv	r3, r2, r3
 8006386:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d916      	bls.n	80063bc <UART_SetConfig+0x4ac>
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006394:	d212      	bcs.n	80063bc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f023 030f 	bic.w	r3, r3, #15
 800639e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	8bfb      	ldrh	r3, [r7, #30]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	8bfa      	ldrh	r2, [r7, #30]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e05b      	b.n	8006474 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063c2:	e057      	b.n	8006474 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d828      	bhi.n	800641e <UART_SetConfig+0x50e>
 80063cc:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <UART_SetConfig+0x4c4>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006401 	.word	0x08006401
 80063dc:	08006409 	.word	0x08006409
 80063e0:	0800641f 	.word	0x0800641f
 80063e4:	0800640f 	.word	0x0800640f
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
 80063f4:	08006417 	.word	0x08006417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f8:	f7fe fa08 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 80063fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063fe:	e014      	b.n	800642a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006400:	f7fe fa1a 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8006404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006406:	e010      	b.n	800642a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006408:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <UART_SetConfig+0x594>)
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800640c:	e00d      	b.n	800642a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640e:	f7fe f98f 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8006412:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006414:	e009      	b.n	800642a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800641c:	e005      	b.n	800642a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006428:	bf00      	nop
    }

    if (pclk != 0U)
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d021      	beq.n	8006474 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006434:	4a1a      	ldr	r2, [pc, #104]	@ (80064a0 <UART_SetConfig+0x590>)
 8006436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643a:	461a      	mov	r2, r3
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	441a      	add	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	2b0f      	cmp	r3, #15
 8006458:	d909      	bls.n	800646e <UART_SetConfig+0x55e>
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006460:	d205      	bcs.n	800646e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	b29a      	uxth	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e002      	b.n	8006474 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2201      	movs	r2, #1
 8006480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2200      	movs	r2, #0
 800648e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006490:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006494:	4618      	mov	r0, r3
 8006496:	3730      	adds	r7, #48	@ 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800649e:	bf00      	nop
 80064a0:	08009844 	.word	0x08009844
 80064a4:	00f42400 	.word	0x00f42400

080064a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01a      	beq.n	80065be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065a6:	d10a      	bne.n	80065be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b098      	sub	sp, #96	@ 0x60
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065fc:	f7fb f8fe 	bl	80017fc <HAL_GetTick>
 8006600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b08      	cmp	r3, #8
 800660e:	d12f      	bne.n	8006670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006618:	2200      	movs	r2, #0
 800661a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f88e 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d022      	beq.n	8006670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006648:	647b      	str	r3, [r7, #68]	@ 0x44
 800664a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800664e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e6      	bne.n	800662a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e063      	b.n	8006738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b04      	cmp	r3, #4
 800667c:	d149      	bne.n	8006712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800667e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006686:	2200      	movs	r2, #0
 8006688:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f857 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d03c      	beq.n	8006712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	623b      	str	r3, [r7, #32]
   return(result);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e6      	bne.n	8006698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ea:	61fa      	str	r2, [r7, #28]
 80066ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	617b      	str	r3, [r7, #20]
   return(result);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e5      	bne.n	80066ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e012      	b.n	8006738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3758      	adds	r7, #88	@ 0x58
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006750:	e04f      	b.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d04b      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675a:	f7fb f84f 	bl	80017fc <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	d302      	bcc.n	8006770 <UART_WaitOnFlagUntilTimeout+0x30>
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e04e      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d037      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b80      	cmp	r3, #128	@ 0x80
 8006786:	d034      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b40      	cmp	r3, #64	@ 0x40
 800678c:	d031      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b08      	cmp	r3, #8
 800679a:	d110      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2208      	movs	r2, #8
 80067a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f838 	bl	800681a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2208      	movs	r2, #8
 80067ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e029      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067cc:	d111      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f81e 	bl	800681a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e00f      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	429a      	cmp	r2, r3
 800680e:	d0a0      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800681a:	b480      	push	{r7}
 800681c:	b095      	sub	sp, #84	@ 0x54
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006840:	643b      	str	r3, [r7, #64]	@ 0x40
 8006842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3308      	adds	r3, #8
 800685a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	61fb      	str	r3, [r7, #28]
   return(result);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800687e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e3      	bne.n	8006854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d118      	bne.n	80068c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0310 	bic.w	r3, r3, #16
 80068a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	613b      	str	r3, [r7, #16]
   return(result);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e6      	bne.n	8006894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068da:	bf00      	nop
 80068dc:	3754      	adds	r7, #84	@ 0x54
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <__NVIC_SetPriority>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db0a      	blt.n	8006912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	490c      	ldr	r1, [pc, #48]	@ (8006934 <__NVIC_SetPriority+0x4c>)
 8006902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006906:	0112      	lsls	r2, r2, #4
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	440b      	add	r3, r1
 800690c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006910:	e00a      	b.n	8006928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	b2da      	uxtb	r2, r3
 8006916:	4908      	ldr	r1, [pc, #32]	@ (8006938 <__NVIC_SetPriority+0x50>)
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	3b04      	subs	r3, #4
 8006920:	0112      	lsls	r2, r2, #4
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	440b      	add	r3, r1
 8006926:	761a      	strb	r2, [r3, #24]
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	e000e100 	.word	0xe000e100
 8006938:	e000ed00 	.word	0xe000ed00

0800693c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <SysTick_Handler+0x1c>)
 8006942:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006944:	f001 fdc8 	bl	80084d8 <xTaskGetSchedulerState>
 8006948:	4603      	mov	r3, r0
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800694e:	f002 fbc3 	bl	80090d8 <xPortSysTickHandler>
  }
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	e000e010 	.word	0xe000e010

0800695c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006960:	2100      	movs	r1, #0
 8006962:	f06f 0004 	mvn.w	r0, #4
 8006966:	f7ff ffbf 	bl	80068e8 <__NVIC_SetPriority>
#endif
}
 800696a:	bf00      	nop
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006976:	f3ef 8305 	mrs	r3, IPSR
 800697a:	603b      	str	r3, [r7, #0]
  return(result);
 800697c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006982:	f06f 0305 	mvn.w	r3, #5
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	e00c      	b.n	80069a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800698a:	4b0a      	ldr	r3, [pc, #40]	@ (80069b4 <osKernelInitialize+0x44>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006992:	4b08      	ldr	r3, [pc, #32]	@ (80069b4 <osKernelInitialize+0x44>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006998:	2300      	movs	r3, #0
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	e002      	b.n	80069a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069a4:	687b      	ldr	r3, [r7, #4]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000654 	.word	0x20000654

080069b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	603b      	str	r3, [r7, #0]
  return(result);
 80069c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069ca:	f06f 0305 	mvn.w	r3, #5
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	e010      	b.n	80069f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <osKernelStart+0x48>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d109      	bne.n	80069ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069da:	f7ff ffbf 	bl	800695c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069de:	4b08      	ldr	r3, [pc, #32]	@ (8006a00 <osKernelStart+0x48>)
 80069e0:	2202      	movs	r2, #2
 80069e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069e4:	f001 f902 	bl	8007bec <vTaskStartScheduler>
      stat = osOK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	e002      	b.n	80069f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069f4:	687b      	ldr	r3, [r7, #4]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000654 	.word	0x20000654

08006a04 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a0a:	f3ef 8305 	mrs	r3, IPSR
 8006a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a10:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006a16:	f001 fa15 	bl	8007e44 <xTaskGetTickCountFromISR>
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	e002      	b.n	8006a24 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006a1e:	f001 fa01 	bl	8007e24 <xTaskGetTickCount>
 8006a22:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006a24:	687b      	ldr	r3, [r7, #4]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b08e      	sub	sp, #56	@ 0x38
 8006a32:	af04      	add	r7, sp, #16
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a3e:	f3ef 8305 	mrs	r3, IPSR
 8006a42:	617b      	str	r3, [r7, #20]
  return(result);
 8006a44:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d17e      	bne.n	8006b48 <osThreadNew+0x11a>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d07b      	beq.n	8006b48 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a50:	2380      	movs	r3, #128	@ 0x80
 8006a52:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a54:	2318      	movs	r3, #24
 8006a56:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d045      	beq.n	8006af4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <osThreadNew+0x48>
        name = attr->name;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <osThreadNew+0x6e>
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b38      	cmp	r3, #56	@ 0x38
 8006a8e:	d805      	bhi.n	8006a9c <osThreadNew+0x6e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <osThreadNew+0x72>
        return (NULL);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e054      	b.n	8006b4a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	089b      	lsrs	r3, r3, #2
 8006aae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <osThreadNew+0xa8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2ba7      	cmp	r3, #167	@ 0xa7
 8006abe:	d90a      	bls.n	8006ad6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <osThreadNew+0xa8>
        mem = 1;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e010      	b.n	8006af8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10c      	bne.n	8006af8 <osThreadNew+0xca>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <osThreadNew+0xca>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <osThreadNew+0xca>
          mem = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	e001      	b.n	8006af8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d110      	bne.n	8006b20 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b06:	9202      	str	r2, [sp, #8]
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fe2b 	bl	8007770 <xTaskCreateStatic>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	e013      	b.n	8006b48 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d110      	bne.n	8006b48 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f107 0310 	add.w	r3, r7, #16
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fe79 	bl	8007830 <xTaskCreate>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d001      	beq.n	8006b48 <osThreadNew+0x11a>
            hTask = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b48:	693b      	ldr	r3, [r7, #16]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3728      	adds	r7, #40	@ 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b086      	sub	sp, #24
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5a:	f3ef 8305 	mrs	r3, IPSR
 8006b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b60:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006b66:	f06f 0305 	mvn.w	r3, #5
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e019      	b.n	8006ba2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006b72:	f001 f957 	bl	8007e24 <xTaskGetTickCount>
 8006b76:	4603      	mov	r3, r0
 8006b78:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <osDelayUntil+0x4a>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	db06      	blt.n	8006b9c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	6939      	ldr	r1, [r7, #16]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 ffa9 	bl	8007aec <vTaskDelayUntil>
 8006b9a:	e002      	b.n	8006ba2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006b9c:	f06f 0303 	mvn.w	r3, #3
 8006ba0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006ba2:	697b      	ldr	r3, [r7, #20]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a07      	ldr	r2, [pc, #28]	@ (8006bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a06      	ldr	r2, [pc, #24]	@ (8006bdc <vApplicationGetIdleTaskMemory+0x30>)
 8006bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2280      	movs	r2, #128	@ 0x80
 8006bc8:	601a      	str	r2, [r3, #0]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000658 	.word	0x20000658
 8006bdc:	20000700 	.word	0x20000700

08006be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a07      	ldr	r2, [pc, #28]	@ (8006c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8006bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a06      	ldr	r2, [pc, #24]	@ (8006c10 <vApplicationGetTimerTaskMemory+0x30>)
 8006bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20000900 	.word	0x20000900
 8006c10:	200009a8 	.word	0x200009a8

08006c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f103 0208 	add.w	r2, r3, #8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f103 0208 	add.w	r2, r3, #8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f103 0208 	add.w	r2, r3, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d103      	bne.n	8006cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e00c      	b.n	8006cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e002      	b.n	8006ce4 <vListInsert+0x2e>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d2f6      	bcs.n	8006cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	601a      	str	r2, [r3, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6852      	ldr	r2, [r2, #4]
 8006d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d103      	bne.n	8006d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	1e5a      	subs	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006da8:	f002 f906 	bl	8008fb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	68f9      	ldr	r1, [r7, #12]
 8006db6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	441a      	add	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	22ff      	movs	r2, #255	@ 0xff
 8006dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	22ff      	movs	r2, #255	@ 0xff
 8006df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d114      	bne.n	8006e28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01a      	beq.n	8006e3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3310      	adds	r3, #16
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 f99e 	bl	800814c <xTaskRemoveFromEventList>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d012      	beq.n	8006e3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <xQueueGenericReset+0xd0>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	e009      	b.n	8006e3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3310      	adds	r3, #16
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff fef1 	bl	8006c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3324      	adds	r3, #36	@ 0x24
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff feec 	bl	8006c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e3c:	f002 f8ee 	bl	800901c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e40:	2301      	movs	r3, #1
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08e      	sub	sp, #56	@ 0x38
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <xQueueGenericCreateStatic+0x56>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <xQueueGenericCreateStatic+0x5a>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <xQueueGenericCreateStatic+0x5c>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	623b      	str	r3, [r7, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <xQueueGenericCreateStatic+0x84>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <xQueueGenericCreateStatic+0x88>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <xQueueGenericCreateStatic+0x8a>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	61fb      	str	r3, [r7, #28]
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	e7fd      	b.n	8006ef2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ef6:	2350      	movs	r3, #80	@ 0x50
 8006ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b50      	cmp	r3, #80	@ 0x50
 8006efe:	d00b      	beq.n	8006f18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61bb      	str	r3, [r7, #24]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00d      	beq.n	8006f40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4613      	mov	r3, r2
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f805 	bl	8006f4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3730      	adds	r7, #48	@ 0x30
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e002      	b.n	8006f6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f78:	2101      	movs	r1, #1
 8006f7a:	69b8      	ldr	r0, [r7, #24]
 8006f7c:	f7ff fefe 	bl	8006d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08e      	sub	sp, #56	@ 0x38
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <xQueueGenericSend+0x34>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSend+0x42>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <xQueueGenericSend+0x46>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueGenericSend+0x48>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueGenericSend+0x64>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d103      	bne.n	8007002 <xQueueGenericSend+0x72>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <xQueueGenericSend+0x76>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <xQueueGenericSend+0x78>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <xQueueGenericSend+0x94>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	623b      	str	r3, [r7, #32]
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	e7fd      	b.n	8007020 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007024:	f001 fa58 	bl	80084d8 <xTaskGetSchedulerState>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <xQueueGenericSend+0xa4>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <xQueueGenericSend+0xa8>
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <xQueueGenericSend+0xaa>
 8007038:	2300      	movs	r3, #0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <xQueueGenericSend+0xc6>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	61fb      	str	r3, [r7, #28]
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	e7fd      	b.n	8007052 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007056:	f001 ffaf 	bl	8008fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <xQueueGenericSend+0xdc>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d129      	bne.n	80070c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007072:	f000 fa0f 	bl	8007494 <prvCopyDataToQueue>
 8007076:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d010      	beq.n	80070a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	3324      	adds	r3, #36	@ 0x24
 8007084:	4618      	mov	r0, r3
 8007086:	f001 f861 	bl	800814c <xTaskRemoveFromEventList>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007090:	4b3f      	ldr	r3, [pc, #252]	@ (8007190 <xQueueGenericSend+0x200>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	e00a      	b.n	80070b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070a8:	4b39      	ldr	r3, [pc, #228]	@ (8007190 <xQueueGenericSend+0x200>)
 80070aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070b8:	f001 ffb0 	bl	800901c <vPortExitCritical>
				return pdPASS;
 80070bc:	2301      	movs	r3, #1
 80070be:	e063      	b.n	8007188 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c6:	f001 ffa9 	bl	800901c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e05c      	b.n	8007188 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d4:	f107 0314 	add.w	r3, r7, #20
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 f89b 	bl	8008214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070e2:	f001 ff9b 	bl	800901c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e6:	f000 fdf1 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ea:	f001 ff65 	bl	8008fb8 <vPortEnterCritical>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070f4:	b25b      	sxtb	r3, r3
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d103      	bne.n	8007104 <xQueueGenericSend+0x174>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800710a:	b25b      	sxtb	r3, r3
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d103      	bne.n	800711a <xQueueGenericSend+0x18a>
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800711a:	f001 ff7f 	bl	800901c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800711e:	1d3a      	adds	r2, r7, #4
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f001 f88a 	bl	8008240 <xTaskCheckForTimeOut>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d124      	bne.n	800717c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007132:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007134:	f000 faa6 	bl	8007684 <prvIsQueueFull>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d018      	beq.n	8007170 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	3310      	adds	r3, #16
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f000 ffae 	bl	80080a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800714c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800714e:	f000 fa31 	bl	80075b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007152:	f000 fdc9 	bl	8007ce8 <xTaskResumeAll>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	f47f af7c 	bne.w	8007056 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800715e:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <xQueueGenericSend+0x200>)
 8007160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	e772      	b.n	8007056 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007172:	f000 fa1f 	bl	80075b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007176:	f000 fdb7 	bl	8007ce8 <xTaskResumeAll>
 800717a:	e76c      	b.n	8007056 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800717c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800717e:	f000 fa19 	bl	80075b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007182:	f000 fdb1 	bl	8007ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007188:	4618      	mov	r0, r3
 800718a:	3738      	adds	r7, #56	@ 0x38
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b090      	sub	sp, #64	@ 0x40
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10b      	bne.n	80071c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d103      	bne.n	80071d2 <xQueueGenericSendFromISR+0x3e>
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <xQueueGenericSendFromISR+0x42>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueGenericSendFromISR+0x44>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d103      	bne.n	8007202 <xQueueGenericSendFromISR+0x6e>
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <xQueueGenericSendFromISR+0x72>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <xQueueGenericSendFromISR+0x74>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	623b      	str	r3, [r7, #32]
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007224:	f001 ffa8 	bl	8009178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007228:	f3ef 8211 	mrs	r2, BASEPRI
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61fa      	str	r2, [r7, #28]
 800723e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007240:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724c:	429a      	cmp	r2, r3
 800724e:	d302      	bcc.n	8007256 <xQueueGenericSendFromISR+0xc2>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d12f      	bne.n	80072b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800725c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800726c:	f000 f912 	bl	8007494 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007270:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d112      	bne.n	80072a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	3324      	adds	r3, #36	@ 0x24
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ff60 	bl	800814c <xTaskRemoveFromEventList>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e007      	b.n	80072b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80072a4:	3301      	adds	r3, #1
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	b25a      	sxtb	r2, r3
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80072b0:	2301      	movs	r3, #1
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80072b4:	e001      	b.n	80072ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3740      	adds	r7, #64	@ 0x40
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08c      	sub	sp, #48	@ 0x30
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <xQueueReceive+0x32>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	623b      	str	r3, [r7, #32]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <xQueueReceive+0x40>
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <xQueueReceive+0x44>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <xQueueReceive+0x46>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10b      	bne.n	8007332 <xQueueReceive+0x62>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	61fb      	str	r3, [r7, #28]
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	e7fd      	b.n	800732e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007332:	f001 f8d1 	bl	80084d8 <xTaskGetSchedulerState>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <xQueueReceive+0x72>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueReceive+0x76>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueReceive+0x78>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <xQueueReceive+0x94>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	61bb      	str	r3, [r7, #24]
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007364:	f001 fe28 	bl	8008fb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01f      	beq.n	80073b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007378:	f000 f8f6 	bl	8007568 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737e:	1e5a      	subs	r2, r3, #1
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738e:	3310      	adds	r3, #16
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fedb 	bl	800814c <xTaskRemoveFromEventList>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800739c:	4b3c      	ldr	r3, [pc, #240]	@ (8007490 <xQueueReceive+0x1c0>)
 800739e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073ac:	f001 fe36 	bl	800901c <vPortExitCritical>
				return pdPASS;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e069      	b.n	8007488 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ba:	f001 fe2f 	bl	800901c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073be:	2300      	movs	r3, #0
 80073c0:	e062      	b.n	8007488 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073c8:	f107 0310 	add.w	r3, r7, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 ff21 	bl	8008214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073d2:	2301      	movs	r3, #1
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073d6:	f001 fe21 	bl	800901c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073da:	f000 fc77 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073de:	f001 fdeb 	bl	8008fb8 <vPortEnterCritical>
 80073e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073e8:	b25b      	sxtb	r3, r3
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d103      	bne.n	80073f8 <xQueueReceive+0x128>
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073fe:	b25b      	sxtb	r3, r3
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d103      	bne.n	800740e <xQueueReceive+0x13e>
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800740e:	f001 fe05 	bl	800901c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007412:	1d3a      	adds	r2, r7, #4
 8007414:	f107 0310 	add.w	r3, r7, #16
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 ff10 	bl	8008240 <xTaskCheckForTimeOut>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d123      	bne.n	800746e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007428:	f000 f916 	bl	8007658 <prvIsQueueEmpty>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d017      	beq.n	8007462 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007434:	3324      	adds	r3, #36	@ 0x24
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fe34 	bl	80080a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007442:	f000 f8b7 	bl	80075b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007446:	f000 fc4f 	bl	8007ce8 <xTaskResumeAll>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d189      	bne.n	8007364 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007450:	4b0f      	ldr	r3, [pc, #60]	@ (8007490 <xQueueReceive+0x1c0>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	e780      	b.n	8007364 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007464:	f000 f8a6 	bl	80075b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007468:	f000 fc3e 	bl	8007ce8 <xTaskResumeAll>
 800746c:	e77a      	b.n	8007364 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800746e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007470:	f000 f8a0 	bl	80075b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007474:	f000 fc38 	bl	8007ce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800747a:	f000 f8ed 	bl	8007658 <prvIsQueueEmpty>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	f43f af6f 	beq.w	8007364 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007486:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007488:	4618      	mov	r0, r3
 800748a:	3730      	adds	r7, #48	@ 0x30
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10d      	bne.n	80074ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d14d      	bne.n	8007556 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 f828 	bl	8008514 <xTaskPriorityDisinherit>
 80074c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	e043      	b.n	8007556 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d119      	bne.n	8007508 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6858      	ldr	r0, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074dc:	461a      	mov	r2, r3
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	f002 f906 	bl	80096f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ec:	441a      	add	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d32b      	bcc.n	8007556 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	e026      	b.n	8007556 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68d8      	ldr	r0, [r3, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007510:	461a      	mov	r2, r3
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	f002 f8ec 	bl	80096f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	425b      	negs	r3, r3
 8007522:	441a      	add	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d207      	bcs.n	8007544 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753c:	425b      	negs	r3, r3
 800753e:	441a      	add	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d105      	bne.n	8007556 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	3b01      	subs	r3, #1
 8007554:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800755e:	697b      	ldr	r3, [r7, #20]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007582:	441a      	add	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	429a      	cmp	r2, r3
 8007592:	d303      	bcc.n	800759c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68d9      	ldr	r1, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a4:	461a      	mov	r2, r3
 80075a6:	6838      	ldr	r0, [r7, #0]
 80075a8:	f002 f8a2 	bl	80096f0 <memcpy>
	}
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075bc:	f001 fcfc 	bl	8008fb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075c8:	e011      	b.n	80075ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d012      	beq.n	80075f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3324      	adds	r3, #36	@ 0x24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fdb8 	bl	800814c <xTaskRemoveFromEventList>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075e2:	f000 fe91 	bl	8008308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dce9      	bgt.n	80075ca <prvUnlockQueue+0x16>
 80075f6:	e000      	b.n	80075fa <prvUnlockQueue+0x46>
					break;
 80075f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	22ff      	movs	r2, #255	@ 0xff
 80075fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007602:	f001 fd0b 	bl	800901c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007606:	f001 fcd7 	bl	8008fb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007610:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007612:	e011      	b.n	8007638 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d012      	beq.n	8007642 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3310      	adds	r3, #16
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fd93 	bl	800814c <xTaskRemoveFromEventList>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800762c:	f000 fe6c 	bl	8008308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	3b01      	subs	r3, #1
 8007634:	b2db      	uxtb	r3, r3
 8007636:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dce9      	bgt.n	8007614 <prvUnlockQueue+0x60>
 8007640:	e000      	b.n	8007644 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007642:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	22ff      	movs	r2, #255	@ 0xff
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800764c:	f001 fce6 	bl	800901c <vPortExitCritical>
}
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007660:	f001 fcaa 	bl	8008fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e001      	b.n	8007676 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007676:	f001 fcd1 	bl	800901c <vPortExitCritical>

	return xReturn;
 800767a:	68fb      	ldr	r3, [r7, #12]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800768c:	f001 fc94 	bl	8008fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007698:	429a      	cmp	r2, r3
 800769a:	d102      	bne.n	80076a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e001      	b.n	80076a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076a6:	f001 fcb9 	bl	800901c <vPortExitCritical>

	return xReturn;
 80076aa:	68fb      	ldr	r3, [r7, #12]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e014      	b.n	80076ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076c4:	4a0f      	ldr	r2, [pc, #60]	@ (8007704 <vQueueAddToRegistry+0x50>)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076d0:	490c      	ldr	r1, [pc, #48]	@ (8007704 <vQueueAddToRegistry+0x50>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076da:	4a0a      	ldr	r2, [pc, #40]	@ (8007704 <vQueueAddToRegistry+0x50>)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	4413      	add	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076e6:	e006      	b.n	80076f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b07      	cmp	r3, #7
 80076f2:	d9e7      	bls.n	80076c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000da8 	.word	0x20000da8

08007708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007718:	f001 fc4e 	bl	8008fb8 <vPortEnterCritical>
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007722:	b25b      	sxtb	r3, r3
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d103      	bne.n	8007732 <vQueueWaitForMessageRestricted+0x2a>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007738:	b25b      	sxtb	r3, r3
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d103      	bne.n	8007748 <vQueueWaitForMessageRestricted+0x40>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007748:	f001 fc68 	bl	800901c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3324      	adds	r3, #36	@ 0x24
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fcc9 	bl	80080f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007762:	6978      	ldr	r0, [r7, #20]
 8007764:	f7ff ff26 	bl	80075b4 <prvUnlockQueue>
	}
 8007768:	bf00      	nop
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08e      	sub	sp, #56	@ 0x38
 8007774:	af04      	add	r7, sp, #16
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800777e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10b      	bne.n	800779c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	623b      	str	r3, [r7, #32]
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	e7fd      	b.n	8007798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10b      	bne.n	80077ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	61fb      	str	r3, [r7, #28]
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	e7fd      	b.n	80077b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077ba:	23a8      	movs	r3, #168	@ 0xa8
 80077bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80077c2:	d00b      	beq.n	80077dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	61bb      	str	r3, [r7, #24]
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01e      	beq.n	8007822 <xTaskCreateStatic+0xb2>
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01b      	beq.n	8007822 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077fc:	2300      	movs	r3, #0
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	9302      	str	r3, [sp, #8]
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f851 	bl	80078bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800781a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800781c:	f000 f8f6 	bl	8007a0c <prvAddNewTaskToReadyList>
 8007820:	e001      	b.n	8007826 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007826:	697b      	ldr	r3, [r7, #20]
	}
 8007828:	4618      	mov	r0, r3
 800782a:	3728      	adds	r7, #40	@ 0x28
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08c      	sub	sp, #48	@ 0x30
 8007834:	af04      	add	r7, sp, #16
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4618      	mov	r0, r3
 8007846:	f001 fcd9 	bl	80091fc <pvPortMalloc>
 800784a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007852:	20a8      	movs	r0, #168	@ 0xa8
 8007854:	f001 fcd2 	bl	80091fc <pvPortMalloc>
 8007858:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	631a      	str	r2, [r3, #48]	@ 0x30
 8007866:	e005      	b.n	8007874 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007868:	6978      	ldr	r0, [r7, #20]
 800786a:	f001 fd95 	bl	8009398 <vPortFree>
 800786e:	e001      	b.n	8007874 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d017      	beq.n	80078aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	2300      	movs	r3, #0
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	9302      	str	r3, [sp, #8]
 800788c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f80f 	bl	80078bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800789e:	69f8      	ldr	r0, [r7, #28]
 80078a0:	f000 f8b4 	bl	8007a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078a4:	2301      	movs	r3, #1
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e002      	b.n	80078b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078b0:	69bb      	ldr	r3, [r7, #24]
	}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	461a      	mov	r2, r3
 80078d4:	21a5      	movs	r1, #165	@ 0xa5
 80078d6:	f001 fe7f 	bl	80095d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078e4:	3b01      	subs	r3, #1
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	617b      	str	r3, [r7, #20]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01f      	beq.n	800795c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	e012      	b.n	8007948 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	7819      	ldrb	r1, [r3, #0]
 800792a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	4413      	add	r3, r2
 8007930:	3334      	adds	r3, #52	@ 0x34
 8007932:	460a      	mov	r2, r1
 8007934:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d006      	beq.n	8007950 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	d9e9      	bls.n	8007922 <prvInitialiseNewTask+0x66>
 800794e:	e000      	b.n	8007952 <prvInitialiseNewTask+0x96>
			{
				break;
 8007950:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800795a:	e003      	b.n	8007964 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	2b37      	cmp	r3, #55	@ 0x37
 8007968:	d901      	bls.n	800796e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800796a:	2337      	movs	r3, #55	@ 0x37
 800796c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007972:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007978:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	2200      	movs	r2, #0
 800797e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff f965 	bl	8006c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	3318      	adds	r3, #24
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f960 	bl	8006c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007998:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	3354      	adds	r3, #84	@ 0x54
 80079be:	224c      	movs	r2, #76	@ 0x4c
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fe08 	bl	80095d8 <memset>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007a00 <prvInitialiseNewTask+0x144>)
 80079cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a04 <prvInitialiseNewTask+0x148>)
 80079d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a08 <prvInitialiseNewTask+0x14c>)
 80079d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	69b8      	ldr	r0, [r7, #24]
 80079e0:	f001 f9b6 	bl	8008d50 <pxPortInitialiseStack>
 80079e4:	4602      	mov	r2, r0
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f6:	bf00      	nop
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	2000203c 	.word	0x2000203c
 8007a04:	200020a4 	.word	0x200020a4
 8007a08:	2000210c 	.word	0x2000210c

08007a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a14:	f001 fad0 	bl	8008fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a18:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad0 <prvAddNewTaskToReadyList+0xc4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad0 <prvAddNewTaskToReadyList+0xc4>)
 8007a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a22:	4b2c      	ldr	r3, [pc, #176]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a30:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <prvAddNewTaskToReadyList+0xc4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d110      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a38:	f000 fc8a 	bl	8008350 <prvInitialiseTaskLists>
 8007a3c:	e00d      	b.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a3e:	4b26      	ldr	r3, [pc, #152]	@ (8007ad8 <prvAddNewTaskToReadyList+0xcc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a46:	4b23      	ldr	r3, [pc, #140]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d802      	bhi.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a54:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a5a:	4b20      	ldr	r3, [pc, #128]	@ (8007adc <prvAddNewTaskToReadyList+0xd0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	4a1e      	ldr	r2, [pc, #120]	@ (8007adc <prvAddNewTaskToReadyList+0xd0>)
 8007a62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a64:	4b1d      	ldr	r3, [pc, #116]	@ (8007adc <prvAddNewTaskToReadyList+0xd0>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <prvAddNewTaskToReadyList+0xd4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d903      	bls.n	8007a80 <prvAddNewTaskToReadyList+0x74>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	4a18      	ldr	r2, [pc, #96]	@ (8007ae0 <prvAddNewTaskToReadyList+0xd4>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4a15      	ldr	r2, [pc, #84]	@ (8007ae4 <prvAddNewTaskToReadyList+0xd8>)
 8007a8e:	441a      	add	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7ff f8e9 	bl	8006c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a9c:	f001 fabe 	bl	800901c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <prvAddNewTaskToReadyList+0xcc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d207      	bcs.n	8007ac6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <prvAddNewTaskToReadyList+0xdc>)
 8007ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	200012bc 	.word	0x200012bc
 8007ad4:	20000de8 	.word	0x20000de8
 8007ad8:	200012c8 	.word	0x200012c8
 8007adc:	200012d8 	.word	0x200012d8
 8007ae0:	200012c4 	.word	0x200012c4
 8007ae4:	20000dec 	.word	0x20000dec
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	@ 0x28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	617b      	str	r3, [r7, #20]
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <vTaskDelayUntil+0x4a>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	613b      	str	r3, [r7, #16]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007b36:	4b2a      	ldr	r3, [pc, #168]	@ (8007be0 <vTaskDelayUntil+0xf4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <vTaskDelayUntil+0x6a>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	60fb      	str	r3, [r7, #12]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007b56:	f000 f8b9 	bl	8007ccc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007b5a:	4b22      	ldr	r3, [pc, #136]	@ (8007be4 <vTaskDelayUntil+0xf8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	4413      	add	r3, r2
 8007b68:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d20b      	bcs.n	8007b8c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d211      	bcs.n	8007ba2 <vTaskDelayUntil+0xb6>
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d90d      	bls.n	8007ba2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007b86:	2301      	movs	r3, #1
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b8a:	e00a      	b.n	8007ba2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d303      	bcc.n	8007b9e <vTaskDelayUntil+0xb2>
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d901      	bls.n	8007ba2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fd1c 	bl	80085f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007bbc:	f000 f894 	bl	8007ce8 <xTaskResumeAll>
 8007bc0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007bc8:	4b07      	ldr	r3, [pc, #28]	@ (8007be8 <vTaskDelayUntil+0xfc>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bd8:	bf00      	nop
 8007bda:	3728      	adds	r7, #40	@ 0x28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200012e4 	.word	0x200012e4
 8007be4:	200012c0 	.word	0x200012c0
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	@ 0x28
 8007bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bfa:	463a      	mov	r2, r7
 8007bfc:	1d39      	adds	r1, r7, #4
 8007bfe:	f107 0308 	add.w	r3, r7, #8
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe ffd2 	bl	8006bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	9202      	str	r2, [sp, #8]
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	2300      	movs	r3, #0
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2300      	movs	r3, #0
 8007c18:	460a      	mov	r2, r1
 8007c1a:	4924      	ldr	r1, [pc, #144]	@ (8007cac <vTaskStartScheduler+0xc0>)
 8007c1c:	4824      	ldr	r0, [pc, #144]	@ (8007cb0 <vTaskStartScheduler+0xc4>)
 8007c1e:	f7ff fda7 	bl	8007770 <xTaskCreateStatic>
 8007c22:	4603      	mov	r3, r0
 8007c24:	4a23      	ldr	r2, [pc, #140]	@ (8007cb4 <vTaskStartScheduler+0xc8>)
 8007c26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c28:	4b22      	ldr	r3, [pc, #136]	@ (8007cb4 <vTaskStartScheduler+0xc8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e001      	b.n	8007c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d102      	bne.n	8007c46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c40:	f000 fd2c 	bl	800869c <xTimerCreateTimerTask>
 8007c44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d11b      	bne.n	8007c84 <vTaskStartScheduler+0x98>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
}
 8007c5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c60:	4b15      	ldr	r3, [pc, #84]	@ (8007cb8 <vTaskStartScheduler+0xcc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3354      	adds	r3, #84	@ 0x54
 8007c66:	4a15      	ldr	r2, [pc, #84]	@ (8007cbc <vTaskStartScheduler+0xd0>)
 8007c68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6a:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <vTaskStartScheduler+0xd4>)
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c72:	4b14      	ldr	r3, [pc, #80]	@ (8007cc4 <vTaskStartScheduler+0xd8>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c78:	4b13      	ldr	r3, [pc, #76]	@ (8007cc8 <vTaskStartScheduler+0xdc>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c7e:	f001 f8f7 	bl	8008e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c82:	e00f      	b.n	8007ca4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d10b      	bne.n	8007ca4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60fb      	str	r3, [r7, #12]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <vTaskStartScheduler+0xb4>
}
 8007ca4:	bf00      	nop
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	080097dc 	.word	0x080097dc
 8007cb0:	08008321 	.word	0x08008321
 8007cb4:	200012e0 	.word	0x200012e0
 8007cb8:	20000de8 	.word	0x20000de8
 8007cbc:	20000034 	.word	0x20000034
 8007cc0:	200012dc 	.word	0x200012dc
 8007cc4:	200012c8 	.word	0x200012c8
 8007cc8:	200012c0 	.word	0x200012c0

08007ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cd0:	4b04      	ldr	r3, [pc, #16]	@ (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a03      	ldr	r2, [pc, #12]	@ (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cda:	bf00      	nop
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	200012e4 	.word	0x200012e4

08007ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cf6:	4b42      	ldr	r3, [pc, #264]	@ (8007e00 <xTaskResumeAll+0x118>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <xTaskResumeAll+0x2e>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	603b      	str	r3, [r7, #0]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d16:	f001 f94f 	bl	8008fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d1a:	4b39      	ldr	r3, [pc, #228]	@ (8007e00 <xTaskResumeAll+0x118>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	4a37      	ldr	r2, [pc, #220]	@ (8007e00 <xTaskResumeAll+0x118>)
 8007d22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d24:	4b36      	ldr	r3, [pc, #216]	@ (8007e00 <xTaskResumeAll+0x118>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d162      	bne.n	8007df2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d2c:	4b35      	ldr	r3, [pc, #212]	@ (8007e04 <xTaskResumeAll+0x11c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05e      	beq.n	8007df2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d34:	e02f      	b.n	8007d96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d36:	4b34      	ldr	r3, [pc, #208]	@ (8007e08 <xTaskResumeAll+0x120>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3318      	adds	r3, #24
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fff0 	bl	8006d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe ffeb 	bl	8006d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4b2d      	ldr	r3, [pc, #180]	@ (8007e0c <xTaskResumeAll+0x124>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d903      	bls.n	8007d66 <xTaskResumeAll+0x7e>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	4a2a      	ldr	r2, [pc, #168]	@ (8007e0c <xTaskResumeAll+0x124>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a27      	ldr	r2, [pc, #156]	@ (8007e10 <xTaskResumeAll+0x128>)
 8007d74:	441a      	add	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe ff76 	bl	8006c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	4b23      	ldr	r3, [pc, #140]	@ (8007e14 <xTaskResumeAll+0x12c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d90:	4b21      	ldr	r3, [pc, #132]	@ (8007e18 <xTaskResumeAll+0x130>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d96:	4b1c      	ldr	r3, [pc, #112]	@ (8007e08 <xTaskResumeAll+0x120>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1cb      	bne.n	8007d36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007da4:	f000 fb78 	bl	8008498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007da8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e1c <xTaskResumeAll+0x134>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007db4:	f000 f858 	bl	8007e68 <xTaskIncrementTick>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007dbe:	4b16      	ldr	r3, [pc, #88]	@ (8007e18 <xTaskResumeAll+0x130>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f1      	bne.n	8007db4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007dd0:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <xTaskResumeAll+0x134>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dd6:	4b10      	ldr	r3, [pc, #64]	@ (8007e18 <xTaskResumeAll+0x130>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e20 <xTaskResumeAll+0x138>)
 8007de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007df2:	f001 f913 	bl	800901c <vPortExitCritical>

	return xAlreadyYielded;
 8007df6:	68bb      	ldr	r3, [r7, #8]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200012e4 	.word	0x200012e4
 8007e04:	200012bc 	.word	0x200012bc
 8007e08:	2000127c 	.word	0x2000127c
 8007e0c:	200012c4 	.word	0x200012c4
 8007e10:	20000dec 	.word	0x20000dec
 8007e14:	20000de8 	.word	0x20000de8
 8007e18:	200012d0 	.word	0x200012d0
 8007e1c:	200012cc 	.word	0x200012cc
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e2a:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <xTaskGetTickCount+0x1c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e30:	687b      	ldr	r3, [r7, #4]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	200012c0 	.word	0x200012c0

08007e44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4a:	f001 f995 	bl	8009178 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007e52:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <xTaskGetTickCountFromISR+0x20>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e58:	683b      	ldr	r3, [r7, #0]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	200012c0 	.word	0x200012c0

08007e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b4f      	ldr	r3, [pc, #316]	@ (8007fb0 <xTaskIncrementTick+0x148>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 8090 	bne.w	8007f9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e84:	4a4b      	ldr	r2, [pc, #300]	@ (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d121      	bne.n	8007ed4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e90:	4b49      	ldr	r3, [pc, #292]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	603b      	str	r3, [r7, #0]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <xTaskIncrementTick+0x46>
 8007eb2:	4b41      	ldr	r3, [pc, #260]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	4b40      	ldr	r3, [pc, #256]	@ (8007fbc <xTaskIncrementTick+0x154>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8007fbc <xTaskIncrementTick+0x154>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc0 <xTaskIncrementTick+0x158>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8007fc0 <xTaskIncrementTick+0x158>)
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	f000 fae2 	bl	8008498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc4 <xTaskIncrementTick+0x15c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d349      	bcc.n	8007f72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ede:	4b36      	ldr	r3, [pc, #216]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee8:	4b36      	ldr	r3, [pc, #216]	@ (8007fc4 <xTaskIncrementTick+0x15c>)
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	601a      	str	r2, [r3, #0]
					break;
 8007ef0:	e03f      	b.n	8007f72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b31      	ldr	r3, [pc, #196]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d203      	bcs.n	8007f12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8007fc4 <xTaskIncrementTick+0x15c>)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f10:	e02f      	b.n	8007f72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe ff06 	bl	8006d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3318      	adds	r3, #24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fefd 	bl	8006d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f32:	4b25      	ldr	r3, [pc, #148]	@ (8007fc8 <xTaskIncrementTick+0x160>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d903      	bls.n	8007f42 <xTaskIncrementTick+0xda>
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3e:	4a22      	ldr	r2, [pc, #136]	@ (8007fc8 <xTaskIncrementTick+0x160>)
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fcc <xTaskIncrementTick+0x164>)
 8007f50:	441a      	add	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fe fe88 	bl	8006c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f62:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <xTaskIncrementTick+0x168>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3b8      	bcc.n	8007ede <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f70:	e7b5      	b.n	8007ede <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f72:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <xTaskIncrementTick+0x168>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f78:	4914      	ldr	r1, [pc, #80]	@ (8007fcc <xTaskIncrementTick+0x164>)
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d901      	bls.n	8007f8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f8e:	4b11      	ldr	r3, [pc, #68]	@ (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	e004      	b.n	8007fa6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd8 <xTaskIncrementTick+0x170>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8007fd8 <xTaskIncrementTick+0x170>)
 8007fa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007fa6:	697b      	ldr	r3, [r7, #20]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	200012e4 	.word	0x200012e4
 8007fb4:	200012c0 	.word	0x200012c0
 8007fb8:	20001274 	.word	0x20001274
 8007fbc:	20001278 	.word	0x20001278
 8007fc0:	200012d4 	.word	0x200012d4
 8007fc4:	200012dc 	.word	0x200012dc
 8007fc8:	200012c4 	.word	0x200012c4
 8007fcc:	20000dec 	.word	0x20000dec
 8007fd0:	20000de8 	.word	0x20000de8
 8007fd4:	200012d0 	.word	0x200012d0
 8007fd8:	200012cc 	.word	0x200012cc

08007fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8008090 <vTaskSwitchContext+0xb4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fea:	4b2a      	ldr	r3, [pc, #168]	@ (8008094 <vTaskSwitchContext+0xb8>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ff0:	e047      	b.n	8008082 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007ff2:	4b28      	ldr	r3, [pc, #160]	@ (8008094 <vTaskSwitchContext+0xb8>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff8:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <vTaskSwitchContext+0xbc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e011      	b.n	8008024 <vTaskSwitchContext+0x48>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <vTaskSwitchContext+0x42>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	607b      	str	r3, [r7, #4]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <vTaskSwitchContext+0x3e>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b01      	subs	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	491d      	ldr	r1, [pc, #116]	@ (800809c <vTaskSwitchContext+0xc0>)
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0e3      	beq.n	8008000 <vTaskSwitchContext+0x24>
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4a16      	ldr	r2, [pc, #88]	@ (800809c <vTaskSwitchContext+0xc0>)
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3308      	adds	r3, #8
 800805a:	429a      	cmp	r2, r3
 800805c:	d104      	bne.n	8008068 <vTaskSwitchContext+0x8c>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	605a      	str	r2, [r3, #4]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	4a0c      	ldr	r2, [pc, #48]	@ (80080a0 <vTaskSwitchContext+0xc4>)
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	4a09      	ldr	r2, [pc, #36]	@ (8008098 <vTaskSwitchContext+0xbc>)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <vTaskSwitchContext+0xc4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3354      	adds	r3, #84	@ 0x54
 800807e:	4a09      	ldr	r2, [pc, #36]	@ (80080a4 <vTaskSwitchContext+0xc8>)
 8008080:	6013      	str	r3, [r2, #0]
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	200012e4 	.word	0x200012e4
 8008094:	200012d0 	.word	0x200012d0
 8008098:	200012c4 	.word	0x200012c4
 800809c:	20000dec 	.word	0x20000dec
 80080a0:	20000de8 	.word	0x20000de8
 80080a4:	20000034 	.word	0x20000034

080080a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	60fb      	str	r3, [r7, #12]
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	e7fd      	b.n	80080cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080d0:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <vTaskPlaceOnEventList+0x48>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3318      	adds	r3, #24
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fe fdec 	bl	8006cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080de:	2101      	movs	r1, #1
 80080e0:	6838      	ldr	r0, [r7, #0]
 80080e2:	f000 fa87 	bl	80085f4 <prvAddCurrentTaskToDelayedList>
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000de8 	.word	0x20000de8

080080f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	617b      	str	r3, [r7, #20]
}
 8008118:	bf00      	nop
 800811a:	bf00      	nop
 800811c:	e7fd      	b.n	800811a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800811e:	4b0a      	ldr	r3, [pc, #40]	@ (8008148 <vTaskPlaceOnEventListRestricted+0x54>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3318      	adds	r3, #24
 8008124:	4619      	mov	r1, r3
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f7fe fda1 	bl	8006c6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295
 8008136:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	68b8      	ldr	r0, [r7, #8]
 800813c:	f000 fa5a 	bl	80085f4 <prvAddCurrentTaskToDelayedList>
	}
 8008140:	bf00      	nop
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000de8 	.word	0x20000de8

0800814c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	60fb      	str	r3, [r7, #12]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	3318      	adds	r3, #24
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fdd2 	bl	8006d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008184:	4b1d      	ldr	r3, [pc, #116]	@ (80081fc <xTaskRemoveFromEventList+0xb0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11d      	bne.n	80081c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3304      	adds	r3, #4
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fdc9 	bl	8006d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4b19      	ldr	r3, [pc, #100]	@ (8008200 <xTaskRemoveFromEventList+0xb4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d903      	bls.n	80081aa <xTaskRemoveFromEventList+0x5e>
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	4a16      	ldr	r2, [pc, #88]	@ (8008200 <xTaskRemoveFromEventList+0xb4>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4a13      	ldr	r2, [pc, #76]	@ (8008204 <xTaskRemoveFromEventList+0xb8>)
 80081b8:	441a      	add	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	4610      	mov	r0, r2
 80081c2:	f7fe fd54 	bl	8006c6e <vListInsertEnd>
 80081c6:	e005      	b.n	80081d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	3318      	adds	r3, #24
 80081cc:	4619      	mov	r1, r3
 80081ce:	480e      	ldr	r0, [pc, #56]	@ (8008208 <xTaskRemoveFromEventList+0xbc>)
 80081d0:	f7fe fd4d 	bl	8006c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d8:	4b0c      	ldr	r3, [pc, #48]	@ (800820c <xTaskRemoveFromEventList+0xc0>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081de:	429a      	cmp	r2, r3
 80081e0:	d905      	bls.n	80081ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081e2:	2301      	movs	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <xTaskRemoveFromEventList+0xc4>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	e001      	b.n	80081f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081f2:	697b      	ldr	r3, [r7, #20]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200012e4 	.word	0x200012e4
 8008200:	200012c4 	.word	0x200012c4
 8008204:	20000dec 	.word	0x20000dec
 8008208:	2000127c 	.word	0x2000127c
 800820c:	20000de8 	.word	0x20000de8
 8008210:	200012d0 	.word	0x200012d0

08008214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800821c:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <vTaskInternalSetTimeOutState+0x24>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008224:	4b05      	ldr	r3, [pc, #20]	@ (800823c <vTaskInternalSetTimeOutState+0x28>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	605a      	str	r2, [r3, #4]
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	200012d4 	.word	0x200012d4
 800823c:	200012c0 	.word	0x200012c0

08008240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60fb      	str	r3, [r7, #12]
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	e7fd      	b.n	8008282 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008286:	f000 fe97 	bl	8008fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800828a:	4b1d      	ldr	r3, [pc, #116]	@ (8008300 <xTaskCheckForTimeOut+0xc0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a2:	d102      	bne.n	80082aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	e023      	b.n	80082f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b15      	ldr	r3, [pc, #84]	@ (8008304 <xTaskCheckForTimeOut+0xc4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d007      	beq.n	80082c6 <xTaskCheckForTimeOut+0x86>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d302      	bcc.n	80082c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	e015      	b.n	80082f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d20b      	bcs.n	80082e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff ff99 	bl	8008214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e004      	b.n	80082f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082f2:	f000 fe93 	bl	800901c <vPortExitCritical>

	return xReturn;
 80082f6:	69fb      	ldr	r3, [r7, #28]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3720      	adds	r7, #32
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	200012c0 	.word	0x200012c0
 8008304:	200012d4 	.word	0x200012d4

08008308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800830c:	4b03      	ldr	r3, [pc, #12]	@ (800831c <vTaskMissedYield+0x14>)
 800830e:	2201      	movs	r2, #1
 8008310:	601a      	str	r2, [r3, #0]
}
 8008312:	bf00      	nop
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	200012d0 	.word	0x200012d0

08008320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008328:	f000 f852 	bl	80083d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800832c:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <prvIdleTask+0x28>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d9f9      	bls.n	8008328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008334:	4b05      	ldr	r3, [pc, #20]	@ (800834c <prvIdleTask+0x2c>)
 8008336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008344:	e7f0      	b.n	8008328 <prvIdleTask+0x8>
 8008346:	bf00      	nop
 8008348:	20000dec 	.word	0x20000dec
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008356:	2300      	movs	r3, #0
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e00c      	b.n	8008376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4a12      	ldr	r2, [pc, #72]	@ (80083b0 <prvInitialiseTaskLists+0x60>)
 8008368:	4413      	add	r3, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fc52 	bl	8006c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3301      	adds	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b37      	cmp	r3, #55	@ 0x37
 800837a:	d9ef      	bls.n	800835c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800837c:	480d      	ldr	r0, [pc, #52]	@ (80083b4 <prvInitialiseTaskLists+0x64>)
 800837e:	f7fe fc49 	bl	8006c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008382:	480d      	ldr	r0, [pc, #52]	@ (80083b8 <prvInitialiseTaskLists+0x68>)
 8008384:	f7fe fc46 	bl	8006c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008388:	480c      	ldr	r0, [pc, #48]	@ (80083bc <prvInitialiseTaskLists+0x6c>)
 800838a:	f7fe fc43 	bl	8006c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800838e:	480c      	ldr	r0, [pc, #48]	@ (80083c0 <prvInitialiseTaskLists+0x70>)
 8008390:	f7fe fc40 	bl	8006c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008394:	480b      	ldr	r0, [pc, #44]	@ (80083c4 <prvInitialiseTaskLists+0x74>)
 8008396:	f7fe fc3d 	bl	8006c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800839a:	4b0b      	ldr	r3, [pc, #44]	@ (80083c8 <prvInitialiseTaskLists+0x78>)
 800839c:	4a05      	ldr	r2, [pc, #20]	@ (80083b4 <prvInitialiseTaskLists+0x64>)
 800839e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083a0:	4b0a      	ldr	r3, [pc, #40]	@ (80083cc <prvInitialiseTaskLists+0x7c>)
 80083a2:	4a05      	ldr	r2, [pc, #20]	@ (80083b8 <prvInitialiseTaskLists+0x68>)
 80083a4:	601a      	str	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000dec 	.word	0x20000dec
 80083b4:	2000124c 	.word	0x2000124c
 80083b8:	20001260 	.word	0x20001260
 80083bc:	2000127c 	.word	0x2000127c
 80083c0:	20001290 	.word	0x20001290
 80083c4:	200012a8 	.word	0x200012a8
 80083c8:	20001274 	.word	0x20001274
 80083cc:	20001278 	.word	0x20001278

080083d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083d6:	e019      	b.n	800840c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083d8:	f000 fdee 	bl	8008fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083dc:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <prvCheckTasksWaitingTermination+0x50>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fc9d 	bl	8006d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <prvCheckTasksWaitingTermination+0x54>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008424 <prvCheckTasksWaitingTermination+0x54>)
 80083f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008428 <prvCheckTasksWaitingTermination+0x58>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008428 <prvCheckTasksWaitingTermination+0x58>)
 8008400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008402:	f000 fe0b 	bl	800901c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f810 	bl	800842c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800840c:	4b06      	ldr	r3, [pc, #24]	@ (8008428 <prvCheckTasksWaitingTermination+0x58>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e1      	bne.n	80083d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20001290 	.word	0x20001290
 8008424:	200012bc 	.word	0x200012bc
 8008428:	200012a4 	.word	0x200012a4

0800842c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3354      	adds	r3, #84	@ 0x54
 8008438:	4618      	mov	r0, r3
 800843a:	f001 f8d5 	bl	80095e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008444:	2b00      	cmp	r3, #0
 8008446:	d108      	bne.n	800845a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844c:	4618      	mov	r0, r3
 800844e:	f000 ffa3 	bl	8009398 <vPortFree>
				vPortFree( pxTCB );
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 ffa0 	bl	8009398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008458:	e019      	b.n	800848e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008460:	2b01      	cmp	r3, #1
 8008462:	d103      	bne.n	800846c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 ff97 	bl	8009398 <vPortFree>
	}
 800846a:	e010      	b.n	800848e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008472:	2b02      	cmp	r3, #2
 8008474:	d00b      	beq.n	800848e <prvDeleteTCB+0x62>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <prvDeleteTCB+0x5e>
	}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800849e:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <prvResetNextTaskUnblockTime+0x38>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084a8:	4b0a      	ldr	r3, [pc, #40]	@ (80084d4 <prvResetNextTaskUnblockTime+0x3c>)
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084b0:	e008      	b.n	80084c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b2:	4b07      	ldr	r3, [pc, #28]	@ (80084d0 <prvResetNextTaskUnblockTime+0x38>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	4a04      	ldr	r2, [pc, #16]	@ (80084d4 <prvResetNextTaskUnblockTime+0x3c>)
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20001274 	.word	0x20001274
 80084d4:	200012dc 	.word	0x200012dc

080084d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084de:	4b0b      	ldr	r3, [pc, #44]	@ (800850c <xTaskGetSchedulerState+0x34>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084e6:	2301      	movs	r3, #1
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	e008      	b.n	80084fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ec:	4b08      	ldr	r3, [pc, #32]	@ (8008510 <xTaskGetSchedulerState+0x38>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084f4:	2302      	movs	r3, #2
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	e001      	b.n	80084fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084fa:	2300      	movs	r3, #0
 80084fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084fe:	687b      	ldr	r3, [r7, #4]
	}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	200012c8 	.word	0x200012c8
 8008510:	200012e4 	.word	0x200012e4

08008514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d058      	beq.n	80085dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800852a:	4b2f      	ldr	r3, [pc, #188]	@ (80085e8 <xTaskPriorityDisinherit+0xd4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	429a      	cmp	r2, r3
 8008532:	d00b      	beq.n	800854c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	60bb      	str	r3, [r7, #8]
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008570:	1e5a      	subs	r2, r3, #1
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	429a      	cmp	r2, r3
 8008580:	d02c      	beq.n	80085dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008586:	2b00      	cmp	r3, #0
 8008588:	d128      	bne.n	80085dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3304      	adds	r3, #4
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fbca 	bl	8006d28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ac:	4b0f      	ldr	r3, [pc, #60]	@ (80085ec <xTaskPriorityDisinherit+0xd8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d903      	bls.n	80085bc <xTaskPriorityDisinherit+0xa8>
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	4a0c      	ldr	r2, [pc, #48]	@ (80085ec <xTaskPriorityDisinherit+0xd8>)
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4a09      	ldr	r2, [pc, #36]	@ (80085f0 <xTaskPriorityDisinherit+0xdc>)
 80085ca:	441a      	add	r2, r3
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fe fb4b 	bl	8006c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085dc:	697b      	ldr	r3, [r7, #20]
	}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000de8 	.word	0x20000de8
 80085ec:	200012c4 	.word	0x200012c4
 80085f0:	20000dec 	.word	0x20000dec

080085f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085fe:	4b21      	ldr	r3, [pc, #132]	@ (8008684 <prvAddCurrentTaskToDelayedList+0x90>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008604:	4b20      	ldr	r3, [pc, #128]	@ (8008688 <prvAddCurrentTaskToDelayedList+0x94>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3304      	adds	r3, #4
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fb8c 	bl	8006d28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d10a      	bne.n	800862e <prvAddCurrentTaskToDelayedList+0x3a>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800861e:	4b1a      	ldr	r3, [pc, #104]	@ (8008688 <prvAddCurrentTaskToDelayedList+0x94>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3304      	adds	r3, #4
 8008624:	4619      	mov	r1, r3
 8008626:	4819      	ldr	r0, [pc, #100]	@ (800868c <prvAddCurrentTaskToDelayedList+0x98>)
 8008628:	f7fe fb21 	bl	8006c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800862c:	e026      	b.n	800867c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008636:	4b14      	ldr	r3, [pc, #80]	@ (8008688 <prvAddCurrentTaskToDelayedList+0x94>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	429a      	cmp	r2, r3
 8008644:	d209      	bcs.n	800865a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008646:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4b0f      	ldr	r3, [pc, #60]	@ (8008688 <prvAddCurrentTaskToDelayedList+0x94>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3304      	adds	r3, #4
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	f7fe fb2f 	bl	8006cb6 <vListInsert>
}
 8008658:	e010      	b.n	800867c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800865a:	4b0e      	ldr	r3, [pc, #56]	@ (8008694 <prvAddCurrentTaskToDelayedList+0xa0>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	4b0a      	ldr	r3, [pc, #40]	@ (8008688 <prvAddCurrentTaskToDelayedList+0x94>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3304      	adds	r3, #4
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f7fe fb25 	bl	8006cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800866c:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <prvAddCurrentTaskToDelayedList+0xa4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d202      	bcs.n	800867c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008676:	4a08      	ldr	r2, [pc, #32]	@ (8008698 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6013      	str	r3, [r2, #0]
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	200012c0 	.word	0x200012c0
 8008688:	20000de8 	.word	0x20000de8
 800868c:	200012a8 	.word	0x200012a8
 8008690:	20001278 	.word	0x20001278
 8008694:	20001274 	.word	0x20001274
 8008698:	200012dc 	.word	0x200012dc

0800869c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	@ 0x28
 80086a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086a6:	f000 fb13 	bl	8008cd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008720 <xTimerCreateTimerTask+0x84>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d021      	beq.n	80086f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086ba:	1d3a      	adds	r2, r7, #4
 80086bc:	f107 0108 	add.w	r1, r7, #8
 80086c0:	f107 030c 	add.w	r3, r7, #12
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fa8b 	bl	8006be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	9202      	str	r2, [sp, #8]
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	2302      	movs	r3, #2
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2300      	movs	r3, #0
 80086da:	460a      	mov	r2, r1
 80086dc:	4911      	ldr	r1, [pc, #68]	@ (8008724 <xTimerCreateTimerTask+0x88>)
 80086de:	4812      	ldr	r0, [pc, #72]	@ (8008728 <xTimerCreateTimerTask+0x8c>)
 80086e0:	f7ff f846 	bl	8007770 <xTaskCreateStatic>
 80086e4:	4603      	mov	r3, r0
 80086e6:	4a11      	ldr	r2, [pc, #68]	@ (800872c <xTimerCreateTimerTask+0x90>)
 80086e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086ea:	4b10      	ldr	r3, [pc, #64]	@ (800872c <xTimerCreateTimerTask+0x90>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086f2:	2301      	movs	r3, #1
 80086f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10b      	bne.n	8008714 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	613b      	str	r3, [r7, #16]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008714:	697b      	ldr	r3, [r7, #20]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001318 	.word	0x20001318
 8008724:	080097e4 	.word	0x080097e4
 8008728:	08008869 	.word	0x08008869
 800872c:	2000131c 	.word	0x2000131c

08008730 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	@ 0x28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800873e:	2300      	movs	r3, #0
 8008740:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10b      	bne.n	8008760 <xTimerGenericCommand+0x30>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	623b      	str	r3, [r7, #32]
}
 800875a:	bf00      	nop
 800875c:	bf00      	nop
 800875e:	e7fd      	b.n	800875c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008760:	4b19      	ldr	r3, [pc, #100]	@ (80087c8 <xTimerGenericCommand+0x98>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d02a      	beq.n	80087be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b05      	cmp	r3, #5
 8008778:	dc18      	bgt.n	80087ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800877a:	f7ff fead 	bl	80084d8 <xTaskGetSchedulerState>
 800877e:	4603      	mov	r3, r0
 8008780:	2b02      	cmp	r3, #2
 8008782:	d109      	bne.n	8008798 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008784:	4b10      	ldr	r3, [pc, #64]	@ (80087c8 <xTimerGenericCommand+0x98>)
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	f107 0110 	add.w	r1, r7, #16
 800878c:	2300      	movs	r3, #0
 800878e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008790:	f7fe fbfe 	bl	8006f90 <xQueueGenericSend>
 8008794:	6278      	str	r0, [r7, #36]	@ 0x24
 8008796:	e012      	b.n	80087be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008798:	4b0b      	ldr	r3, [pc, #44]	@ (80087c8 <xTimerGenericCommand+0x98>)
 800879a:	6818      	ldr	r0, [r3, #0]
 800879c:	f107 0110 	add.w	r1, r7, #16
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	f7fe fbf4 	bl	8006f90 <xQueueGenericSend>
 80087a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80087aa:	e008      	b.n	80087be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087ac:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <xTimerGenericCommand+0x98>)
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	f107 0110 	add.w	r1, r7, #16
 80087b4:	2300      	movs	r3, #0
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	f7fe fcec 	bl	8007194 <xQueueGenericSendFromISR>
 80087bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3728      	adds	r7, #40	@ 0x28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20001318 	.word	0x20001318

080087cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d6:	4b23      	ldr	r3, [pc, #140]	@ (8008864 <prvProcessExpiredTimer+0x98>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fa9f 	bl	8006d28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d023      	beq.n	8008840 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	18d1      	adds	r1, r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	6978      	ldr	r0, [r7, #20]
 8008806:	f000 f8d5 	bl	80089b4 <prvInsertTimerInActiveList>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d020      	beq.n	8008852 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008810:	2300      	movs	r3, #0
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	2300      	movs	r3, #0
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	2100      	movs	r1, #0
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f7ff ff88 	bl	8008730 <xTimerGenericCommand>
 8008820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d114      	bne.n	8008852 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	60fb      	str	r3, [r7, #12]
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	6978      	ldr	r0, [r7, #20]
 8008858:	4798      	blx	r3
}
 800885a:	bf00      	nop
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20001310 	.word	0x20001310

08008868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008870:	f107 0308 	add.w	r3, r7, #8
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f859 	bl	800892c <prvGetNextExpireTime>
 800887a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4619      	mov	r1, r3
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f805 	bl	8008890 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008886:	f000 f8d7 	bl	8008a38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800888a:	bf00      	nop
 800888c:	e7f0      	b.n	8008870 <prvTimerTask+0x8>
	...

08008890 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800889a:	f7ff fa17 	bl	8007ccc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800889e:	f107 0308 	add.w	r3, r7, #8
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f866 	bl	8008974 <prvSampleTimeNow>
 80088a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d130      	bne.n	8008912 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10a      	bne.n	80088cc <prvProcessTimerOrBlockTask+0x3c>
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d806      	bhi.n	80088cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088be:	f7ff fa13 	bl	8007ce8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ff81 	bl	80087cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088ca:	e024      	b.n	8008916 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d008      	beq.n	80088e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088d2:	4b13      	ldr	r3, [pc, #76]	@ (8008920 <prvProcessTimerOrBlockTask+0x90>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <prvProcessTimerOrBlockTask+0x50>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <prvProcessTimerOrBlockTask+0x52>
 80088e0:	2300      	movs	r3, #0
 80088e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008924 <prvProcessTimerOrBlockTask+0x94>)
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7fe ff09 	bl	8007708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088f6:	f7ff f9f7 	bl	8007ce8 <xTaskResumeAll>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008900:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <prvProcessTimerOrBlockTask+0x98>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
}
 8008910:	e001      	b.n	8008916 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008912:	f7ff f9e9 	bl	8007ce8 <xTaskResumeAll>
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20001314 	.word	0x20001314
 8008924:	20001318 	.word	0x20001318
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008934:	4b0e      	ldr	r3, [pc, #56]	@ (8008970 <prvGetNextExpireTime+0x44>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <prvGetNextExpireTime+0x16>
 800893e:	2201      	movs	r2, #1
 8008940:	e000      	b.n	8008944 <prvGetNextExpireTime+0x18>
 8008942:	2200      	movs	r2, #0
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d105      	bne.n	800895c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <prvGetNextExpireTime+0x44>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	e001      	b.n	8008960 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008960:	68fb      	ldr	r3, [r7, #12]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20001310 	.word	0x20001310

08008974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800897c:	f7ff fa52 	bl	8007e24 <xTaskGetTickCount>
 8008980:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008982:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <prvSampleTimeNow+0x3c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	429a      	cmp	r2, r3
 800898a:	d205      	bcs.n	8008998 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800898c:	f000 f93a 	bl	8008c04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e002      	b.n	800899e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800899e:	4a04      	ldr	r2, [pc, #16]	@ (80089b0 <prvSampleTimeNow+0x3c>)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089a4:	68fb      	ldr	r3, [r7, #12]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20001320 	.word	0x20001320

080089b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d812      	bhi.n	8008a00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d302      	bcc.n	80089ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	e01b      	b.n	8008a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089ee:	4b10      	ldr	r3, [pc, #64]	@ (8008a30 <prvInsertTimerInActiveList+0x7c>)
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7fe f95c 	bl	8006cb6 <vListInsert>
 80089fe:	e012      	b.n	8008a26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d206      	bcs.n	8008a16 <prvInsertTimerInActiveList+0x62>
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d302      	bcc.n	8008a16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a10:	2301      	movs	r3, #1
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	e007      	b.n	8008a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a16:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <prvInsertTimerInActiveList+0x80>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4610      	mov	r0, r2
 8008a22:	f7fe f948 	bl	8006cb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a26:	697b      	ldr	r3, [r7, #20]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20001314 	.word	0x20001314
 8008a34:	20001310 	.word	0x20001310

08008a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08e      	sub	sp, #56	@ 0x38
 8008a3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a3e:	e0ce      	b.n	8008bde <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da19      	bge.n	8008a7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a46:	1d3b      	adds	r3, r7, #4
 8008a48:	3304      	adds	r3, #4
 8008a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	61fb      	str	r3, [r7, #28]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a70:	6850      	ldr	r0, [r2, #4]
 8008a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	4611      	mov	r1, r2
 8008a78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f2c0 80ae 	blt.w	8008bde <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	3304      	adds	r3, #4
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe f948 	bl	8006d28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a98:	463b      	mov	r3, r7
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff ff6a 	bl	8008974 <prvSampleTimeNow>
 8008aa0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	f200 8097 	bhi.w	8008bd8 <prvProcessReceivedCommands+0x1a0>
 8008aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <prvProcessReceivedCommands+0x78>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ad9 	.word	0x08008ad9
 8008ab8:	08008ad9 	.word	0x08008ad9
 8008abc:	08008b4f 	.word	0x08008b4f
 8008ac0:	08008b63 	.word	0x08008b63
 8008ac4:	08008baf 	.word	0x08008baf
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008ad9 	.word	0x08008ad9
 8008ad0:	08008b4f 	.word	0x08008b4f
 8008ad4:	08008b63 	.word	0x08008b63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ade:	f043 0301 	orr.w	r3, r3, #1
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	18d1      	adds	r1, r2, r3
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af8:	f7ff ff5c 	bl	80089b4 <prvInsertTimerInActiveList>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d06c      	beq.n	8008bdc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d061      	beq.n	8008bdc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	441a      	add	r2, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b2a:	f7ff fe01 	bl	8008730 <xTimerGenericCommand>
 8008b2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d152      	bne.n	8008bdc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	61bb      	str	r3, [r7, #24]
}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	e7fd      	b.n	8008b4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b54:	f023 0301 	bic.w	r3, r3, #1
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b60:	e03d      	b.n	8008bde <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b68:	f043 0301 	orr.w	r3, r3, #1
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10b      	bne.n	8008b9a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	617b      	str	r3, [r7, #20]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	18d1      	adds	r1, r2, r3
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba8:	f7ff ff04 	bl	80089b4 <prvInsertTimerInActiveList>
					break;
 8008bac:	e017      	b.n	8008bde <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d103      	bne.n	8008bc4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bbe:	f000 fbeb 	bl	8009398 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bc2:	e00c      	b.n	8008bde <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bca:	f023 0301 	bic.w	r3, r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bd6:	e002      	b.n	8008bde <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008bd8:	bf00      	nop
 8008bda:	e000      	b.n	8008bde <prvProcessReceivedCommands+0x1a6>
					break;
 8008bdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bde:	4b08      	ldr	r3, [pc, #32]	@ (8008c00 <prvProcessReceivedCommands+0x1c8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	1d39      	adds	r1, r7, #4
 8008be4:	2200      	movs	r2, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fb72 	bl	80072d0 <xQueueReceive>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f47f af26 	bne.w	8008a40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	3730      	adds	r7, #48	@ 0x30
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20001318 	.word	0x20001318

08008c04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c0a:	e049      	b.n	8008ca0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008cc8 <prvSwitchTimerLists+0xc4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c16:	4b2c      	ldr	r3, [pc, #176]	@ (8008cc8 <prvSwitchTimerLists+0xc4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe f87f 	bl	8006d28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d02f      	beq.n	8008ca0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d90e      	bls.n	8008c70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc8 <prvSwitchTimerLists+0xc4>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3304      	adds	r3, #4
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f7fe f824 	bl	8006cb6 <vListInsert>
 8008c6e:	e017      	b.n	8008ca0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c70:	2300      	movs	r3, #0
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	2300      	movs	r3, #0
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f7ff fd58 	bl	8008730 <xTimerGenericCommand>
 8008c80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10b      	bne.n	8008ca0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	603b      	str	r3, [r7, #0]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ca0:	4b09      	ldr	r3, [pc, #36]	@ (8008cc8 <prvSwitchTimerLists+0xc4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1b0      	bne.n	8008c0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008caa:	4b07      	ldr	r3, [pc, #28]	@ (8008cc8 <prvSwitchTimerLists+0xc4>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cb0:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <prvSwitchTimerLists+0xc8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a04      	ldr	r2, [pc, #16]	@ (8008cc8 <prvSwitchTimerLists+0xc4>)
 8008cb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cb8:	4a04      	ldr	r2, [pc, #16]	@ (8008ccc <prvSwitchTimerLists+0xc8>)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	6013      	str	r3, [r2, #0]
}
 8008cbe:	bf00      	nop
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20001310 	.word	0x20001310
 8008ccc:	20001314 	.word	0x20001314

08008cd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cd6:	f000 f96f 	bl	8008fb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cda:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <prvCheckForValidListAndQueue+0x60>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d120      	bne.n	8008d24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ce2:	4814      	ldr	r0, [pc, #80]	@ (8008d34 <prvCheckForValidListAndQueue+0x64>)
 8008ce4:	f7fd ff96 	bl	8006c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ce8:	4813      	ldr	r0, [pc, #76]	@ (8008d38 <prvCheckForValidListAndQueue+0x68>)
 8008cea:	f7fd ff93 	bl	8006c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cee:	4b13      	ldr	r3, [pc, #76]	@ (8008d3c <prvCheckForValidListAndQueue+0x6c>)
 8008cf0:	4a10      	ldr	r2, [pc, #64]	@ (8008d34 <prvCheckForValidListAndQueue+0x64>)
 8008cf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008cf4:	4b12      	ldr	r3, [pc, #72]	@ (8008d40 <prvCheckForValidListAndQueue+0x70>)
 8008cf6:	4a10      	ldr	r2, [pc, #64]	@ (8008d38 <prvCheckForValidListAndQueue+0x68>)
 8008cf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4b11      	ldr	r3, [pc, #68]	@ (8008d44 <prvCheckForValidListAndQueue+0x74>)
 8008d00:	4a11      	ldr	r2, [pc, #68]	@ (8008d48 <prvCheckForValidListAndQueue+0x78>)
 8008d02:	2110      	movs	r1, #16
 8008d04:	200a      	movs	r0, #10
 8008d06:	f7fe f8a3 	bl	8006e50 <xQueueGenericCreateStatic>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	4a08      	ldr	r2, [pc, #32]	@ (8008d30 <prvCheckForValidListAndQueue+0x60>)
 8008d0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d10:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <prvCheckForValidListAndQueue+0x60>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <prvCheckForValidListAndQueue+0x60>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	490b      	ldr	r1, [pc, #44]	@ (8008d4c <prvCheckForValidListAndQueue+0x7c>)
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fcc8 	bl	80076b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d24:	f000 f97a 	bl	800901c <vPortExitCritical>
}
 8008d28:	bf00      	nop
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20001318 	.word	0x20001318
 8008d34:	200012e8 	.word	0x200012e8
 8008d38:	200012fc 	.word	0x200012fc
 8008d3c:	20001310 	.word	0x20001310
 8008d40:	20001314 	.word	0x20001314
 8008d44:	200013c4 	.word	0x200013c4
 8008d48:	20001324 	.word	0x20001324
 8008d4c:	080097ec 	.word	0x080097ec

08008d50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3b04      	subs	r3, #4
 8008d60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3b04      	subs	r3, #4
 8008d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f023 0201 	bic.w	r2, r3, #1
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3b04      	subs	r3, #4
 8008d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d80:	4a0c      	ldr	r2, [pc, #48]	@ (8008db4 <pxPortInitialiseStack+0x64>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3b14      	subs	r3, #20
 8008d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3b04      	subs	r3, #4
 8008d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f06f 0202 	mvn.w	r2, #2
 8008d9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3b20      	subs	r3, #32
 8008da4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008da6:	68fb      	ldr	r3, [r7, #12]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	08008db9 	.word	0x08008db9

08008db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dc2:	4b13      	ldr	r3, [pc, #76]	@ (8008e10 <prvTaskExitError+0x58>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dca:	d00b      	beq.n	8008de4 <prvTaskExitError+0x2c>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	60fb      	str	r3, [r7, #12]
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	e7fd      	b.n	8008de0 <prvTaskExitError+0x28>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	60bb      	str	r3, [r7, #8]
}
 8008df6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008df8:	bf00      	nop
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0fc      	beq.n	8008dfa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000030 	.word	0x20000030
	...

08008e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e20:	4b07      	ldr	r3, [pc, #28]	@ (8008e40 <pxCurrentTCBConst2>)
 8008e22:	6819      	ldr	r1, [r3, #0]
 8008e24:	6808      	ldr	r0, [r1, #0]
 8008e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2a:	f380 8809 	msr	PSP, r0
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8811 	msr	BASEPRI, r0
 8008e3a:	4770      	bx	lr
 8008e3c:	f3af 8000 	nop.w

08008e40 <pxCurrentTCBConst2>:
 8008e40:	20000de8 	.word	0x20000de8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop

08008e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e48:	4808      	ldr	r0, [pc, #32]	@ (8008e6c <prvPortStartFirstTask+0x24>)
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	6800      	ldr	r0, [r0, #0]
 8008e4e:	f380 8808 	msr	MSP, r0
 8008e52:	f04f 0000 	mov.w	r0, #0
 8008e56:	f380 8814 	msr	CONTROL, r0
 8008e5a:	b662      	cpsie	i
 8008e5c:	b661      	cpsie	f
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	df00      	svc	0
 8008e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e6a:	bf00      	nop
 8008e6c:	e000ed08 	.word	0xe000ed08

08008e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e76:	4b47      	ldr	r3, [pc, #284]	@ (8008f94 <xPortStartScheduler+0x124>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a47      	ldr	r2, [pc, #284]	@ (8008f98 <xPortStartScheduler+0x128>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d10b      	bne.n	8008e98 <xPortStartScheduler+0x28>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e98:	4b3e      	ldr	r3, [pc, #248]	@ (8008f94 <xPortStartScheduler+0x124>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f9c <xPortStartScheduler+0x12c>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d10b      	bne.n	8008eba <xPortStartScheduler+0x4a>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	613b      	str	r3, [r7, #16]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008eba:	4b39      	ldr	r3, [pc, #228]	@ (8008fa0 <xPortStartScheduler+0x130>)
 8008ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	22ff      	movs	r2, #255	@ 0xff
 8008eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	4b31      	ldr	r3, [pc, #196]	@ (8008fa4 <xPortStartScheduler+0x134>)
 8008ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ee2:	4b31      	ldr	r3, [pc, #196]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008ee4:	2207      	movs	r2, #7
 8008ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ee8:	e009      	b.n	8008efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008eea:	4b2f      	ldr	r3, [pc, #188]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f06:	2b80      	cmp	r3, #128	@ 0x80
 8008f08:	d0ef      	beq.n	8008eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f0a:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f1c3 0307 	rsb	r3, r3, #7
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d00b      	beq.n	8008f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	60bb      	str	r3, [r7, #8]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f38:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f40:	4a19      	ldr	r2, [pc, #100]	@ (8008fa8 <xPortStartScheduler+0x138>)
 8008f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f4c:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <xPortStartScheduler+0x13c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a16      	ldr	r2, [pc, #88]	@ (8008fac <xPortStartScheduler+0x13c>)
 8008f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f58:	4b14      	ldr	r3, [pc, #80]	@ (8008fac <xPortStartScheduler+0x13c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a13      	ldr	r2, [pc, #76]	@ (8008fac <xPortStartScheduler+0x13c>)
 8008f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f64:	f000 f8da 	bl	800911c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f68:	4b11      	ldr	r3, [pc, #68]	@ (8008fb0 <xPortStartScheduler+0x140>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f6e:	f000 f8f9 	bl	8009164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f72:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <xPortStartScheduler+0x144>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a0f      	ldr	r2, [pc, #60]	@ (8008fb4 <xPortStartScheduler+0x144>)
 8008f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f7e:	f7ff ff63 	bl	8008e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f82:	f7ff f82b 	bl	8007fdc <vTaskSwitchContext>
	prvTaskExitError();
 8008f86:	f7ff ff17 	bl	8008db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	e000ed00 	.word	0xe000ed00
 8008f98:	410fc271 	.word	0x410fc271
 8008f9c:	410fc270 	.word	0x410fc270
 8008fa0:	e000e400 	.word	0xe000e400
 8008fa4:	20001414 	.word	0x20001414
 8008fa8:	20001418 	.word	0x20001418
 8008fac:	e000ed20 	.word	0xe000ed20
 8008fb0:	20000030 	.word	0x20000030
 8008fb4:	e000ef34 	.word	0xe000ef34

08008fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	607b      	str	r3, [r7, #4]
}
 8008fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fd2:	4b10      	ldr	r3, [pc, #64]	@ (8009014 <vPortEnterCritical+0x5c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8009014 <vPortEnterCritical+0x5c>)
 8008fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8009014 <vPortEnterCritical+0x5c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d110      	bne.n	8009006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <vPortEnterCritical+0x60>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <vPortEnterCritical+0x4e>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	603b      	str	r3, [r7, #0]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <vPortEnterCritical+0x4a>
	}
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000030 	.word	0x20000030
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009022:	4b12      	ldr	r3, [pc, #72]	@ (800906c <vPortExitCritical+0x50>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10b      	bne.n	8009042 <vPortExitCritical+0x26>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	607b      	str	r3, [r7, #4]
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	e7fd      	b.n	800903e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009042:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <vPortExitCritical+0x50>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3b01      	subs	r3, #1
 8009048:	4a08      	ldr	r2, [pc, #32]	@ (800906c <vPortExitCritical+0x50>)
 800904a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800904c:	4b07      	ldr	r3, [pc, #28]	@ (800906c <vPortExitCritical+0x50>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d105      	bne.n	8009060 <vPortExitCritical+0x44>
 8009054:	2300      	movs	r3, #0
 8009056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	f383 8811 	msr	BASEPRI, r3
}
 800905e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20000030 	.word	0x20000030

08009070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009070:	f3ef 8009 	mrs	r0, PSP
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	4b15      	ldr	r3, [pc, #84]	@ (80090d0 <pxCurrentTCBConst>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	f01e 0f10 	tst.w	lr, #16
 8009080:	bf08      	it	eq
 8009082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908a:	6010      	str	r0, [r2, #0]
 800908c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009094:	f380 8811 	msr	BASEPRI, r0
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f7fe ff9c 	bl	8007fdc <vTaskSwitchContext>
 80090a4:	f04f 0000 	mov.w	r0, #0
 80090a8:	f380 8811 	msr	BASEPRI, r0
 80090ac:	bc09      	pop	{r0, r3}
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	6808      	ldr	r0, [r1, #0]
 80090b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b6:	f01e 0f10 	tst.w	lr, #16
 80090ba:	bf08      	it	eq
 80090bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090c0:	f380 8809 	msr	PSP, r0
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	f3af 8000 	nop.w

080090d0 <pxCurrentTCBConst>:
 80090d0:	20000de8 	.word	0x20000de8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop

080090d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	607b      	str	r3, [r7, #4]
}
 80090f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090f2:	f7fe feb9 	bl	8007e68 <xTaskIncrementTick>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090fc:	4b06      	ldr	r3, [pc, #24]	@ (8009118 <xPortSysTickHandler+0x40>)
 80090fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	2300      	movs	r3, #0
 8009106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f383 8811 	msr	BASEPRI, r3
}
 800910e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009120:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <vPortSetupTimerInterrupt+0x34>)
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009126:	4b0b      	ldr	r3, [pc, #44]	@ (8009154 <vPortSetupTimerInterrupt+0x38>)
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800912c:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <vPortSetupTimerInterrupt+0x3c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a0a      	ldr	r2, [pc, #40]	@ (800915c <vPortSetupTimerInterrupt+0x40>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	099b      	lsrs	r3, r3, #6
 8009138:	4a09      	ldr	r2, [pc, #36]	@ (8009160 <vPortSetupTimerInterrupt+0x44>)
 800913a:	3b01      	subs	r3, #1
 800913c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800913e:	4b04      	ldr	r3, [pc, #16]	@ (8009150 <vPortSetupTimerInterrupt+0x34>)
 8009140:	2207      	movs	r2, #7
 8009142:	601a      	str	r2, [r3, #0]
}
 8009144:	bf00      	nop
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	e000e010 	.word	0xe000e010
 8009154:	e000e018 	.word	0xe000e018
 8009158:	20000000 	.word	0x20000000
 800915c:	10624dd3 	.word	0x10624dd3
 8009160:	e000e014 	.word	0xe000e014

08009164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009174 <vPortEnableVFP+0x10>
 8009168:	6801      	ldr	r1, [r0, #0]
 800916a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800916e:	6001      	str	r1, [r0, #0]
 8009170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009172:	bf00      	nop
 8009174:	e000ed88 	.word	0xe000ed88

08009178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800917e:	f3ef 8305 	mrs	r3, IPSR
 8009182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d915      	bls.n	80091b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800918a:	4a18      	ldr	r2, [pc, #96]	@ (80091ec <vPortValidateInterruptPriority+0x74>)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009194:	4b16      	ldr	r3, [pc, #88]	@ (80091f0 <vPortValidateInterruptPriority+0x78>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	7afa      	ldrb	r2, [r7, #11]
 800919a:	429a      	cmp	r2, r3
 800919c:	d20b      	bcs.n	80091b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	607b      	str	r3, [r7, #4]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091b6:	4b0f      	ldr	r3, [pc, #60]	@ (80091f4 <vPortValidateInterruptPriority+0x7c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091be:	4b0e      	ldr	r3, [pc, #56]	@ (80091f8 <vPortValidateInterruptPriority+0x80>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d90b      	bls.n	80091de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	603b      	str	r3, [r7, #0]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <vPortValidateInterruptPriority+0x62>
	}
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	e000e3f0 	.word	0xe000e3f0
 80091f0:	20001414 	.word	0x20001414
 80091f4:	e000ed0c 	.word	0xe000ed0c
 80091f8:	20001418 	.word	0x20001418

080091fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009208:	f7fe fd60 	bl	8007ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800920c:	4b5c      	ldr	r3, [pc, #368]	@ (8009380 <pvPortMalloc+0x184>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009214:	f000 f924 	bl	8009460 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009218:	4b5a      	ldr	r3, [pc, #360]	@ (8009384 <pvPortMalloc+0x188>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4013      	ands	r3, r2
 8009220:	2b00      	cmp	r3, #0
 8009222:	f040 8095 	bne.w	8009350 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01e      	beq.n	800926a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800922c:	2208      	movs	r2, #8
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d015      	beq.n	800926a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f023 0307 	bic.w	r3, r3, #7
 8009244:	3308      	adds	r3, #8
 8009246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <pvPortMalloc+0x6e>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	617b      	str	r3, [r7, #20]
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	e7fd      	b.n	8009266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d06f      	beq.n	8009350 <pvPortMalloc+0x154>
 8009270:	4b45      	ldr	r3, [pc, #276]	@ (8009388 <pvPortMalloc+0x18c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d86a      	bhi.n	8009350 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800927a:	4b44      	ldr	r3, [pc, #272]	@ (800938c <pvPortMalloc+0x190>)
 800927c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800927e:	4b43      	ldr	r3, [pc, #268]	@ (800938c <pvPortMalloc+0x190>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009284:	e004      	b.n	8009290 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d903      	bls.n	80092a2 <pvPortMalloc+0xa6>
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f1      	bne.n	8009286 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092a2:	4b37      	ldr	r3, [pc, #220]	@ (8009380 <pvPortMalloc+0x184>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d051      	beq.n	8009350 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2208      	movs	r2, #8
 80092b2:	4413      	add	r3, r2
 80092b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	1ad2      	subs	r2, r2, r3
 80092c6:	2308      	movs	r3, #8
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d920      	bls.n	8009310 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <pvPortMalloc+0xfc>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	613b      	str	r3, [r7, #16]
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800930a:	69b8      	ldr	r0, [r7, #24]
 800930c:	f000 f90a 	bl	8009524 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009310:	4b1d      	ldr	r3, [pc, #116]	@ (8009388 <pvPortMalloc+0x18c>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	4a1b      	ldr	r2, [pc, #108]	@ (8009388 <pvPortMalloc+0x18c>)
 800931c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800931e:	4b1a      	ldr	r3, [pc, #104]	@ (8009388 <pvPortMalloc+0x18c>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b1b      	ldr	r3, [pc, #108]	@ (8009390 <pvPortMalloc+0x194>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d203      	bcs.n	8009332 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800932a:	4b17      	ldr	r3, [pc, #92]	@ (8009388 <pvPortMalloc+0x18c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a18      	ldr	r2, [pc, #96]	@ (8009390 <pvPortMalloc+0x194>)
 8009330:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	4b13      	ldr	r3, [pc, #76]	@ (8009384 <pvPortMalloc+0x188>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	431a      	orrs	r2, r3
 800933c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009346:	4b13      	ldr	r3, [pc, #76]	@ (8009394 <pvPortMalloc+0x198>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3301      	adds	r3, #1
 800934c:	4a11      	ldr	r2, [pc, #68]	@ (8009394 <pvPortMalloc+0x198>)
 800934e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009350:	f7fe fcca 	bl	8007ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <pvPortMalloc+0x17a>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	60fb      	str	r3, [r7, #12]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <pvPortMalloc+0x176>
	return pvReturn;
 8009376:	69fb      	ldr	r3, [r7, #28]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3728      	adds	r7, #40	@ 0x28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20002024 	.word	0x20002024
 8009384:	20002038 	.word	0x20002038
 8009388:	20002028 	.word	0x20002028
 800938c:	2000201c 	.word	0x2000201c
 8009390:	2000202c 	.word	0x2000202c
 8009394:	20002030 	.word	0x20002030

08009398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d04f      	beq.n	800944a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093aa:	2308      	movs	r3, #8
 80093ac:	425b      	negs	r3, r3
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	4413      	add	r3, r2
 80093b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	4b25      	ldr	r3, [pc, #148]	@ (8009454 <vPortFree+0xbc>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4013      	ands	r3, r2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10b      	bne.n	80093de <vPortFree+0x46>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	60fb      	str	r3, [r7, #12]
}
 80093d8:	bf00      	nop
 80093da:	bf00      	nop
 80093dc:	e7fd      	b.n	80093da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <vPortFree+0x66>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60bb      	str	r3, [r7, #8]
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	4b14      	ldr	r3, [pc, #80]	@ (8009454 <vPortFree+0xbc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4013      	ands	r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d01e      	beq.n	800944a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11a      	bne.n	800944a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <vPortFree+0xbc>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	43db      	mvns	r3, r3
 800941e:	401a      	ands	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009424:	f7fe fc52 	bl	8007ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b0a      	ldr	r3, [pc, #40]	@ (8009458 <vPortFree+0xc0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4413      	add	r3, r2
 8009432:	4a09      	ldr	r2, [pc, #36]	@ (8009458 <vPortFree+0xc0>)
 8009434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009436:	6938      	ldr	r0, [r7, #16]
 8009438:	f000 f874 	bl	8009524 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800943c:	4b07      	ldr	r3, [pc, #28]	@ (800945c <vPortFree+0xc4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	4a06      	ldr	r2, [pc, #24]	@ (800945c <vPortFree+0xc4>)
 8009444:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009446:	f7fe fc4f 	bl	8007ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800944a:	bf00      	nop
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20002038 	.word	0x20002038
 8009458:	20002028 	.word	0x20002028
 800945c:	20002034 	.word	0x20002034

08009460 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009466:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800946a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800946c:	4b27      	ldr	r3, [pc, #156]	@ (800950c <prvHeapInit+0xac>)
 800946e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3307      	adds	r3, #7
 800947e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0307 	bic.w	r3, r3, #7
 8009486:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	4a1f      	ldr	r2, [pc, #124]	@ (800950c <prvHeapInit+0xac>)
 8009490:	4413      	add	r3, r2
 8009492:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009498:	4a1d      	ldr	r2, [pc, #116]	@ (8009510 <prvHeapInit+0xb0>)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800949e:	4b1c      	ldr	r3, [pc, #112]	@ (8009510 <prvHeapInit+0xb0>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094ac:	2208      	movs	r2, #8
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4a15      	ldr	r2, [pc, #84]	@ (8009514 <prvHeapInit+0xb4>)
 80094c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094c2:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <prvHeapInit+0xb4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ca:	4b12      	ldr	r3, [pc, #72]	@ (8009514 <prvHeapInit+0xb4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009514 <prvHeapInit+0xb4>)
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009518 <prvHeapInit+0xb8>)
 80094ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	4a09      	ldr	r2, [pc, #36]	@ (800951c <prvHeapInit+0xbc>)
 80094f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094f8:	4b09      	ldr	r3, [pc, #36]	@ (8009520 <prvHeapInit+0xc0>)
 80094fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094fe:	601a      	str	r2, [r3, #0]
}
 8009500:	bf00      	nop
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	2000141c 	.word	0x2000141c
 8009510:	2000201c 	.word	0x2000201c
 8009514:	20002024 	.word	0x20002024
 8009518:	2000202c 	.word	0x2000202c
 800951c:	20002028 	.word	0x20002028
 8009520:	20002038 	.word	0x20002038

08009524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800952c:	4b28      	ldr	r3, [pc, #160]	@ (80095d0 <prvInsertBlockIntoFreeList+0xac>)
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e002      	b.n	8009538 <prvInsertBlockIntoFreeList+0x14>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	429a      	cmp	r2, r3
 8009540:	d8f7      	bhi.n	8009532 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	4413      	add	r3, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d108      	bne.n	8009566 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d118      	bne.n	80095ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d00d      	beq.n	80095a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	441a      	add	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	e008      	b.n	80095b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <prvInsertBlockIntoFreeList+0xb0>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e003      	b.n	80095b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d002      	beq.n	80095c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	2000201c 	.word	0x2000201c
 80095d4:	20002024 	.word	0x20002024

080095d8 <memset>:
 80095d8:	4402      	add	r2, r0
 80095da:	4603      	mov	r3, r0
 80095dc:	4293      	cmp	r3, r2
 80095de:	d100      	bne.n	80095e2 <memset+0xa>
 80095e0:	4770      	bx	lr
 80095e2:	f803 1b01 	strb.w	r1, [r3], #1
 80095e6:	e7f9      	b.n	80095dc <memset+0x4>

080095e8 <_reclaim_reent>:
 80095e8:	4b2d      	ldr	r3, [pc, #180]	@ (80096a0 <_reclaim_reent+0xb8>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4283      	cmp	r3, r0
 80095ee:	b570      	push	{r4, r5, r6, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	d053      	beq.n	800969c <_reclaim_reent+0xb4>
 80095f4:	69c3      	ldr	r3, [r0, #28]
 80095f6:	b31b      	cbz	r3, 8009640 <_reclaim_reent+0x58>
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	b163      	cbz	r3, 8009616 <_reclaim_reent+0x2e>
 80095fc:	2500      	movs	r5, #0
 80095fe:	69e3      	ldr	r3, [r4, #28]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	5959      	ldr	r1, [r3, r5]
 8009604:	b9b1      	cbnz	r1, 8009634 <_reclaim_reent+0x4c>
 8009606:	3504      	adds	r5, #4
 8009608:	2d80      	cmp	r5, #128	@ 0x80
 800960a:	d1f8      	bne.n	80095fe <_reclaim_reent+0x16>
 800960c:	69e3      	ldr	r3, [r4, #28]
 800960e:	4620      	mov	r0, r4
 8009610:	68d9      	ldr	r1, [r3, #12]
 8009612:	f000 f87b 	bl	800970c <_free_r>
 8009616:	69e3      	ldr	r3, [r4, #28]
 8009618:	6819      	ldr	r1, [r3, #0]
 800961a:	b111      	cbz	r1, 8009622 <_reclaim_reent+0x3a>
 800961c:	4620      	mov	r0, r4
 800961e:	f000 f875 	bl	800970c <_free_r>
 8009622:	69e3      	ldr	r3, [r4, #28]
 8009624:	689d      	ldr	r5, [r3, #8]
 8009626:	b15d      	cbz	r5, 8009640 <_reclaim_reent+0x58>
 8009628:	4629      	mov	r1, r5
 800962a:	4620      	mov	r0, r4
 800962c:	682d      	ldr	r5, [r5, #0]
 800962e:	f000 f86d 	bl	800970c <_free_r>
 8009632:	e7f8      	b.n	8009626 <_reclaim_reent+0x3e>
 8009634:	680e      	ldr	r6, [r1, #0]
 8009636:	4620      	mov	r0, r4
 8009638:	f000 f868 	bl	800970c <_free_r>
 800963c:	4631      	mov	r1, r6
 800963e:	e7e1      	b.n	8009604 <_reclaim_reent+0x1c>
 8009640:	6961      	ldr	r1, [r4, #20]
 8009642:	b111      	cbz	r1, 800964a <_reclaim_reent+0x62>
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f861 	bl	800970c <_free_r>
 800964a:	69e1      	ldr	r1, [r4, #28]
 800964c:	b111      	cbz	r1, 8009654 <_reclaim_reent+0x6c>
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f85c 	bl	800970c <_free_r>
 8009654:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009656:	b111      	cbz	r1, 800965e <_reclaim_reent+0x76>
 8009658:	4620      	mov	r0, r4
 800965a:	f000 f857 	bl	800970c <_free_r>
 800965e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009660:	b111      	cbz	r1, 8009668 <_reclaim_reent+0x80>
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f852 	bl	800970c <_free_r>
 8009668:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800966a:	b111      	cbz	r1, 8009672 <_reclaim_reent+0x8a>
 800966c:	4620      	mov	r0, r4
 800966e:	f000 f84d 	bl	800970c <_free_r>
 8009672:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009674:	b111      	cbz	r1, 800967c <_reclaim_reent+0x94>
 8009676:	4620      	mov	r0, r4
 8009678:	f000 f848 	bl	800970c <_free_r>
 800967c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800967e:	b111      	cbz	r1, 8009686 <_reclaim_reent+0x9e>
 8009680:	4620      	mov	r0, r4
 8009682:	f000 f843 	bl	800970c <_free_r>
 8009686:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009688:	b111      	cbz	r1, 8009690 <_reclaim_reent+0xa8>
 800968a:	4620      	mov	r0, r4
 800968c:	f000 f83e 	bl	800970c <_free_r>
 8009690:	6a23      	ldr	r3, [r4, #32]
 8009692:	b11b      	cbz	r3, 800969c <_reclaim_reent+0xb4>
 8009694:	4620      	mov	r0, r4
 8009696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800969a:	4718      	bx	r3
 800969c:	bd70      	pop	{r4, r5, r6, pc}
 800969e:	bf00      	nop
 80096a0:	20000034 	.word	0x20000034

080096a4 <__libc_init_array>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	4d0d      	ldr	r5, [pc, #52]	@ (80096dc <__libc_init_array+0x38>)
 80096a8:	4c0d      	ldr	r4, [pc, #52]	@ (80096e0 <__libc_init_array+0x3c>)
 80096aa:	1b64      	subs	r4, r4, r5
 80096ac:	10a4      	asrs	r4, r4, #2
 80096ae:	2600      	movs	r6, #0
 80096b0:	42a6      	cmp	r6, r4
 80096b2:	d109      	bne.n	80096c8 <__libc_init_array+0x24>
 80096b4:	4d0b      	ldr	r5, [pc, #44]	@ (80096e4 <__libc_init_array+0x40>)
 80096b6:	4c0c      	ldr	r4, [pc, #48]	@ (80096e8 <__libc_init_array+0x44>)
 80096b8:	f000 f87e 	bl	80097b8 <_init>
 80096bc:	1b64      	subs	r4, r4, r5
 80096be:	10a4      	asrs	r4, r4, #2
 80096c0:	2600      	movs	r6, #0
 80096c2:	42a6      	cmp	r6, r4
 80096c4:	d105      	bne.n	80096d2 <__libc_init_array+0x2e>
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096cc:	4798      	blx	r3
 80096ce:	3601      	adds	r6, #1
 80096d0:	e7ee      	b.n	80096b0 <__libc_init_array+0xc>
 80096d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d6:	4798      	blx	r3
 80096d8:	3601      	adds	r6, #1
 80096da:	e7f2      	b.n	80096c2 <__libc_init_array+0x1e>
 80096dc:	08009864 	.word	0x08009864
 80096e0:	08009864 	.word	0x08009864
 80096e4:	08009864 	.word	0x08009864
 80096e8:	08009868 	.word	0x08009868

080096ec <__retarget_lock_acquire_recursive>:
 80096ec:	4770      	bx	lr

080096ee <__retarget_lock_release_recursive>:
 80096ee:	4770      	bx	lr

080096f0 <memcpy>:
 80096f0:	440a      	add	r2, r1
 80096f2:	4291      	cmp	r1, r2
 80096f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f8:	d100      	bne.n	80096fc <memcpy+0xc>
 80096fa:	4770      	bx	lr
 80096fc:	b510      	push	{r4, lr}
 80096fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009706:	4291      	cmp	r1, r2
 8009708:	d1f9      	bne.n	80096fe <memcpy+0xe>
 800970a:	bd10      	pop	{r4, pc}

0800970c <_free_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4605      	mov	r5, r0
 8009710:	2900      	cmp	r1, #0
 8009712:	d041      	beq.n	8009798 <_free_r+0x8c>
 8009714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009718:	1f0c      	subs	r4, r1, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfb8      	it	lt
 800971e:	18e4      	addlt	r4, r4, r3
 8009720:	f000 f83e 	bl	80097a0 <__malloc_lock>
 8009724:	4a1d      	ldr	r2, [pc, #116]	@ (800979c <_free_r+0x90>)
 8009726:	6813      	ldr	r3, [r2, #0]
 8009728:	b933      	cbnz	r3, 8009738 <_free_r+0x2c>
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	6014      	str	r4, [r2, #0]
 800972e:	4628      	mov	r0, r5
 8009730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009734:	f000 b83a 	b.w	80097ac <__malloc_unlock>
 8009738:	42a3      	cmp	r3, r4
 800973a:	d908      	bls.n	800974e <_free_r+0x42>
 800973c:	6820      	ldr	r0, [r4, #0]
 800973e:	1821      	adds	r1, r4, r0
 8009740:	428b      	cmp	r3, r1
 8009742:	bf01      	itttt	eq
 8009744:	6819      	ldreq	r1, [r3, #0]
 8009746:	685b      	ldreq	r3, [r3, #4]
 8009748:	1809      	addeq	r1, r1, r0
 800974a:	6021      	streq	r1, [r4, #0]
 800974c:	e7ed      	b.n	800972a <_free_r+0x1e>
 800974e:	461a      	mov	r2, r3
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	b10b      	cbz	r3, 8009758 <_free_r+0x4c>
 8009754:	42a3      	cmp	r3, r4
 8009756:	d9fa      	bls.n	800974e <_free_r+0x42>
 8009758:	6811      	ldr	r1, [r2, #0]
 800975a:	1850      	adds	r0, r2, r1
 800975c:	42a0      	cmp	r0, r4
 800975e:	d10b      	bne.n	8009778 <_free_r+0x6c>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	4401      	add	r1, r0
 8009764:	1850      	adds	r0, r2, r1
 8009766:	4283      	cmp	r3, r0
 8009768:	6011      	str	r1, [r2, #0]
 800976a:	d1e0      	bne.n	800972e <_free_r+0x22>
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	6053      	str	r3, [r2, #4]
 8009772:	4408      	add	r0, r1
 8009774:	6010      	str	r0, [r2, #0]
 8009776:	e7da      	b.n	800972e <_free_r+0x22>
 8009778:	d902      	bls.n	8009780 <_free_r+0x74>
 800977a:	230c      	movs	r3, #12
 800977c:	602b      	str	r3, [r5, #0]
 800977e:	e7d6      	b.n	800972e <_free_r+0x22>
 8009780:	6820      	ldr	r0, [r4, #0]
 8009782:	1821      	adds	r1, r4, r0
 8009784:	428b      	cmp	r3, r1
 8009786:	bf04      	itt	eq
 8009788:	6819      	ldreq	r1, [r3, #0]
 800978a:	685b      	ldreq	r3, [r3, #4]
 800978c:	6063      	str	r3, [r4, #4]
 800978e:	bf04      	itt	eq
 8009790:	1809      	addeq	r1, r1, r0
 8009792:	6021      	streq	r1, [r4, #0]
 8009794:	6054      	str	r4, [r2, #4]
 8009796:	e7ca      	b.n	800972e <_free_r+0x22>
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	20002178 	.word	0x20002178

080097a0 <__malloc_lock>:
 80097a0:	4801      	ldr	r0, [pc, #4]	@ (80097a8 <__malloc_lock+0x8>)
 80097a2:	f7ff bfa3 	b.w	80096ec <__retarget_lock_acquire_recursive>
 80097a6:	bf00      	nop
 80097a8:	20002174 	.word	0x20002174

080097ac <__malloc_unlock>:
 80097ac:	4801      	ldr	r0, [pc, #4]	@ (80097b4 <__malloc_unlock+0x8>)
 80097ae:	f7ff bf9e 	b.w	80096ee <__retarget_lock_release_recursive>
 80097b2:	bf00      	nop
 80097b4:	20002174 	.word	0x20002174

080097b8 <_init>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr

080097c4 <_fini>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr
