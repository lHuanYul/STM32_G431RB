
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800c7a0  0800c7a0  0000d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8b4  0800c8b4  0000e28c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c8b4  0800c8b4  0000d8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8bc  0800c8bc  0000e28c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8bc  0800c8bc  0000d8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8c0  0800c8c0  0000d8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  0800c8c4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002308  2000028c  0800cb50  0000e28c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002594  0800cb50  0000e594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000314f6  00000000  00000000  0000e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000706a  00000000  00000000  0003f7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  00046820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc6  00000000  00000000  00048c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b15d  00000000  00000000  0004a83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034c49  00000000  00000000  0007599b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1712  00000000  00000000  000aa5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019bcf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009938  00000000  00000000  0019bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a5674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000028c 	.word	0x2000028c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c788 	.word	0x0800c788

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000290 	.word	0x20000290
 800021c:	0800c788 	.word	0x0800c788

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f00b fff7 	bl	800c558 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b47      	ldr	r3, [pc, #284]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b45      	ldr	r3, [pc, #276]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b43      	ldr	r3, [pc, #268]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b41      	ldr	r3, [pc, #260]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b40      	ldr	r3, [pc, #256]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b3e      	ldr	r3, [pc, #248]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b3d      	ldr	r3, [pc, #244]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b3a      	ldr	r3, [pc, #232]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80005a4:	4b38      	ldr	r3, [pc, #224]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b8:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005be:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c6:	4b30      	ldr	r3, [pc, #192]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	482c      	ldr	r0, [pc, #176]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005d6:	f003 fb4d 	bl	8003c74 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005e0:	f000 fbce 	bl	8000d80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ec:	4619      	mov	r1, r3
 80005ee:	4826      	ldr	r0, [pc, #152]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005f0:	f004 fac6 	bl	8004b80 <HAL_ADCEx_MultiModeConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005fa:	f000 fbc1 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <MX_ADC1_Init+0x140>)
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000602:	2306      	movs	r3, #6
 8000604:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060a:	237f      	movs	r3, #127	@ 0x7f
 800060c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060e:	2304      	movs	r3, #4
 8000610:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4619      	mov	r1, r3
 800061a:	481b      	ldr	r0, [pc, #108]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800061c:	f003 fd80 	bl	8004120 <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000626:	f000 fbab 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_ADC1_Init+0x144>)
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4814      	ldr	r0, [pc, #80]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000638:	f003 fd72 	bl	8004120 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fb9d 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_ADC1_Init+0x148>)
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800064a:	2312      	movs	r3, #18
 800064c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000654:	f003 fd64 	bl	8004120 <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800065e:	f000 fb8f 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_ADC1_Init+0x14c>)
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000666:	2318      	movs	r3, #24
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000670:	f003 fd56 	bl	8004120 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800067a:	f000 fb81 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	@ 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200002a8 	.word	0x200002a8
 800068c:	2e300800 	.word	0x2e300800
 8000690:	32601000 	.word	0x32601000
 8000694:	3ac04000 	.word	0x3ac04000
 8000698:	3ef08000 	.word	0x3ef08000

0800069c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09a      	sub	sp, #104	@ 0x68
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2244      	movs	r2, #68	@ 0x44
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f00b ff4b 	bl	800c558 <memset>
  if(adcHandle->Instance==ADC1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006ca:	d160      	bne.n	800078e <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fc57 	bl	8006f90 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006e8:	f000 fb4a 	bl	8000d80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 80006f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800071c:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000720:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800072e:	4619      	mov	r1, r3
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <HAL_ADC_MspInit+0x100>)
 8000732:	f005 fc67 	bl	8006004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <HAL_ADC_MspInit+0x108>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800073e:	2205      	movs	r2, #5
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800075a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800075e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000762:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000766:	2220      	movs	r2, #32
 8000768:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800076c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000770:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000772:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000774:	f004 fcc2 	bl	80050fc <HAL_DMA_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800077e:	f000 faff 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000786:	655a      	str	r2, [r3, #84]	@ 0x54
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800078e:	bf00      	nop
 8000790:	3768      	adds	r7, #104	@ 0x68
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400
 80007a0:	20000314 	.word	0x20000314
 80007a4:	40020408 	.word	0x40020408

080007a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ac:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <MX_FREERTOS_Init+0x38>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_FREERTOS_Init+0x3c>)
 80007b2:	f009 f832 	bl	800981a <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <MX_FREERTOS_Init+0x40>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 80007bc:	4a0b      	ldr	r2, [pc, #44]	@ (80007ec <MX_FREERTOS_Init+0x44>)
 80007be:	2100      	movs	r1, #0
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <MX_FREERTOS_Init+0x48>)
 80007c2:	f009 f82a 	bl	800981a <osThreadNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <MX_FREERTOS_Init+0x4c>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 80007cc:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <MX_FREERTOS_Init+0x50>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <MX_FREERTOS_Init+0x54>)
 80007d2:	f009 f822 	bl	800981a <osThreadNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a09      	ldr	r2, [pc, #36]	@ (8000800 <MX_FREERTOS_Init+0x58>)
 80007da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800c7d8 	.word	0x0800c7d8
 80007e4:	08001a11 	.word	0x08001a11
 80007e8:	20000374 	.word	0x20000374
 80007ec:	0800c7fc 	.word	0x0800c7fc
 80007f0:	08002f41 	.word	0x08002f41
 80007f4:	20000378 	.word	0x20000378
 80007f8:	0800c820 	.word	0x0800c820
 80007fc:	08001501 	.word	0x08001501
 8000800:	2000037c 	.word	0x2000037c

08000804 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_CORDIC_Init+0x20>)
 800080a:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <MX_CORDIC_Init+0x24>)
 800080c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_CORDIC_Init+0x20>)
 8000810:	f004 fa5a 	bl	8004cc8 <HAL_CORDIC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800081a:	f000 fab1 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000380 	.word	0x20000380
 8000828:	40020c00 	.word	0x40020c00

0800082c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a34      	ldr	r2, [pc, #208]	@ (800090c <HAL_CORDIC_MspInit+0xe0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d161      	bne.n	8000902 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <HAL_CORDIC_MspInit+0xe4>)
 8000840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000842:	4a33      	ldr	r2, [pc, #204]	@ (8000910 <HAL_CORDIC_MspInit+0xe4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6493      	str	r3, [r2, #72]	@ 0x48
 800084a:	4b31      	ldr	r3, [pc, #196]	@ (8000910 <HAL_CORDIC_MspInit+0xe4>)
 800084c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA2_Channel2;
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000858:	4a2f      	ldr	r2, [pc, #188]	@ (8000918 <HAL_CORDIC_MspInit+0xec>)
 800085a:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 800085c:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800085e:	2270      	movs	r2, #112	@ 0x70
 8000860:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087a:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800087e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000882:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8000890:	4820      	ldr	r0, [pc, #128]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000892:	f004 fc33 	bl	80050fc <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 800089c:	f000 fa70 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 80008a4:	61da      	str	r2, [r3, #28]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA2_Channel3;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <HAL_CORDIC_MspInit+0xf4>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008b4:	2271      	movs	r2, #113	@ 0x71
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008ba:	2210      	movs	r2, #16
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008c6:	2280      	movs	r2, #128	@ 0x80
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d8:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008e8:	f004 fc08 	bl	80050fc <HAL_DMA_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80008f2:	f000 fa45 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4a07      	ldr	r2, [pc, #28]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020c00 	.word	0x40020c00
 8000910:	40021000 	.word	0x40021000
 8000914:	200003a8 	.word	0x200003a8
 8000918:	4002041c 	.word	0x4002041c
 800091c:	20000408 	.word	0x20000408
 8000920:	40020430 	.word	0x40020430

08000924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_DMA_Init+0x70>)
 800092c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800092e:	4a19      	ldr	r2, [pc, #100]	@ (8000994 <MX_DMA_Init+0x70>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6493      	str	r3, [r2, #72]	@ 0x48
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_DMA_Init+0x70>)
 8000938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_DMA_Init+0x70>)
 8000944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000946:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <MX_DMA_Init+0x70>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6493      	str	r3, [r2, #72]	@ 0x48
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_DMA_Init+0x70>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2038      	movs	r0, #56	@ 0x38
 8000960:	f004 fba4 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000964:	2038      	movs	r0, #56	@ 0x38
 8000966:	f004 fbbb 	bl	80050e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2039      	movs	r0, #57	@ 0x39
 8000970:	f004 fb9c 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000974:	2039      	movs	r0, #57	@ 0x39
 8000976:	f004 fbb3 	bl	80050e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	203a      	movs	r0, #58	@ 0x3a
 8000980:	f004 fb94 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000984:	203a      	movs	r0, #58	@ 0x3a
 8000986:	f004 fbab 	bl	80050e0 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 800099e:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <MX_FDCAN1_Init+0x88>)
 80009a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009bc:	2200      	movs	r2, #0
 80009be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009c8:	2214      	movs	r2, #20
 80009ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009d4:	220e      	movs	r2, #14
 80009d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009da:	2202      	movs	r2, #2
 80009dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009ec:	220e      	movs	r2, #14
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 8000a0a:	f004 fe4b 	bl	80056a4 <HAL_FDCAN_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a14:	f000 f9b4 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000468 	.word	0x20000468
 8000a20:	40006400 	.word	0x40006400

08000a24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	@ 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2244      	movs	r2, #68	@ 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00b fd87 	bl	800c558 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <HAL_FDCAN_MspInit+0xcc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d149      	bne.n	8000ae8 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f006 fa93 	bl	8006f90 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a70:	f000 f986 	bl	8000d80 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a74:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a78:	4a1e      	ldr	r2, [pc, #120]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aa4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ab6:	2309      	movs	r3, #9
 8000ab8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac4:	f005 fa9e 	bl	8006004 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	2015      	movs	r0, #21
 8000ace:	f004 faed 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ad2:	2015      	movs	r0, #21
 8000ad4:	f004 fb04 	bl	80050e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2105      	movs	r1, #5
 8000adc:	2016      	movs	r0, #22
 8000ade:	f004 fae5 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ae2:	2016      	movs	r0, #22
 8000ae4:	f004 fafc 	bl	80050e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3768      	adds	r7, #104	@ 0x68
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40006400 	.word	0x40006400
 8000af4:	40021000 	.word	0x40021000

08000af8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a48      	ldr	r2, [pc, #288]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b46      	ldr	r3, [pc, #280]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b26:	4b43      	ldr	r3, [pc, #268]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a42      	ldr	r2, [pc, #264]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b40      	ldr	r3, [pc, #256]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b37      	ldr	r3, [pc, #220]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a36      	ldr	r2, [pc, #216]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b34      	ldr	r3, [pc, #208]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f005 fbc7 	bl	8006308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000b80:	482d      	ldr	r0, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0x140>)
 8000b82:	f005 fbc1 	bl	8006308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4827      	ldr	r0, [pc, #156]	@ (8000c3c <MX_GPIO_Init+0x144>)
 8000b9e:	f005 fa31 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f005 fa20 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f005 fa11 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000be2:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <MX_GPIO_Init+0x140>)
 8000bfc:	f005 fa02 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c06:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <MX_GPIO_Init+0x144>)
 8000c18:	f005 f9f4 	bl	8006004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2105      	movs	r1, #5
 8000c20:	2028      	movs	r0, #40	@ 0x28
 8000c22:	f004 fa43 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c26:	2028      	movs	r0, #40	@ 0x28
 8000c28:	f004 fa5a 	bl	80050e0 <HAL_NVIC_EnableIRQ>

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f002 fdc2 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f83a 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f7ff ff54 	bl	8000af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c50:	f7ff fe68 	bl	8000924 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fc7a 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000c58:	f7ff fe9e 	bl	8000998 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000c5c:	f000 f9b4 	bl	8000fc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c60:	f000 fa64 	bl	800112c <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000c64:	f7ff fdce 	bl	8000804 <MX_CORDIC_Init>
  MX_TIM3_Init();
 8000c68:	f000 fab6 	bl	80011d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c6c:	f008 fd76 	bl	800975c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c70:	f7ff fd9a 	bl	80007a8 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f002 fc31 	bl	80034dc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f002 fc63 	bl	8003548 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <main+0x7c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c88:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <main+0x7c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <main+0x7c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <main+0x7c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <main+0x7c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ca2:	4906      	ldr	r1, [pc, #24]	@ (8000cbc <main+0x7c>)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f002 fcdb 	bl	8003660 <BSP_COM_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <main+0x74>
  {
    Error_Handler();
 8000cb0:	f000 f866 	bl	8000d80 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f008 fd76 	bl	80097a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <main+0x78>
 8000cbc:	200004cc 	.word	0x200004cc

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	2238      	movs	r2, #56	@ 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00b fc42 	bl	800c558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f005 fb40 	bl	8006368 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2340      	movs	r3, #64	@ 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d02:	2355      	movs	r3, #85	@ 0x55
 8000d04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fbda 	bl	80064d0 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d22:	f000 f82d 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f005 fed8 	bl	8006af4 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d4a:	f000 f819 	bl	8000d80 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	@ 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6a:	f002 fd47 	bl	80037fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 fe3c 	bl	80019ec <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_MspInit+0x50>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	4a11      	ldr	r2, [pc, #68]	@ (8000ddc <HAL_MspInit+0x50>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_MspInit+0x50>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x50>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <HAL_MspInit+0x50>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_MspInit+0x50>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f004 f96f 	bl	80050ac <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dce:	f005 fb6f 	bl	80064b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 f844 	bl	8006ea0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e18:	f006 f816 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8000e1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xc8>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e2e:	4a20      	ldr	r2, [pc, #128]	@ (8000eb0 <HAL_InitTick+0xd0>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e4e:	f006 fa8f 	bl	8007370 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d11b      	bne.n	8000e98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e62:	f006 fae7 	bl	8007434 <HAL_TIM_Base_Start_IT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d111      	bne.n	8000e98 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e74:	2036      	movs	r0, #54	@ 0x36
 8000e76:	f004 f933 	bl	80050e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d808      	bhi.n	8000e92 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2036      	movs	r0, #54	@ 0x36
 8000e86:	f004 f911 	bl	80050ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_InitTick+0xd4>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e002      	b.n	8000e98 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3730      	adds	r7, #48	@ 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	200004dc 	.word	0x200004dc
 8000eb0:	40001000 	.word	0x40001000
 8000eb4:	20000230 	.word	0x20000230

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <FDCAN1_IT0_IRQHandler+0x10>)
 8000ef6:	f004 febf 	bl	8005c78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000468 	.word	0x20000468

08000f04 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f0a:	f004 feb5 	bl	8005c78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000468 	.word	0x20000468

08000f18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f1e:	f006 fd37 	bl	8007990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000528 	.word	0x20000528

08000f2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f34:	f005 fa00 	bl	8006338 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f3c:	f005 f9fc 	bl	8006338 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f40:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f44:	f005 f9f8 	bl	8006338 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f002 fb6b 	bl	8003624 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <TIM6_DAC_IRQHandler+0x10>)
 8000f5a:	f006 fd19 	bl	8007990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200004dc 	.word	0x200004dc

08000f68 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA2_Channel1_IRQHandler+0x10>)
 8000f6e:	f004 f9e8 	bl	8005342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000314 	.word	0x20000314

08000f7c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <DMA2_Channel2_IRQHandler+0x10>)
 8000f82:	f004 f9de 	bl	8005342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200003a8 	.word	0x200003a8

08000f90 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <DMA2_Channel3_IRQHandler+0x10>)
 8000f96:	f004 f9d4 	bl	8005342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000408 	.word	0x20000408

08000fa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	@ 0x60
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2234      	movs	r2, #52	@ 0x34
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00b faaf 	bl	800c558 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8000ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8001128 <MX_TIM1_Init+0x160>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001000:	4b48      	ldr	r3, [pc, #288]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001002:	2210      	movs	r2, #16
 8001004:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001008:	2220      	movs	r2, #32
 800100a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 800100c:	4b45      	ldr	r3, [pc, #276]	@ (8001124 <MX_TIM1_Init+0x15c>)
 800100e:	22fa      	movs	r2, #250	@ 0xfa
 8001010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001018:	4b42      	ldr	r3, [pc, #264]	@ (8001124 <MX_TIM1_Init+0x15c>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001024:	483f      	ldr	r0, [pc, #252]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001026:	f006 fac6 	bl	80075b6 <HAL_TIM_PWM_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001030:	f7ff fea6 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8001038:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001046:	4619      	mov	r1, r3
 8001048:	4836      	ldr	r0, [pc, #216]	@ (8001124 <MX_TIM1_Init+0x15c>)
 800104a:	f007 fc71 	bl	8008930 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001054:	f7ff fe94 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001058:	2360      	movs	r3, #96	@ 0x60
 800105a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001060:	2302      	movs	r3, #2
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001064:	2300      	movs	r3, #0
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800106c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001070:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001076:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	4829      	ldr	r0, [pc, #164]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001080:	f006 fe50 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800108a:	f7ff fe79 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800108e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001092:	2204      	movs	r2, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4823      	ldr	r0, [pc, #140]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001098:	f006 fe44 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80010a2:	f7ff fe6d 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010aa:	2208      	movs	r2, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	481d      	ldr	r0, [pc, #116]	@ (8001124 <MX_TIM1_Init+0x15c>)
 80010b0:	f006 fe38 	bl	8007d24 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010ba:	f7ff fe61 	bl	8000d80 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80010be:	4819      	ldr	r0, [pc, #100]	@ (8001124 <MX_TIM1_Init+0x15c>)
 80010c0:	f007 fd44 	bl	8008b4c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80010c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80010ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80010d4:	2322      	movs	r3, #34	@ 0x22
 80010d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001106:	f007 fc95 	bl	8008a34 <HAL_TIMEx_ConfigBreakDeadTime>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001110:	f7ff fe36 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <MX_TIM1_Init+0x15c>)
 8001116:	f000 f90f 	bl	8001338 <HAL_TIM_MspPostInit>

}
 800111a:	bf00      	nop
 800111c:	3760      	adds	r7, #96	@ 0x60
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000528 	.word	0x20000528
 8001128:	40012c00 	.word	0x40012c00

0800112c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 8001152:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 8001166:	f04f 32ff 	mov.w	r2, #4294967295
 800116a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001178:	4816      	ldr	r0, [pc, #88]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 800117a:	f006 f9c5 	bl	8007508 <HAL_TIM_OC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001184:	f7ff fdfc 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	480f      	ldr	r0, [pc, #60]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 8001198:	f007 fbca 	bl	8008930 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011a2:	f7ff fded 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_TIM2_Init+0xa8>)
 80011be:	f006 fd37 	bl	8007c30 <HAL_TIM_OC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011c8:	f7ff fdda 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000574 	.word	0x20000574

080011d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <MX_TIM3_Init+0xa8>)
 80011fe:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <MX_TIM3_Init+0xac>)
 8001200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PSC;
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_TIM3_Init+0xa8>)
 8001204:	2210      	movs	r2, #16
 8001206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_TIM3_Init+0xa8>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_TIM3_Init+0xa8>)
 8001210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_TIM3_Init+0xa8>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_TIM3_Init+0xa8>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001222:	4817      	ldr	r0, [pc, #92]	@ (8001280 <MX_TIM3_Init+0xa8>)
 8001224:	f006 f970 	bl	8007508 <HAL_TIM_OC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800122e:	f7ff fda7 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	480f      	ldr	r0, [pc, #60]	@ (8001280 <MX_TIM3_Init+0xa8>)
 8001242:	f007 fb75 	bl	8008930 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800124c:	f7ff fd98 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <MX_TIM3_Init+0xa8>)
 8001268:	f006 fce2 	bl	8007c30 <HAL_TIM_OC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001272:	f7ff fd85 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200005c0 	.word	0x200005c0
 8001284:	40000400 	.word	0x40000400

08001288 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <HAL_TIM_PWM_MspInit+0x44>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d113      	bne.n	80012c2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <HAL_TIM_PWM_MspInit+0x48>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <HAL_TIM_PWM_MspInit+0x48>)
 80012a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_TIM_PWM_MspInit+0x48>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2019      	movs	r0, #25
 80012b8:	f003 fef8 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012bc:	2019      	movs	r0, #25
 80012be:	f003 ff0f 	bl	80050e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e4:	d10c      	bne.n	8001300 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_TIM_OC_MspInit+0x5c>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <HAL_TIM_OC_MspInit+0x5c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <HAL_TIM_OC_MspInit+0x5c>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012fe:	e010      	b.n	8001322 <HAL_TIM_OC_MspInit+0x4e>
  else if(tim_ocHandle->Instance==TIM3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <HAL_TIM_OC_MspInit+0x60>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10b      	bne.n	8001322 <HAL_TIM_OC_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_TIM_OC_MspInit+0x5c>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_TIM_OC_MspInit+0x5c>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6593      	str	r3, [r2, #88]	@ 0x58
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_TIM_OC_MspInit+0x5c>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	40000400 	.word	0x40000400

08001338 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a28      	ldr	r2, [pc, #160]	@ (80013f8 <HAL_TIM_MspPostInit+0xc0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d149      	bne.n	80013ee <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_TIM_MspPostInit+0xc4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a27      	ldr	r2, [pc, #156]	@ (80013fc <HAL_TIM_MspPostInit+0xc4>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <HAL_TIM_MspPostInit+0xc4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <HAL_TIM_MspPostInit+0xc4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <HAL_TIM_MspPostInit+0xc4>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <HAL_TIM_MspPostInit+0xc4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800138a:	2307      	movs	r3, #7
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800139a:	2302      	movs	r3, #2
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4816      	ldr	r0, [pc, #88]	@ (8001400 <HAL_TIM_MspPostInit+0xc8>)
 80013a6:	f004 fe2d 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80013aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013bc:	2306      	movs	r3, #6
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480f      	ldr	r0, [pc, #60]	@ (8001404 <HAL_TIM_MspPostInit+0xcc>)
 80013c8:	f004 fe1c 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80013de:	2304      	movs	r3, #4
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4806      	ldr	r0, [pc, #24]	@ (8001404 <HAL_TIM_MspPostInit+0xcc>)
 80013ea:	f004 fe0b 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800
 8001404:	48000400 	.word	0x48000400

08001408 <average>:
//     }
//     return RESULT_OK(NULL);
// }

static void average(uint8_t adc_id, float32_t *adc_store)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
    uint16_t i;
    float32_t total = 0;
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	81fb      	strh	r3, [r7, #14]
 800141e:	e013      	b.n	8001448 <average+0x40>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	009a      	lsls	r2, r3, #2
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4413      	add	r3, r2
 8001428:	4a10      	ldr	r2, [pc, #64]	@ (800146c <average+0x64>)
 800142a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001436:	ed97 7a02 	vldr	s14, [r7, #8]
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	edc7 7a02 	vstr	s15, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001442:	89fb      	ldrh	r3, [r7, #14]
 8001444:	3301      	adds	r3, #1
 8001446:	81fb      	strh	r3, [r7, #14]
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	2b10      	cmp	r3, #16
 800144c:	d9e8      	bls.n	8001420 <average+0x18>
    }
    *adc_store = total / (float32_t)ADC_NEED_LEN;
 800144e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001452:	eef3 6a01 	vmov.f32	s13, #49	@ 0x41880000  17.0
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	edc3 7a00 	vstr	s15, [r3]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	2000060c 	.word	0x2000060c

08001470 <adc_renew>:
{
    *adc_store += ALPHA * ((float32_t)ADC_Values[adc_id] - *adc_store);
}

Result adc_renew(ADC_OWN *adc, float32_t *current)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
    average(adc->const_h.id, &adc->value);
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3310      	adds	r3, #16
 8001484:	4619      	mov	r1, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f7ff ffbe 	bl	8001408 <average>
    *current = (adc->value - adc->zero) * adc->current_trs;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	edd3 7a03 	vldr	s15, [r3, #12]
 8001498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
}
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <adc_init>:

#define ADC_TO_VOL (3.3f/4095.0f)
#define VOL_SEP (2.0f/3.0f)
#define ADC_TRANS ADC_TO_VOL/VOL_SEP
static void adc_init(ADC_OWN *adc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    adc->current_trs = ADC_TRANS / adc->const_h.sensitive;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ce:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80014fc <adc_init+0x3c>
 80014d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edc3 7a02 	vstr	s15, [r3, #8]
    average(adc->const_h.id, &adc->value);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3310      	adds	r3, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff ff8e 	bl	8001408 <average>
    adc->zero = adc->value;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	3a9e704d 	.word	0x3a9e704d

08001500 <StartAdcTask>:

bool adc_ready = 0;
float32_t current_h[3];
void StartAdcTask(void *argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    ERROR_CHECK_HAL_HANDLE(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN));
 8001508:	2244      	movs	r2, #68	@ 0x44
 800150a:	4933      	ldr	r1, [pc, #204]	@ (80015d8 <StartAdcTask+0xd8>)
 800150c:	4833      	ldr	r0, [pc, #204]	@ (80015dc <StartAdcTask+0xdc>)
 800150e:	f002 fd35 	bl	8003f7c <HAL_ADC_Start_DMA>
 8001512:	4603      	mov	r3, r0
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <StartAdcTask+0x2c>
 8001520:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <StartAdcTask+0xe0>)
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	f7ff fc2a 	bl	8000d80 <Error_Handler>
    for(;;)
    {
        RESULT_CHECK_HANDLE(adc_renew(&adc_u, &current_h[0]));
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4a2c      	ldr	r2, [pc, #176]	@ (80015e4 <StartAdcTask+0xe4>)
 8001532:	492d      	ldr	r1, [pc, #180]	@ (80015e8 <StartAdcTask+0xe8>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff9b 	bl	8001470 <adc_renew>
 800153a:	7f3b      	ldrb	r3, [r7, #28]
 800153c:	f083 0301 	eor.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <StartAdcTask+0x52>
 8001546:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <StartAdcTask+0xe0>)
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	f7ff fc17 	bl	8000d80 <Error_Handler>
        RESULT_CHECK_HANDLE(adc_renew(&adc_v, &current_h[1]));
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4a25      	ldr	r2, [pc, #148]	@ (80015ec <StartAdcTask+0xec>)
 8001558:	4925      	ldr	r1, [pc, #148]	@ (80015f0 <StartAdcTask+0xf0>)
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff88 	bl	8001470 <adc_renew>
 8001560:	7d3b      	ldrb	r3, [r7, #20]
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <StartAdcTask+0x78>
 800156c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <StartAdcTask+0xe0>)
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	f7ff fc04 	bl	8000d80 <Error_Handler>
        RESULT_CHECK_HANDLE(adc_renew(&adc_w, &current_h[2]));
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <StartAdcTask+0xf4>)
 800157e:	491e      	ldr	r1, [pc, #120]	@ (80015f8 <StartAdcTask+0xf8>)
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff75 	bl	8001470 <adc_renew>
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <StartAdcTask+0x9e>
 8001592:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <StartAdcTask+0xe0>)
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	f7ff fbf1 	bl	8000d80 <Error_Handler>
        if (!adc_ready && HAL_GetTick() >= 1000)
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <StartAdcTask+0xfc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d011      	beq.n	80015d0 <StartAdcTask+0xd0>
 80015ac:	f002 f938 	bl	8003820 <HAL_GetTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b6:	d30b      	bcc.n	80015d0 <StartAdcTask+0xd0>
        {
            adc_ready = 1;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <StartAdcTask+0xfc>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
            adc_init(&adc_u);
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <StartAdcTask+0xe8>)
 80015c0:	f7ff ff7e 	bl	80014c0 <adc_init>
            adc_init(&adc_v);
 80015c4:	480a      	ldr	r0, [pc, #40]	@ (80015f0 <StartAdcTask+0xf0>)
 80015c6:	f7ff ff7b 	bl	80014c0 <adc_init>
            adc_init(&adc_w);
 80015ca:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <StartAdcTask+0xf8>)
 80015cc:	f7ff ff78 	bl	80014c0 <adc_init>
        }
        osDelay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f008 f9bb 	bl	800994c <osDelay>
        RESULT_CHECK_HANDLE(adc_renew(&adc_u, &current_h[0]));
 80015d6:	e7a9      	b.n	800152c <StartAdcTask+0x2c>
 80015d8:	2000060c 	.word	0x2000060c
 80015dc:	200002a8 	.word	0x200002a8
 80015e0:	20000980 	.word	0x20000980
 80015e4:	20000698 	.word	0x20000698
 80015e8:	20000004 	.word	0x20000004
 80015ec:	2000069c 	.word	0x2000069c
 80015f0:	20000018 	.word	0x20000018
 80015f4:	200006a0 	.word	0x200006a0
 80015f8:	2000002c 	.word	0x2000002c
 80015fc:	20000694 	.word	0x20000694

08001600 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	429a      	cmp	r2, r3
 8001618:	d308      	bcc.n	800162c <fdcan_pkt_get_byte+0x2c>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	461a      	mov	r2, r3
 800161e:	2300      	movs	r3, #0
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	6053      	str	r3, [r2, #4]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2208      	movs	r2, #8
 8001628:	711a      	strb	r2, [r3, #4]
 800162a:	e00b      	b.n	8001644 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	791a      	ldrb	r2, [r3, #4]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	605a      	str	r2, [r3, #4]
}
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	3724      	adds	r7, #36	@ 0x24
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <fdcan_pkt_pool_alloc+0x64>)
 800165a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	461a      	mov	r2, r3
 8001666:	2300      	movs	r3, #0
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	6053      	str	r3, [r2, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2205      	movs	r2, #5
 8001670:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 8001672:	e019      	b.n	80016a8 <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <fdcan_pkt_pool_alloc+0x64>)
 8001676:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800167a:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	4a0c      	ldr	r2, [pc, #48]	@ (80016b4 <fdcan_pkt_pool_alloc+0x64>)
 8001682:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <fdcan_pkt_pool_alloc+0x64>)
 800168e:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001692:	3b01      	subs	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <fdcan_pkt_pool_alloc+0x64>)
 8001698:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	605a      	str	r2, [r3, #4]
}
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	3724      	adds	r7, #36	@ 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	200006a4 	.word	0x200006a4

080016b8 <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3304      	adds	r3, #4
 80016c4:	2208      	movs	r2, #8
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a ff45 	bl	800c558 <memset>
    pkt->len = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <fdcan_pkt_pool_free+0x48>)
 80016d6:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <fdcan_pkt_pool_free+0x48>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <fdcan_pkt_pool_free+0x48>)
 80016e8:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <fdcan_pkt_pool_free+0x48>)
 80016f2:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200006a4 	.word	0x200006a4

08001704 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	@ 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d308      	bcc.n	800172e <fdcan_pkt_buf_push+0x2a>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	461a      	mov	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	6053      	str	r3, [r2, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2207      	movs	r2, #7
 800172a:	711a      	strb	r2, [r3, #4]
 800172c:	e01e      	b.n	800176c <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4413      	add	r3, r2
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	68d2      	ldr	r2, [r2, #12]
 800173c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001740:	fb01 f202 	mul.w	r2, r1, r2
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
    self->len++;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	605a      	str	r2, [r3, #4]
}
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	372c      	adds	r7, #44	@ 0x2c
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_FDCAN_ErrorStatusCallback+0x30>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d107      	bne.n	800179a <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_FDCAN_ErrorStatusCallback+0x34>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000468 	.word	0x20000468
 80017ac:	2000092c 	.word	0x2000092c

080017b0 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f004 f9cc 	bl	8005b68 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 80017da:	f7ff fad1 	bl	8000d80 <Error_Handler>
    }
}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	@ 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_FDCAN_RxFifo0Callback+0xcc>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff1b 	bl	8001650 <fdcan_pkt_pool_alloc>
 800181a:	7e3b      	ldrb	r3, [r7, #24]
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x36>
 8001826:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800182a:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	f7ff faa7 	bl	8000d80 <Error_Handler>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	3304      	adds	r3, #4
 800183a:	4a26      	ldr	r2, [pc, #152]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800183c:	2140      	movs	r1, #64	@ 0x40
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f004 f88a 	bl	8005958 <HAL_FDCAN_GetRxMessage>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800184a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_FDCAN_RxFifo0Callback+0x62>
 8001852:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	f7ff fa91 	bl	8000d80 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b1f      	cmp	r3, #31
 8001876:	d90c      	bls.n	8001892 <HAL_FDCAN_RxFifo0Callback+0x96>
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b21      	cmp	r3, #33	@ 0x21
 800187e:	d808      	bhi.n	8001892 <HAL_FDCAN_RxFifo0Callback+0x96>
        {
            instant_recv_proc(pkt);
 8001880:	463b      	mov	r3, r7
 8001882:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f849 	bl	800191c <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 800188a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800188c:	f7ff ff14 	bl	80016b8 <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001890:	e01a      	b.n	80018c8 <HAL_FDCAN_RxFifo0Callback+0xcc>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b21      	cmp	r3, #33	@ 0x21
 8001898:	d916      	bls.n	80018c8 <HAL_FDCAN_RxFifo0Callback+0xcc>
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b23      	cmp	r3, #35	@ 0x23
 80018a0:	d812      	bhi.n	80018c8 <HAL_FDCAN_RxFifo0Callback+0xcc>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a8:	490b      	ldr	r1, [pc, #44]	@ (80018d8 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff2a 	bl	8001704 <fdcan_pkt_buf_push>
 80018b0:	7c3b      	ldrb	r3, [r7, #16]
 80018b2:	f083 0301 	eor.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_FDCAN_RxFifo0Callback+0xcc>
 80018bc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	f7ff fa5c 	bl	8000d80 <Error_Handler>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000980 	.word	0x20000980
 80018d4:	20000958 	.word	0x20000958
 80018d8:	20000040 	.word	0x20000040

080018dc <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b087      	sub	sp, #28
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	461a      	mov	r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	6053      	str	r3, [r2, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2208      	movs	r2, #8
 800190e:	711a      	strb	r2, [r3, #4]
}
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 8001926:	f107 001c 	add.w	r0, r7, #28
 800192a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800192e:	2200      	movs	r2, #0
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	f7ff fe65 	bl	8001600 <fdcan_pkt_get_byte>
 8001936:	7f3b      	ldrb	r3, [r7, #28]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <instant_recv_proc+0x40>
 8001942:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <instant_recv_proc+0x8c>)
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	461a      	mov	r2, r3
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001956:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 800195a:	e021      	b.n	80019a0 <instant_recv_proc+0x84>
    switch (code)
 800195c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001960:	2b11      	cmp	r3, #17
 8001962:	d002      	beq.n	800196a <instant_recv_proc+0x4e>
 8001964:	2b12      	cmp	r3, #18
 8001966:	d00a      	beq.n	800197e <instant_recv_proc+0x62>
 8001968:	e013      	b.n	8001992 <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <instant_recv_proc+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	e010      	b.n	80019a0 <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <instant_recv_proc+0x90>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	e006      	b.n	80019a0 <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 8001992:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6839      	ldr	r1, [r7, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ffa9 	bl	80018f2 <instant_recv_proc_inner>
}
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	3728      	adds	r7, #40	@ 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000980 	.word	0x20000980
 80019ac:	2000092d 	.word	0x2000092d

080019b0 <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/main.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
    if (
           (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[0])
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80019bc:	899b      	ldrh	r3, [r3, #12]
    if (
 80019be:	88fa      	ldrh	r2, [r7, #6]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d009      	beq.n	80019d8 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[1])
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80019c6:	89db      	ldrh	r3, [r3, #14]
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d004      	beq.n	80019d8 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[2])
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80019d0:	8a1b      	ldrh	r3, [r3, #16]
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d102      	bne.n	80019de <HAL_GPIO_EXTI_Callback+0x2e>
    ) {
        motor_hall_exti(&motor_h);
 80019d8:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80019da:	f001 f9fd 	bl	8002dd8 <motor_hall_exti>
    }
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000050 	.word	0x20000050

080019ec <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    if (htim == motor_h.const_h.htimx)
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d102      	bne.n	8001a04 <HAL_TIM_PeriodElapsedCallback_OWN+0x18>
    {
        motor_pwm_pulse(&motor_h);
 80019fe:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001a00:	f001 fa86 	bl	8002f10 <motor_pwm_pulse>
    }
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000050 	.word	0x20000050

08001a10 <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8001a18:	2332      	movs	r3, #50	@ 0x32
 8001a1a:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8001a1c:	f007 fee8 	bl	80097f0 <osKernelGetTickCount>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4413      	add	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001a28:	f001 fefa 	bl	8003820 <HAL_GetTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <StartDefaultTask+0x34>)
 8001a30:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f007 ffa5 	bl	8009982 <osDelayUntil>
        next_wake += osPeriod;
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8001a40:	bf00      	nop
 8001a42:	e7f1      	b.n	8001a28 <StartDefaultTask+0x18>
 8001a44:	20000984 	.word	0x20000984

08001a48 <motor_hall_to_angle>:
    },
    .pwm_it_angle_acc = 0.0f,
};

inline Result motor_hall_to_angle(uint8_t hall, volatile float32_t *angle)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	460b      	mov	r3, r1
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d827      	bhi.n	8001aae <motor_hall_to_angle+0x66>
 8001a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <motor_hall_to_angle+0x1c>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a97 	.word	0x08001a97
 8001a68:	08001a87 	.word	0x08001a87
 8001a6c:	08001a8f 	.word	0x08001a8f
 8001a70:	08001aa7 	.word	0x08001aa7
 8001a74:	08001a9f 	.word	0x08001a9f
 8001a78:	08001a7d 	.word	0x08001a7d
    {
        case 6:
        {
            *angle = 0.0f * DEG_TO_RAD;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
            break;
 8001a84:	e01c      	b.n	8001ac0 <motor_hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 60.0f * DEG_TO_RAD;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a13      	ldr	r2, [pc, #76]	@ (8001ad8 <motor_hall_to_angle+0x90>)
 8001a8a:	601a      	str	r2, [r3, #0]
            break;
 8001a8c:	e018      	b.n	8001ac0 <motor_hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 120.0f * DEG_TO_RAD;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <motor_hall_to_angle+0x94>)
 8001a92:	601a      	str	r2, [r3, #0]
            break;
 8001a94:	e014      	b.n	8001ac0 <motor_hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 180.0f * DEG_TO_RAD;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <motor_hall_to_angle+0x98>)
 8001a9a:	601a      	str	r2, [r3, #0]
            break;
 8001a9c:	e010      	b.n	8001ac0 <motor_hall_to_angle+0x78>
        }
        case 5:
        {
            *angle = 240.0f * DEG_TO_RAD;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a10      	ldr	r2, [pc, #64]	@ (8001ae4 <motor_hall_to_angle+0x9c>)
 8001aa2:	601a      	str	r2, [r3, #0]
            break;
 8001aa4:	e00c      	b.n	8001ac0 <motor_hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 300.0f * DEG_TO_RAD;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <motor_hall_to_angle+0xa0>)
 8001aaa:	601a      	str	r2, [r3, #0]
            break;
 8001aac:	e008      	b.n	8001ac0 <motor_hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	6053      	str	r3, [r2, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2208      	movs	r2, #8
 8001abc:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 8001abe:	e005      	b.n	8001acc <motor_hall_to_angle+0x84>
    return RESULT_OK(NULL);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
}
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	3724      	adds	r7, #36	@ 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	3f860a92 	.word	0x3f860a92
 8001adc:	40060a92 	.word	0x40060a92
 8001ae0:	40490fdb 	.word	0x40490fdb
 8001ae4:	40860a92 	.word	0x40860a92
 8001ae8:	40a78d36 	.word	0x40a78d36

08001aec <clampf>:

inline float32_t clampf(float32_t val, float32_t min, float32_t max)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001af6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001afa:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val > max) return max;
 8001afe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	dd01      	ble.n	8001b14 <clampf+0x28>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	e00b      	b.n	8001b2c <clampf+0x40>
    if (val < min) return min;
 8001b14:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	d501      	bpl.n	8001b2a <clampf+0x3e>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	e000      	b.n	8001b2c <clampf+0x40>
    return val;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb0 0a67 	vmov.f32	s0, s15
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <wrap_0_2pi>:

inline float32_t wrap_0_2pi(float32_t x)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001b4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b4e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001bb0 <wrap_0_2pi+0x70>
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5a:	ee17 3a90 	vmov	r3, s15
 8001b5e:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001bb0 <wrap_0_2pi+0x70>
 8001b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b72:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7a:	edc7 7a01 	vstr	s15, [r7, #4]
    if (x < 0) x += MUL_2_PI;
 8001b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	d507      	bpl.n	8001b9c <wrap_0_2pi+0x5c>
 8001b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b90:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001bb0 <wrap_0_2pi+0x70>
 8001b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b98:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	ee07 3a90 	vmov	s15, r3
}
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40c90fdb 	.word	0x40c90fdb

08001bb4 <wrap_m1_1pi>:

inline float32_t wrap_m1_1pi(float32_t x)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001bbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001c4c <wrap_m1_1pi+0x98>
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	ee17 3a90 	vmov	r3, s15
 8001bd2:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bde:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c4c <wrap_m1_1pi+0x98>
 8001be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	edc7 7a01 	vstr	s15, [r7, #4]
    if      (x < -PI) x += MUL_2_PI;
 8001bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001c50 <wrap_m1_1pi+0x9c>
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d508      	bpl.n	8001c16 <wrap_m1_1pi+0x62>
 8001c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c08:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001c4c <wrap_m1_1pi+0x98>
 8001c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c10:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c14:	e010      	b.n	8001c38 <wrap_m1_1pi+0x84>
    else if (x >= PI) x -= MUL_2_PI;
 8001c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001c54 <wrap_m1_1pi+0xa0>
 8001c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	db07      	blt.n	8001c38 <wrap_m1_1pi+0x84>
 8001c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c2c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001c4c <wrap_m1_1pi+0x98>
 8001c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c34:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	ee07 3a90 	vmov	s15, r3
}
 8001c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40c90fdb 	.word	0x40c90fdb
 8001c50:	c0490fdb 	.word	0xc0490fdb
 8001c54:	40490fdb 	.word	0x40490fdb

08001c58 <fast_fabsf>:

inline float32_t fast_fabsf(float32_t x)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	ed87 0a01 	vstr	s0, [r7, #4]
    union {
        float32_t f;
        uint32_t u;
    } v = { x };
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
    v.u &= 0x7FFFFFFF;  // 清除最高位 sign bit
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c6c:	60fb      	str	r3, [r7, #12]
    return v.f;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	ee07 3a90 	vmov	s15, r3
}
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <CLARKE_run_ideal>:
#include "motor/clarke.h"
#include "motor/basic.h"

inline void CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    clarke->Alpha = clarke->As;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001cc4 <CLARKE_run_ideal+0x40>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	3f13cd3a 	.word	0x3f13cd3a

08001cc8 <motor_120_hall_update>:
};
static const uint8_t motor_seq_index[] = {0xFF, 5, 3, 4, 1, 0, 2, 0xFF};

// 120 deg cntrol
void motor_120_hall_update(const MotorParameter *motor)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    uint8_t idx = motor_seq_index[motor->exti_hall_curt];
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b86      	ldr	r3, [pc, #536]	@ (8001ef4 <motor_120_hall_update+0x22c>)
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	73fb      	strb	r3, [r7, #15]
    if (motor->reverse) idx = (idx + 3) % 6; // CCW
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <motor_120_hall_update+0x3e>
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	1cda      	adds	r2, r3, #3
 8001cee:	4b82      	ldr	r3, [pc, #520]	@ (8001ef8 <motor_120_hall_update+0x230>)
 8001cf0:	fb83 3102 	smull	r3, r1, r3, r2
 8001cf4:	17d3      	asrs	r3, r2, #31
 8001cf6:	1ac9      	subs	r1, r1, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	440b      	add	r3, r1
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	1ad1      	subs	r1, r2, r3
 8001d02:	460b      	mov	r3, r1
 8001d04:	73fb      	strb	r3, [r7, #15]
    // idx = 5;
    uint8_t i;
    uint32_t compare = (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8001d0c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001efc <motor_120_hall_update+0x234>
 8001d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d18:	ee17 3a90 	vmov	r3, s15
 8001d1c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73bb      	strb	r3, [r7, #14]
 8001d22:	e0dd      	b.n	8001ee0 <motor_120_hall_update+0x218>
    {
        switch (motor_seq_map[idx][i])
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	7bb9      	ldrb	r1, [r7, #14]
 8001d28:	4875      	ldr	r0, [pc, #468]	@ (8001f00 <motor_120_hall_update+0x238>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	4403      	add	r3, r0
 8001d32:	440b      	add	r3, r1
 8001d34:	f993 3000 	ldrsb.w	r3, [r3]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d05d      	beq.n	8001dfa <motor_120_hall_update+0x132>
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	f040 80b6 	bne.w	8001eb0 <motor_120_hall_update+0x1e8>
        {
            case HIGH_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], compare);
 8001d44:	7bba      	ldrb	r2, [r7, #14]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3206      	adds	r2, #6
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <motor_120_hall_update+0x96>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d5c:	e038      	b.n	8001dd0 <motor_120_hall_update+0x108>
 8001d5e:	7bba      	ldrb	r2, [r7, #14]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3206      	adds	r2, #6
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d105      	bne.n	8001d78 <motor_120_hall_update+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d76:	e02b      	b.n	8001dd0 <motor_120_hall_update+0x108>
 8001d78:	7bba      	ldrb	r2, [r7, #14]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3206      	adds	r2, #6
 8001d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d105      	bne.n	8001d92 <motor_120_hall_update+0xca>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d90:	e01e      	b.n	8001dd0 <motor_120_hall_update+0x108>
 8001d92:	7bba      	ldrb	r2, [r7, #14]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3206      	adds	r2, #6
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d105      	bne.n	8001dac <motor_120_hall_update+0xe4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	e011      	b.n	8001dd0 <motor_120_hall_update+0x108>
 8001dac:	7bba      	ldrb	r2, [r7, #14]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3206      	adds	r2, #6
 8001db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d105      	bne.n	8001dc6 <motor_120_hall_update+0xfe>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dc4:	e004      	b.n	8001dd0 <motor_120_hall_update+0x108>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6958      	ldr	r0, [r3, #20]
 8001dd4:	7bba      	ldrb	r2, [r7, #14]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3206      	adds	r2, #6
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f005 fc40 	bl	8007664 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6958      	ldr	r0, [r3, #20]
 8001de8:	7bba      	ldrb	r2, [r7, #14]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3206      	adds	r2, #6
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	4619      	mov	r1, r3
 8001df4:	f006 fd3e 	bl	8008874 <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001df8:	e06f      	b.n	8001eda <motor_120_hall_update+0x212>
            }
            case LOW_PASS:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6958      	ldr	r0, [r3, #20]
 8001dfe:	7bba      	ldrb	r2, [r7, #14]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3206      	adds	r2, #6
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f005 fd2b 	bl	8007864 <HAL_TIM_PWM_Stop>
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], TIM1_ARR);
 8001e0e:	7bba      	ldrb	r2, [r7, #14]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3206      	adds	r2, #6
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <motor_120_hall_update+0x160>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	22fa      	movs	r2, #250	@ 0xfa
 8001e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e26:	e038      	b.n	8001e9a <motor_120_hall_update+0x1d2>
 8001e28:	7bba      	ldrb	r2, [r7, #14]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3206      	adds	r2, #6
 8001e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d105      	bne.n	8001e42 <motor_120_hall_update+0x17a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	23fa      	movs	r3, #250	@ 0xfa
 8001e3e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e40:	e02b      	b.n	8001e9a <motor_120_hall_update+0x1d2>
 8001e42:	7bba      	ldrb	r2, [r7, #14]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3206      	adds	r2, #6
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d105      	bne.n	8001e5c <motor_120_hall_update+0x194>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	23fa      	movs	r3, #250	@ 0xfa
 8001e58:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e5a:	e01e      	b.n	8001e9a <motor_120_hall_update+0x1d2>
 8001e5c:	7bba      	ldrb	r2, [r7, #14]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3206      	adds	r2, #6
 8001e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d105      	bne.n	8001e76 <motor_120_hall_update+0x1ae>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	23fa      	movs	r3, #250	@ 0xfa
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e74:	e011      	b.n	8001e9a <motor_120_hall_update+0x1d2>
 8001e76:	7bba      	ldrb	r2, [r7, #14]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3206      	adds	r2, #6
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d105      	bne.n	8001e90 <motor_120_hall_update+0x1c8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	23fa      	movs	r3, #250	@ 0xfa
 8001e8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e8e:	e004      	b.n	8001e9a <motor_120_hall_update+0x1d2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	23fa      	movs	r3, #250	@ 0xfa
 8001e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6958      	ldr	r0, [r3, #20]
 8001e9e:	7bba      	ldrb	r2, [r7, #14]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3206      	adds	r2, #6
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f006 fc2f 	bl	800870c <HAL_TIMEx_PWMN_Start>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_SET);
                break;
 8001eae:	e014      	b.n	8001eda <motor_120_hall_update+0x212>
            }
            default:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6958      	ldr	r0, [r3, #20]
 8001eb4:	7bba      	ldrb	r2, [r7, #14]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3206      	adds	r2, #6
 8001eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f005 fcd0 	bl	8007864 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6958      	ldr	r0, [r3, #20]
 8001ec8:	7bba      	ldrb	r2, [r7, #14]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3206      	adds	r2, #6
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f006 fcce 	bl	8008874 <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001ed8:	bf00      	nop
    for (i = 0; i < 3; i++)
 8001eda:	7bbb      	ldrb	r3, [r7, #14]
 8001edc:	3301      	adds	r3, #1
 8001ede:	73bb      	strb	r3, [r7, #14]
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	f67f af1e 	bls.w	8001d24 <motor_120_hall_update+0x5c>
            }
        }
    }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	0800c880 	.word	0x0800c880
 8001ef8:	2aaaaaab 	.word	0x2aaaaaab
 8001efc:	437a0000 	.word	0x437a0000
 8001f00:	0800c86c 	.word	0x0800c86c

08001f04 <motor_foc_hall_update>:
    return RESULT_OK(NULL);
}

// Thread - hallExti - 0
Result motor_foc_hall_update(MotorParameter *motor)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
    float32_t htim_cnt = (float32_t)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->rpm_fbk_hall = 100000000.0f / htim_cnt;
 8001f2c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001fe0 <motor_foc_hall_update+0xdc>
 8001f30:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    uint16_t expected = (!motor->reverse)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <motor_foc_hall_update+0x58>
        ? hall_seq_clw[motor->exti_hall_last]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <motor_foc_hall_update+0xe0>)
 8001f58:	5c9b      	ldrb	r3, [r3, r2]
 8001f5a:	e005      	b.n	8001f68 <motor_foc_hall_update+0x64>
        : hall_seq_ccw[motor->exti_hall_last];
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <motor_foc_hall_update+0xe4>)
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
    uint16_t expected = (!motor->reverse)
 8001f68:	827b      	strh	r3, [r7, #18]
    // if (hall_last == 0) // ? CHECK
    // {
    //     hall_last = expected;
    // }
    if (motor->exti_hall_curt == expected)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	8a7b      	ldrh	r3, [r7, #18]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d107      	bne.n	8001f8a <motor_foc_hall_update+0x86>
    {
        // rotated
        motor->hall_angle_acc = 0;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
        motor->pwm_it_angle_acc = 0;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	661a      	str	r2, [r3, #96]	@ 0x60

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_42BLF01_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (htim_cnt * (MOTOR_42BLF01_POLE / 2))) / 6 / MOTOR_42BLF01_GEAR;
 8001f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f96:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001fec <motor_foc_hall_update+0xe8>
 8001f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001fa2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fa6:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ff0 <motor_foc_hall_update+0xec>
 8001faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
    // 單次PWM中斷時的角度變化 50us*60/(0.1us*CNT)
    motor->pwm_per_it_angle_itpl = 30000.0f * DEG_TO_RAD / htim_cnt;
 8001fb4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001ff4 <motor_foc_hall_update+0xf0>
 8001fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

    return RESULT_OK(NULL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
}
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	4cbebc20 	.word	0x4cbebc20
 8001fe4:	0800c85c 	.word	0x0800c85c
 8001fe8:	0800c864 	.word	0x0800c864
 8001fec:	4ab71b00 	.word	0x4ab71b00
 8001ff0:	408ccccd 	.word	0x408ccccd
 8001ff4:	4402e652 	.word	0x4402e652

08001ff8 <stop_check>:

static inline void stop_check(MotorParameter *motor)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002006:	73fb      	strb	r3, [r7, #15]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800200e:	461a      	mov	r2, r3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4413      	add	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	81bb      	strh	r3, [r7, #12]
    if(hall_total == motor->pwm_hall_acc)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002026:	b29b      	uxth	r3, r3
 8002028:	89ba      	ldrh	r2, [r7, #12]
 800202a:	429a      	cmp	r2, r3
 800202c:	d123      	bne.n	8002076 <stop_check+0x7e>
    {
        motor->spin_stop_acc++;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002034:	3301      	adds	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        if (motor->spin_stop_acc >= 50)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002044:	2b31      	cmp	r3, #49	@ 0x31
 8002046:	d91a      	bls.n	800207e <stop_check+0x86>
        {
            motor->spin_stop_acc = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	679a      	str	r2, [r3, #120]	@ 0x78
            motor->pi_Iq.Out=0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
            motor->pwm_it_angle_acc = 0.0f;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	661a      	str	r2, [r3, #96]	@ 0x60
 8002074:	e003      	b.n	800207e <stop_check+0x86>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    }
    motor->pwm_hall_acc = hall_total;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	89ba      	ldrh	r2, [r7, #12]
 8002082:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    motor->pwm_hall_last = hall_current;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <pi_speed>:

static inline void pi_speed(MotorParameter *motor)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    // 計算 速度PI (每100個PWM中斷)
    // if(Speed.Fbk>0 && stop_flag==0)
    PI_run(&motor->pi_speed);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3374      	adds	r3, #116	@ 0x74
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 ffc7 	bl	800303c <PI_run>
    motor->pi_speed_cmd = clampf((motor->pi_speed_cmd + motor->pi_speed.Out), 0.15f, 0.2f);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80020e0 <pi_speed+0x44>
 80020c2:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80020e4 <pi_speed+0x48>
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	f7ff fd0f 	bl	8001aec <clampf>
 80020ce:	eef0 7a40 	vmov.f32	s15, s0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
    // else if(Speed.Fbk==0 | stop_flag==1)
    //     motor->pi_speed_cmd=0.18;
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	3e4ccccd 	.word	0x3e4ccccd
 80020e4:	3e19999a 	.word	0x3e19999a

080020e8 <angal_cal>:

static inline void angal_cal(MotorParameter *motor)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    // ?
    if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002164 <angal_cal+0x7c>
 8002104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d51a      	bpl.n	8002144 <angal_cal+0x5c>
    {
        motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        motor->hall_angle_acc = clampf(motor->hall_angle_acc, 0.0f, 60.0f);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800212a:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8002164 <angal_cal+0x7c>
 800212e:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002168 <angal_cal+0x80>
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	f7ff fcd9 	bl	8001aec <clampf>
 800213a:	eef0 7a40 	vmov.f32	s15, s0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    }
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	42700000 	.word	0x42700000
 8002168:	00000000 	.word	0x00000000

0800216c <vec_ctrl_clarke>:

// #define ADC_TO_CURRENT (3.3f / 4095.0f / 0.185f ) // ~ 0.004356 A/LSB
static inline Result vec_ctrl_clarke(MotorParameter *motor)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	@ 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    // RESULT_CHECK_RET_RES(adc_renew(&adc_test));
    RESULT_CHECK_RET_RES(adc_renew(motor->adc_u, &motor->clarke.As));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f973 	bl	8001470 <adc_renew>
 800218a:	7e3b      	ldrb	r3, [r7, #24]
 800218c:	f083 0301 	eor.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <vec_ctrl_clarke+0x44>
 8002196:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <vec_ctrl_clarke+0xd8>)
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021aa:	e882 0003 	stmia.w	r2, {r0, r1}
    // PeriodFilter_w = (float32_t)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;

    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
    return RESULT_OK(NULL);
}
 80021ae:	e045      	b.n	800223c <vec_ctrl_clarke+0xd0>
    RESULT_CHECK_RET_RES(adc_renew(motor->adc_v, &motor->clarke.Bs));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f956 	bl	8001470 <adc_renew>
 80021c4:	7c3b      	ldrb	r3, [r7, #16]
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <vec_ctrl_clarke+0x7e>
 80021d0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <vec_ctrl_clarke+0xd8>)
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	461a      	mov	r2, r3
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80021e8:	e028      	b.n	800223c <vec_ctrl_clarke+0xd0>
    RESULT_CHECK_RET_RES(adc_renew(motor->adc_w, &motor->clarke.Cs));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f939 	bl	8001470 <adc_renew>
 80021fe:	7a3b      	ldrb	r3, [r7, #8]
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <vec_ctrl_clarke+0xb8>
 800220a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <vec_ctrl_clarke+0xd8>)
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	461a      	mov	r2, r3
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800221e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002222:	e00b      	b.n	800223c <vec_ctrl_clarke+0xd0>
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fd2a 	bl	8001c84 <CLARKE_run_ideal>
    return RESULT_OK(NULL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
}
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000980 	.word	0x20000980

08002248 <vec_ctrl_park>:

static inline Result vec_ctrl_park(MotorParameter *motor)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    motor->park.Beta = motor->clarke.Beta;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    RESULT_CHECK_RET_RES(trigo_sin_cosf(
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80022e4 <vec_ctrl_park+0x9c>
 800227e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	4618      	mov	r0, r3
 8002298:	f000 ffa8 	bl	80031ec <trigo_sin_cosf>
 800229c:	7a3b      	ldrb	r3, [r7, #8]
 800229e:	f083 0301 	eor.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00c      	beq.n	80022c2 <vec_ctrl_park+0x7a>
 80022a8:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80022ac:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <vec_ctrl_park+0xa0>)
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f107 0308 	add.w	r3, r7, #8
 80022b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80022c0:	e00b      	b.n	80022da <vec_ctrl_park+0x92>
        motor->exti_hall_angal + motor->pwm_it_angle_acc + DIV_PI_2 * 3.0f,
        &motor->park.Sine, &motor->park.Cosine
    ));
    PARK_run(&motor->park);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fe4f 	bl	8002f6c <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float32_t)motor->park.Qs - (float32_t)PeriodFilter_iq)*(float32_t)PeriodKFilter );
    // PeriodFilter_iq = (float32_t)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	605a      	str	r2, [r3, #4]
}
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	4096cbe4 	.word	0x4096cbe4
 80022e8:	20000980 	.word	0x20000980

080022ec <vec_ctrl_pi_id_iq>:

#define IQ_REF_ADD 0.0f
static inline void vec_ctrl_pi_id_iq(MotorParameter *motor)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 80022fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	dd3f      	ble.n	8002384 <vec_ctrl_pi_id_iq+0x98>
    {
        motor->pi_Id.Ref = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        motor->pi_Id.Fbk = motor->park.Ds;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	33e0      	adds	r3, #224	@ 0xe0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fe8c 	bl	800303c <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = clampf(motor->pi_Id.Out, -0.01f, 0.01f);//限制最大與最小參數
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800232a:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8002394 <vec_ctrl_pi_id_iq+0xa8>
 800232e:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002398 <vec_ctrl_pi_id_iq+0xac>
 8002332:	eeb0 0a67 	vmov.f32	s0, s15
 8002336:	f7ff fbd9 	bl	8001aec <clampf>
 800233a:	eef0 7a40 	vmov.f32	s15, s0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        // motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
        motor->pi_Iq.Ref = 0.3f;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a15      	ldr	r2, [pc, #84]	@ (800239c <vec_ctrl_pi_id_iq+0xb0>)
 8002348:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	33ac      	adds	r3, #172	@ 0xac
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fe6d 	bl	800303c <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = clampf(motor->pi_Iq.Out, 0.0f, 0.75f);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8002368:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 800236c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80023a0 <vec_ctrl_pi_id_iq+0xb4>
 8002370:	eeb0 0a67 	vmov.f32	s0, s15
 8002374:	f7ff fbba 	bl	8001aec <clampf>
 8002378:	eef0 7a40 	vmov.f32	s15, s0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
    }
    else
    {
        motor->pi_Iq.Out = 0.18;
    }
}
 8002382:	e003      	b.n	800238c <vec_ctrl_pi_id_iq+0xa0>
        motor->pi_Iq.Out = 0.18;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <vec_ctrl_pi_id_iq+0xb8>)
 8002388:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	3c23d70a 	.word	0x3c23d70a
 8002398:	bc23d70a 	.word	0xbc23d70a
 800239c:	3e99999a 	.word	0x3e99999a
 80023a0:	00000000 	.word	0x00000000
 80023a4:	3e3851ec 	.word	0x3e3851ec

080023a8 <vec_ctrl_ipark>:

static inline Result vec_ctrl_ipark(MotorParameter *motor)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    // ipark
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)
    // ?
    motor->ipark.Vdref = clampf(motor->ipark.Vdref + motor->pi_Id.Out, -0.06f, 0.06f);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002498 <vec_ctrl_ipark+0xf0>
 80023c6:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800249c <vec_ctrl_ipark+0xf4>
 80023ca:	eeb0 0a67 	vmov.f32	s0, s15
 80023ce:	f7ff fb8d 	bl	8001aec <clampf>
 80023d2:	eef0 7a40 	vmov.f32	s15, s0
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    motor->ipark.Vqref = motor->pi_Iq.Out;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    motor->ipark.Sine = motor->park.Sine;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    motor->ipark.Cosine = motor->park.Cosine;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    IPARK_run(&motor->ipark);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fde4 	bl	8002fd4 <IPARK_run>
    RESULT_CHECK_RET_RES(trigo_atan(motor->ipark.Alpha, motor->ipark.Beta, &motor->elec_theta_rad));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	edd3 7a51 	vldr	s15, [r3, #324]	@ 0x144
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	ed93 7a52 	vldr	s14, [r3, #328]	@ 0x148
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	4611      	mov	r1, r2
 8002424:	eef0 0a47 	vmov.f32	s1, s14
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	4618      	mov	r0, r3
 800242e:	f000 ff65 	bl	80032fc <trigo_atan>
 8002432:	7a3b      	ldrb	r3, [r7, #8]
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <vec_ctrl_ipark+0xb0>
 800243e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <vec_ctrl_ipark+0xf8>)
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	461a      	mov	r2, r3
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002452:	e882 0003 	stmia.w	r2, {r0, r1}
 8002456:	e01b      	b.n	8002490 <vec_ctrl_ipark+0xe8>
    motor->elec_theta_rad = wrap_0_2pi(motor->elec_theta_rad);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 800245e:	eeb0 0a67 	vmov.f32	s0, s15
 8002462:	f7ff fb6d 	bl	8001b40 <wrap_0_2pi>
 8002466:	eef0 7a40 	vmov.f32	s15, s0
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    motor->elec_theta_deg = motor->elec_theta_rad * RAD_TO_DEG;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 8002476:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80024a4 <vec_ctrl_ipark+0xfc>
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
    return RESULT_OK(NULL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
}
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	3d75c28f 	.word	0x3d75c28f
 800249c:	bd75c28f 	.word	0xbd75c28f
 80024a0:	20000980 	.word	0x20000980
 80024a4:	42652ee1 	.word	0x42652ee1

080024a8 <vec_ctrl_svgen>:

static inline void vec_ctrl_svgen(MotorParameter *motor)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    motor->svgendq.Ubeta = motor->ipark.Beta;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    SVGEN_run(&motor->svgendq);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fe24 	bl	800311c <SVGEN_run>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <vec_ctrl_vref>:

static inline Result vec_ctrl_vref(MotorParameter *motor)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
    //     else
    //         motor->svpwm_Vref=0;
    //     }
    // else
    arm_status status = arm_sqrt_f32(
        motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 80024f2:	ee27 7a27 	vmul.f32	s14, s14, s15
            + motor->svgendq.Ubeta * motor->svgendq.Ubeta,
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	edd3 6a59 	vldr	s13, [r3, #356]	@ 0x164
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_status status = arm_sqrt_f32(
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002510:	edc7 7a08 	vstr	s15, [r7, #32]
 8002514:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002516:	edd7 7a08 	vldr	s15, [r7, #32]
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	db0a      	blt.n	800253a <vec_ctrl_vref+0x5e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002524:	ed97 0a08 	vldr	s0, [r7, #32]
 8002528:	f00a f90c 	bl	800c744 <sqrtf>
 800252c:	eef0 7a40 	vmov.f32	s15, s0
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002536:	2300      	movs	r3, #0
 8002538:	e005      	b.n	8002546 <vec_ctrl_vref+0x6a>
    }
    else
    {
      *pOut = 0.0f;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        &motor->svpwm_Vref
    );
    if (status != ARM_MATH_SUCCESS) return RESULT_ERROR(RES_ERR_FAIL);
 800254a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <vec_ctrl_vref+0x88>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	461a      	mov	r2, r3
 8002556:	2300      	movs	r3, #0
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	6053      	str	r3, [r2, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	711a      	strb	r2, [r3, #4]
 8002562:	e005      	b.n	8002570 <vec_ctrl_vref+0x94>
    //		motor->elec_theta_deg      =  (int)motor_angle % 60;
    
    /*
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->elec_theta_deg      =  (int)cmd_deg % 60;*/
    return RESULT_OK(NULL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
}
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	3728      	adds	r7, #40	@ 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <vec_ctrl_svpwm>:

float32_t thete_t[6];
static inline Result vec_ctrl_svpwm(MotorParameter *motor)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b092      	sub	sp, #72	@ 0x48
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    float32_t theta = motor->elec_theta_rad;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002588:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t n = (int32_t)(theta / DIV_PI_3);
 800258a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800258e:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 80028d0 <vec_ctrl_svpwm+0x358>
 8002592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800259a:	ee17 3a90 	vmov	r3, s15
 800259e:	643b      	str	r3, [r7, #64]	@ 0x40
    theta -= (float32_t)n * DIV_PI_3;
 80025a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025aa:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 80028d0 <vec_ctrl_svpwm+0x358>
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80025b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ba:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (theta < 0) theta += DIV_PI_3;
 80025be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80025c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d507      	bpl.n	80025dc <vec_ctrl_svpwm+0x64>
 80025cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80025d0:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80028d0 <vec_ctrl_svpwm+0x358>
 80025d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025d8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // ? CHECK
    float32_t T1, T2;
    if(!motor->reverse)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d040      	beq.n	800266e <vec_ctrl_svpwm+0xf6>
    {
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T1, NULL));
 80025ec:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 80028d0 <vec_ctrl_svpwm+0x358>
 80025f0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80025f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025fc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002600:	2200      	movs	r2, #0
 8002602:	eeb0 0a67 	vmov.f32	s0, s15
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fdf0 	bl	80031ec <trigo_sin_cosf>
 800260c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <vec_ctrl_svpwm+0xbc>
 800261a:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800261e:	4bad      	ldr	r3, [pc, #692]	@ (80028d4 <vec_ctrl_svpwm+0x35c>)
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	461a      	mov	r2, r3
 8002626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800262a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800262e:	e882 0003 	stmia.w	r2, {r0, r1}
    }
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
    return RESULT_OK(NULL);
}
 8002632:	e28a      	b.n	8002b4a <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T2, NULL));
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800263c:	2200      	movs	r2, #0
 800263e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fdd2 	bl	80031ec <trigo_sin_cosf>
 8002648:	7f3b      	ldrb	r3, [r7, #28]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d04c      	beq.n	80026ee <vec_ctrl_svpwm+0x176>
 8002654:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8002658:	4b9e      	ldr	r3, [pc, #632]	@ (80028d4 <vec_ctrl_svpwm+0x35c>)
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002668:	e882 0003 	stmia.w	r2, {r0, r1}
 800266c:	e26d      	b.n	8002b4a <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T1, NULL));
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002676:	2200      	movs	r2, #0
 8002678:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fdb5 	bl	80031ec <trigo_sin_cosf>
 8002682:	7d3b      	ldrb	r3, [r7, #20]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <vec_ctrl_svpwm+0x130>
 800268e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8002692:	4b90      	ldr	r3, [pc, #576]	@ (80028d4 <vec_ctrl_svpwm+0x35c>)
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	461a      	mov	r2, r3
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80026a6:	e250      	b.n	8002b4a <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T2, NULL));
 80026a8:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80028d0 <vec_ctrl_svpwm+0x358>
 80026ac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80026b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80026bc:	2200      	movs	r2, #0
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fd92 	bl	80031ec <trigo_sin_cosf>
 80026c8:	7b3b      	ldrb	r3, [r7, #12]
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00c      	beq.n	80026ee <vec_ctrl_svpwm+0x176>
 80026d4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80026d8:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <vec_ctrl_svpwm+0x35c>)
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	461a      	mov	r2, r3
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80026ec:	e22d      	b.n	8002b4a <vec_ctrl_svpwm+0x5d2>
    float32_t T0div2 = (1 - (T1 + T2)) / 2;
 80026ee:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80026f2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002702:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800270a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    switch(motor->svgendq.Sector)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f8b3 3174 	ldrh.w	r3, [r3, #372]	@ 0x174
 8002714:	3b01      	subs	r3, #1
 8002716:	2b05      	cmp	r3, #5
 8002718:	f200 80b2 	bhi.w	8002880 <vec_ctrl_svpwm+0x308>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <vec_ctrl_svpwm+0x1ac>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	080027df 	.word	0x080027df
 8002728:	08002773 	.word	0x08002773
 800272c:	080027a9 	.word	0x080027a9
 8002730:	0800284b 	.word	0x0800284b
 8002734:	08002815 	.word	0x08002815
 8002738:	0800273d 	.word	0x0800273d
            motor->pwm_duty_u = T0div2;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002740:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1;
 8002744:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002748:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800274c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1 + T2;
 8002756:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800275a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800275e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002762:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 8002770:	e086      	b.n	8002880 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T2;
 8002772:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002776:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800277a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002788:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1 + T2;
 800278c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002790:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002798:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 80027a6:	e06b      	b.n	8002880 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 80027a8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027ac:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1;
 80027ca:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027ce:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 80027dc:	e050      	b.n	8002880 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 80027de:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027e2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T2;
 80027f8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80027fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800280e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            break;
 8002812:	e035      	b.n	8002880 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1;
 8002814:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002818:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002826:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800282a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002844:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            break;
 8002848:	e01a      	b.n	8002880 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800284e:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002852:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002856:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800285a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T2;
 800286c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002870:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 800287e:	bf00      	nop
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <vec_ctrl_svpwm+0x330>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 800288e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a0:	ee17 2a90 	vmov	r2, s15
 80028a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028a6:	e064      	b.n	8002972 <vec_ctrl_svpwm+0x3fa>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d115      	bne.n	80028dc <vec_ctrl_svpwm+0x364>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 80028b6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 80028ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c8:	ee17 3a90 	vmov	r3, s15
 80028cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80028ce:	e050      	b.n	8002972 <vec_ctrl_svpwm+0x3fa>
 80028d0:	3f860a92 	.word	0x3f860a92
 80028d4:	20000980 	.word	0x20000980
 80028d8:	437a0000 	.word	0x437a0000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d10f      	bne.n	8002904 <vec_ctrl_svpwm+0x38c>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 80028ea:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 80028ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
 8002900:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002902:	e036      	b.n	8002972 <vec_ctrl_svpwm+0x3fa>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d10f      	bne.n	800292c <vec_ctrl_svpwm+0x3b4>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002912:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002924:	ee17 3a90 	vmov	r3, s15
 8002928:	6413      	str	r3, [r2, #64]	@ 0x40
 800292a:	e022      	b.n	8002972 <vec_ctrl_svpwm+0x3fa>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b10      	cmp	r3, #16
 8002932:	d10f      	bne.n	8002954 <vec_ctrl_svpwm+0x3dc>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 800293a:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	6493      	str	r3, [r2, #72]	@ 0x48
 8002952:	e00e      	b.n	8002972 <vec_ctrl_svpwm+0x3fa>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 800295a:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 800295e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <vec_ctrl_svpwm+0x422>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002980:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	ee17 2a90 	vmov	r2, s15
 8002996:	635a      	str	r2, [r3, #52]	@ 0x34
 8002998:	e05e      	b.n	8002a58 <vec_ctrl_svpwm+0x4e0>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d10f      	bne.n	80029c2 <vec_ctrl_svpwm+0x44a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029a8:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 80029ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	6393      	str	r3, [r2, #56]	@ 0x38
 80029c0:	e04a      	b.n	8002a58 <vec_ctrl_svpwm+0x4e0>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d10f      	bne.n	80029ea <vec_ctrl_svpwm+0x472>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029d0:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 80029d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e2:	ee17 3a90 	vmov	r3, s15
 80029e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80029e8:	e036      	b.n	8002a58 <vec_ctrl_svpwm+0x4e0>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d10f      	bne.n	8002a12 <vec_ctrl_svpwm+0x49a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029f8:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 80029fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0a:	ee17 3a90 	vmov	r3, s15
 8002a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a10:	e022      	b.n	8002a58 <vec_ctrl_svpwm+0x4e0>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d10f      	bne.n	8002a3a <vec_ctrl_svpwm+0x4c2>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a20:	ed1f 7a53 	vldr	s14, [pc, #-332]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a32:	ee17 3a90 	vmov	r3, s15
 8002a36:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a38:	e00e      	b.n	8002a58 <vec_ctrl_svpwm+0x4e0>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a40:	ed1f 7a5b 	vldr	s14, [pc, #-364]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a52:	ee17 3a90 	vmov	r3, s15
 8002a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10f      	bne.n	8002a80 <vec_ctrl_svpwm+0x508>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002a66:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a78:	ee17 2a90 	vmov	r2, s15
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a7e:	e05e      	b.n	8002b3e <vec_ctrl_svpwm+0x5c6>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d10f      	bne.n	8002aa8 <vec_ctrl_svpwm+0x530>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002a8e:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa0:	ee17 3a90 	vmov	r3, s15
 8002aa4:	6393      	str	r3, [r2, #56]	@ 0x38
 8002aa6:	e04a      	b.n	8002b3e <vec_ctrl_svpwm+0x5c6>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d10f      	bne.n	8002ad0 <vec_ctrl_svpwm+0x558>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002ab6:	ed1f 7a78 	vldr	s14, [pc, #-480]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac8:	ee17 3a90 	vmov	r3, s15
 8002acc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002ace:	e036      	b.n	8002b3e <vec_ctrl_svpwm+0x5c6>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d10f      	bne.n	8002af8 <vec_ctrl_svpwm+0x580>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002ade:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af0:	ee17 3a90 	vmov	r3, s15
 8002af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af6:	e022      	b.n	8002b3e <vec_ctrl_svpwm+0x5c6>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d10f      	bne.n	8002b20 <vec_ctrl_svpwm+0x5a8>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b06:	ed1f 7a8c 	vldr	s14, [pc, #-560]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b18:	ee17 3a90 	vmov	r3, s15
 8002b1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b1e:	e00e      	b.n	8002b3e <vec_ctrl_svpwm+0x5c6>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b26:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 80028d8 <vec_ctrl_svpwm+0x360>
 8002b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b38:	ee17 3a90 	vmov	r3, s15
 8002b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	605a      	str	r2, [r3, #4]
}
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	3748      	adds	r7, #72	@ 0x48
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <motor_foc_pwm_pulse>:

#define CYCLE_CNT(id) ({cycle[id] = __HAL_TIM_GET_COUNTER(&htim2) - cycle[id-1];})
// FOC 20kHz
// Thread - pwmIt - 0
Result motor_foc_pwm_pulse(MotorParameter *motor)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	@ 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b5e:	4b99      	ldr	r3, [pc, #612]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (motor->pwm_count % 100 == 0)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002b6c:	4a96      	ldr	r2, [pc, #600]	@ (8002dc8 <motor_foc_pwm_pulse+0x274>)
 8002b6e:	fba2 1203 	umull	r1, r2, r2, r3
 8002b72:	0952      	lsrs	r2, r2, #5
 8002b74:	2164      	movs	r1, #100	@ 0x64
 8002b76:	fb01 f202 	mul.w	r2, r1, r2
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11a      	bne.n	8002bb8 <motor_foc_pwm_pulse+0x64>
    {
        cycle[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002b82:	4b90      	ldr	r3, [pc, #576]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	4a90      	ldr	r2, [pc, #576]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002b8a:	6013      	str	r3, [r2, #0]
        // Thread - pwmIt(100) - 1
        stop_check(motor);
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f7ff fa33 	bl	8001ff8 <stop_check>
        CYCLE_CNT(1);
 8002b92:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b98:	4b8c      	ldr	r3, [pc, #560]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	4a8b      	ldr	r2, [pc, #556]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002ba0:	6053      	str	r3, [r2, #4]
        // Thread - pwmIt(100) - 2
        pi_speed(motor); // !
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f7ff fa7a 	bl	800209c <pi_speed>
        CYCLE_CNT(2);
 8002ba8:	4b86      	ldr	r3, [pc, #536]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bae:	4b87      	ldr	r3, [pc, #540]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	4a85      	ldr	r2, [pc, #532]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002bb6:	6093      	str	r3, [r2, #8]
    }
    // motor->pwm_count % 2 == 0
    if (motor->pwm_count % 2 == 0)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 80cd 	bne.w	8002d64 <motor_foc_pwm_pulse+0x210>
    {
        cycle[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8002bca:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	4a7e      	ldr	r2, [pc, #504]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002bd2:	60d3      	str	r3, [r2, #12]
        // Thread - pwmIt - 1
        angal_cal(motor);
 8002bd4:	6838      	ldr	r0, [r7, #0]
 8002bd6:	f7ff fa87 	bl	80020e8 <angal_cal>
        CYCLE_CNT(4);
 8002bda:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002be0:	4b7a      	ldr	r3, [pc, #488]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4a79      	ldr	r2, [pc, #484]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002be8:	6113      	str	r3, [r2, #16]
        // Thread - pwmIt - 2
        RESULT_CHECK_RET_RES(vec_ctrl_clarke(motor));
 8002bea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fabb 	bl	800216c <vec_ctrl_clarke>
 8002bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <motor_foc_pwm_pulse+0xca>
 8002c04:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8002c08:	4b71      	ldr	r3, [pc, #452]	@ (8002dd0 <motor_foc_pwm_pulse+0x27c>)
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c18:	e882 0003 	stmia.w	r2, {r0, r1}
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
        motor->exti_hall_cnt = 0;
    }
    motor->pwm_count++;
    return RESULT_OK(NULL);
}
 8002c1c:	e0cd      	b.n	8002dba <motor_foc_pwm_pulse+0x266>
        CYCLE_CNT(5);
 8002c1e:	4b69      	ldr	r3, [pc, #420]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c24:	4b69      	ldr	r3, [pc, #420]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	4a68      	ldr	r2, [pc, #416]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002c2c:	6153      	str	r3, [r2, #20]
        RESULT_CHECK_RET_RES(vec_ctrl_park(motor));
 8002c2e:	f107 0320 	add.w	r3, r7, #32
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fb07 	bl	8002248 <vec_ctrl_park>
 8002c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <motor_foc_pwm_pulse+0x10e>
 8002c48:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 8002c4c:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <motor_foc_pwm_pulse+0x27c>)
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c5c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c60:	e0ab      	b.n	8002dba <motor_foc_pwm_pulse+0x266>
        CYCLE_CNT(6);
 8002c62:	4b58      	ldr	r3, [pc, #352]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c68:	4b58      	ldr	r3, [pc, #352]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	4a57      	ldr	r2, [pc, #348]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002c70:	6193      	str	r3, [r2, #24]
        vec_ctrl_pi_id_iq(motor);
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	f7ff fb3a 	bl	80022ec <vec_ctrl_pi_id_iq>
        CYCLE_CNT(7);
 8002c78:	4b52      	ldr	r3, [pc, #328]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7e:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	4a51      	ldr	r2, [pc, #324]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002c86:	61d3      	str	r3, [r2, #28]
        RESULT_CHECK_RET_RES(vec_ctrl_ipark(motor)); // !
 8002c88:	f107 0318 	add.w	r3, r7, #24
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb8a 	bl	80023a8 <vec_ctrl_ipark>
 8002c94:	7e3b      	ldrb	r3, [r7, #24]
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00c      	beq.n	8002cba <motor_foc_pwm_pulse+0x166>
 8002ca0:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <motor_foc_pwm_pulse+0x27c>)
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f107 0318 	add.w	r3, r7, #24
 8002cb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cb4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002cb8:	e07f      	b.n	8002dba <motor_foc_pwm_pulse+0x266>
        CYCLE_CNT(8);
 8002cba:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc0:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002cc8:	6213      	str	r3, [r2, #32]
        vec_ctrl_svgen(motor);
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	f7ff fbec 	bl	80024a8 <vec_ctrl_svgen>
        CYCLE_CNT(9);
 8002cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002cde:	6253      	str	r3, [r2, #36]	@ 0x24
        RESULT_CHECK_RET_RES(vec_ctrl_vref(motor));  // !
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fbf8 	bl	80024dc <vec_ctrl_vref>
 8002cec:	7c3b      	ldrb	r3, [r7, #16]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <motor_foc_pwm_pulse+0x1be>
 8002cf8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002cfc:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <motor_foc_pwm_pulse+0x27c>)
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d0c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002d10:	e053      	b.n	8002dba <motor_foc_pwm_pulse+0x266>
        CYCLE_CNT(10);
 8002d12:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d18:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002d20:	6293      	str	r3, [r2, #40]	@ 0x28
        RESULT_CHECK_RET_RES(vec_ctrl_svpwm(motor));
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fc25 	bl	8002578 <vec_ctrl_svpwm>
 8002d2e:	7a3b      	ldrb	r3, [r7, #8]
 8002d30:	f083 0301 	eor.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00c      	beq.n	8002d54 <motor_foc_pwm_pulse+0x200>
 8002d3a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002d3e:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <motor_foc_pwm_pulse+0x27c>)
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d4e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002d52:	e032      	b.n	8002dba <motor_foc_pwm_pulse+0x266>
        CYCLE_CNT(11);
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <motor_foc_pwm_pulse+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4a1a      	ldr	r2, [pc, #104]	@ (8002dcc <motor_foc_pwm_pulse+0x278>)
 8002d62:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (motor->pwm_count >= 1000)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002d6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d6e:	d316      	bcc.n	8002d9e <motor_foc_pwm_pulse+0x24a>
        motor->pwm_count = 0;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d88:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002dd4 <motor_foc_pwm_pulse+0x280>
 8002d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
        motor->exti_hall_cnt = 0;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    motor->pwm_count++;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002da4:	3301      	adds	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    return RESULT_OK(NULL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
}
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	3738      	adds	r7, #56	@ 0x38
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000574 	.word	0x20000574
 8002dc8:	51eb851f 	.word	0x51eb851f
 8002dcc:	20000988 	.word	0x20000988
 8002dd0:	20000980 	.word	0x20000980
 8002dd4:	43480000 	.word	0x43480000

08002dd8 <motor_hall_exti>:
#include "motor/ctrl_foc.h"
#include "analog/adc1/main.h"
#include "motor/trigonometric.h"

void motor_hall_exti(MotorParameter *motor)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
    motor->exti_hall_cnt++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    uint8_t hall_last = motor->exti_hall_curt;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002df8:	77bb      	strb	r3, [r7, #30]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	8992      	ldrh	r2, [r2, #12]
 8002e04:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <motor_hall_exti+0x36>
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	e000      	b.n	8002e10 <motor_hall_exti+0x38>
 8002e0e:	2200      	movs	r2, #0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	89c9      	ldrh	r1, [r1, #14]
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <motor_hall_exti+0x4c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e000      	b.n	8002e26 <motor_hall_exti+0x4e>
 8002e24:	2300      	movs	r3, #0
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6892      	ldr	r2, [r2, #8]
 8002e2e:	6912      	ldr	r2, [r2, #16]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	8a09      	ldrh	r1, [r1, #16]
 8002e34:	400a      	ands	r2, r1
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	d001      	beq.n	8002e3e <motor_hall_exti+0x66>
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	e000      	b.n	8002e40 <motor_hall_exti+0x68>
 8002e3e:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002e40:	4313      	orrs	r3, r2
 8002e42:	777b      	strb	r3, [r7, #29]
    motor->exti_hall_last = hall_last;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	7fba      	ldrb	r2, [r7, #30]
 8002e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    motor->exti_hall_curt = hall_current;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7f7a      	ldrb	r2, [r7, #29]
 8002e50:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    if (hall_current == 0 || hall_current == 7) 
 8002e54:	7f7b      	ldrb	r3, [r7, #29]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <motor_hall_exti+0x88>
 8002e5a:	7f7b      	ldrb	r3, [r7, #29]
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d12c      	bne.n	8002eba <motor_hall_exti+0xe2>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e025      	b.n	8002eb2 <motor_hall_exti+0xda>
        {
            HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6958      	ldr	r0, [r3, #20]
 8002e6a:	7ffa      	ldrb	r2, [r7, #31]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3206      	adds	r2, #6
 8002e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f004 fcf5 	bl	8007864 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6958      	ldr	r0, [r3, #20]
 8002e7e:	7ffa      	ldrb	r2, [r7, #31]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3206      	adds	r2, #6
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f005 fcf3 	bl	8008874 <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	3308      	adds	r3, #8
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	6858      	ldr	r0, [r3, #4]
 8002e9a:	7ffa      	ldrb	r2, [r7, #31]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3218      	adds	r2, #24
 8002ea0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f003 fa2e 	bl	8006308 <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8002eac:	7ffb      	ldrb	r3, [r7, #31]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d9d6      	bls.n	8002e66 <motor_hall_exti+0x8e>
        }
        return;
 8002eb8:	e025      	b.n	8002f06 <motor_hall_exti+0x12e>
    }
    RESULT_CHECK_RET_VOID(motor_hall_to_angle(hall_current, &motor->exti_hall_angal));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	7f79      	ldrb	r1, [r7, #29]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fdbe 	bl	8001a48 <motor_hall_to_angle>
 8002ecc:	7d3b      	ldrb	r3, [r7, #20]
 8002ece:	f083 0301 	eor.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <motor_hall_exti+0x10a>
 8002ed8:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <motor_hall_exti+0x134>)
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e011      	b.n	8002f06 <motor_hall_exti+0x12e>
    switch (motor->mode)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <motor_hall_exti+0x11a>
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d004      	beq.n	8002efa <motor_hall_exti+0x122>
 8002ef0:	e009      	b.n	8002f06 <motor_hall_exti+0x12e>
    {
        case MOTOR_CTRL_120:
        {
            motor_120_hall_update(motor);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7fe fee8 	bl	8001cc8 <motor_120_hall_update>
            break;
 8002ef8:	e005      	b.n	8002f06 <motor_hall_exti+0x12e>
        }
        case MOTOR_CTRL_FOC:
        {
            motor_foc_hall_update(motor);
 8002efa:	463b      	mov	r3, r7
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f800 	bl	8001f04 <motor_foc_hall_update>
            break;
 8002f04:	bf00      	nop
        }
    }
}
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000980 	.word	0x20000980

08002f10 <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
    switch (motor->mode)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <motor_pwm_pulse+0x24>
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d000      	beq.n	8002f28 <motor_pwm_pulse+0x18>
        {
            motor_foc_pwm_pulse(motor);
            break;
        }
    }
}
 8002f26:	e006      	b.n	8002f36 <motor_pwm_pulse+0x26>
            motor_foc_pwm_pulse(motor);
 8002f28:	463b      	mov	r3, r7
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fe11 	bl	8002b54 <motor_foc_pwm_pulse>
            break;
 8002f32:	e000      	b.n	8002f36 <motor_pwm_pulse+0x26>
            break;
 8002f34:	bf00      	nop
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <StartMotorTask>:

void StartMotorTask(void *argument)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    motor_h.pi_speed.Ref = 80.0f;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <StartMotorTask+0x24>)
 8002f4a:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <StartMotorTask+0x28>)
 8002f4c:	675a      	str	r2, [r3, #116]	@ 0x74
    motor_h.pwm_duty_u = 1.0f;
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <StartMotorTask+0x24>)
 8002f50:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f54:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    // motor_h.reverse = true;
    osDelay(3000);
 8002f58:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002f5c:	f006 fcf6 	bl	800994c <osDelay>

    // motor_h.mode = MOTOR_CTRL_FOC;
    // motor_foc_tim_setup(&motor_h);
    // motor_hall_exti(&motor_h);

    StopTask();
 8002f60:	f006 fced 	bl	800993e <osThreadExit>
 8002f64:	20000050 	.word	0x20000050
 8002f68:	42a00000 	.word	0x42a00000

08002f6c <PARK_run>:
#include "motor/park.h"

inline void PARK_run(volatile PARK *park)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	ed93 7a00 	vldr	s14, [r3]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	edd3 6a00 	vldr	s13, [r3]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <IPARK_run>:

inline void IPARK_run(volatile IPARK *ipark)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	ed93 7a04 	vldr	s14, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	edd3 6a03 	vldr	s13, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <PI_run>:
#include "motor/pi.h"
#include "motor/basic.h"

void PI_run(volatile PI_CTRL *pi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	ed93 7a03 	vldr	s14, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	edd3 6a00 	vldr	s13, [r3]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	edd3 7a01 	vldr	s15, [r3, #4]
 8003056:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	ed93 7a02 	vldr	s14, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003070:	eeb4 7a67 	vcmp.f32	s14, s15
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	d110      	bne.n	800309c <PI_run+0x60>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	edd3 7a07 	vldr	s15, [r3, #28]
 8003086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	edc3 7a08 	vstr	s15, [r3, #32]
 800309a:	e003      	b.n	80030a4 <PI_run+0x68>
    }
    else
    {
        pi->ui = pi->i1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
    pi->v1 = pi->up + pi->ui;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = clampf(pi->v1, pi->Umin, pi->Umax);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	edd3 6a05 	vldr	s13, [r3, #20]
 80030d4:	eeb0 1a66 	vmov.f32	s2, s13
 80030d8:	eef0 0a47 	vmov.f32	s1, s14
 80030dc:	eeb0 0a67 	vmov.f32	s0, s15
 80030e0:	f7fe fd04 	bl	8001aec <clampf>
 80030e4:	eef0 7a40 	vmov.f32	s15, s0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	edc3 7a02 	vstr	s15, [r3, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80030fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	d102      	bne.n	800310a <PI_run+0xce>
 8003104:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003108:	e001      	b.n	800310e <PI_run+0xd2>
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <SVGEN_run>:
#include "motor/svgendq.h"

inline void SVGEN_run(volatile SVGENDQ *svgq)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
    float32_t t1 = svgq->Ubeta * 0.5f;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a01 	vldr	s15, [r3, #4]
 800312a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800312e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003132:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	edd3 7a00 	vldr	s15, [r3]
 800313c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80031e8 <SVGEN_run+0xcc>
 8003140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003144:	edc7 7a02 	vstr	s15, [r7, #8]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 8003150:	ed97 7a02 	vldr	s14, [r7, #8]
 8003154:	edd7 7a03 	vldr	s15, [r7, #12]
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 8003162:	edd7 7a03 	vldr	s15, [r7, #12]
 8003166:	eeb1 7a67 	vneg.f32	s14, s15
 800316a:	edd7 7a02 	vldr	s15, [r7, #8]
 800316e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	edd3 7a02 	vldr	s15, [r3, #8]
 8003184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	dd06      	ble.n	800319c <SVGEN_run+0x80>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8a9b      	ldrh	r3, [r3, #20]
 8003192:	b29b      	uxth	r3, r3
 8003194:	3302      	adds	r3, #2
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	edd3 7a03 	vldr	s15, [r3, #12]
 80031a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	dd06      	ble.n	80031ba <SVGEN_run+0x9e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8a9b      	ldrh	r3, [r3, #20]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3304      	adds	r3, #4
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80031c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	dc00      	bgt.n	80031cc <SVGEN_run+0xb0>
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
}
 80031ca:	e006      	b.n	80031da <SVGEN_run+0xbe>
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8a9b      	ldrh	r3, [r3, #20]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	829a      	strh	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	3f5db3d7 	.word	0x3f5db3d7

080031ec <trigo_sin_cosf>:
    .OutSize    = CORDIC_OUTSIZE_32BITS,
};
static CORDIC_ConfigTypeDef *cordic_currunt;

Result trigo_sin_cosf(float32_t theta, float32_t *sin, float32_t *cos)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	@ 0x48
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80031f8:	6079      	str	r1, [r7, #4]
 80031fa:	603a      	str	r2, [r7, #0]
    if (cordic_currunt != &cordic_cfg_sin_cos)
 80031fc:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <trigo_sin_cosf+0xfc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3a      	ldr	r2, [pc, #232]	@ (80032ec <trigo_sin_cosf+0x100>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01a      	beq.n	800323c <trigo_sin_cosf+0x50>
    {
        cordic_currunt = &cordic_cfg_sin_cos;
 8003206:	4b38      	ldr	r3, [pc, #224]	@ (80032e8 <trigo_sin_cosf+0xfc>)
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <trigo_sin_cosf+0x100>)
 800320a:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 800320c:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <trigo_sin_cosf+0xfc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	4837      	ldr	r0, [pc, #220]	@ (80032f0 <trigo_sin_cosf+0x104>)
 8003214:	f001 fd8a 	bl	8004d2c <HAL_CORDIC_Configure>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800321e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <trigo_sin_cosf+0x50>
 8003226:	f997 103f 	ldrsb.w	r1, [r7, #63]	@ 0x3f
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	6053      	str	r3, [r2, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	460a      	mov	r2, r1
 8003238:	711a      	strb	r2, [r3, #4]
 800323a:	e050      	b.n	80032de <trigo_sin_cosf+0xf2>
    }
    int32_t in[2];
    in[0] = (int32_t)((wrap_m1_1pi(theta) / PI) * 2147483648.0f);
 800323c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003240:	f7fe fcb8 	bl	8001bb4 <wrap_m1_1pi>
 8003244:	eeb0 7a40 	vmov.f32	s14, s0
 8003248:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80032f4 <trigo_sin_cosf+0x108>
 800324c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003250:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80032f8 <trigo_sin_cosf+0x10c>
 8003254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325c:	ee17 3a90 	vmov	r3, s15
 8003260:	637b      	str	r3, [r7, #52]	@ 0x34
    in[1] = 0x7FFFFFFF;
 8003262:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t out[2];
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, out, 1, HAL_MAX_DELAY));
 8003268:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800326c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2301      	movs	r3, #1
 8003278:	481d      	ldr	r0, [pc, #116]	@ (80032f0 <trigo_sin_cosf+0x104>)
 800327a:	f001 fd93 	bl	8004da4 <HAL_CORDIC_Calculate>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003284:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <trigo_sin_cosf+0xb6>
 800328c:	f997 103e 	ldrsb.w	r1, [r7, #62]	@ 0x3e
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	461a      	mov	r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	6053      	str	r3, [r2, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	460a      	mov	r2, r1
 800329e:	711a      	strb	r2, [r3, #4]
 80032a0:	e01d      	b.n	80032de <trigo_sin_cosf+0xf2>
    *sin = (float32_t)out[0] / 2147483648.0f;
 80032a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ac:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80032f8 <trigo_sin_cosf+0x10c>
 80032b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	edc3 7a00 	vstr	s15, [r3]
    *cos = (float32_t)out[1] / 2147483648.0f;
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80032f8 <trigo_sin_cosf+0x10c>
 80032c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
}
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	3740      	adds	r7, #64	@ 0x40
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200009c8 	.word	0x200009c8
 80032ec:	200001e4 	.word	0x200001e4
 80032f0:	20000380 	.word	0x20000380
 80032f4:	40490fdb 	.word	0x40490fdb
 80032f8:	4f000000 	.word	0x4f000000

080032fc <trigo_atan>:

Result trigo_atan(float32_t x, float32_t y, float32_t *theta)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b098      	sub	sp, #96	@ 0x60
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    if (cordic_currunt != &cordic_cfg_atan)
 800330e:	4b59      	ldr	r3, [pc, #356]	@ (8003474 <trigo_atan+0x178>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a59      	ldr	r2, [pc, #356]	@ (8003478 <trigo_atan+0x17c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01a      	beq.n	800334e <trigo_atan+0x52>
    {
        cordic_currunt = &cordic_cfg_atan;
 8003318:	4b56      	ldr	r3, [pc, #344]	@ (8003474 <trigo_atan+0x178>)
 800331a:	4a57      	ldr	r2, [pc, #348]	@ (8003478 <trigo_atan+0x17c>)
 800331c:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 800331e:	4b55      	ldr	r3, [pc, #340]	@ (8003474 <trigo_atan+0x178>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4855      	ldr	r0, [pc, #340]	@ (800347c <trigo_atan+0x180>)
 8003326:	f001 fd01 	bl	8004d2c <HAL_CORDIC_Configure>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8003330:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <trigo_atan+0x52>
 8003338:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	6053      	str	r3, [r2, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	460a      	mov	r2, r1
 800334a:	711a      	strb	r2, [r3, #4]
 800334c:	e08e      	b.n	800346c <trigo_atan+0x170>
    }
    float32_t ax = fast_fabsf(x);
 800334e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003352:	f7fe fc81 	bl	8001c58 <fast_fabsf>
 8003356:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float32_t ay = fast_fabsf(y);
 800335a:	ed97 0a01 	vldr	s0, [r7, #4]
 800335e:	f7fe fc7b 	bl	8001c58 <fast_fabsf>
 8003362:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float32_t norm = (ax > ay) ? ax : ay;
 8003366:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800336a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800336e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd01      	ble.n	800337c <trigo_atan+0x80>
 8003378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800337a:	e000      	b.n	800337e <trigo_atan+0x82>
 800337c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800337e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (norm == 0.0f) return RESULT_ERROR(RES_ERR_DIV_0);
 8003380:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	d108      	bne.n	80033a0 <trigo_atan+0xa4>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	461a      	mov	r2, r3
 8003392:	2300      	movs	r3, #0
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	6053      	str	r3, [r2, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	220b      	movs	r2, #11
 800339c:	711a      	strb	r2, [r3, #4]
 800339e:	e065      	b.n	800346c <trigo_atan+0x170>
    x /= norm;
 80033a0:	edd7 6a02 	vldr	s13, [r7, #8]
 80033a4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ac:	edc7 7a02 	vstr	s15, [r7, #8]
    y /= norm;
 80033b0:	edd7 6a01 	vldr	s13, [r7, #4]
 80033b4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	edc7 7a01 	vstr	s15, [r7, #4]
    int32_t in[2], out;
    in[0] = (int32_t)(x * 2147483648.0f);  
 80033c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033c4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003480 <trigo_atan+0x184>
 80033c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d0:	ee17 3a90 	vmov	r3, s15
 80033d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    in[1] = (int32_t)(y * 2147483648.0f);
 80033d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033da:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003480 <trigo_atan+0x184>
 80033de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e6:	ee17 3a90 	vmov	r3, s15
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, &out, 1, HAL_MAX_DELAY));
 80033ec:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80033f0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2301      	movs	r3, #1
 80033fc:	481f      	ldr	r0, [pc, #124]	@ (800347c <trigo_atan+0x180>)
 80033fe:	f001 fcd1 	bl	8004da4 <HAL_CORDIC_Calculate>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003408:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <trigo_atan+0x12a>
 8003410:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	461a      	mov	r2, r3
 8003418:	2300      	movs	r3, #0
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	6053      	str	r3, [r2, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	460a      	mov	r2, r1
 8003422:	711a      	strb	r2, [r3, #4]
 8003424:	e022      	b.n	800346c <trigo_atan+0x170>
    float32_t angle = (float32_t)out / 2147483648.0f; // [-π, π)
 8003426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003430:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003480 <trigo_atan+0x184>
 8003434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003438:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (angle < 0) angle += MUL_2_PI;
 800343c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	d507      	bpl.n	800345a <trigo_atan+0x15e>
 800344a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800344e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003484 <trigo_atan+0x188>
 8003452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003456:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    *theta = angle;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800345e:	601a      	str	r2, [r3, #0]
    return RESULT_OK(NULL);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
}
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	3758      	adds	r7, #88	@ 0x58
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	200009c8 	.word	0x200009c8
 8003478:	20000200 	.word	0x20000200
 800347c:	20000380 	.word	0x20000380
 8003480:	4f000000 	.word	0x4f000000
 8003484:	40c90fdb 	.word	0x40c90fdb

08003488 <Reset_Handler>:
 8003488:	480d      	ldr	r0, [pc, #52]	@ (80034c0 <LoopForever+0x2>)
 800348a:	4685      	mov	sp, r0
 800348c:	f7fd fd8a 	bl	8000fa4 <SystemInit>
 8003490:	480c      	ldr	r0, [pc, #48]	@ (80034c4 <LoopForever+0x6>)
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <LoopForever+0xa>)
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <LoopForever+0xe>)
 8003496:	2300      	movs	r3, #0
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:
 800349a:	58d4      	ldr	r4, [r2, r3]
 800349c:	50c4      	str	r4, [r0, r3]
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:
 80034a0:	18c4      	adds	r4, r0, r3
 80034a2:	428c      	cmp	r4, r1
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LoopForever+0x12>)
 80034a8:	4c0a      	ldr	r4, [pc, #40]	@ (80034d4 <LoopForever+0x16>)
 80034aa:	2300      	movs	r3, #0
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:
 80034b2:	42a2      	cmp	r2, r4
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>
 80034b6:	f009 f8bb 	bl	800c630 <__libc_init_array>
 80034ba:	f7fd fbc1 	bl	8000c40 <main>

080034be <LoopForever>:
 80034be:	e7fe      	b.n	80034be <LoopForever>
 80034c0:	20008000 	.word	0x20008000
 80034c4:	20000000 	.word	0x20000000
 80034c8:	2000028c 	.word	0x2000028c
 80034cc:	0800c8c4 	.word	0x0800c8c4
 80034d0:	2000028c 	.word	0x2000028c
 80034d4:	20002594 	.word	0x20002594

080034d8 <ADC1_2_IRQHandler>:
 80034d8:	e7fe      	b.n	80034d8 <ADC1_2_IRQHandler>
	...

080034dc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80034e6:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <BSP_LED_Init+0x64>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	4a15      	ldr	r2, [pc, #84]	@ (8003540 <BSP_LED_Init+0x64>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <BSP_LED_Init+0x64>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80034fe:	2320      	movs	r3, #32
 8003500:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003502:	2301      	movs	r3, #1
 8003504:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	4a0c      	ldr	r2, [pc, #48]	@ (8003544 <BSP_LED_Init+0x68>)
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	f107 020c 	add.w	r2, r7, #12
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f002 fd71 	bl	8006004 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <BSP_LED_Init+0x68>)
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	2120      	movs	r1, #32
 800352c:	2200      	movs	r2, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f002 feea 	bl	8006308 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	2000021c 	.word	0x2000021c

08003548 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	460a      	mov	r2, r1
 8003552:	71fb      	strb	r3, [r7, #7]
 8003554:	4613      	mov	r3, r2
 8003556:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003558:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <BSP_PB_Init+0xc4>)
 800355a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355c:	4a2b      	ldr	r2, [pc, #172]	@ (800360c <BSP_PB_Init+0xc4>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003564:	4b29      	ldr	r3, [pc, #164]	@ (800360c <BSP_PB_Init+0xc4>)
 8003566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003574:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003576:	2302      	movs	r3, #2
 8003578:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800357a:	2302      	movs	r3, #2
 800357c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800357e:	79bb      	ldrb	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10c      	bne.n	800359e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	4a21      	ldr	r2, [pc, #132]	@ (8003610 <BSP_PB_Init+0xc8>)
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	f107 020c 	add.w	r2, r7, #12
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f002 fd34 	bl	8006004 <HAL_GPIO_Init>
 800359c:	e031      	b.n	8003602 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800359e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035a2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003610 <BSP_PB_Init+0xc8>)
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	f107 020c 	add.w	r2, r7, #12
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fd26 	bl	8006004 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4a15      	ldr	r2, [pc, #84]	@ (8003614 <BSP_PB_Init+0xcc>)
 80035be:	441a      	add	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	4915      	ldr	r1, [pc, #84]	@ (8003618 <BSP_PB_Init+0xd0>)
 80035c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f002 f825 	bl	800561a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003614 <BSP_PB_Init+0xcc>)
 80035d6:	1898      	adds	r0, r3, r2
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	4a10      	ldr	r2, [pc, #64]	@ (800361c <BSP_PB_Init+0xd4>)
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	461a      	mov	r2, r3
 80035e2:	2100      	movs	r1, #0
 80035e4:	f001 fffc 	bl	80055e0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80035e8:	2028      	movs	r0, #40	@ 0x28
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <BSP_PB_Init+0xd8>)
 80035ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f2:	2200      	movs	r2, #0
 80035f4:	4619      	mov	r1, r3
 80035f6:	f001 fd59 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80035fa:	2328      	movs	r3, #40	@ 0x28
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fd6f 	bl	80050e0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	20000220 	.word	0x20000220
 8003614:	200009cc 	.word	0x200009cc
 8003618:	0800c888 	.word	0x0800c888
 800361c:	20000228 	.word	0x20000228
 8003620:	2000022c 	.word	0x2000022c

08003624 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4a04      	ldr	r2, [pc, #16]	@ (8003644 <BSP_PB_IRQHandler+0x20>)
 8003634:	4413      	add	r3, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f002 f804 	bl	8005644 <HAL_EXTI_IRQHandler>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200009cc 	.word	0x200009cc

08003648 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d903      	bls.n	800367e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003676:	f06f 0301 	mvn.w	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e018      	b.n	80036b0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2294      	movs	r2, #148	@ 0x94
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a0d      	ldr	r2, [pc, #52]	@ (80036bc <BSP_COM_Init+0x5c>)
 8003688:	4413      	add	r3, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f852 	bl	8003734 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	2294      	movs	r2, #148	@ 0x94
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <BSP_COM_Init+0x5c>)
 800369a:	4413      	add	r3, r2
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f80e 	bl	80036c0 <MX_LPUART1_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80036aa:	f06f 0303 	mvn.w	r3, #3
 80036ae:	e000      	b.n	80036b2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200009d4 	.word	0x200009d4

080036c0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80036ca:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <MX_LPUART1_Init+0x60>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	220c      	movs	r2, #12
 80036de:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	895b      	ldrh	r3, [r3, #10]
 80036e4:	461a      	mov	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	891b      	ldrh	r3, [r3, #8]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	899b      	ldrh	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800370c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f005 fa9a 	bl	8008c48 <HAL_UART_Init>
 8003714:	4603      	mov	r3, r0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000224 	.word	0x20000224

08003724 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003728:	2000      	movs	r0, #0
 800372a:	f7ff ff8d 	bl	8003648 <BSP_PB_Callback>
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800373c:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <COM1_MspInit+0x94>)
 800373e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003740:	4a21      	ldr	r2, [pc, #132]	@ (80037c8 <COM1_MspInit+0x94>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003748:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <COM1_MspInit+0x94>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003754:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <COM1_MspInit+0x94>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003758:	4a1b      	ldr	r2, [pc, #108]	@ (80037c8 <COM1_MspInit+0x94>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <COM1_MspInit+0x94>)
 8003762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <COM1_MspInit+0x94>)
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <COM1_MspInit+0x94>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003778:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <COM1_MspInit+0x94>)
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003784:	2304      	movs	r3, #4
 8003786:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800378c:	2302      	movs	r3, #2
 800378e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003790:	2301      	movs	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003794:	230c      	movs	r3, #12
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	4619      	mov	r1, r3
 800379e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037a2:	f002 fc2f 	bl	8006004 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80037a6:	2308      	movs	r3, #8
 80037a8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80037ae:	230c      	movs	r3, #12
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037bc:	f002 fc22 	bl	8006004 <HAL_GPIO_Init>
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	@ 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d6:	2003      	movs	r0, #3
 80037d8:	f001 fc5d 	bl	8005096 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037dc:	200f      	movs	r0, #15
 80037de:	f7fd faff 	bl	8000de0 <HAL_InitTick>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	e001      	b.n	80037f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037ee:	f7fd facd 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037f2:	79fb      	ldrb	r3, [r7, #7]

}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <HAL_IncTick+0x1c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_IncTick+0x20>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4413      	add	r3, r2
 800380a:	4a03      	ldr	r2, [pc, #12]	@ (8003818 <HAL_IncTick+0x1c>)
 800380c:	6013      	str	r3, [r2, #0]
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20000a68 	.word	0x20000a68
 800381c:	20000234 	.word	0x20000234

08003820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return uwTick;
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <HAL_GetTick+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000a68 	.word	0x20000a68

08003838 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	609a      	str	r2, [r3, #8]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3360      	adds	r3, #96	@ 0x60
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <LL_ADC_SetOffset+0x44>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	03fff000 	.word	0x03fff000

080038e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3360      	adds	r3, #96	@ 0x60
 80038f6:	461a      	mov	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3360      	adds	r3, #96	@ 0x60
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3360      	adds	r3, #96	@ 0x60
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	431a      	orrs	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3360      	adds	r3, #96	@ 0x60
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	615a      	str	r2, [r3, #20]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3330      	adds	r3, #48	@ 0x30
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	4413      	add	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	211f      	movs	r1, #31
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	401a      	ands	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0e9b      	lsrs	r3, r3, #26
 8003a3a:	f003 011f 	and.w	r1, r3, #31
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	0e5b      	lsrs	r3, r3, #25
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0d1b      	lsrs	r3, r3, #20
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2107      	movs	r1, #7
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	0d1b      	lsrs	r3, r3, #20
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0318 	and.w	r3, r3, #24
 8003ad2:	4908      	ldr	r1, [pc, #32]	@ (8003af4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ad4:	40d9      	lsrs	r1, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	400b      	ands	r3, r1
 8003ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	0007ffff 	.word	0x0007ffff

08003af8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 031f 	and.w	r3, r3, #31
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6093      	str	r3, [r2, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <LL_ADC_IsEnabled+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_ADC_IsEnabled+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d101      	bne.n	8003c64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b089      	sub	sp, #36	@ 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e167      	b.n	8003f5e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fc fcfd 	bl	800069c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff3f 	bl	8003b38 <LL_ADC_IsDeepPowerDownEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff25 	bl	8003b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff5a 	bl	8003b88 <LL_ADC_IsInternalRegulatorEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ff3e 	bl	8003b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f68 <HAL_ADC_Init+0x2f4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	4aa0      	ldr	r2, [pc, #640]	@ (8003f6c <HAL_ADC_Init+0x2f8>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff3c 	bl	8003b88 <LL_ADC_IsInternalRegulatorEnabled>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff75 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 8100 	bne.w	8003f4c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 80fc 	bne.w	8003f4c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d5c:	f043 0202 	orr.w	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff35 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d111      	bne.n	8003d98 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d78:	f7ff ff2e 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	487c      	ldr	r0, [pc, #496]	@ (8003f70 <HAL_ADC_Init+0x2fc>)
 8003d80:	f7ff ff2a 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4323      	orrs	r3, r4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4878      	ldr	r0, [pc, #480]	@ (8003f74 <HAL_ADC_Init+0x300>)
 8003d94:	f7ff fd50 	bl	8003838 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7f5b      	ldrb	r3, [r3, #29]
 8003d9c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003da2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003da8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003db6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d106      	bne.n	8003dd4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	045b      	lsls	r3, r3, #17
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	4b60      	ldr	r3, [pc, #384]	@ (8003f78 <HAL_ADC_Init+0x304>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff14 	bl	8003c4c <LL_ADC_INJ_IsConversionOngoing>
 8003e24:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d16d      	bne.n	8003f08 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d16a      	bne.n	8003f08 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e36:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e4e:	f023 0302 	bic.w	r3, r3, #2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003e7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6911      	ldr	r1, [r2, #16]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003e92:	e013      	b.n	8003ebc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ea2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eb8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d118      	bne.n	8003ef8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e007      	b.n	8003f08 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10c      	bne.n	8003f2a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	f023 010f 	bic.w	r1, r3, #15
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	1e5a      	subs	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f28:	e007      	b.n	8003f3a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 020f 	bic.w	r2, r2, #15
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f4a:	e007      	b.n	8003f5c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	f043 0210 	orr.w	r2, r3, #16
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	@ 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd90      	pop	{r4, r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	053e2d63 	.word	0x053e2d63
 8003f70:	50000100 	.word	0x50000100
 8003f74:	50000300 	.word	0x50000300
 8003f78:	fff04007 	.word	0xfff04007

08003f7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f88:	4851      	ldr	r0, [pc, #324]	@ (80040d0 <HAL_ADC_Start_DMA+0x154>)
 8003f8a:	f7ff fdb5 	bl	8003af8 <LL_ADC_GetMultimode>
 8003f8e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fe46 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 808f 	bne.w	80040c0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_Start_DMA+0x34>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e08a      	b.n	80040c6 <HAL_ADC_Start_DMA+0x14a>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d002      	beq.n	8003fca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b09      	cmp	r3, #9
 8003fc8:	d173      	bne.n	80040b2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fc98 	bl	8004900 <ADC_Enable>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d166      	bne.n	80040a8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a38      	ldr	r2, [pc, #224]	@ (80040d4 <HAL_ADC_Start_DMA+0x158>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d002      	beq.n	8003ffe <HAL_ADC_Start_DMA+0x82>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	e001      	b.n	8004002 <HAL_ADC_Start_DMA+0x86>
 8003ffe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	4293      	cmp	r3, r2
 8004008:	d002      	beq.n	8004010 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004014:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	f023 0206 	bic.w	r2, r3, #6
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60
 8004034:	e002      	b.n	800403c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	4a25      	ldr	r2, [pc, #148]	@ (80040d8 <HAL_ADC_Start_DMA+0x15c>)
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	4a24      	ldr	r2, [pc, #144]	@ (80040dc <HAL_ADC_Start_DMA+0x160>)
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	4a23      	ldr	r2, [pc, #140]	@ (80040e0 <HAL_ADC_Start_DMA+0x164>)
 8004052:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	221c      	movs	r2, #28
 800405a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0210 	orr.w	r2, r2, #16
 8004072:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3340      	adds	r3, #64	@ 0x40
 800408e:	4619      	mov	r1, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f001 f8da 	bl	800524c <HAL_DMA_Start_IT>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fdac 	bl	8003bfe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80040a6:	e00d      	b.n	80040c4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80040b0:	e008      	b.n	80040c4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80040be:	e001      	b.n	80040c4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
 80040c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	50000300 	.word	0x50000300
 80040d4:	50000100 	.word	0x50000100
 80040d8:	08004a0d 	.word	0x08004a0d
 80040dc:	08004ae5 	.word	0x08004ae5
 80040e0:	08004b01 	.word	0x08004b01

080040e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0b6      	sub	sp, #216	@ 0xd8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x22>
 800413e:	2302      	movs	r3, #2
 8004140:	e3c8      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x7b4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fd69 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 83ad 	bne.w	80048b6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	f7ff fc4a 	bl	8003a02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fd57 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8004178:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fd63 	bl	8003c4c <LL_ADC_INJ_IsConversionOngoing>
 8004186:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800418a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 81d9 	bne.w	8004546 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 81d4 	bne.w	8004546 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041a6:	d10f      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2200      	movs	r2, #0
 80041b2:	4619      	mov	r1, r3
 80041b4:	f7ff fc51 	bl	8003a5a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fbf8 	bl	80039b6 <LL_ADC_SetSamplingTimeCommonConfig>
 80041c6:	e00e      	b.n	80041e6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	461a      	mov	r2, r3
 80041d6:	f7ff fc40 	bl	8003a5a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fbe8 	bl	80039b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	08db      	lsrs	r3, r3, #3
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d022      	beq.n	800424e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6919      	ldr	r1, [r3, #16]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004218:	f7ff fb42 	bl	80038a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6919      	ldr	r1, [r3, #16]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	461a      	mov	r2, r3
 800422a:	f7ff fb8e 	bl	800394a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x124>
 800423e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004242:	e000      	b.n	8004246 <HAL_ADC_ConfigChannel+0x126>
 8004244:	2300      	movs	r3, #0
 8004246:	461a      	mov	r2, r3
 8004248:	f7ff fb9a 	bl	8003980 <LL_ADC_SetOffsetSaturation>
 800424c:	e17b      	b.n	8004546 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fb47 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 800425a:	4603      	mov	r3, r0
 800425c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <HAL_ADC_ConfigChannel+0x15a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fb3c 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	e01e      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x198>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fb31 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004286:	4603      	mov	r3, r0
 8004288:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800429c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80042a8:	2320      	movs	r3, #32
 80042aa:	e004      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80042ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x1b0>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	e018      	b.n	8004302 <HAL_ADC_ConfigChannel+0x1e2>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80042e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80042ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e004      	b.n	8004302 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80042f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004302:	429a      	cmp	r2, r3
 8004304:	d106      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fb00 	bl	8003914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fae4 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004320:	4603      	mov	r3, r0
 8004322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x220>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fad9 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004336:	4603      	mov	r3, r0
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	f003 021f 	and.w	r2, r3, #31
 800433e:	e01e      	b.n	800437e <HAL_ADC_ConfigChannel+0x25e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff face 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 800434c:	4603      	mov	r3, r0
 800434e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800436e:	2320      	movs	r3, #32
 8004370:	e004      	b.n	800437c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x276>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	0e9b      	lsrs	r3, r3, #26
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	e018      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x2a8>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80043aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80043b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80043ba:	2320      	movs	r3, #32
 80043bc:	e004      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80043be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d106      	bne.n	80043da <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fa9d 	bl	8003914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fa81 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x2e6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2102      	movs	r1, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fa76 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	0e9b      	lsrs	r3, r3, #26
 8004400:	f003 021f 	and.w	r2, r3, #31
 8004404:	e01e      	b.n	8004444 <HAL_ADC_ConfigChannel+0x324>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2102      	movs	r1, #2
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fa6b 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004412:	4603      	mov	r3, r0
 8004414:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800442c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004434:	2320      	movs	r3, #32
 8004436:	e004      	b.n	8004442 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004438:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <HAL_ADC_ConfigChannel+0x33c>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	e016      	b.n	800448a <HAL_ADC_ConfigChannel+0x36a>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800446e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004474:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800447c:	2320      	movs	r3, #32
 800447e:	e004      	b.n	800448a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004484:	fab3 f383 	clz	r3, r3
 8004488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800448a:	429a      	cmp	r2, r3
 800448c:	d106      	bne.n	800449c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	2102      	movs	r1, #2
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fa3c 	bl	8003914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2103      	movs	r1, #3
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fa20 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x3a8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2103      	movs	r1, #3
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fa15 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80044be:	4603      	mov	r3, r0
 80044c0:	0e9b      	lsrs	r3, r3, #26
 80044c2:	f003 021f 	and.w	r2, r3, #31
 80044c6:	e017      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x3d8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2103      	movs	r1, #3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fa0a 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80044e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80044e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80044ea:	2320      	movs	r3, #32
 80044ec:	e003      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80044ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x3f0>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0e9b      	lsrs	r3, r3, #26
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	e011      	b.n	8004534 <HAL_ADC_ConfigChannel+0x414>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800451e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004520:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004528:	2320      	movs	r3, #32
 800452a:	e003      	b.n	8004534 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800452c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004534:	429a      	cmp	r2, r3
 8004536:	d106      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	2103      	movs	r1, #3
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f9e7 	bl	8003914 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fb44 	bl	8003bd8 <LL_ADC_IsEnabled>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	f040 8140 	bne.w	80047d8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	461a      	mov	r2, r3
 8004566:	f7ff faa3 	bl	8003ab0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4a8f      	ldr	r2, [pc, #572]	@ (80047ac <HAL_ADC_ConfigChannel+0x68c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	f040 8131 	bne.w	80047d8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_ADC_ConfigChannel+0x47e>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	0e9b      	lsrs	r3, r3, #26
 800458c:	3301      	adds	r3, #1
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2b09      	cmp	r3, #9
 8004594:	bf94      	ite	ls
 8004596:	2301      	movls	r3, #1
 8004598:	2300      	movhi	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	e019      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x4b2>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80045ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045ae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80045b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80045b6:	2320      	movs	r3, #32
 80045b8:	e003      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80045ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	bf94      	ite	ls
 80045cc:	2301      	movls	r3, #1
 80045ce:	2300      	movhi	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d079      	beq.n	80046ca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x4d2>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	0e9b      	lsrs	r3, r3, #26
 80045e8:	3301      	adds	r3, #1
 80045ea:	069b      	lsls	r3, r3, #26
 80045ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f0:	e015      	b.n	800461e <HAL_ADC_ConfigChannel+0x4fe>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004602:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800460a:	2320      	movs	r3, #32
 800460c:	e003      	b.n	8004616 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3301      	adds	r3, #1
 8004618:	069b      	lsls	r3, r3, #26
 800461a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_ADC_ConfigChannel+0x51e>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	0e9b      	lsrs	r3, r3, #26
 8004630:	3301      	adds	r3, #1
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	e017      	b.n	800466e <HAL_ADC_ConfigChannel+0x54e>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004646:	fa93 f3a3 	rbit	r3, r3
 800464a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800464c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004656:	2320      	movs	r3, #32
 8004658:	e003      	b.n	8004662 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800465a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3301      	adds	r3, #1
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2101      	movs	r1, #1
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	ea42 0103 	orr.w	r1, r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x574>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0e9b      	lsrs	r3, r3, #26
 8004684:	3301      	adds	r3, #1
 8004686:	f003 021f 	and.w	r2, r3, #31
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	051b      	lsls	r3, r3, #20
 8004692:	e018      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x5a6>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e003      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80046b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f003 021f 	and.w	r2, r3, #31
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c6:	430b      	orrs	r3, r1
 80046c8:	e081      	b.n	80047ce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x5c6>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	0e9b      	lsrs	r3, r3, #26
 80046dc:	3301      	adds	r3, #1
 80046de:	069b      	lsls	r3, r3, #26
 80046e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046e4:	e015      	b.n	8004712 <HAL_ADC_ConfigChannel+0x5f2>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80046fe:	2320      	movs	r3, #32
 8004700:	e003      	b.n	800470a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	3301      	adds	r3, #1
 800470c:	069b      	lsls	r3, r3, #26
 800470e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x612>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	0e9b      	lsrs	r3, r3, #26
 8004724:	3301      	adds	r3, #1
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2101      	movs	r1, #1
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	e017      	b.n	8004762 <HAL_ADC_ConfigChannel+0x642>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	61fb      	str	r3, [r7, #28]
  return result;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800474a:	2320      	movs	r3, #32
 800474c:	e003      	b.n	8004756 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	fab3 f383 	clz	r3, r3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	3301      	adds	r3, #1
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	ea42 0103 	orr.w	r1, r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <HAL_ADC_ConfigChannel+0x66e>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	0e9b      	lsrs	r3, r3, #26
 8004778:	3301      	adds	r3, #1
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	3b1e      	subs	r3, #30
 8004786:	051b      	lsls	r3, r3, #20
 8004788:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800478c:	e01e      	b.n	80047cc <HAL_ADC_ConfigChannel+0x6ac>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	613b      	str	r3, [r7, #16]
  return result;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80047a6:	2320      	movs	r3, #32
 80047a8:	e006      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x698>
 80047aa:	bf00      	nop
 80047ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 021f 	and.w	r2, r3, #31
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	3b1e      	subs	r3, #30
 80047c6:	051b      	lsls	r3, r3, #20
 80047c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7ff f941 	bl	8003a5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b3f      	ldr	r3, [pc, #252]	@ (80048dc <HAL_ADC_ConfigChannel+0x7bc>)
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d071      	beq.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047e4:	483e      	ldr	r0, [pc, #248]	@ (80048e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80047e6:	f7ff f84d 	bl	8003884 <LL_ADC_GetCommonPathInternalCh>
 80047ea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3c      	ldr	r2, [pc, #240]	@ (80048e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_ADC_ConfigChannel+0x6e2>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3a      	ldr	r2, [pc, #232]	@ (80048e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d127      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d121      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004816:	d157      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800481c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004820:	4619      	mov	r1, r3
 8004822:	482f      	ldr	r0, [pc, #188]	@ (80048e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004824:	f7ff f81b 	bl	800385e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004828:	4b30      	ldr	r3, [pc, #192]	@ (80048ec <HAL_ADC_ConfigChannel+0x7cc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	4a30      	ldr	r2, [pc, #192]	@ (80048f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004842:	e002      	b.n	800484a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b01      	subs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f9      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004850:	e03a      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a27      	ldr	r2, [pc, #156]	@ (80048f4 <HAL_ADC_ConfigChannel+0x7d4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d113      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800485c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a22      	ldr	r2, [pc, #136]	@ (80048f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02a      	beq.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800487a:	4619      	mov	r1, r3
 800487c:	4818      	ldr	r0, [pc, #96]	@ (80048e0 <HAL_ADC_ConfigChannel+0x7c0>)
 800487e:	f7fe ffee 	bl	800385e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004882:	e021      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <HAL_ADC_ConfigChannel+0x7dc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d11c      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800488e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d011      	beq.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ac:	4619      	mov	r1, r3
 80048ae:	480c      	ldr	r0, [pc, #48]	@ (80048e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80048b0:	f7fe ffd5 	bl	800385e <LL_ADC_SetCommonPathInternalCh>
 80048b4:	e008      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	37d8      	adds	r7, #216	@ 0xd8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	80080000 	.word	0x80080000
 80048e0:	50000300 	.word	0x50000300
 80048e4:	c3210000 	.word	0xc3210000
 80048e8:	90c00010 	.word	0x90c00010
 80048ec:	20000000 	.word	0x20000000
 80048f0:	053e2d63 	.word	0x053e2d63
 80048f4:	c7520000 	.word	0xc7520000
 80048f8:	50000100 	.word	0x50000100
 80048fc:	cb840000 	.word	0xcb840000

08004900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff f961 	bl	8003bd8 <LL_ADC_IsEnabled>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d169      	bne.n	80049f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <ADC_Enable+0xfc>)
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492e:	f043 0210 	orr.w	r2, r3, #16
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e055      	b.n	80049f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f930 	bl	8003bb0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004950:	482b      	ldr	r0, [pc, #172]	@ (8004a00 <ADC_Enable+0x100>)
 8004952:	f7fe ff97 	bl	8003884 <LL_ADC_GetCommonPathInternalCh>
 8004956:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004960:	4b28      	ldr	r3, [pc, #160]	@ (8004a04 <ADC_Enable+0x104>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	4a28      	ldr	r2, [pc, #160]	@ (8004a08 <ADC_Enable+0x108>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800497a:	e002      	b.n	8004982 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3b01      	subs	r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f9      	bne.n	800497c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004988:	f7fe ff4a 	bl	8003820 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800498e:	e028      	b.n	80049e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff f91f 	bl	8003bd8 <LL_ADC_IsEnabled>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff f903 	bl	8003bb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049aa:	f7fe ff39 	bl	8003820 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d914      	bls.n	80049e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00d      	beq.n	80049e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f043 0210 	orr.w	r2, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d1cf      	bne.n	8004990 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	8000003f 	.word	0x8000003f
 8004a00:	50000300 	.word	0x50000300
 8004a04:	20000000 	.word	0x20000000
 8004a08:	053e2d63 	.word	0x053e2d63

08004a0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d14b      	bne.n	8004abe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d021      	beq.n	8004a84 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe ffc9 	bl	80039dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d032      	beq.n	8004ab6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d12b      	bne.n	8004ab6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11f      	bne.n	8004ab6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f043 0201 	orr.w	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a82:	e018      	b.n	8004ab6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d111      	bne.n	8004ab6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f043 0201 	orr.w	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fb14 	bl	80040e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004abc:	e00e      	b.n	8004adc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fb1e 	bl	800410c <HAL_ADC_ErrorCallback>
}
 8004ad0:	e004      	b.n	8004adc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff fb00 	bl	80040f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff faf0 	bl	800410c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <LL_ADC_IsEnabled>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <LL_ADC_IsEnabled+0x18>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <LL_ADC_IsEnabled+0x1a>
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d101      	bne.n	8004b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b0a1      	sub	sp, #132	@ 0x84
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e08b      	b.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004baa:	2300      	movs	r3, #0
 8004bac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb6:	d102      	bne.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bb8:	4b41      	ldr	r3, [pc, #260]	@ (8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	e001      	b.n	8004bc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e06a      	b.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ffb9 	bl	8004b5a <LL_ADC_REG_IsConversionOngoing>
 8004be8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ffb3 	bl	8004b5a <LL_ADC_REG_IsConversionOngoing>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d14c      	bne.n	8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d149      	bne.n	8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c00:	4b30      	ldr	r3, [pc, #192]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004c02:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d028      	beq.n	8004c5e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c1e:	035b      	lsls	r3, r3, #13
 8004c20:	430b      	orrs	r3, r1
 8004c22:	431a      	orrs	r2, r3
 8004c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c2c:	f7ff ff82 	bl	8004b34 <LL_ADC_IsEnabled>
 8004c30:	4604      	mov	r4, r0
 8004c32:	4823      	ldr	r0, [pc, #140]	@ (8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c34:	f7ff ff7e 	bl	8004b34 <LL_ADC_IsEnabled>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4323      	orrs	r3, r4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d133      	bne.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c48:	f023 030f 	bic.w	r3, r3, #15
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	6811      	ldr	r1, [r2, #0]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	6892      	ldr	r2, [r2, #8]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c5c:	e024      	b.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c6a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c6e:	f7ff ff61 	bl	8004b34 <LL_ADC_IsEnabled>
 8004c72:	4604      	mov	r4, r0
 8004c74:	4812      	ldr	r0, [pc, #72]	@ (8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c76:	f7ff ff5d 	bl	8004b34 <LL_ADC_IsEnabled>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4323      	orrs	r3, r4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d112      	bne.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c8a:	f023 030f 	bic.w	r3, r3, #15
 8004c8e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c90:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c92:	e009      	b.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ca6:	e000      	b.n	8004caa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cb2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3784      	adds	r7, #132	@ 0x84
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	50000100 	.word	0x50000100
 8004cc4:	50000300 	.word	0x50000300

08004cc8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e023      	b.n	8004d22 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fb fd9c 	bl	800082c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d11d      	bne.n	8004d82 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <HAL_CORDIC_Configure+0x74>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	6811      	ldr	r1, [r2, #0]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	6992      	ldr	r2, [r2, #24]
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	6852      	ldr	r2, [r2, #4]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	6912      	ldr	r2, [r2, #16]
 8004d64:	4311      	orrs	r1, r2
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	6952      	ldr	r2, [r2, #20]
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6892      	ldr	r2, [r2, #8]
 8004d70:	4311      	orrs	r1, r2
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	68d2      	ldr	r2, [r2, #12]
 8004d76:	4311      	orrs	r1, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e007      	b.n	8004d92 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f043 0202 	orr.w	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	ff87f800 	.word	0xff87f800

08004da4 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_CORDIC_Calculate+0x28>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_CORDIC_Calculate+0x28>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e058      	b.n	8004e8e <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d14b      	bne.n	8004e80 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8004df6:	f7fe fd13 	bl	8003820 <HAL_GetTick>
 8004dfa:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f847 	bl	8004e96 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e028      	b.n	8004e62 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	4619      	mov	r1, r3
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f83d 	bl	8004e96 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d010      	beq.n	8004e46 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8004e24:	f7fe fcfc 	bl	8003820 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d208      	bcs.n	8004e46 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2204      	movs	r2, #4
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e023      	b.n	8004e8e <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dae5      	bge.n	8004e1c <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004e50:	f107 0310 	add.w	r3, r7, #16
 8004e54:	4619      	mov	r1, r3
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f846 	bl	8004ee8 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1d3      	bne.n	8004e10 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004e68:	f107 0310 	add.w	r3, r7, #16
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f83a 	bl	8004ee8 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e006      	b.n	8004e8e <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	f043 0202 	orr.w	r2, r3, #2
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec4:	d10a      	bne.n	8004edc <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	601a      	str	r2, [r3, #0]
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f16:	d10a      	bne.n	8004f2e <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	1d1a      	adds	r2, r3, #4
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	601a      	str	r2, [r3, #0]
  }
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <__NVIC_SetPriorityGrouping+0x44>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	@ (8004f80 <__NVIC_SetPriorityGrouping+0x44>)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	60d3      	str	r3, [r2, #12]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <__NVIC_GetPriorityGrouping+0x18>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	0a1b      	lsrs	r3, r3, #8
 8004f8e:	f003 0307 	and.w	r3, r3, #7
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	db0b      	blt.n	8004fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	f003 021f 	and.w	r2, r3, #31
 8004fb8:	4907      	ldr	r1, [pc, #28]	@ (8004fd8 <__NVIC_EnableIRQ+0x38>)
 8004fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e100 	.word	0xe000e100

08004fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	6039      	str	r1, [r7, #0]
 8004fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db0a      	blt.n	8005006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	490c      	ldr	r1, [pc, #48]	@ (8005028 <__NVIC_SetPriority+0x4c>)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	0112      	lsls	r2, r2, #4
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	440b      	add	r3, r1
 8005000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005004:	e00a      	b.n	800501c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4908      	ldr	r1, [pc, #32]	@ (800502c <__NVIC_SetPriority+0x50>)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	3b04      	subs	r3, #4
 8005014:	0112      	lsls	r2, r2, #4
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	440b      	add	r3, r1
 800501a:	761a      	strb	r2, [r3, #24]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	e000e100 	.word	0xe000e100
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	@ 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f1c3 0307 	rsb	r3, r3, #7
 800504a:	2b04      	cmp	r3, #4
 800504c:	bf28      	it	cs
 800504e:	2304      	movcs	r3, #4
 8005050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	3304      	adds	r3, #4
 8005056:	2b06      	cmp	r3, #6
 8005058:	d902      	bls.n	8005060 <NVIC_EncodePriority+0x30>
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3b03      	subs	r3, #3
 800505e:	e000      	b.n	8005062 <NVIC_EncodePriority+0x32>
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	401a      	ands	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005078:	f04f 31ff 	mov.w	r1, #4294967295
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	43d9      	mvns	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	4313      	orrs	r3, r2
         );
}
 800508a:	4618      	mov	r0, r3
 800508c:	3724      	adds	r7, #36	@ 0x24
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff ff4c 	bl	8004f3c <__NVIC_SetPriorityGrouping>
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050ba:	f7ff ff63 	bl	8004f84 <__NVIC_GetPriorityGrouping>
 80050be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	6978      	ldr	r0, [r7, #20]
 80050c6:	f7ff ffb3 	bl	8005030 <NVIC_EncodePriority>
 80050ca:	4602      	mov	r2, r0
 80050cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ff82 	bl	8004fdc <__NVIC_SetPriority>
}
 80050d8:	bf00      	nop
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ff56 	bl	8004fa0 <__NVIC_EnableIRQ>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e08d      	b.n	800522a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	4b47      	ldr	r3, [pc, #284]	@ (8005234 <HAL_DMA_Init+0x138>)
 8005116:	429a      	cmp	r2, r3
 8005118:	d80f      	bhi.n	800513a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	4b45      	ldr	r3, [pc, #276]	@ (8005238 <HAL_DMA_Init+0x13c>)
 8005122:	4413      	add	r3, r2
 8005124:	4a45      	ldr	r2, [pc, #276]	@ (800523c <HAL_DMA_Init+0x140>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	009a      	lsls	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a42      	ldr	r2, [pc, #264]	@ (8005240 <HAL_DMA_Init+0x144>)
 8005136:	641a      	str	r2, [r3, #64]	@ 0x40
 8005138:	e00e      	b.n	8005158 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	4b40      	ldr	r3, [pc, #256]	@ (8005244 <HAL_DMA_Init+0x148>)
 8005142:	4413      	add	r3, r2
 8005144:	4a3d      	ldr	r2, [pc, #244]	@ (800523c <HAL_DMA_Init+0x140>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	009a      	lsls	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a3c      	ldr	r2, [pc, #240]	@ (8005248 <HAL_DMA_Init+0x14c>)
 8005156:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800517c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f9b6 	bl	800551c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b8:	d102      	bne.n	80051c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d010      	beq.n	8005200 <HAL_DMA_Init+0x104>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d80c      	bhi.n	8005200 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f9d6 	bl	8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	e008      	b.n	8005212 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40020407 	.word	0x40020407
 8005238:	bffdfff8 	.word	0xbffdfff8
 800523c:	cccccccd 	.word	0xcccccccd
 8005240:	40020000 	.word	0x40020000
 8005244:	bffdfbf8 	.word	0xbffdfbf8
 8005248:	40020400 	.word	0x40020400

0800524c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_DMA_Start_IT+0x20>
 8005268:	2302      	movs	r3, #2
 800526a:	e066      	b.n	800533a <HAL_DMA_Start_IT+0xee>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d155      	bne.n	800532c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f8fb 	bl	80054a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 020e 	orr.w	r2, r2, #14
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e00f      	b.n	80052e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0204 	bic.w	r2, r2, #4
 80052d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 020a 	orr.w	r2, r2, #10
 80052e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005300:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005318:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e005      	b.n	8005338 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005334:	2302      	movs	r3, #2
 8005336:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2204      	movs	r2, #4
 8005364:	409a      	lsls	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d026      	beq.n	80053bc <HAL_DMA_IRQHandler+0x7a>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d021      	beq.n	80053bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0204 	bic.w	r2, r2, #4
 8005394:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f003 021f 	and.w	r2, r3, #31
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	2104      	movs	r1, #4
 80053a4:	fa01 f202 	lsl.w	r2, r1, r2
 80053a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d071      	beq.n	8005496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053ba:	e06c      	b.n	8005496 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2202      	movs	r2, #2
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02e      	beq.n	800542e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d029      	beq.n	800542e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 020a 	bic.w	r2, r2, #10
 80053f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005404:	f003 021f 	and.w	r2, r3, #31
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	2102      	movs	r1, #2
 800540e:	fa01 f202 	lsl.w	r2, r1, r2
 8005412:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d038      	beq.n	8005496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800542c:	e033      	b.n	8005496 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	2208      	movs	r2, #8
 8005438:	409a      	lsls	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02a      	beq.n	8005498 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d025      	beq.n	8005498 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 020e 	bic.w	r2, r2, #14
 800545a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005460:	f003 021f 	and.w	r2, r3, #31
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	2101      	movs	r1, #1
 800546a:	fa01 f202 	lsl.w	r2, r1, r2
 800546e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005496:	bf00      	nop
 8005498:	bf00      	nop
}
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f003 021f 	and.w	r2, r3, #31
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f202 	lsl.w	r2, r1, r2
 80054dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d108      	bne.n	8005500 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054fe:	e007      	b.n	8005510 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	4b16      	ldr	r3, [pc, #88]	@ (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800552c:	429a      	cmp	r2, r3
 800552e:	d802      	bhi.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005530:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e001      	b.n	800553a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005536:	4b15      	ldr	r3, [pc, #84]	@ (800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005538:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3b08      	subs	r3, #8
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	089b      	lsrs	r3, r3, #2
 8005556:	009a      	lsls	r2, r3, #2
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a0b      	ldr	r2, [pc, #44]	@ (8005594 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005566:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2201      	movs	r2, #1
 8005570:	409a      	lsls	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40020407 	.word	0x40020407
 8005588:	40020800 	.word	0x40020800
 800558c:	40020820 	.word	0x40020820
 8005590:	cccccccd 	.word	0xcccccccd
 8005594:	40020880 	.word	0x40020880

08005598 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	461a      	mov	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a08      	ldr	r2, [pc, #32]	@ (80055dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055ba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3b01      	subs	r3, #1
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2201      	movs	r2, #1
 80055c6:	409a      	lsls	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	1000823f 	.word	0x1000823f
 80055dc:	40020940 	.word	0x40020940

080055e0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	460b      	mov	r3, r1
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	605a      	str	r2, [r3, #4]
      break;
 80055fe:	e005      	b.n	800560c <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	bf00      	nop
  }

  return status;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
}
 800560e:	4618      	mov	r0, r3
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e003      	b.n	8005636 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2201      	movs	r2, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <HAL_EXTI_IRQHandler+0x5c>)
 800566e:	4413      	add	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4798      	blx	r3
    }
  }
}
 8005696:	bf00      	nop
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40010414 	.word	0x40010414

080056a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e147      	b.n	8005946 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fb f9aa 	bl	8000a24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0210 	bic.w	r2, r2, #16
 80056de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056e0:	f7fe f89e 	bl	8003820 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056e6:	e012      	b.n	800570e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056e8:	f7fe f89a 	bl	8003820 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b0a      	cmp	r3, #10
 80056f4:	d90b      	bls.n	800570e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fa:	f043 0201 	orr.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2203      	movs	r2, #3
 8005706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e11b      	b.n	8005946 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b08      	cmp	r3, #8
 800571a:	d0e5      	beq.n	80056e8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800572c:	f7fe f878 	bl	8003820 <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005732:	e012      	b.n	800575a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005734:	f7fe f874 	bl	8003820 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b0a      	cmp	r3, #10
 8005740:	d90b      	bls.n	800575a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005746:	f043 0201 	orr.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2203      	movs	r2, #3
 8005752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e0f5      	b.n	8005946 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0e5      	beq.n	8005734 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0202 	orr.w	r2, r2, #2
 8005776:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a74      	ldr	r2, [pc, #464]	@ (8005950 <HAL_FDCAN_Init+0x2ac>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d103      	bne.n	800578a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005782:	4a74      	ldr	r2, [pc, #464]	@ (8005954 <HAL_FDCAN_Init+0x2b0>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7c1b      	ldrb	r3, [r3, #16]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d108      	bne.n	80057a4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a0:	619a      	str	r2, [r3, #24]
 80057a2:	e007      	b.n	80057b4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7c5b      	ldrb	r3, [r3, #17]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d108      	bne.n	80057ce <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ca:	619a      	str	r2, [r3, #24]
 80057cc:	e007      	b.n	80057de <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7c9b      	ldrb	r3, [r3, #18]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d108      	bne.n	80057f8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057f4:	619a      	str	r2, [r3, #24]
 80057f6:	e007      	b.n	8005808 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005806:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800582c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0210 	bic.w	r2, r2, #16
 800583c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d108      	bne.n	8005858 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0204 	orr.w	r2, r2, #4
 8005854:	619a      	str	r2, [r3, #24]
 8005856:	e02c      	b.n	80058b2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d028      	beq.n	80058b2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d01c      	beq.n	80058a2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005876:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0210 	orr.w	r2, r2, #16
 8005886:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d110      	bne.n	80058b2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0220 	orr.w	r2, r2, #32
 800589e:	619a      	str	r2, [r3, #24]
 80058a0:	e007      	b.n	80058b2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0220 	orr.w	r2, r2, #32
 80058b0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	3b01      	subs	r3, #1
 80058c0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058c2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058ca:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058da:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058dc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058e6:	d115      	bne.n	8005914 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	3b01      	subs	r3, #1
 80058f4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80058f6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	3b01      	subs	r3, #1
 80058fe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005900:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	3b01      	subs	r3, #1
 800590a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005910:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005912:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fb14 	bl	8005f58 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40006400 	.word	0x40006400
 8005954:	40006500 	.word	0x40006500

08005958 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005958:	b480      	push	{r7}
 800595a:	b08b      	sub	sp, #44	@ 0x2c
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005970:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005972:	7efb      	ldrb	r3, [r7, #27]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f040 80e8 	bne.w	8005b4a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b40      	cmp	r3, #64	@ 0x40
 800597e:	d137      	bne.n	80059f0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005994:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0db      	b.n	8005b58 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059b0:	d10a      	bne.n	80059c8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c2:	d101      	bne.n	80059c8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80059c4:	2301      	movs	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	440b      	add	r3, r1
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ee:	e036      	b.n	8005a5e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0a3      	b.n	8005b58 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a20:	d10a      	bne.n	8005a38 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a32:	d101      	bne.n	8005a38 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	440b      	add	r3, r1
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d107      	bne.n	8005a82 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	0c9b      	lsrs	r3, r3, #18
 8005a78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e005      	b.n	8005a8e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f003 020f 	and.w	r2, r3, #15
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	0fda      	lsrs	r2, r3, #31
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	3304      	adds	r3, #4
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	623b      	str	r3, [r7, #32]
 8005b02:	e00a      	b.n	8005b1a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	441a      	add	r2, r3
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	440b      	add	r3, r1
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	3301      	adds	r3, #1
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4a11      	ldr	r2, [pc, #68]	@ (8005b64 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005b20:	5cd3      	ldrb	r3, [r2, r3]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d3ec      	bcc.n	8005b04 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d105      	bne.n	8005b3c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005b3a:	e004      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e006      	b.n	8005b58 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4e:	f043 0208 	orr.w	r2, r3, #8
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	372c      	adds	r7, #44	@ 0x2c
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	0800c88c 	.word	0x0800c88c

08005b68 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b78:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d16e      	bne.n	8005c5e <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d107      	bne.n	8005ba0 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e065      	b.n	8005c6c <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	0c9b      	lsrs	r3, r3, #18
 8005bd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e005      	b.n	8005bec <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3304      	adds	r3, #4
 8005c08:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	f003 020f 	and.w	r2, r3, #15
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	0e1a      	lsrs	r2, r3, #24
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e006      	b.n	8005c6c <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	@ 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c86:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c94:	4013      	ands	r3, r2
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cac:	4013      	ands	r3, r2
 8005cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005cd2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005cea:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d06:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	099b      	lsrs	r3, r3, #6
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00c      	beq.n	8005d2e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2240      	movs	r2, #64	@ 0x40
 8005d26:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f901 	bl	8005f30 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01a      	beq.n	8005d70 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d014      	beq.n	8005d70 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d4e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8c1 	bl	8005ef2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fb fd15 	bl	80017b0 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fd30 	bl	80017fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fb fd95 	bl	80018dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	0a5b      	lsrs	r3, r3, #9
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f882 	bl	8005ede <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	09db      	lsrs	r3, r3, #7
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d019      	beq.n	8005e1a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	09db      	lsrs	r3, r3, #7
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d013      	beq.n	8005e1a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005dfa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2280      	movs	r2, #128	@ 0x80
 8005e10:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fb fce6 	bl	80017e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	0b5b      	lsrs	r3, r3, #13
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	0b5b      	lsrs	r3, r3, #13
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f863 	bl	8005f08 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	0bdb      	lsrs	r3, r3, #15
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	0bdb      	lsrs	r3, r3, #15
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005e62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f859 	bl	8005f1c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	0b9b      	lsrs	r3, r3, #14
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d010      	beq.n	8005e98 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	0b9b      	lsrs	r3, r3, #14
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005e8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005ea6:	69f9      	ldr	r1, [r7, #28]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fb fc65 	bl	8001778 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f837 	bl	8005f44 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3730      	adds	r7, #48	@ 0x30
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005f60:	4b27      	ldr	r3, [pc, #156]	@ (8006000 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005f62:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f72:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7a:	041a      	lsls	r2, r3, #16
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f98:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	061a      	lsls	r2, r3, #24
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e005      	b.n	8005fe6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d3f3      	bcc.n	8005fda <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	4000a400 	.word	0x4000a400

08006004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006012:	e15a      	b.n	80062ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	2101      	movs	r1, #1
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	fa01 f303 	lsl.w	r3, r1, r3
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 814c 	beq.w	80062c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d005      	beq.n	8006044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006040:	2b02      	cmp	r3, #2
 8006042:	d130      	bne.n	80060a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	2203      	movs	r2, #3
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	43db      	mvns	r3, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4013      	ands	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800607a:	2201      	movs	r2, #1
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	f003 0201 	and.w	r2, r3, #1
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d017      	beq.n	80060e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	2203      	movs	r2, #3
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4013      	ands	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d123      	bne.n	8006136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	08da      	lsrs	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3208      	adds	r2, #8
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	220f      	movs	r2, #15
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4013      	ands	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	08da      	lsrs	r2, r3, #3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3208      	adds	r2, #8
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2203      	movs	r2, #3
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4013      	ands	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0203 	and.w	r2, r3, #3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80a6 	beq.w	80062c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006178:	4b5b      	ldr	r3, [pc, #364]	@ (80062e8 <HAL_GPIO_Init+0x2e4>)
 800617a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617c:	4a5a      	ldr	r2, [pc, #360]	@ (80062e8 <HAL_GPIO_Init+0x2e4>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6613      	str	r3, [r2, #96]	@ 0x60
 8006184:	4b58      	ldr	r3, [pc, #352]	@ (80062e8 <HAL_GPIO_Init+0x2e4>)
 8006186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	60bb      	str	r3, [r7, #8]
 800618e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006190:	4a56      	ldr	r2, [pc, #344]	@ (80062ec <HAL_GPIO_Init+0x2e8>)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	3302      	adds	r3, #2
 8006198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	220f      	movs	r2, #15
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80061ba:	d01f      	beq.n	80061fc <HAL_GPIO_Init+0x1f8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a4c      	ldr	r2, [pc, #304]	@ (80062f0 <HAL_GPIO_Init+0x2ec>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d019      	beq.n	80061f8 <HAL_GPIO_Init+0x1f4>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a4b      	ldr	r2, [pc, #300]	@ (80062f4 <HAL_GPIO_Init+0x2f0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d013      	beq.n	80061f4 <HAL_GPIO_Init+0x1f0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a4a      	ldr	r2, [pc, #296]	@ (80062f8 <HAL_GPIO_Init+0x2f4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00d      	beq.n	80061f0 <HAL_GPIO_Init+0x1ec>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a49      	ldr	r2, [pc, #292]	@ (80062fc <HAL_GPIO_Init+0x2f8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <HAL_GPIO_Init+0x1e8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a48      	ldr	r2, [pc, #288]	@ (8006300 <HAL_GPIO_Init+0x2fc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d101      	bne.n	80061e8 <HAL_GPIO_Init+0x1e4>
 80061e4:	2305      	movs	r3, #5
 80061e6:	e00a      	b.n	80061fe <HAL_GPIO_Init+0x1fa>
 80061e8:	2306      	movs	r3, #6
 80061ea:	e008      	b.n	80061fe <HAL_GPIO_Init+0x1fa>
 80061ec:	2304      	movs	r3, #4
 80061ee:	e006      	b.n	80061fe <HAL_GPIO_Init+0x1fa>
 80061f0:	2303      	movs	r3, #3
 80061f2:	e004      	b.n	80061fe <HAL_GPIO_Init+0x1fa>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e002      	b.n	80061fe <HAL_GPIO_Init+0x1fa>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_GPIO_Init+0x1fa>
 80061fc:	2300      	movs	r3, #0
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	f002 0203 	and.w	r2, r2, #3
 8006204:	0092      	lsls	r2, r2, #2
 8006206:	4093      	lsls	r3, r2
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800620e:	4937      	ldr	r1, [pc, #220]	@ (80062ec <HAL_GPIO_Init+0x2e8>)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	089b      	lsrs	r3, r3, #2
 8006214:	3302      	adds	r3, #2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800621c:	4b39      	ldr	r3, [pc, #228]	@ (8006304 <HAL_GPIO_Init+0x300>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	43db      	mvns	r3, r3
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4013      	ands	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006240:	4a30      	ldr	r2, [pc, #192]	@ (8006304 <HAL_GPIO_Init+0x300>)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006246:	4b2f      	ldr	r3, [pc, #188]	@ (8006304 <HAL_GPIO_Init+0x300>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	43db      	mvns	r3, r3
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4013      	ands	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800626a:	4a26      	ldr	r2, [pc, #152]	@ (8006304 <HAL_GPIO_Init+0x300>)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006270:	4b24      	ldr	r3, [pc, #144]	@ (8006304 <HAL_GPIO_Init+0x300>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	43db      	mvns	r3, r3
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4013      	ands	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <HAL_GPIO_Init+0x300>)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800629a:	4b1a      	ldr	r3, [pc, #104]	@ (8006304 <HAL_GPIO_Init+0x300>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	43db      	mvns	r3, r3
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4013      	ands	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062be:	4a11      	ldr	r2, [pc, #68]	@ (8006304 <HAL_GPIO_Init+0x300>)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	3301      	adds	r3, #1
 80062c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f ae9d 	bne.w	8006014 <HAL_GPIO_Init+0x10>
  }
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40010000 	.word	0x40010000
 80062f0:	48000400 	.word	0x48000400
 80062f4:	48000800 	.word	0x48000800
 80062f8:	48000c00 	.word	0x48000c00
 80062fc:	48001000 	.word	0x48001000
 8006300:	48001400 	.word	0x48001400
 8006304:	40010400 	.word	0x40010400

08006308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	807b      	strh	r3, [r7, #2]
 8006314:	4613      	mov	r3, r2
 8006316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006318:	787b      	ldrb	r3, [r7, #1]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800631e:	887a      	ldrh	r2, [r7, #2]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006324:	e002      	b.n	800632c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006342:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800634e:	4a05      	ldr	r2, [pc, #20]	@ (8006364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb fb2a 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d141      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006376:	4b4b      	ldr	r3, [pc, #300]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006382:	d131      	bne.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006384:	4b47      	ldr	r3, [pc, #284]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	4a46      	ldr	r2, [pc, #280]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006394:	4b43      	ldr	r3, [pc, #268]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800639c:	4a41      	ldr	r2, [pc, #260]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063a4:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2232      	movs	r2, #50	@ 0x32
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	4a3f      	ldr	r2, [pc, #252]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	0c9b      	lsrs	r3, r3, #18
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ba:	e002      	b.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3b01      	subs	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c2:	4b38      	ldr	r3, [pc, #224]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ce:	d102      	bne.n	80063d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f2      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d6:	4b33      	ldr	r3, [pc, #204]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e2:	d158      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e057      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e8:	4b2e      	ldr	r3, [pc, #184]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ee:	4a2d      	ldr	r2, [pc, #180]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063f8:	e04d      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006400:	d141      	bne.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006402:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640e:	d131      	bne.n	8006474 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006410:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006416:	4a23      	ldr	r2, [pc, #140]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006420:	4b20      	ldr	r3, [pc, #128]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006428:	4a1e      	ldr	r2, [pc, #120]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800642e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006430:	4b1d      	ldr	r3, [pc, #116]	@ (80064a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2232      	movs	r2, #50	@ 0x32
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	0c9b      	lsrs	r3, r3, #18
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006446:	e002      	b.n	800644e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3b01      	subs	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645a:	d102      	bne.n	8006462 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f2      	bne.n	8006448 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646e:	d112      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e011      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647a:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006484:	e007      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800648e:	4a05      	ldr	r2, [pc, #20]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006490:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006494:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40007000 	.word	0x40007000
 80064a8:	20000000 	.word	0x20000000
 80064ac:	431bde83 	.word	0x431bde83

080064b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064be:	6093      	str	r3, [r2, #8]
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40007000 	.word	0x40007000

080064d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e2fe      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d075      	beq.n	80065da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ee:	4b97      	ldr	r3, [pc, #604]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064f8:	4b94      	ldr	r3, [pc, #592]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d102      	bne.n	800650e <HAL_RCC_OscConfig+0x3e>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d002      	beq.n	8006514 <HAL_RCC_OscConfig+0x44>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d10b      	bne.n	800652c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006514:	4b8d      	ldr	r3, [pc, #564]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d05b      	beq.n	80065d8 <HAL_RCC_OscConfig+0x108>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d157      	bne.n	80065d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e2d9      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006534:	d106      	bne.n	8006544 <HAL_RCC_OscConfig+0x74>
 8006536:	4b85      	ldr	r3, [pc, #532]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a84      	ldr	r2, [pc, #528]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800653c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e01d      	b.n	8006580 <HAL_RCC_OscConfig+0xb0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800654c:	d10c      	bne.n	8006568 <HAL_RCC_OscConfig+0x98>
 800654e:	4b7f      	ldr	r3, [pc, #508]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7e      	ldr	r2, [pc, #504]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4b7c      	ldr	r3, [pc, #496]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a7b      	ldr	r2, [pc, #492]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e00b      	b.n	8006580 <HAL_RCC_OscConfig+0xb0>
 8006568:	4b78      	ldr	r3, [pc, #480]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a77      	ldr	r2, [pc, #476]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800656e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b75      	ldr	r3, [pc, #468]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a74      	ldr	r2, [pc, #464]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800657a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800657e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d013      	beq.n	80065b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fd f94a 	bl	8003820 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006590:	f7fd f946 	bl	8003820 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	@ 0x64
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e29e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065a2:	4b6a      	ldr	r3, [pc, #424]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0xc0>
 80065ae:	e014      	b.n	80065da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fd f936 	bl	8003820 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b8:	f7fd f932 	bl	8003820 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b64      	cmp	r3, #100	@ 0x64
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e28a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ca:	4b60      	ldr	r3, [pc, #384]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0xe8>
 80065d6:	e000      	b.n	80065da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d075      	beq.n	80066d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065e6:	4b59      	ldr	r3, [pc, #356]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065f0:	4b56      	ldr	r3, [pc, #344]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d102      	bne.n	8006606 <HAL_RCC_OscConfig+0x136>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d002      	beq.n	800660c <HAL_RCC_OscConfig+0x13c>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d11f      	bne.n	800664c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800660c:	4b4f      	ldr	r3, [pc, #316]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <HAL_RCC_OscConfig+0x154>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e25d      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006624:	4b49      	ldr	r3, [pc, #292]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	4946      	ldr	r1, [pc, #280]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006638:	4b45      	ldr	r3, [pc, #276]	@ (8006750 <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f7fa fbcf 	bl	8000de0 <HAL_InitTick>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d043      	beq.n	80066d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e249      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d023      	beq.n	800669c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006654:	4b3d      	ldr	r3, [pc, #244]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a3c      	ldr	r2, [pc, #240]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800665a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800665e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fd f8de 	bl	8003820 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006668:	f7fd f8da 	bl	8003820 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e232      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800667a:	4b34      	ldr	r3, [pc, #208]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006686:	4b31      	ldr	r3, [pc, #196]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	492d      	ldr	r1, [pc, #180]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	604b      	str	r3, [r1, #4]
 800669a:	e01a      	b.n	80066d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800669c:	4b2b      	ldr	r3, [pc, #172]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2a      	ldr	r2, [pc, #168]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a8:	f7fd f8ba 	bl	8003820 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b0:	f7fd f8b6 	bl	8003820 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e20e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066c2:	4b22      	ldr	r3, [pc, #136]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x1e0>
 80066ce:	e000      	b.n	80066d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d041      	beq.n	8006762 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01c      	beq.n	8006720 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066e6:	4b19      	ldr	r3, [pc, #100]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ec:	4a17      	ldr	r2, [pc, #92]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f6:	f7fd f893 	bl	8003820 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066fe:	f7fd f88f 	bl	8003820 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e1e7      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006710:	4b0e      	ldr	r3, [pc, #56]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0ef      	beq.n	80066fe <HAL_RCC_OscConfig+0x22e>
 800671e:	e020      	b.n	8006762 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006720:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006726:	4a09      	ldr	r2, [pc, #36]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006730:	f7fd f876 	bl	8003820 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006736:	e00d      	b.n	8006754 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006738:	f7fd f872 	bl	8003820 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d906      	bls.n	8006754 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1ca      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000
 8006750:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006754:	4b8c      	ldr	r3, [pc, #560]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1ea      	bne.n	8006738 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80a6 	beq.w	80068bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006770:	2300      	movs	r3, #0
 8006772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006774:	4b84      	ldr	r3, [pc, #528]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_OscConfig+0x2b4>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_RCC_OscConfig+0x2b6>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800678a:	4b7f      	ldr	r3, [pc, #508]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678e:	4a7e      	ldr	r2, [pc, #504]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006794:	6593      	str	r3, [r2, #88]	@ 0x58
 8006796:	4b7c      	ldr	r3, [pc, #496]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067a2:	2301      	movs	r3, #1
 80067a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a6:	4b79      	ldr	r3, [pc, #484]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b2:	4b76      	ldr	r3, [pc, #472]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a75      	ldr	r2, [pc, #468]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067be:	f7fd f82f 	bl	8003820 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7fd f82b 	bl	8003820 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e183      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d8:	4b6c      	ldr	r3, [pc, #432]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d108      	bne.n	80067fe <HAL_RCC_OscConfig+0x32e>
 80067ec:	4b66      	ldr	r3, [pc, #408]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	4a65      	ldr	r2, [pc, #404]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067fc:	e024      	b.n	8006848 <HAL_RCC_OscConfig+0x378>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b05      	cmp	r3, #5
 8006804:	d110      	bne.n	8006828 <HAL_RCC_OscConfig+0x358>
 8006806:	4b60      	ldr	r3, [pc, #384]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680c:	4a5e      	ldr	r2, [pc, #376]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800680e:	f043 0304 	orr.w	r3, r3, #4
 8006812:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006816:	4b5c      	ldr	r3, [pc, #368]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	4a5a      	ldr	r2, [pc, #360]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006826:	e00f      	b.n	8006848 <HAL_RCC_OscConfig+0x378>
 8006828:	4b57      	ldr	r3, [pc, #348]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682e:	4a56      	ldr	r2, [pc, #344]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006838:	4b53      	ldr	r3, [pc, #332]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683e:	4a52      	ldr	r2, [pc, #328]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006840:	f023 0304 	bic.w	r3, r3, #4
 8006844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d016      	beq.n	800687e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006850:	f7fc ffe6 	bl	8003820 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006856:	e00a      	b.n	800686e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006858:	f7fc ffe2 	bl	8003820 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e138      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800686e:	4b46      	ldr	r3, [pc, #280]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ed      	beq.n	8006858 <HAL_RCC_OscConfig+0x388>
 800687c:	e015      	b.n	80068aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7fc ffcf 	bl	8003820 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006884:	e00a      	b.n	800689c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fc ffcb 	bl	8003820 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e121      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800689c:	4b3a      	ldr	r3, [pc, #232]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1ed      	bne.n	8006886 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068aa:	7ffb      	ldrb	r3, [r7, #31]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d105      	bne.n	80068bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b0:	4b35      	ldr	r3, [pc, #212]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b4:	4a34      	ldr	r2, [pc, #208]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d03c      	beq.n	8006942 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01c      	beq.n	800690a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fc ff9e 	bl	8003820 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e8:	f7fc ff9a 	bl	8003820 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0f2      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068fa:	4b23      	ldr	r3, [pc, #140]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ef      	beq.n	80068e8 <HAL_RCC_OscConfig+0x418>
 8006908:	e01b      	b.n	8006942 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800690a:	4b1f      	ldr	r3, [pc, #124]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800690c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006910:	4a1d      	ldr	r2, [pc, #116]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691a:	f7fc ff81 	bl	8003820 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006922:	f7fc ff7d 	bl	8003820 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0d5      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006934:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1ef      	bne.n	8006922 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80c9 	beq.w	8006ade <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694c:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b0c      	cmp	r3, #12
 8006956:	f000 8083 	beq.w	8006a60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d15e      	bne.n	8006a20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006962:	4b09      	ldr	r3, [pc, #36]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a08      	ldr	r2, [pc, #32]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800696c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fc ff57 	bl	8003820 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e00c      	b.n	8006990 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fc ff53 	bl	8003820 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d905      	bls.n	8006990 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e0ab      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
 8006988:	40021000 	.word	0x40021000
 800698c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006990:	4b55      	ldr	r3, [pc, #340]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1ec      	bne.n	8006976 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800699c:	4b52      	ldr	r3, [pc, #328]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	4b52      	ldr	r3, [pc, #328]	@ (8006aec <HAL_RCC_OscConfig+0x61c>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6a11      	ldr	r1, [r2, #32]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069ac:	3a01      	subs	r2, #1
 80069ae:	0112      	lsls	r2, r2, #4
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80069b6:	0212      	lsls	r2, r2, #8
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069be:	0852      	lsrs	r2, r2, #1
 80069c0:	3a01      	subs	r2, #1
 80069c2:	0552      	lsls	r2, r2, #21
 80069c4:	4311      	orrs	r1, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069ca:	0852      	lsrs	r2, r2, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	0652      	lsls	r2, r2, #25
 80069d0:	4311      	orrs	r1, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069d6:	06d2      	lsls	r2, r2, #27
 80069d8:	430a      	orrs	r2, r1
 80069da:	4943      	ldr	r1, [pc, #268]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b41      	ldr	r3, [pc, #260]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a40      	ldr	r2, [pc, #256]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069ec:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fc ff12 	bl	8003820 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fc ff0e 	bl	8003820 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e066      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a12:	4b35      	ldr	r3, [pc, #212]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x530>
 8006a1e:	e05e      	b.n	8006ade <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a30      	ldr	r2, [pc, #192]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fc fef8 	bl	8003820 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fc fef4 	bl	8003820 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e04c      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a46:	4b28      	ldr	r3, [pc, #160]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a52:	4b25      	ldr	r3, [pc, #148]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	4924      	ldr	r1, [pc, #144]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a58:	4b25      	ldr	r3, [pc, #148]	@ (8006af0 <HAL_RCC_OscConfig+0x620>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	60cb      	str	r3, [r1, #12]
 8006a5e:	e03e      	b.n	8006ade <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e039      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f003 0203 	and.w	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d12c      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d123      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d11b      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d113      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d109      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d001      	beq.n	8006ade <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	019f800c 	.word	0x019f800c
 8006af0:	feeefffc 	.word	0xfeeefffc

08006af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e11e      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b91      	ldr	r3, [pc, #580]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d910      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b8e      	ldr	r3, [pc, #568]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 020f 	bic.w	r2, r3, #15
 8006b22:	498c      	ldr	r1, [pc, #560]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b8a      	ldr	r3, [pc, #552]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e106      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d073      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d129      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b50:	4b81      	ldr	r3, [pc, #516]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0f4      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b60:	f000 f9d0 	bl	8006f04 <RCC_GetSysClockFreqFromPLLSource>
 8006b64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4a7c      	ldr	r2, [pc, #496]	@ (8006d5c <HAL_RCC_ClockConfig+0x268>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d93f      	bls.n	8006bee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d033      	beq.n	8006bee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d12f      	bne.n	8006bee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b8e:	4b72      	ldr	r3, [pc, #456]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b96:	4a70      	ldr	r2, [pc, #448]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b9e:	2380      	movs	r3, #128	@ 0x80
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e024      	b.n	8006bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d107      	bne.n	8006bbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bac:	4b6a      	ldr	r3, [pc, #424]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d109      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0c6      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bbc:	4b66      	ldr	r3, [pc, #408]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0be      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bcc:	f000 f8ce 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8006bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4a61      	ldr	r2, [pc, #388]	@ (8006d5c <HAL_RCC_ClockConfig+0x268>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d909      	bls.n	8006bee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bda:	4b5f      	ldr	r3, [pc, #380]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be2:	4a5d      	ldr	r2, [pc, #372]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bea:	2380      	movs	r3, #128	@ 0x80
 8006bec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bee:	4b5a      	ldr	r3, [pc, #360]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f023 0203 	bic.w	r2, r3, #3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4957      	ldr	r1, [pc, #348]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c00:	f7fc fe0e 	bl	8003820 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c06:	e00a      	b.n	8006c1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c08:	f7fc fe0a 	bl	8003820 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e095      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 020c 	and.w	r2, r3, #12
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d1eb      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d023      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c48:	4b43      	ldr	r3, [pc, #268]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4a42      	ldr	r2, [pc, #264]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c60:	4b3d      	ldr	r3, [pc, #244]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c68:	4a3b      	ldr	r2, [pc, #236]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b39      	ldr	r3, [pc, #228]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4936      	ldr	r1, [pc, #216]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b80      	cmp	r3, #128	@ 0x80
 8006c88:	d105      	bne.n	8006c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c8a:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4a32      	ldr	r2, [pc, #200]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c96:	4b2f      	ldr	r3, [pc, #188]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d21d      	bcs.n	8006ce0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f023 020f 	bic.w	r2, r3, #15
 8006cac:	4929      	ldr	r1, [pc, #164]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cb4:	f7fc fdb4 	bl	8003820 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fc fdb0 	bl	8003820 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e03b      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd2:	4b20      	ldr	r3, [pc, #128]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d1ed      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cec:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4917      	ldr	r1, [pc, #92]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d0a:	4b13      	ldr	r3, [pc, #76]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	490f      	ldr	r1, [pc, #60]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d1e:	f000 f825 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b0c      	ldr	r3, [pc, #48]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	490c      	ldr	r1, [pc, #48]	@ (8006d60 <HAL_RCC_ClockConfig+0x26c>)
 8006d30:	5ccb      	ldrb	r3, [r1, r3]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <HAL_RCC_ClockConfig+0x270>)
 8006d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d68 <HAL_RCC_ClockConfig+0x274>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fa f84c 	bl	8000de0 <HAL_InitTick>
 8006d48:	4603      	mov	r3, r0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40022000 	.word	0x40022000
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	04c4b400 	.word	0x04c4b400
 8006d60:	0800c844 	.word	0x0800c844
 8006d64:	20000000 	.word	0x20000000
 8006d68:	20000230 	.word	0x20000230

08006d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d72:	4b2c      	ldr	r3, [pc, #176]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d102      	bne.n	8006d84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e047      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d84:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 030c 	and.w	r3, r3, #12
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d102      	bne.n	8006d96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d90:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	e03e      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d96:	4b23      	ldr	r3, [pc, #140]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d136      	bne.n	8006e10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006da2:	4b20      	ldr	r3, [pc, #128]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006dac:	4b1d      	ldr	r3, [pc, #116]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	3301      	adds	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d10c      	bne.n	8006dda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc8:	4a16      	ldr	r2, [pc, #88]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dca:	68d2      	ldr	r2, [r2, #12]
 8006dcc:	0a12      	lsrs	r2, r2, #8
 8006dce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	617b      	str	r3, [r7, #20]
      break;
 8006dd8:	e00c      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dda:	4a13      	ldr	r2, [pc, #76]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de2:	4a10      	ldr	r2, [pc, #64]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de4:	68d2      	ldr	r2, [r2, #12]
 8006de6:	0a12      	lsrs	r2, r2, #8
 8006de8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dec:	fb02 f303 	mul.w	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
      break;
 8006df2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	0e5b      	lsrs	r3, r3, #25
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	3301      	adds	r3, #1
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	e001      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e14:	693b      	ldr	r3, [r7, #16]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
 8006e28:	00f42400 	.word	0x00f42400
 8006e2c:	016e3600 	.word	0x016e3600

08006e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e34:	4b03      	ldr	r3, [pc, #12]	@ (8006e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20000000 	.word	0x20000000

08006e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e4c:	f7ff fff0 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	0a1b      	lsrs	r3, r3, #8
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4904      	ldr	r1, [pc, #16]	@ (8006e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	0800c854 	.word	0x0800c854

08006e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e78:	f7ff ffda 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0adb      	lsrs	r3, r3, #11
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4904      	ldr	r1, [pc, #16]	@ (8006e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	0800c854 	.word	0x0800c854

08006ea0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	220f      	movs	r2, #15
 8006eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006eb0:	4b12      	ldr	r3, [pc, #72]	@ (8006efc <HAL_RCC_GetClockConfig+0x5c>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0203 	and.w	r2, r3, #3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8006efc <HAL_RCC_GetClockConfig+0x5c>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <HAL_RCC_GetClockConfig+0x5c>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ed4:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <HAL_RCC_GetClockConfig+0x5c>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	08db      	lsrs	r3, r3, #3
 8006eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ee2:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <HAL_RCC_GetClockConfig+0x60>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40022000 	.word	0x40022000

08006f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f14:	4b1b      	ldr	r3, [pc, #108]	@ (8006f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d10c      	bne.n	8006f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f28:	4a17      	ldr	r2, [pc, #92]	@ (8006f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f30:	4a14      	ldr	r2, [pc, #80]	@ (8006f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f32:	68d2      	ldr	r2, [r2, #12]
 8006f34:	0a12      	lsrs	r2, r2, #8
 8006f36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	617b      	str	r3, [r7, #20]
    break;
 8006f40:	e00c      	b.n	8006f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f42:	4a12      	ldr	r2, [pc, #72]	@ (8006f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f4c:	68d2      	ldr	r2, [r2, #12]
 8006f4e:	0a12      	lsrs	r2, r2, #8
 8006f50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f54:	fb02 f303 	mul.w	r3, r2, r3
 8006f58:	617b      	str	r3, [r7, #20]
    break;
 8006f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f5c:	4b09      	ldr	r3, [pc, #36]	@ (8006f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	0e5b      	lsrs	r3, r3, #25
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	3301      	adds	r3, #1
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f76:	687b      	ldr	r3, [r7, #4]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	40021000 	.word	0x40021000
 8006f88:	016e3600 	.word	0x016e3600
 8006f8c:	00f42400 	.word	0x00f42400

08006f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f98:	2300      	movs	r3, #0
 8006f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8098 	beq.w	80070de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fb2:	4b43      	ldr	r3, [pc, #268]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10d      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fbe:	4b40      	ldr	r3, [pc, #256]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fca:	4b3d      	ldr	r3, [pc, #244]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fda:	4b3a      	ldr	r3, [pc, #232]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a39      	ldr	r2, [pc, #228]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fe6:	f7fc fc1b 	bl	8003820 <HAL_GetTick>
 8006fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fec:	e009      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fee:	f7fc fc17 	bl	8003820 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d902      	bls.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8007000:	e005      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007002:	4b30      	ldr	r3, [pc, #192]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0ef      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800700e:	7cfb      	ldrb	r3, [r7, #19]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d159      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007014:	4b2a      	ldr	r3, [pc, #168]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800701e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01e      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	d019      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007030:	4b23      	ldr	r3, [pc, #140]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800703a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800703c:	4b20      	ldr	r3, [pc, #128]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007042:	4a1f      	ldr	r2, [pc, #124]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800704c:	4b1c      	ldr	r3, [pc, #112]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007052:	4a1b      	ldr	r2, [pc, #108]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800705c:	4a18      	ldr	r2, [pc, #96]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d016      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706e:	f7fc fbd7 	bl	8003820 <HAL_GetTick>
 8007072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007074:	e00b      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007076:	f7fc fbd3 	bl	8003820 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007084:	4293      	cmp	r3, r2
 8007086:	d902      	bls.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	74fb      	strb	r3, [r7, #19]
            break;
 800708c:	e006      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800708e:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0ec      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800709c:	7cfb      	ldrb	r3, [r7, #19]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a2:	4b07      	ldr	r3, [pc, #28]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b0:	4903      	ldr	r1, [pc, #12]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070b8:	e008      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070ba:	7cfb      	ldrb	r3, [r7, #19]
 80070bc:	74bb      	strb	r3, [r7, #18]
 80070be:	e005      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070cc:	7c7b      	ldrb	r3, [r7, #17]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d2:	4ba6      	ldr	r3, [pc, #664]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	4aa5      	ldr	r2, [pc, #660]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ea:	4ba0      	ldr	r3, [pc, #640]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	f023 0203 	bic.w	r2, r3, #3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	499c      	ldr	r1, [pc, #624]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800710c:	4b97      	ldr	r3, [pc, #604]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007112:	f023 020c 	bic.w	r2, r3, #12
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	4994      	ldr	r1, [pc, #592]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800712e:	4b8f      	ldr	r3, [pc, #572]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007134:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	498b      	ldr	r1, [pc, #556]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007150:	4b86      	ldr	r3, [pc, #536]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	4983      	ldr	r1, [pc, #524]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007172:	4b7e      	ldr	r3, [pc, #504]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007178:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	497a      	ldr	r1, [pc, #488]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007194:	4b75      	ldr	r3, [pc, #468]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	4972      	ldr	r1, [pc, #456]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071b6:	4b6d      	ldr	r3, [pc, #436]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4969      	ldr	r1, [pc, #420]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071d8:	4b64      	ldr	r3, [pc, #400]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	4961      	ldr	r1, [pc, #388]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071fa:	4b5c      	ldr	r3, [pc, #368]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007200:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007208:	4958      	ldr	r1, [pc, #352]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007218:	2b00      	cmp	r3, #0
 800721a:	d015      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800721c:	4b53      	ldr	r3, [pc, #332]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007222:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	4950      	ldr	r1, [pc, #320]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800723a:	d105      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800723c:	4b4b      	ldr	r3, [pc, #300]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a4a      	ldr	r2, [pc, #296]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007246:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007250:	2b00      	cmp	r3, #0
 8007252:	d015      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007254:	4b45      	ldr	r3, [pc, #276]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	4942      	ldr	r1, [pc, #264]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007272:	d105      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007274:	4b3d      	ldr	r3, [pc, #244]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a3c      	ldr	r2, [pc, #240]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800727a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800727e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d015      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800728c:	4b37      	ldr	r3, [pc, #220]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	4934      	ldr	r1, [pc, #208]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072aa:	d105      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ac:	4b2f      	ldr	r3, [pc, #188]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a2e      	ldr	r2, [pc, #184]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d015      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072c4:	4b29      	ldr	r3, [pc, #164]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d2:	4926      	ldr	r1, [pc, #152]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e2:	d105      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e4:	4b21      	ldr	r3, [pc, #132]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a20      	ldr	r2, [pc, #128]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072fc:	4b1b      	ldr	r3, [pc, #108]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730a:	4918      	ldr	r1, [pc, #96]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800731c:	4b13      	ldr	r3, [pc, #76]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a12      	ldr	r2, [pc, #72]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d015      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007334:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007342:	490a      	ldr	r1, [pc, #40]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007352:	d105      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007354:	4b05      	ldr	r3, [pc, #20]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4a04      	ldr	r2, [pc, #16]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800735e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007360:	7cbb      	ldrb	r3, [r7, #18]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40021000 	.word	0x40021000

08007370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e049      	b.n	8007416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f841 	bl	800741e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f000 fdf4 	bl	8007f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d001      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e04a      	b.n	80074e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a21      	ldr	r2, [pc, #132]	@ (80074f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x6c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007476:	d013      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x6c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1d      	ldr	r2, [pc, #116]	@ (80074f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x6c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x6c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_TIM_Base_Start_IT+0xc8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x6c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a19      	ldr	r2, [pc, #100]	@ (8007500 <HAL_TIM_Base_Start_IT+0xcc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d115      	bne.n	80074cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	4b17      	ldr	r3, [pc, #92]	@ (8007504 <HAL_TIM_Base_Start_IT+0xd0>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b06      	cmp	r3, #6
 80074b0:	d015      	beq.n	80074de <HAL_TIM_Base_Start_IT+0xaa>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b8:	d011      	beq.n	80074de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ca:	e008      	b.n	80074de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	e000      	b.n	80074e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40013400 	.word	0x40013400
 8007500:	40014000 	.word	0x40014000
 8007504:	00010007 	.word	0x00010007

08007508 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e049      	b.n	80075ae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7f9 fed0 	bl	80012d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f000 fd28 	bl	8007f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e049      	b.n	800765c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7f9 fe53 	bl	8001288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	4610      	mov	r0, r2
 80075f6:	f000 fcd1 	bl	8007f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d109      	bne.n	8007688 <HAL_TIM_PWM_Start+0x24>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b01      	cmp	r3, #1
 800767e:	bf14      	ite	ne
 8007680:	2301      	movne	r3, #1
 8007682:	2300      	moveq	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	e03c      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b04      	cmp	r3, #4
 800768c:	d109      	bne.n	80076a2 <HAL_TIM_PWM_Start+0x3e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	bf14      	ite	ne
 800769a:	2301      	movne	r3, #1
 800769c:	2300      	moveq	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	e02f      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d109      	bne.n	80076bc <HAL_TIM_PWM_Start+0x58>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	bf14      	ite	ne
 80076b4:	2301      	movne	r3, #1
 80076b6:	2300      	moveq	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	e022      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b0c      	cmp	r3, #12
 80076c0:	d109      	bne.n	80076d6 <HAL_TIM_PWM_Start+0x72>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	bf14      	ite	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	2300      	moveq	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	e015      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d109      	bne.n	80076f0 <HAL_TIM_PWM_Start+0x8c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	bf14      	ite	ne
 80076e8:	2301      	movne	r3, #1
 80076ea:	2300      	moveq	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	e008      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	bf14      	ite	ne
 80076fc:	2301      	movne	r3, #1
 80076fe:	2300      	moveq	r3, #0
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e097      	b.n	800783a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xb6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007718:	e023      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b04      	cmp	r3, #4
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xc6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007728:	e01b      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xd6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007738:	e013      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b0c      	cmp	r3, #12
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start+0xe6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007748:	e00b      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b10      	cmp	r3, #16
 800774e:	d104      	bne.n	800775a <HAL_TIM_PWM_Start+0xf6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007758:	e003      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 ffa8 	bl	80086c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a33      	ldr	r2, [pc, #204]	@ (8007844 <HAL_TIM_PWM_Start+0x1e0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a32      	ldr	r2, [pc, #200]	@ (8007848 <HAL_TIM_PWM_Start+0x1e4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a30      	ldr	r2, [pc, #192]	@ (800784c <HAL_TIM_PWM_Start+0x1e8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a2f      	ldr	r2, [pc, #188]	@ (8007850 <HAL_TIM_PWM_Start+0x1ec>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2d      	ldr	r2, [pc, #180]	@ (8007854 <HAL_TIM_PWM_Start+0x1f0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_PWM_Start+0x142>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <HAL_TIM_PWM_Start+0x144>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a20      	ldr	r2, [pc, #128]	@ (8007844 <HAL_TIM_PWM_Start+0x1e0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d018      	beq.n	80077f8 <HAL_TIM_PWM_Start+0x194>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ce:	d013      	beq.n	80077f8 <HAL_TIM_PWM_Start+0x194>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a20      	ldr	r2, [pc, #128]	@ (8007858 <HAL_TIM_PWM_Start+0x1f4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00e      	beq.n	80077f8 <HAL_TIM_PWM_Start+0x194>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1f      	ldr	r2, [pc, #124]	@ (800785c <HAL_TIM_PWM_Start+0x1f8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d009      	beq.n	80077f8 <HAL_TIM_PWM_Start+0x194>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a17      	ldr	r2, [pc, #92]	@ (8007848 <HAL_TIM_PWM_Start+0x1e4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <HAL_TIM_PWM_Start+0x194>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a16      	ldr	r2, [pc, #88]	@ (800784c <HAL_TIM_PWM_Start+0x1e8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d115      	bne.n	8007824 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <HAL_TIM_PWM_Start+0x1fc>)
 8007800:	4013      	ands	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b06      	cmp	r3, #6
 8007808:	d015      	beq.n	8007836 <HAL_TIM_PWM_Start+0x1d2>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007810:	d011      	beq.n	8007836 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0201 	orr.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007822:	e008      	b.n	8007836 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	e000      	b.n	8007838 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	40012c00 	.word	0x40012c00
 8007848:	40013400 	.word	0x40013400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	00010007 	.word	0x00010007

08007864 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 ff22 	bl	80086c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3e      	ldr	r2, [pc, #248]	@ (800797c <HAL_TIM_PWM_Stop+0x118>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_TIM_PWM_Stop+0x4a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a3d      	ldr	r2, [pc, #244]	@ (8007980 <HAL_TIM_PWM_Stop+0x11c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIM_PWM_Stop+0x4a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a3b      	ldr	r2, [pc, #236]	@ (8007984 <HAL_TIM_PWM_Stop+0x120>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIM_PWM_Stop+0x4a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a3a      	ldr	r2, [pc, #232]	@ (8007988 <HAL_TIM_PWM_Stop+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIM_PWM_Stop+0x4a>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a38      	ldr	r2, [pc, #224]	@ (800798c <HAL_TIM_PWM_Stop+0x128>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d101      	bne.n	80078b2 <HAL_TIM_PWM_Stop+0x4e>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <HAL_TIM_PWM_Stop+0x50>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6a1a      	ldr	r2, [r3, #32]
 80078be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10f      	bne.n	80078e8 <HAL_TIM_PWM_Stop+0x84>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a1a      	ldr	r2, [r3, #32]
 80078ce:	f244 4344 	movw	r3, #17476	@ 0x4444
 80078d2:	4013      	ands	r3, r2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <HAL_TIM_PWM_Stop+0x84>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a1a      	ldr	r2, [r3, #32]
 80078ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10f      	bne.n	8007918 <HAL_TIM_PWM_Stop+0xb4>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6a1a      	ldr	r2, [r3, #32]
 80078fe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007902:	4013      	ands	r3, r2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <HAL_TIM_PWM_Stop+0xb4>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0201 	bic.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <HAL_TIM_PWM_Stop+0xc4>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007926:	e023      	b.n	8007970 <HAL_TIM_PWM_Stop+0x10c>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b04      	cmp	r3, #4
 800792c:	d104      	bne.n	8007938 <HAL_TIM_PWM_Stop+0xd4>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007936:	e01b      	b.n	8007970 <HAL_TIM_PWM_Stop+0x10c>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b08      	cmp	r3, #8
 800793c:	d104      	bne.n	8007948 <HAL_TIM_PWM_Stop+0xe4>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007946:	e013      	b.n	8007970 <HAL_TIM_PWM_Stop+0x10c>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b0c      	cmp	r3, #12
 800794c:	d104      	bne.n	8007958 <HAL_TIM_PWM_Stop+0xf4>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007956:	e00b      	b.n	8007970 <HAL_TIM_PWM_Stop+0x10c>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b10      	cmp	r3, #16
 800795c:	d104      	bne.n	8007968 <HAL_TIM_PWM_Stop+0x104>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007966:	e003      	b.n	8007970 <HAL_TIM_PWM_Stop+0x10c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40012c00 	.word	0x40012c00
 8007980:	40013400 	.word	0x40013400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800

08007990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d020      	beq.n	80079f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0202 	mvn.w	r2, #2
 80079c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fac0 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fab2 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fac3 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01b      	beq.n	8007a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0204 	mvn.w	r2, #4
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa9a 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa8c 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa9d 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01b      	beq.n	8007a8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0208 	mvn.w	r2, #8
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2204      	movs	r2, #4
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa74 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa66 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa77 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01b      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0210 	mvn.w	r2, #16
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2208      	movs	r2, #8
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa4e 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa40 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fa51 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0201 	mvn.w	r2, #1
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7f9 f92e 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f82e 	bl	8008b86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 f826 	bl	8008b9a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa0b 	bl	8007f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00c      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f06f 0220 	mvn.w	r2, #32
 8007b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 ffee 	bl	8008b72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fffa 	bl	8008bae <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00c      	beq.n	8007bde <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fff2 	bl	8008bc2 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 ffea 	bl	8008bd6 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00c      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 ffe2 	bl	8008bea <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e066      	b.n	8007d1c <HAL_TIM_OC_ConfigChannel+0xec>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b14      	cmp	r3, #20
 8007c5a:	d857      	bhi.n	8007d0c <HAL_TIM_OC_ConfigChannel+0xdc>
 8007c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c64 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007cc7 	.word	0x08007cc7
 8007c78:	08007d0d 	.word	0x08007d0d
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007d0d 	.word	0x08007d0d
 8007c90:	08007d0d 	.word	0x08007d0d
 8007c94:	08007ce3 	.word	0x08007ce3
 8007c98:	08007d0d 	.word	0x08007d0d
 8007c9c:	08007d0d 	.word	0x08007d0d
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007cf1 	.word	0x08007cf1
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007d0d 	.word	0x08007d0d
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007cff 	.word	0x08007cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fa08 	bl	80080d4 <TIM_OC1_SetConfig>
      break;
 8007cc4:	e025      	b.n	8007d12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fa91 	bl	80081f4 <TIM_OC2_SetConfig>
      break;
 8007cd2:	e01e      	b.n	8007d12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fb14 	bl	8008308 <TIM_OC3_SetConfig>
      break;
 8007ce0:	e017      	b.n	8007d12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fb95 	bl	8008418 <TIM_OC4_SetConfig>
      break;
 8007cee:	e010      	b.n	8007d12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fc18 	bl	800852c <TIM_OC5_SetConfig>
      break;
 8007cfc:	e009      	b.n	8007d12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fc75 	bl	80085f4 <TIM_OC6_SetConfig>
      break;
 8007d0a:	e002      	b.n	8007d12 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e0ff      	b.n	8007f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b14      	cmp	r3, #20
 8007d4e:	f200 80f0 	bhi.w	8007f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d52:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007f33 	.word	0x08007f33
 8007d60:	08007f33 	.word	0x08007f33
 8007d64:	08007f33 	.word	0x08007f33
 8007d68:	08007ded 	.word	0x08007ded
 8007d6c:	08007f33 	.word	0x08007f33
 8007d70:	08007f33 	.word	0x08007f33
 8007d74:	08007f33 	.word	0x08007f33
 8007d78:	08007e2f 	.word	0x08007e2f
 8007d7c:	08007f33 	.word	0x08007f33
 8007d80:	08007f33 	.word	0x08007f33
 8007d84:	08007f33 	.word	0x08007f33
 8007d88:	08007e6f 	.word	0x08007e6f
 8007d8c:	08007f33 	.word	0x08007f33
 8007d90:	08007f33 	.word	0x08007f33
 8007d94:	08007f33 	.word	0x08007f33
 8007d98:	08007eb1 	.word	0x08007eb1
 8007d9c:	08007f33 	.word	0x08007f33
 8007da0:	08007f33 	.word	0x08007f33
 8007da4:	08007f33 	.word	0x08007f33
 8007da8:	08007ef1 	.word	0x08007ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f98e 	bl	80080d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0208 	orr.w	r2, r2, #8
 8007dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699a      	ldr	r2, [r3, #24]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0204 	bic.w	r2, r2, #4
 8007dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6999      	ldr	r1, [r3, #24]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	619a      	str	r2, [r3, #24]
      break;
 8007dea:	e0a5      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f9fe 	bl	80081f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6999      	ldr	r1, [r3, #24]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	619a      	str	r2, [r3, #24]
      break;
 8007e2c:	e084      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fa67 	bl	8008308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0208 	orr.w	r2, r2, #8
 8007e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0204 	bic.w	r2, r2, #4
 8007e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69d9      	ldr	r1, [r3, #28]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	61da      	str	r2, [r3, #28]
      break;
 8007e6c:	e064      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 facf 	bl	8008418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69d9      	ldr	r1, [r3, #28]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	021a      	lsls	r2, r3, #8
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	61da      	str	r2, [r3, #28]
      break;
 8007eae:	e043      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fb38 	bl	800852c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0208 	orr.w	r2, r2, #8
 8007eca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0204 	bic.w	r2, r2, #4
 8007eda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007eee:	e023      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68b9      	ldr	r1, [r7, #8]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fb7c 	bl	80085f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	021a      	lsls	r2, r3, #8
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f30:	e002      	b.n	8007f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	75fb      	strb	r3, [r7, #23]
      break;
 8007f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop

08007f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a42      	ldr	r2, [pc, #264]	@ (80080b8 <TIM_Base_SetConfig+0x11c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00f      	beq.n	8007fd4 <TIM_Base_SetConfig+0x38>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fba:	d00b      	beq.n	8007fd4 <TIM_Base_SetConfig+0x38>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80080bc <TIM_Base_SetConfig+0x120>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d007      	beq.n	8007fd4 <TIM_Base_SetConfig+0x38>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80080c0 <TIM_Base_SetConfig+0x124>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_Base_SetConfig+0x38>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a3d      	ldr	r2, [pc, #244]	@ (80080c4 <TIM_Base_SetConfig+0x128>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a33      	ldr	r2, [pc, #204]	@ (80080b8 <TIM_Base_SetConfig+0x11c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d01b      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d017      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a30      	ldr	r2, [pc, #192]	@ (80080bc <TIM_Base_SetConfig+0x120>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a2f      	ldr	r2, [pc, #188]	@ (80080c0 <TIM_Base_SetConfig+0x124>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00f      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a2e      	ldr	r2, [pc, #184]	@ (80080c4 <TIM_Base_SetConfig+0x128>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00b      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2d      	ldr	r2, [pc, #180]	@ (80080c8 <TIM_Base_SetConfig+0x12c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d007      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a2c      	ldr	r2, [pc, #176]	@ (80080cc <TIM_Base_SetConfig+0x130>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d003      	beq.n	8008026 <TIM_Base_SetConfig+0x8a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a2b      	ldr	r2, [pc, #172]	@ (80080d0 <TIM_Base_SetConfig+0x134>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d108      	bne.n	8008038 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800802c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a16      	ldr	r2, [pc, #88]	@ (80080b8 <TIM_Base_SetConfig+0x11c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00f      	beq.n	8008084 <TIM_Base_SetConfig+0xe8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a17      	ldr	r2, [pc, #92]	@ (80080c4 <TIM_Base_SetConfig+0x128>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00b      	beq.n	8008084 <TIM_Base_SetConfig+0xe8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a16      	ldr	r2, [pc, #88]	@ (80080c8 <TIM_Base_SetConfig+0x12c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d007      	beq.n	8008084 <TIM_Base_SetConfig+0xe8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a15      	ldr	r2, [pc, #84]	@ (80080cc <TIM_Base_SetConfig+0x130>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d003      	beq.n	8008084 <TIM_Base_SetConfig+0xe8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a14      	ldr	r2, [pc, #80]	@ (80080d0 <TIM_Base_SetConfig+0x134>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d103      	bne.n	800808c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b01      	cmp	r3, #1
 800809c:	d105      	bne.n	80080aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f023 0201 	bic.w	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	611a      	str	r2, [r3, #16]
  }
}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40000400 	.word	0x40000400
 80080c0:	40000800 	.word	0x40000800
 80080c4:	40013400 	.word	0x40013400
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40014800 	.word	0x40014800

080080d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	f023 0201 	bic.w	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f023 0302 	bic.w	r3, r3, #2
 8008120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a2c      	ldr	r2, [pc, #176]	@ (80081e0 <TIM_OC1_SetConfig+0x10c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00f      	beq.n	8008154 <TIM_OC1_SetConfig+0x80>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a2b      	ldr	r2, [pc, #172]	@ (80081e4 <TIM_OC1_SetConfig+0x110>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00b      	beq.n	8008154 <TIM_OC1_SetConfig+0x80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a2a      	ldr	r2, [pc, #168]	@ (80081e8 <TIM_OC1_SetConfig+0x114>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d007      	beq.n	8008154 <TIM_OC1_SetConfig+0x80>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a29      	ldr	r2, [pc, #164]	@ (80081ec <TIM_OC1_SetConfig+0x118>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d003      	beq.n	8008154 <TIM_OC1_SetConfig+0x80>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a28      	ldr	r2, [pc, #160]	@ (80081f0 <TIM_OC1_SetConfig+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d10c      	bne.n	800816e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f023 0308 	bic.w	r3, r3, #8
 800815a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f023 0304 	bic.w	r3, r3, #4
 800816c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1b      	ldr	r2, [pc, #108]	@ (80081e0 <TIM_OC1_SetConfig+0x10c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00f      	beq.n	8008196 <TIM_OC1_SetConfig+0xc2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1a      	ldr	r2, [pc, #104]	@ (80081e4 <TIM_OC1_SetConfig+0x110>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00b      	beq.n	8008196 <TIM_OC1_SetConfig+0xc2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a19      	ldr	r2, [pc, #100]	@ (80081e8 <TIM_OC1_SetConfig+0x114>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d007      	beq.n	8008196 <TIM_OC1_SetConfig+0xc2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a18      	ldr	r2, [pc, #96]	@ (80081ec <TIM_OC1_SetConfig+0x118>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d003      	beq.n	8008196 <TIM_OC1_SetConfig+0xc2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a17      	ldr	r2, [pc, #92]	@ (80081f0 <TIM_OC1_SetConfig+0x11c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d111      	bne.n	80081ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800819c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	621a      	str	r2, [r3, #32]
}
 80081d4:	bf00      	nop
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	40012c00 	.word	0x40012c00
 80081e4:	40013400 	.word	0x40013400
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40014400 	.word	0x40014400
 80081f0:	40014800 	.word	0x40014800

080081f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0210 	bic.w	r2, r3, #16
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800822e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f023 0320 	bic.w	r3, r3, #32
 8008242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a28      	ldr	r2, [pc, #160]	@ (80082f4 <TIM_OC2_SetConfig+0x100>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d003      	beq.n	8008260 <TIM_OC2_SetConfig+0x6c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a27      	ldr	r2, [pc, #156]	@ (80082f8 <TIM_OC2_SetConfig+0x104>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d10d      	bne.n	800827c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	4313      	orrs	r3, r2
 8008272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800827a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1d      	ldr	r2, [pc, #116]	@ (80082f4 <TIM_OC2_SetConfig+0x100>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00f      	beq.n	80082a4 <TIM_OC2_SetConfig+0xb0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1c      	ldr	r2, [pc, #112]	@ (80082f8 <TIM_OC2_SetConfig+0x104>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00b      	beq.n	80082a4 <TIM_OC2_SetConfig+0xb0>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a1b      	ldr	r2, [pc, #108]	@ (80082fc <TIM_OC2_SetConfig+0x108>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d007      	beq.n	80082a4 <TIM_OC2_SetConfig+0xb0>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a1a      	ldr	r2, [pc, #104]	@ (8008300 <TIM_OC2_SetConfig+0x10c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_OC2_SetConfig+0xb0>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a19      	ldr	r2, [pc, #100]	@ (8008304 <TIM_OC2_SetConfig+0x110>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d113      	bne.n	80082cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40013400 	.word	0x40013400
 80082fc:	40014000 	.word	0x40014000
 8008300:	40014400 	.word	0x40014400
 8008304:	40014800 	.word	0x40014800

08008308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800833a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	021b      	lsls	r3, r3, #8
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a27      	ldr	r2, [pc, #156]	@ (8008404 <TIM_OC3_SetConfig+0xfc>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d003      	beq.n	8008372 <TIM_OC3_SetConfig+0x6a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a26      	ldr	r2, [pc, #152]	@ (8008408 <TIM_OC3_SetConfig+0x100>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d10d      	bne.n	800838e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800838c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1c      	ldr	r2, [pc, #112]	@ (8008404 <TIM_OC3_SetConfig+0xfc>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00f      	beq.n	80083b6 <TIM_OC3_SetConfig+0xae>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1b      	ldr	r2, [pc, #108]	@ (8008408 <TIM_OC3_SetConfig+0x100>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_OC3_SetConfig+0xae>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1a      	ldr	r2, [pc, #104]	@ (800840c <TIM_OC3_SetConfig+0x104>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <TIM_OC3_SetConfig+0xae>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a19      	ldr	r2, [pc, #100]	@ (8008410 <TIM_OC3_SetConfig+0x108>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_OC3_SetConfig+0xae>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a18      	ldr	r2, [pc, #96]	@ (8008414 <TIM_OC3_SetConfig+0x10c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d113      	bne.n	80083de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	621a      	str	r2, [r3, #32]
}
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40013400 	.word	0x40013400
 800840c:	40014000 	.word	0x40014000
 8008410:	40014400 	.word	0x40014400
 8008414:	40014800 	.word	0x40014800

08008418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	031b      	lsls	r3, r3, #12
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a28      	ldr	r2, [pc, #160]	@ (8008518 <TIM_OC4_SetConfig+0x100>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_OC4_SetConfig+0x6c>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a27      	ldr	r2, [pc, #156]	@ (800851c <TIM_OC4_SetConfig+0x104>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d10d      	bne.n	80084a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800848a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	031b      	lsls	r3, r3, #12
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800849e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008518 <TIM_OC4_SetConfig+0x100>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00f      	beq.n	80084c8 <TIM_OC4_SetConfig+0xb0>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a1c      	ldr	r2, [pc, #112]	@ (800851c <TIM_OC4_SetConfig+0x104>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00b      	beq.n	80084c8 <TIM_OC4_SetConfig+0xb0>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008520 <TIM_OC4_SetConfig+0x108>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d007      	beq.n	80084c8 <TIM_OC4_SetConfig+0xb0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008524 <TIM_OC4_SetConfig+0x10c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_OC4_SetConfig+0xb0>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a19      	ldr	r2, [pc, #100]	@ (8008528 <TIM_OC4_SetConfig+0x110>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d113      	bne.n	80084f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	019b      	lsls	r3, r3, #6
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	019b      	lsls	r3, r3, #6
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40013400 	.word	0x40013400
 8008520:	40014000 	.word	0x40014000
 8008524:	40014400 	.word	0x40014400
 8008528:	40014800 	.word	0x40014800

0800852c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800855a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800855e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a17      	ldr	r2, [pc, #92]	@ (80085e0 <TIM_OC5_SetConfig+0xb4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00f      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a16      	ldr	r2, [pc, #88]	@ (80085e4 <TIM_OC5_SetConfig+0xb8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00b      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <TIM_OC5_SetConfig+0xbc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d007      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a14      	ldr	r2, [pc, #80]	@ (80085ec <TIM_OC5_SetConfig+0xc0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_OC5_SetConfig+0x7a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a13      	ldr	r2, [pc, #76]	@ (80085f0 <TIM_OC5_SetConfig+0xc4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d109      	bne.n	80085ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	621a      	str	r2, [r3, #32]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40013400 	.word	0x40013400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800863a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	051b      	lsls	r3, r3, #20
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a18      	ldr	r2, [pc, #96]	@ (80086ac <TIM_OC6_SetConfig+0xb8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00f      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a17      	ldr	r2, [pc, #92]	@ (80086b0 <TIM_OC6_SetConfig+0xbc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00b      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a16      	ldr	r2, [pc, #88]	@ (80086b4 <TIM_OC6_SetConfig+0xc0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d007      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <TIM_OC6_SetConfig+0xc4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC6_SetConfig+0x7c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a14      	ldr	r2, [pc, #80]	@ (80086bc <TIM_OC6_SetConfig+0xc8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d109      	bne.n	8008684 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	029b      	lsls	r3, r3, #10
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40013400 	.word	0x40013400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800

080086c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	2201      	movs	r2, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	fa01 f303 	lsl.w	r3, r1, r3
 80086f8:	431a      	orrs	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d109      	bne.n	8008730 <HAL_TIMEx_PWMN_Start+0x24>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	bf14      	ite	ne
 8008728:	2301      	movne	r3, #1
 800872a:	2300      	moveq	r3, #0
 800872c:	b2db      	uxtb	r3, r3
 800872e:	e022      	b.n	8008776 <HAL_TIMEx_PWMN_Start+0x6a>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b04      	cmp	r3, #4
 8008734:	d109      	bne.n	800874a <HAL_TIMEx_PWMN_Start+0x3e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b01      	cmp	r3, #1
 8008740:	bf14      	ite	ne
 8008742:	2301      	movne	r3, #1
 8008744:	2300      	moveq	r3, #0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	e015      	b.n	8008776 <HAL_TIMEx_PWMN_Start+0x6a>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d109      	bne.n	8008764 <HAL_TIMEx_PWMN_Start+0x58>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b01      	cmp	r3, #1
 800875a:	bf14      	ite	ne
 800875c:	2301      	movne	r3, #1
 800875e:	2300      	moveq	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	e008      	b.n	8008776 <HAL_TIMEx_PWMN_Start+0x6a>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b01      	cmp	r3, #1
 800876e:	bf14      	ite	ne
 8008770:	2301      	movne	r3, #1
 8008772:	2300      	moveq	r3, #0
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e069      	b.n	8008852 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_TIMEx_PWMN_Start+0x82>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800878c:	e013      	b.n	80087b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b04      	cmp	r3, #4
 8008792:	d104      	bne.n	800879e <HAL_TIMEx_PWMN_Start+0x92>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800879c:	e00b      	b.n	80087b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d104      	bne.n	80087ae <HAL_TIMEx_PWMN_Start+0xa2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087ac:	e003      	b.n	80087b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2204      	movs	r2, #4
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fa1d 	bl	8008bfe <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a20      	ldr	r2, [pc, #128]	@ (800885c <HAL_TIMEx_PWMN_Start+0x150>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d018      	beq.n	8008810 <HAL_TIMEx_PWMN_Start+0x104>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e6:	d013      	beq.n	8008810 <HAL_TIMEx_PWMN_Start+0x104>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008860 <HAL_TIMEx_PWMN_Start+0x154>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00e      	beq.n	8008810 <HAL_TIMEx_PWMN_Start+0x104>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008864 <HAL_TIMEx_PWMN_Start+0x158>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d009      	beq.n	8008810 <HAL_TIMEx_PWMN_Start+0x104>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a19      	ldr	r2, [pc, #100]	@ (8008868 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d004      	beq.n	8008810 <HAL_TIMEx_PWMN_Start+0x104>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a18      	ldr	r2, [pc, #96]	@ (800886c <HAL_TIMEx_PWMN_Start+0x160>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d115      	bne.n	800883c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	4b16      	ldr	r3, [pc, #88]	@ (8008870 <HAL_TIMEx_PWMN_Start+0x164>)
 8008818:	4013      	ands	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b06      	cmp	r3, #6
 8008820:	d015      	beq.n	800884e <HAL_TIMEx_PWMN_Start+0x142>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008828:	d011      	beq.n	800884e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0201 	orr.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883a:	e008      	b.n	800884e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e000      	b.n	8008850 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800884e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40012c00 	.word	0x40012c00
 8008860:	40000400 	.word	0x40000400
 8008864:	40000800 	.word	0x40000800
 8008868:	40013400 	.word	0x40013400
 800886c:	40014000 	.word	0x40014000
 8008870:	00010007 	.word	0x00010007

08008874 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2200      	movs	r2, #0
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f9b9 	bl	8008bfe <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6a1a      	ldr	r2, [r3, #32]
 8008892:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008896:	4013      	ands	r3, r2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10f      	bne.n	80088bc <HAL_TIMEx_PWMN_Stop+0x48>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a1a      	ldr	r2, [r3, #32]
 80088a2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d107      	bne.n	80088bc <HAL_TIMEx_PWMN_Stop+0x48>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6a1a      	ldr	r2, [r3, #32]
 80088c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10f      	bne.n	80088ec <HAL_TIMEx_PWMN_Stop+0x78>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6a1a      	ldr	r2, [r3, #32]
 80088d2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d107      	bne.n	80088ec <HAL_TIMEx_PWMN_Stop+0x78>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0201 	bic.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d104      	bne.n	80088fc <HAL_TIMEx_PWMN_Stop+0x88>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088fa:	e013      	b.n	8008924 <HAL_TIMEx_PWMN_Stop+0xb0>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d104      	bne.n	800890c <HAL_TIMEx_PWMN_Stop+0x98>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800890a:	e00b      	b.n	8008924 <HAL_TIMEx_PWMN_Stop+0xb0>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b08      	cmp	r3, #8
 8008910:	d104      	bne.n	800891c <HAL_TIMEx_PWMN_Stop+0xa8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800891a:	e003      	b.n	8008924 <HAL_TIMEx_PWMN_Stop+0xb0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008944:	2302      	movs	r3, #2
 8008946:	e065      	b.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2c      	ldr	r2, [pc, #176]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a2b      	ldr	r2, [pc, #172]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d108      	bne.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d018      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089be:	d013      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a18      	ldr	r2, [pc, #96]	@ (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00e      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a17      	ldr	r2, [pc, #92]	@ (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d009      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a12      	ldr	r2, [pc, #72]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a13      	ldr	r2, [pc, #76]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10c      	bne.n	8008a02 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	40012c00 	.word	0x40012c00
 8008a24:	40013400 	.word	0x40013400
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40014000 	.word	0x40014000

08008a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e073      	b.n	8008b38 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a19      	ldr	r2, [pc, #100]	@ (8008b44 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d004      	beq.n	8008aec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a18      	ldr	r2, [pc, #96]	@ (8008b48 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d11c      	bne.n	8008b26 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af6:	051b      	lsls	r3, r3, #20
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	40012c00 	.word	0x40012c00
 8008b48:	40013400 	.word	0x40013400

08008b4c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008b62:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b087      	sub	sp, #28
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	2204      	movs	r2, #4
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a1a      	ldr	r2, [r3, #32]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	401a      	ands	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a1a      	ldr	r2, [r3, #32]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	fa01 f303 	lsl.w	r3, r1, r3
 8008c36:	431a      	orrs	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	621a      	str	r2, [r3, #32]
}
 8008c3c:	bf00      	nop
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e042      	b.n	8008ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f83b 	bl	8008ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2224      	movs	r2, #36	@ 0x24
 8008c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0201 	bic.w	r2, r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fafe 	bl	8009294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f82f 	bl	8008cfc <UART_SetConfig>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e01b      	b.n	8008ce0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb7d 	bl	80093d8 <UART_CheckIdleState>
 8008cde:	4603      	mov	r3, r0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d00:	b08c      	sub	sp, #48	@ 0x30
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	431a      	orrs	r2, r3
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4bab      	ldr	r3, [pc, #684]	@ (8008fd8 <UART_SetConfig+0x2dc>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	6812      	ldr	r2, [r2, #0]
 8008d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4aa0      	ldr	r2, [pc, #640]	@ (8008fdc <UART_SetConfig+0x2e0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d64:	4313      	orrs	r3, r2
 8008d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d7c:	430b      	orrs	r3, r1
 8008d7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	f023 010f 	bic.w	r1, r3, #15
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a91      	ldr	r2, [pc, #580]	@ (8008fe0 <UART_SetConfig+0x2e4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d125      	bne.n	8008dec <UART_SetConfig+0xf0>
 8008da0:	4b90      	ldr	r3, [pc, #576]	@ (8008fe4 <UART_SetConfig+0x2e8>)
 8008da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d81a      	bhi.n	8008de4 <UART_SetConfig+0xe8>
 8008dae:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <UART_SetConfig+0xb8>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008dd5 	.word	0x08008dd5
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008ddd 	.word	0x08008ddd
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dca:	e0d6      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd2:	e0d2      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dda:	e0ce      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008ddc:	2308      	movs	r3, #8
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de2:	e0ca      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008de4:	2310      	movs	r3, #16
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dea:	e0c6      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a7d      	ldr	r2, [pc, #500]	@ (8008fe8 <UART_SetConfig+0x2ec>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d138      	bne.n	8008e68 <UART_SetConfig+0x16c>
 8008df6:	4b7b      	ldr	r3, [pc, #492]	@ (8008fe4 <UART_SetConfig+0x2e8>)
 8008df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dfc:	f003 030c 	and.w	r3, r3, #12
 8008e00:	2b0c      	cmp	r3, #12
 8008e02:	d82d      	bhi.n	8008e60 <UART_SetConfig+0x164>
 8008e04:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <UART_SetConfig+0x110>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e41 	.word	0x08008e41
 8008e10:	08008e61 	.word	0x08008e61
 8008e14:	08008e61 	.word	0x08008e61
 8008e18:	08008e61 	.word	0x08008e61
 8008e1c:	08008e51 	.word	0x08008e51
 8008e20:	08008e61 	.word	0x08008e61
 8008e24:	08008e61 	.word	0x08008e61
 8008e28:	08008e61 	.word	0x08008e61
 8008e2c:	08008e49 	.word	0x08008e49
 8008e30:	08008e61 	.word	0x08008e61
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	08008e61 	.word	0x08008e61
 8008e3c:	08008e59 	.word	0x08008e59
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e46:	e098      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4e:	e094      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008e50:	2304      	movs	r3, #4
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e56:	e090      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008e58:	2308      	movs	r3, #8
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e5e:	e08c      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008e60:	2310      	movs	r3, #16
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e66:	e088      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fec <UART_SetConfig+0x2f0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d125      	bne.n	8008ebe <UART_SetConfig+0x1c2>
 8008e72:	4b5c      	ldr	r3, [pc, #368]	@ (8008fe4 <UART_SetConfig+0x2e8>)
 8008e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e7c:	2b30      	cmp	r3, #48	@ 0x30
 8008e7e:	d016      	beq.n	8008eae <UART_SetConfig+0x1b2>
 8008e80:	2b30      	cmp	r3, #48	@ 0x30
 8008e82:	d818      	bhi.n	8008eb6 <UART_SetConfig+0x1ba>
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	d00a      	beq.n	8008e9e <UART_SetConfig+0x1a2>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d814      	bhi.n	8008eb6 <UART_SetConfig+0x1ba>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <UART_SetConfig+0x19a>
 8008e90:	2b10      	cmp	r3, #16
 8008e92:	d008      	beq.n	8008ea6 <UART_SetConfig+0x1aa>
 8008e94:	e00f      	b.n	8008eb6 <UART_SetConfig+0x1ba>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9c:	e06d      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea4:	e069      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eac:	e065      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008eae:	2308      	movs	r3, #8
 8008eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb4:	e061      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ebc:	e05d      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a4b      	ldr	r2, [pc, #300]	@ (8008ff0 <UART_SetConfig+0x2f4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d125      	bne.n	8008f14 <UART_SetConfig+0x218>
 8008ec8:	4b46      	ldr	r3, [pc, #280]	@ (8008fe4 <UART_SetConfig+0x2e8>)
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ed4:	d016      	beq.n	8008f04 <UART_SetConfig+0x208>
 8008ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ed8:	d818      	bhi.n	8008f0c <UART_SetConfig+0x210>
 8008eda:	2b80      	cmp	r3, #128	@ 0x80
 8008edc:	d00a      	beq.n	8008ef4 <UART_SetConfig+0x1f8>
 8008ede:	2b80      	cmp	r3, #128	@ 0x80
 8008ee0:	d814      	bhi.n	8008f0c <UART_SetConfig+0x210>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <UART_SetConfig+0x1f0>
 8008ee6:	2b40      	cmp	r3, #64	@ 0x40
 8008ee8:	d008      	beq.n	8008efc <UART_SetConfig+0x200>
 8008eea:	e00f      	b.n	8008f0c <UART_SetConfig+0x210>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef2:	e042      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efa:	e03e      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008efc:	2304      	movs	r3, #4
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f02:	e03a      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f04:	2308      	movs	r3, #8
 8008f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0a:	e036      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f12:	e032      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a30      	ldr	r2, [pc, #192]	@ (8008fdc <UART_SetConfig+0x2e0>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d12a      	bne.n	8008f74 <UART_SetConfig+0x278>
 8008f1e:	4b31      	ldr	r3, [pc, #196]	@ (8008fe4 <UART_SetConfig+0x2e8>)
 8008f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f2c:	d01a      	beq.n	8008f64 <UART_SetConfig+0x268>
 8008f2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f32:	d81b      	bhi.n	8008f6c <UART_SetConfig+0x270>
 8008f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f38:	d00c      	beq.n	8008f54 <UART_SetConfig+0x258>
 8008f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f3e:	d815      	bhi.n	8008f6c <UART_SetConfig+0x270>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <UART_SetConfig+0x250>
 8008f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f48:	d008      	beq.n	8008f5c <UART_SetConfig+0x260>
 8008f4a:	e00f      	b.n	8008f6c <UART_SetConfig+0x270>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e012      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f54:	2302      	movs	r3, #2
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5a:	e00e      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f62:	e00a      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f64:	2308      	movs	r3, #8
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	e006      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f72:	e002      	b.n	8008f7a <UART_SetConfig+0x27e>
 8008f74:	2310      	movs	r3, #16
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a17      	ldr	r2, [pc, #92]	@ (8008fdc <UART_SetConfig+0x2e0>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	f040 80a8 	bne.w	80090d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d834      	bhi.n	8008ff8 <UART_SetConfig+0x2fc>
 8008f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <UART_SetConfig+0x298>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fb9 	.word	0x08008fb9
 8008f98:	08008ff9 	.word	0x08008ff9
 8008f9c:	08008fc1 	.word	0x08008fc1
 8008fa0:	08008ff9 	.word	0x08008ff9
 8008fa4:	08008fc7 	.word	0x08008fc7
 8008fa8:	08008ff9 	.word	0x08008ff9
 8008fac:	08008ff9 	.word	0x08008ff9
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	08008fcf 	.word	0x08008fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fb8:	f7fd ff46 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8008fbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fbe:	e021      	b.n	8009004 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff4 <UART_SetConfig+0x2f8>)
 8008fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fc4:	e01e      	b.n	8009004 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fc6:	f7fd fed1 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8008fca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fcc:	e01a      	b.n	8009004 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fd4:	e016      	b.n	8009004 <UART_SetConfig+0x308>
 8008fd6:	bf00      	nop
 8008fd8:	cfff69f3 	.word	0xcfff69f3
 8008fdc:	40008000 	.word	0x40008000
 8008fe0:	40013800 	.word	0x40013800
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	40004400 	.word	0x40004400
 8008fec:	40004800 	.word	0x40004800
 8008ff0:	40004c00 	.word	0x40004c00
 8008ff4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009002:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 812a 	beq.w	8009260 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	4a9e      	ldr	r2, [pc, #632]	@ (800928c <UART_SetConfig+0x590>)
 8009012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009016:	461a      	mov	r2, r3
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	fbb3 f3f2 	udiv	r3, r3, r2
 800901e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	4613      	mov	r3, r2
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	4413      	add	r3, r2
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	429a      	cmp	r2, r3
 800902e:	d305      	bcc.n	800903c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	429a      	cmp	r2, r3
 800903a:	d903      	bls.n	8009044 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009042:	e10d      	b.n	8009260 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	2200      	movs	r2, #0
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	60fa      	str	r2, [r7, #12]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	4a8e      	ldr	r2, [pc, #568]	@ (800928c <UART_SetConfig+0x590>)
 8009052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009056:	b29b      	uxth	r3, r3
 8009058:	2200      	movs	r2, #0
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	607a      	str	r2, [r7, #4]
 800905e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009066:	f7f7 f8db 	bl	8000220 <__aeabi_uldivmod>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f04f 0200 	mov.w	r2, #0
 8009076:	f04f 0300 	mov.w	r3, #0
 800907a:	020b      	lsls	r3, r1, #8
 800907c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009080:	0202      	lsls	r2, r0, #8
 8009082:	6979      	ldr	r1, [r7, #20]
 8009084:	6849      	ldr	r1, [r1, #4]
 8009086:	0849      	lsrs	r1, r1, #1
 8009088:	2000      	movs	r0, #0
 800908a:	460c      	mov	r4, r1
 800908c:	4605      	mov	r5, r0
 800908e:	eb12 0804 	adds.w	r8, r2, r4
 8009092:	eb43 0905 	adc.w	r9, r3, r5
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	469a      	mov	sl, r3
 800909e:	4693      	mov	fp, r2
 80090a0:	4652      	mov	r2, sl
 80090a2:	465b      	mov	r3, fp
 80090a4:	4640      	mov	r0, r8
 80090a6:	4649      	mov	r1, r9
 80090a8:	f7f7 f8ba 	bl	8000220 <__aeabi_uldivmod>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4613      	mov	r3, r2
 80090b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090ba:	d308      	bcc.n	80090ce <UART_SetConfig+0x3d2>
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090c2:	d204      	bcs.n	80090ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a3a      	ldr	r2, [r7, #32]
 80090ca:	60da      	str	r2, [r3, #12]
 80090cc:	e0c8      	b.n	8009260 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090d4:	e0c4      	b.n	8009260 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090de:	d167      	bne.n	80091b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80090e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090e4:	2b08      	cmp	r3, #8
 80090e6:	d828      	bhi.n	800913a <UART_SetConfig+0x43e>
 80090e8:	a201      	add	r2, pc, #4	@ (adr r2, 80090f0 <UART_SetConfig+0x3f4>)
 80090ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ee:	bf00      	nop
 80090f0:	08009115 	.word	0x08009115
 80090f4:	0800911d 	.word	0x0800911d
 80090f8:	08009125 	.word	0x08009125
 80090fc:	0800913b 	.word	0x0800913b
 8009100:	0800912b 	.word	0x0800912b
 8009104:	0800913b 	.word	0x0800913b
 8009108:	0800913b 	.word	0x0800913b
 800910c:	0800913b 	.word	0x0800913b
 8009110:	08009133 	.word	0x08009133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009114:	f7fd fe98 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8009118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911a:	e014      	b.n	8009146 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800911c:	f7fd feaa 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 8009120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009122:	e010      	b.n	8009146 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009124:	4b5a      	ldr	r3, [pc, #360]	@ (8009290 <UART_SetConfig+0x594>)
 8009126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009128:	e00d      	b.n	8009146 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800912a:	f7fd fe1f 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 800912e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009130:	e009      	b.n	8009146 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009138:	e005      	b.n	8009146 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 8089 	beq.w	8009260 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009152:	4a4e      	ldr	r2, [pc, #312]	@ (800928c <UART_SetConfig+0x590>)
 8009154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009158:	461a      	mov	r2, r3
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009160:	005a      	lsls	r2, r3, #1
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	441a      	add	r2, r3
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009172:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	2b0f      	cmp	r3, #15
 8009178:	d916      	bls.n	80091a8 <UART_SetConfig+0x4ac>
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009180:	d212      	bcs.n	80091a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	b29b      	uxth	r3, r3
 8009186:	f023 030f 	bic.w	r3, r3, #15
 800918a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	085b      	lsrs	r3, r3, #1
 8009190:	b29b      	uxth	r3, r3
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	b29a      	uxth	r2, r3
 8009198:	8bfb      	ldrh	r3, [r7, #30]
 800919a:	4313      	orrs	r3, r2
 800919c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	8bfa      	ldrh	r2, [r7, #30]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	e05b      	b.n	8009260 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091ae:	e057      	b.n	8009260 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d828      	bhi.n	800920a <UART_SetConfig+0x50e>
 80091b8:	a201      	add	r2, pc, #4	@ (adr r2, 80091c0 <UART_SetConfig+0x4c4>)
 80091ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091be:	bf00      	nop
 80091c0:	080091e5 	.word	0x080091e5
 80091c4:	080091ed 	.word	0x080091ed
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	0800920b 	.word	0x0800920b
 80091d0:	080091fb 	.word	0x080091fb
 80091d4:	0800920b 	.word	0x0800920b
 80091d8:	0800920b 	.word	0x0800920b
 80091dc:	0800920b 	.word	0x0800920b
 80091e0:	08009203 	.word	0x08009203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e4:	f7fd fe30 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 80091e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ea:	e014      	b.n	8009216 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ec:	f7fd fe42 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 80091f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091f2:	e010      	b.n	8009216 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091f4:	4b26      	ldr	r3, [pc, #152]	@ (8009290 <UART_SetConfig+0x594>)
 80091f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091f8:	e00d      	b.n	8009216 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091fa:	f7fd fdb7 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 80091fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009200:	e009      	b.n	8009216 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009208:	e005      	b.n	8009216 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009214:	bf00      	nop
    }

    if (pclk != 0U)
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	2b00      	cmp	r3, #0
 800921a:	d021      	beq.n	8009260 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	4a1a      	ldr	r2, [pc, #104]	@ (800928c <UART_SetConfig+0x590>)
 8009222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009226:	461a      	mov	r2, r3
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	fbb3 f2f2 	udiv	r2, r3, r2
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	441a      	add	r2, r3
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	fbb2 f3f3 	udiv	r3, r2, r3
 800923e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	2b0f      	cmp	r3, #15
 8009244:	d909      	bls.n	800925a <UART_SetConfig+0x55e>
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800924c:	d205      	bcs.n	800925a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	b29a      	uxth	r2, r3
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60da      	str	r2, [r3, #12]
 8009258:	e002      	b.n	8009260 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2201      	movs	r2, #1
 8009264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2201      	movs	r2, #1
 800926c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2200      	movs	r2, #0
 8009274:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800927c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009280:	4618      	mov	r0, r3
 8009282:	3730      	adds	r7, #48	@ 0x30
 8009284:	46bd      	mov	sp, r7
 8009286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800928a:	bf00      	nop
 800928c:	0800c89c 	.word	0x0800c89c
 8009290:	00f42400 	.word	0x00f42400

08009294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00a      	beq.n	8009302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009328:	f003 0310 	and.w	r3, r3, #16
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00a      	beq.n	8009346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934a:	f003 0320 	and.w	r3, r3, #32
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01a      	beq.n	80093aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009392:	d10a      	bne.n	80093aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	605a      	str	r2, [r3, #4]
  }
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b098      	sub	sp, #96	@ 0x60
 80093dc:	af02      	add	r7, sp, #8
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093e8:	f7fa fa1a 	bl	8003820 <HAL_GetTick>
 80093ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0308 	and.w	r3, r3, #8
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d12f      	bne.n	800945c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009404:	2200      	movs	r2, #0
 8009406:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f88e 	bl	800952c <UART_WaitOnFlagUntilTimeout>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d022      	beq.n	800945c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800942a:	653b      	str	r3, [r7, #80]	@ 0x50
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009434:	647b      	str	r3, [r7, #68]	@ 0x44
 8009436:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800943a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e063      	b.n	8009524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b04      	cmp	r3, #4
 8009468:	d149      	bne.n	80094fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800946a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009472:	2200      	movs	r2, #0
 8009474:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f857 	bl	800952c <UART_WaitOnFlagUntilTimeout>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d03c      	beq.n	80094fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	623b      	str	r3, [r7, #32]
   return(result);
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e6      	bne.n	8009484 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	69b9      	ldr	r1, [r7, #24]
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	617b      	str	r3, [r7, #20]
   return(result);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e012      	b.n	8009524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3758      	adds	r7, #88	@ 0x58
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	4613      	mov	r3, r2
 800953a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953c:	e04f      	b.n	80095de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d04b      	beq.n	80095de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009546:	f7fa f96b 	bl	8003820 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	429a      	cmp	r2, r3
 8009554:	d302      	bcc.n	800955c <UART_WaitOnFlagUntilTimeout+0x30>
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e04e      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d037      	beq.n	80095de <UART_WaitOnFlagUntilTimeout+0xb2>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b80      	cmp	r3, #128	@ 0x80
 8009572:	d034      	beq.n	80095de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b40      	cmp	r3, #64	@ 0x40
 8009578:	d031      	beq.n	80095de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b08      	cmp	r3, #8
 8009586:	d110      	bne.n	80095aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2208      	movs	r2, #8
 800958e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f000 f838 	bl	8009606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2208      	movs	r2, #8
 800959a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e029      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b8:	d111      	bne.n	80095de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f81e 	bl	8009606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e00f      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4013      	ands	r3, r2
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	bf0c      	ite	eq
 80095ee:	2301      	moveq	r3, #1
 80095f0:	2300      	movne	r3, #0
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	79fb      	ldrb	r3, [r7, #7]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d0a0      	beq.n	800953e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009606:	b480      	push	{r7}
 8009608:	b095      	sub	sp, #84	@ 0x54
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800962c:	643b      	str	r3, [r7, #64]	@ 0x40
 800962e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e6      	bne.n	800960e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009656:	f023 0301 	bic.w	r3, r3, #1
 800965a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3308      	adds	r3, #8
 8009662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800966a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e3      	bne.n	8009640 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800967c:	2b01      	cmp	r3, #1
 800967e:	d118      	bne.n	80096b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	60bb      	str	r3, [r7, #8]
   return(result);
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f023 0310 	bic.w	r3, r3, #16
 8009694:	647b      	str	r3, [r7, #68]	@ 0x44
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6979      	ldr	r1, [r7, #20]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	613b      	str	r3, [r7, #16]
   return(result);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e6      	bne.n	8009680 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096c6:	bf00      	nop
 80096c8:	3754      	adds	r7, #84	@ 0x54
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
	...

080096d4 <__NVIC_SetPriority>:
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	db0a      	blt.n	80096fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	490c      	ldr	r1, [pc, #48]	@ (8009720 <__NVIC_SetPriority+0x4c>)
 80096ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f2:	0112      	lsls	r2, r2, #4
 80096f4:	b2d2      	uxtb	r2, r2
 80096f6:	440b      	add	r3, r1
 80096f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80096fc:	e00a      	b.n	8009714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	b2da      	uxtb	r2, r3
 8009702:	4908      	ldr	r1, [pc, #32]	@ (8009724 <__NVIC_SetPriority+0x50>)
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	3b04      	subs	r3, #4
 800970c:	0112      	lsls	r2, r2, #4
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	440b      	add	r3, r1
 8009712:	761a      	strb	r2, [r3, #24]
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	e000e100 	.word	0xe000e100
 8009724:	e000ed00 	.word	0xe000ed00

08009728 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800972c:	4b05      	ldr	r3, [pc, #20]	@ (8009744 <SysTick_Handler+0x1c>)
 800972e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009730:	f001 fe94 	bl	800b45c <xTaskGetSchedulerState>
 8009734:	4603      	mov	r3, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	d001      	beq.n	800973e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800973a:	f002 fc8d 	bl	800c058 <xPortSysTickHandler>
  }
}
 800973e:	bf00      	nop
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	e000e010 	.word	0xe000e010

08009748 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800974c:	2100      	movs	r1, #0
 800974e:	f06f 0004 	mvn.w	r0, #4
 8009752:	f7ff ffbf 	bl	80096d4 <__NVIC_SetPriority>
#endif
}
 8009756:	bf00      	nop
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009762:	f3ef 8305 	mrs	r3, IPSR
 8009766:	603b      	str	r3, [r7, #0]
  return(result);
 8009768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800976e:	f06f 0305 	mvn.w	r3, #5
 8009772:	607b      	str	r3, [r7, #4]
 8009774:	e00c      	b.n	8009790 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009776:	4b0a      	ldr	r3, [pc, #40]	@ (80097a0 <osKernelInitialize+0x44>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d105      	bne.n	800978a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800977e:	4b08      	ldr	r3, [pc, #32]	@ (80097a0 <osKernelInitialize+0x44>)
 8009780:	2201      	movs	r2, #1
 8009782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009784:	2300      	movs	r3, #0
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	e002      	b.n	8009790 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800978a:	f04f 33ff 	mov.w	r3, #4294967295
 800978e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009790:	687b      	ldr	r3, [r7, #4]
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000a6c 	.word	0x20000a6c

080097a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097aa:	f3ef 8305 	mrs	r3, IPSR
 80097ae:	603b      	str	r3, [r7, #0]
  return(result);
 80097b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <osKernelStart+0x1a>
    stat = osErrorISR;
 80097b6:	f06f 0305 	mvn.w	r3, #5
 80097ba:	607b      	str	r3, [r7, #4]
 80097bc:	e010      	b.n	80097e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097be:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <osKernelStart+0x48>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d109      	bne.n	80097da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097c6:	f7ff ffbf 	bl	8009748 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097ca:	4b08      	ldr	r3, [pc, #32]	@ (80097ec <osKernelStart+0x48>)
 80097cc:	2202      	movs	r2, #2
 80097ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80097d0:	f001 f9ce 	bl	800ab70 <vTaskStartScheduler>
      stat = osOK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	607b      	str	r3, [r7, #4]
 80097d8:	e002      	b.n	80097e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80097da:	f04f 33ff 	mov.w	r3, #4294967295
 80097de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097e0:	687b      	ldr	r3, [r7, #4]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20000a6c 	.word	0x20000a6c

080097f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097f6:	f3ef 8305 	mrs	r3, IPSR
 80097fa:	603b      	str	r3, [r7, #0]
  return(result);
 80097fc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009802:	f001 fae1 	bl	800adc8 <xTaskGetTickCountFromISR>
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	e002      	b.n	8009810 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800980a:	f001 facd 	bl	800ada8 <xTaskGetTickCount>
 800980e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009810:	687b      	ldr	r3, [r7, #4]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800981a:	b580      	push	{r7, lr}
 800981c:	b08e      	sub	sp, #56	@ 0x38
 800981e:	af04      	add	r7, sp, #16
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800982a:	f3ef 8305 	mrs	r3, IPSR
 800982e:	617b      	str	r3, [r7, #20]
  return(result);
 8009830:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009832:	2b00      	cmp	r3, #0
 8009834:	d17e      	bne.n	8009934 <osThreadNew+0x11a>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d07b      	beq.n	8009934 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800983c:	2380      	movs	r3, #128	@ 0x80
 800983e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009840:	2318      	movs	r3, #24
 8009842:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009848:	f04f 33ff 	mov.w	r3, #4294967295
 800984c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d045      	beq.n	80098e0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <osThreadNew+0x48>
        name = attr->name;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d008      	beq.n	8009888 <osThreadNew+0x6e>
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	2b38      	cmp	r3, #56	@ 0x38
 800987a:	d805      	bhi.n	8009888 <osThreadNew+0x6e>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <osThreadNew+0x72>
        return (NULL);
 8009888:	2300      	movs	r3, #0
 800988a:	e054      	b.n	8009936 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	089b      	lsrs	r3, r3, #2
 800989a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <osThreadNew+0xa8>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	2ba7      	cmp	r3, #167	@ 0xa7
 80098aa:	d90a      	bls.n	80098c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d006      	beq.n	80098c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <osThreadNew+0xa8>
        mem = 1;
 80098bc:	2301      	movs	r3, #1
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	e010      	b.n	80098e4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10c      	bne.n	80098e4 <osThreadNew+0xca>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d108      	bne.n	80098e4 <osThreadNew+0xca>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d104      	bne.n	80098e4 <osThreadNew+0xca>
          mem = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e001      	b.n	80098e4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d110      	bne.n	800990c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098f2:	9202      	str	r2, [sp, #8]
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6a3a      	ldr	r2, [r7, #32]
 80098fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 fe4d 	bl	800a5a0 <xTaskCreateStatic>
 8009906:	4603      	mov	r3, r0
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	e013      	b.n	8009934 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d110      	bne.n	8009934 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	b29a      	uxth	r2, r3
 8009916:	f107 0310 	add.w	r3, r7, #16
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fe9b 	bl	800a660 <xTaskCreate>
 800992a:	4603      	mov	r3, r0
 800992c:	2b01      	cmp	r3, #1
 800992e:	d001      	beq.n	8009934 <osThreadNew+0x11a>
            hTask = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009934:	693b      	ldr	r3, [r7, #16]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3728      	adds	r7, #40	@ 0x28
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800993e:	b580      	push	{r7, lr}
 8009940:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009942:	2000      	movs	r0, #0
 8009944:	f000 ffea 	bl	800a91c <vTaskDelete>
#endif
  for (;;);
 8009948:	bf00      	nop
 800994a:	e7fd      	b.n	8009948 <osThreadExit+0xa>

0800994c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009954:	f3ef 8305 	mrs	r3, IPSR
 8009958:	60bb      	str	r3, [r7, #8]
  return(result);
 800995a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <osDelay+0x1c>
    stat = osErrorISR;
 8009960:	f06f 0305 	mvn.w	r3, #5
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	e007      	b.n	8009978 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f8c6 	bl	800ab04 <vTaskDelay>
    }
  }

  return (stat);
 8009978:	68fb      	ldr	r3, [r7, #12]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800998a:	f3ef 8305 	mrs	r3, IPSR
 800998e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009990:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009996:	f06f 0305 	mvn.w	r3, #5
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e019      	b.n	80099d2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80099a2:	f001 fa01 	bl	800ada8 <xTaskGetTickCount>
 80099a6:	4603      	mov	r3, r0
 80099a8:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <osDelayUntil+0x4a>
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	db06      	blt.n	80099cc <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	6939      	ldr	r1, [r7, #16]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 f81d 	bl	800aa04 <vTaskDelayUntil>
 80099ca:	e002      	b.n	80099d2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80099cc:	f06f 0303 	mvn.w	r3, #3
 80099d0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80099d2:	697b      	ldr	r3, [r7, #20]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4a07      	ldr	r2, [pc, #28]	@ (8009a08 <vApplicationGetIdleTaskMemory+0x2c>)
 80099ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	4a06      	ldr	r2, [pc, #24]	@ (8009a0c <vApplicationGetIdleTaskMemory+0x30>)
 80099f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2280      	movs	r2, #128	@ 0x80
 80099f8:	601a      	str	r2, [r3, #0]
}
 80099fa:	bf00      	nop
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	20000a70 	.word	0x20000a70
 8009a0c:	20000b18 	.word	0x20000b18

08009a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4a07      	ldr	r2, [pc, #28]	@ (8009a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8009a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	4a06      	ldr	r2, [pc, #24]	@ (8009a40 <vApplicationGetTimerTaskMemory+0x30>)
 8009a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a2e:	601a      	str	r2, [r3, #0]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000d18 	.word	0x20000d18
 8009a40:	20000dc0 	.word	0x20000dc0

08009a44 <vListInitialise>:
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f103 0208 	add.w	r2, r3, #8
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	605a      	str	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5c:	609a      	str	r2, [r3, #8]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f103 0208 	add.w	r2, r3, #8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	60da      	str	r2, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f103 0208 	add.w	r2, r3, #8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	611a      	str	r2, [r3, #16]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <vListInitialiseItem>:
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	611a      	str	r2, [r3, #16]
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <vListInsertEnd>:
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	605a      	str	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	609a      	str	r2, [r3, #8]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	609a      	str	r2, [r3, #8]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	611a      	str	r2, [r3, #16]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <vListInsert>:
 8009ae6:	b480      	push	{r7}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60bb      	str	r3, [r7, #8]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afc:	d103      	bne.n	8009b06 <vListInsert+0x20>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e00c      	b.n	8009b20 <vListInsert+0x3a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	e002      	b.n	8009b14 <vListInsert+0x2e>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d2f6      	bcs.n	8009b0e <vListInsert+0x28>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	605a      	str	r2, [r3, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	609a      	str	r2, [r3, #8]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	609a      	str	r2, [r3, #8]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	605a      	str	r2, [r3, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	611a      	str	r2, [r3, #16]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	bf00      	nop
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <uxListRemove>:
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6892      	ldr	r2, [r2, #8]
 8009b6e:	609a      	str	r2, [r3, #8]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	6852      	ldr	r2, [r2, #4]
 8009b78:	605a      	str	r2, [r3, #4]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d103      	bne.n	8009b8c <uxListRemove+0x34>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	605a      	str	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	611a      	str	r2, [r3, #16]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	1e5a      	subs	r2, r3, #1
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <xQueueGenericReset>:
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <xQueueGenericReset+0x2c>
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	60bb      	str	r3, [r7, #8]
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xQueueGenericReset+0x28>
 8009bd8:	f002 f9ae 	bl	800bf38 <vPortEnterCritical>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be4:	68f9      	ldr	r1, [r7, #12]
 8009be6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	441a      	add	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	609a      	str	r2, [r3, #8]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	605a      	str	r2, [r3, #4]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c0e:	fb01 f303 	mul.w	r3, r1, r3
 8009c12:	441a      	add	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	60da      	str	r2, [r3, #12]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	22ff      	movs	r2, #255	@ 0xff
 8009c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	22ff      	movs	r2, #255	@ 0xff
 8009c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d114      	bne.n	8009c58 <xQueueGenericReset+0xac>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d01a      	beq.n	8009c6c <xQueueGenericReset+0xc0>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3310      	adds	r3, #16
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 fa48 	bl	800b0d0 <xTaskRemoveFromEventList>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d012      	beq.n	8009c6c <xQueueGenericReset+0xc0>
 8009c46:	4b0d      	ldr	r3, [pc, #52]	@ (8009c7c <xQueueGenericReset+0xd0>)
 8009c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	e009      	b.n	8009c6c <xQueueGenericReset+0xc0>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3310      	adds	r3, #16
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fef1 	bl	8009a44 <vListInitialise>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3324      	adds	r3, #36	@ 0x24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff feec 	bl	8009a44 <vListInitialise>
 8009c6c:	f002 f996 	bl	800bf9c <vPortExitCritical>
 8009c70:	2301      	movs	r3, #1
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <xQueueGenericCreateStatic>:
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08e      	sub	sp, #56	@ 0x38
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10b      	bne.n	8009cac <xQueueGenericCreateStatic+0x2c>
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <xQueueGenericCreateStatic+0x28>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <xQueueGenericCreateStatic+0x4a>
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <xQueueGenericCreateStatic+0x46>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <xQueueGenericCreateStatic+0x56>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <xQueueGenericCreateStatic+0x5a>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e000      	b.n	8009cdc <xQueueGenericCreateStatic+0x5c>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10b      	bne.n	8009cf8 <xQueueGenericCreateStatic+0x78>
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	623b      	str	r3, [r7, #32]
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	e7fd      	b.n	8009cf4 <xQueueGenericCreateStatic+0x74>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <xQueueGenericCreateStatic+0x84>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <xQueueGenericCreateStatic+0x88>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <xQueueGenericCreateStatic+0x8a>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10b      	bne.n	8009d26 <xQueueGenericCreateStatic+0xa6>
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <xQueueGenericCreateStatic+0xa2>
 8009d26:	2350      	movs	r3, #80	@ 0x50
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b50      	cmp	r3, #80	@ 0x50
 8009d2e:	d00b      	beq.n	8009d48 <xQueueGenericCreateStatic+0xc8>
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <xQueueGenericCreateStatic+0xc4>
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00d      	beq.n	8009d70 <xQueueGenericCreateStatic+0xf0>
 8009d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f805 	bl	8009d7a <prvInitialiseNewQueue>
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	4618      	mov	r0, r3
 8009d74:	3730      	adds	r7, #48	@ 0x30
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <prvInitialiseNewQueue>:
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	70fb      	strb	r3, [r7, #3]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <prvInitialiseNewQueue+0x1c>
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	e002      	b.n	8009d9c <prvInitialiseNewQueue+0x22>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	641a      	str	r2, [r3, #64]	@ 0x40
 8009da8:	2101      	movs	r1, #1
 8009daa:	69b8      	ldr	r0, [r7, #24]
 8009dac:	f7ff fefe 	bl	8009bac <xQueueGenericReset>
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <xQueueGenericSend>:
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	@ 0x38
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10b      	bne.n	8009df4 <xQueueGenericSend+0x34>
 8009ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	e7fd      	b.n	8009df0 <xQueueGenericSend+0x30>
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d103      	bne.n	8009e02 <xQueueGenericSend+0x42>
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <xQueueGenericSend+0x46>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <xQueueGenericSend+0x48>
 8009e06:	2300      	movs	r3, #0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10b      	bne.n	8009e24 <xQueueGenericSend+0x64>
 8009e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e1e:	bf00      	nop
 8009e20:	bf00      	nop
 8009e22:	e7fd      	b.n	8009e20 <xQueueGenericSend+0x60>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d103      	bne.n	8009e32 <xQueueGenericSend+0x72>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <xQueueGenericSend+0x76>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueGenericSend+0x78>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <xQueueGenericSend+0x94>
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	623b      	str	r3, [r7, #32]
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <xQueueGenericSend+0x90>
 8009e54:	f001 fb02 	bl	800b45c <xTaskGetSchedulerState>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d102      	bne.n	8009e64 <xQueueGenericSend+0xa4>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <xQueueGenericSend+0xa8>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e000      	b.n	8009e6a <xQueueGenericSend+0xaa>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10b      	bne.n	8009e86 <xQueueGenericSend+0xc6>
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	e7fd      	b.n	8009e82 <xQueueGenericSend+0xc2>
 8009e86:	f002 f857 	bl	800bf38 <vPortEnterCritical>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d302      	bcc.n	8009e9c <xQueueGenericSend+0xdc>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d129      	bne.n	8009ef0 <xQueueGenericSend+0x130>
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ea2:	f000 fa0f 	bl	800a2c4 <prvCopyDataToQueue>
 8009ea6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d010      	beq.n	8009ed2 <xQueueGenericSend+0x112>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	3324      	adds	r3, #36	@ 0x24
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 f90b 	bl	800b0d0 <xTaskRemoveFromEventList>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d013      	beq.n	8009ee8 <xQueueGenericSend+0x128>
 8009ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8009fc0 <xQueueGenericSend+0x200>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	e00a      	b.n	8009ee8 <xQueueGenericSend+0x128>
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <xQueueGenericSend+0x128>
 8009ed8:	4b39      	ldr	r3, [pc, #228]	@ (8009fc0 <xQueueGenericSend+0x200>)
 8009eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f002 f858 	bl	800bf9c <vPortExitCritical>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e063      	b.n	8009fb8 <xQueueGenericSend+0x1f8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d103      	bne.n	8009efe <xQueueGenericSend+0x13e>
 8009ef6:	f002 f851 	bl	800bf9c <vPortExitCritical>
 8009efa:	2300      	movs	r3, #0
 8009efc:	e05c      	b.n	8009fb8 <xQueueGenericSend+0x1f8>
 8009efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <xQueueGenericSend+0x152>
 8009f04:	f107 0314 	add.w	r3, r7, #20
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f001 f945 	bl	800b198 <vTaskInternalSetTimeOutState>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f12:	f002 f843 	bl	800bf9c <vPortExitCritical>
 8009f16:	f000 fe9b 	bl	800ac50 <vTaskSuspendAll>
 8009f1a:	f002 f80d 	bl	800bf38 <vPortEnterCritical>
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2a:	d103      	bne.n	8009f34 <xQueueGenericSend+0x174>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f3a:	b25b      	sxtb	r3, r3
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d103      	bne.n	8009f4a <xQueueGenericSend+0x18a>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f4a:	f002 f827 	bl	800bf9c <vPortExitCritical>
 8009f4e:	1d3a      	adds	r2, r7, #4
 8009f50:	f107 0314 	add.w	r3, r7, #20
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 f934 	bl	800b1c4 <xTaskCheckForTimeOut>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d124      	bne.n	8009fac <xQueueGenericSend+0x1ec>
 8009f62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f64:	f000 faa6 	bl	800a4b4 <prvIsQueueFull>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d018      	beq.n	8009fa0 <xQueueGenericSend+0x1e0>
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	3310      	adds	r3, #16
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 f858 	bl	800b02c <vTaskPlaceOnEventList>
 8009f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f7e:	f000 fa31 	bl	800a3e4 <prvUnlockQueue>
 8009f82:	f000 fe73 	bl	800ac6c <xTaskResumeAll>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f47f af7c 	bne.w	8009e86 <xQueueGenericSend+0xc6>
 8009f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc0 <xQueueGenericSend+0x200>)
 8009f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	e772      	b.n	8009e86 <xQueueGenericSend+0xc6>
 8009fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fa2:	f000 fa1f 	bl	800a3e4 <prvUnlockQueue>
 8009fa6:	f000 fe61 	bl	800ac6c <xTaskResumeAll>
 8009faa:	e76c      	b.n	8009e86 <xQueueGenericSend+0xc6>
 8009fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fae:	f000 fa19 	bl	800a3e4 <prvUnlockQueue>
 8009fb2:	f000 fe5b 	bl	800ac6c <xTaskResumeAll>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3738      	adds	r7, #56	@ 0x38
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <xQueueGenericSendFromISR>:
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b090      	sub	sp, #64	@ 0x40
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <xQueueGenericSendFromISR+0x30>
 8009fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
 8009ff2:	e7fd      	b.n	8009ff0 <xQueueGenericSendFromISR+0x2c>
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <xQueueGenericSendFromISR+0x3e>
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <xQueueGenericSendFromISR+0x42>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <xQueueGenericSendFromISR+0x44>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10b      	bne.n	800a024 <xQueueGenericSendFromISR+0x60>
 800a00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a01e:	bf00      	nop
 800a020:	bf00      	nop
 800a022:	e7fd      	b.n	800a020 <xQueueGenericSendFromISR+0x5c>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d103      	bne.n	800a032 <xQueueGenericSendFromISR+0x6e>
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <xQueueGenericSendFromISR+0x72>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <xQueueGenericSendFromISR+0x74>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10b      	bne.n	800a054 <xQueueGenericSendFromISR+0x90>
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	623b      	str	r3, [r7, #32]
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	e7fd      	b.n	800a050 <xQueueGenericSendFromISR+0x8c>
 800a054:	f002 f850 	bl	800c0f8 <vPortValidateInterruptPriority>
 800a058:	f3ef 8211 	mrs	r2, BASEPRI
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61fa      	str	r2, [r7, #28]
 800a06e:	61bb      	str	r3, [r7, #24]
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
 800a074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d302      	bcc.n	800a086 <xQueueGenericSendFromISR+0xc2>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d12f      	bne.n	800a0e6 <xQueueGenericSendFromISR+0x122>
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a08c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a09c:	f000 f912 	bl	800a2c4 <prvCopyDataToQueue>
 800a0a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a8:	d112      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x10c>
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d016      	beq.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	3324      	adds	r3, #36	@ 0x24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 f80a 	bl	800b0d0 <xTaskRemoveFromEventList>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00e      	beq.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00b      	beq.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e007      	b.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
 800a0d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	b25a      	sxtb	r2, r3
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0e4:	e001      	b.n	800a0ea <xQueueGenericSendFromISR+0x126>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	bf00      	nop
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3740      	adds	r7, #64	@ 0x40
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <xQueueReceive>:
 800a100:	b580      	push	{r7, lr}
 800a102:	b08c      	sub	sp, #48	@ 0x30
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	2300      	movs	r3, #0
 800a10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10b      	bne.n	800a132 <xQueueReceive+0x32>
 800a11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	623b      	str	r3, [r7, #32]
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	e7fd      	b.n	800a12e <xQueueReceive+0x2e>
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <xQueueReceive+0x40>
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <xQueueReceive+0x44>
 800a140:	2301      	movs	r3, #1
 800a142:	e000      	b.n	800a146 <xQueueReceive+0x46>
 800a144:	2300      	movs	r3, #0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <xQueueReceive+0x62>
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <xQueueReceive+0x5e>
 800a162:	f001 f97b 	bl	800b45c <xTaskGetSchedulerState>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d102      	bne.n	800a172 <xQueueReceive+0x72>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <xQueueReceive+0x76>
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <xQueueReceive+0x78>
 800a176:	2300      	movs	r3, #0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10b      	bne.n	800a194 <xQueueReceive+0x94>
 800a17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <xQueueReceive+0x90>
 800a194:	f001 fed0 	bl	800bf38 <vPortEnterCritical>
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d01f      	beq.n	800a1e4 <xQueueReceive+0xe4>
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1a8:	f000 f8f6 	bl	800a398 <prvCopyDataFromQueue>
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00f      	beq.n	800a1dc <xQueueReceive+0xdc>
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	3310      	adds	r3, #16
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 ff85 	bl	800b0d0 <xTaskRemoveFromEventList>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <xQueueReceive+0xdc>
 800a1cc:	4b3c      	ldr	r3, [pc, #240]	@ (800a2c0 <xQueueReceive+0x1c0>)
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f001 fede 	bl	800bf9c <vPortExitCritical>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e069      	b.n	800a2b8 <xQueueReceive+0x1b8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <xQueueReceive+0xf2>
 800a1ea:	f001 fed7 	bl	800bf9c <vPortExitCritical>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e062      	b.n	800a2b8 <xQueueReceive+0x1b8>
 800a1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <xQueueReceive+0x106>
 800a1f8:	f107 0310 	add.w	r3, r7, #16
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 ffcb 	bl	800b198 <vTaskInternalSetTimeOutState>
 800a202:	2301      	movs	r3, #1
 800a204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a206:	f001 fec9 	bl	800bf9c <vPortExitCritical>
 800a20a:	f000 fd21 	bl	800ac50 <vTaskSuspendAll>
 800a20e:	f001 fe93 	bl	800bf38 <vPortEnterCritical>
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a218:	b25b      	sxtb	r3, r3
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d103      	bne.n	800a228 <xQueueReceive+0x128>
 800a220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a22e:	b25b      	sxtb	r3, r3
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d103      	bne.n	800a23e <xQueueReceive+0x13e>
 800a236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a23e:	f001 fead 	bl	800bf9c <vPortExitCritical>
 800a242:	1d3a      	adds	r2, r7, #4
 800a244:	f107 0310 	add.w	r3, r7, #16
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 ffba 	bl	800b1c4 <xTaskCheckForTimeOut>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d123      	bne.n	800a29e <xQueueReceive+0x19e>
 800a256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a258:	f000 f916 	bl	800a488 <prvIsQueueEmpty>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d017      	beq.n	800a292 <xQueueReceive+0x192>
 800a262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a264:	3324      	adds	r3, #36	@ 0x24
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fede 	bl	800b02c <vTaskPlaceOnEventList>
 800a270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a272:	f000 f8b7 	bl	800a3e4 <prvUnlockQueue>
 800a276:	f000 fcf9 	bl	800ac6c <xTaskResumeAll>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d189      	bne.n	800a194 <xQueueReceive+0x94>
 800a280:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c0 <xQueueReceive+0x1c0>)
 800a282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	e780      	b.n	800a194 <xQueueReceive+0x94>
 800a292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a294:	f000 f8a6 	bl	800a3e4 <prvUnlockQueue>
 800a298:	f000 fce8 	bl	800ac6c <xTaskResumeAll>
 800a29c:	e77a      	b.n	800a194 <xQueueReceive+0x94>
 800a29e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a0:	f000 f8a0 	bl	800a3e4 <prvUnlockQueue>
 800a2a4:	f000 fce2 	bl	800ac6c <xTaskResumeAll>
 800a2a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2aa:	f000 f8ed 	bl	800a488 <prvIsQueueEmpty>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f43f af6f 	beq.w	800a194 <xQueueReceive+0x94>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3730      	adds	r7, #48	@ 0x30
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <prvCopyDataToQueue>:
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10d      	bne.n	800a2fe <prvCopyDataToQueue+0x3a>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d14d      	bne.n	800a386 <prvCopyDataToQueue+0xc2>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 f8d2 	bl	800b498 <xTaskPriorityDisinherit>
 800a2f4:	6178      	str	r0, [r7, #20]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	609a      	str	r2, [r3, #8]
 800a2fc:	e043      	b.n	800a386 <prvCopyDataToQueue+0xc2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d119      	bne.n	800a338 <prvCopyDataToQueue+0x74>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6858      	ldr	r0, [r3, #4]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30c:	461a      	mov	r2, r3
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	f002 f9b4 	bl	800c67c <memcpy>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31c:	441a      	add	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	605a      	str	r2, [r3, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d32b      	bcc.n	800a386 <prvCopyDataToQueue+0xc2>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	e026      	b.n	800a386 <prvCopyDataToQueue+0xc2>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	68d8      	ldr	r0, [r3, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a340:	461a      	mov	r2, r3
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	f002 f99a 	bl	800c67c <memcpy>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a350:	425b      	negs	r3, r3
 800a352:	441a      	add	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	60da      	str	r2, [r3, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d207      	bcs.n	800a374 <prvCopyDataToQueue+0xb0>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a36c:	425b      	negs	r3, r3
 800a36e:	441a      	add	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	60da      	str	r2, [r3, #12]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d105      	bne.n	800a386 <prvCopyDataToQueue+0xc2>
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <prvCopyDataToQueue+0xc2>
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3b01      	subs	r3, #1
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <prvCopyDataFromQueue>:
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d018      	beq.n	800a3dc <prvCopyDataFromQueue+0x44>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b2:	441a      	add	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	60da      	str	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d303      	bcc.n	800a3cc <prvCopyDataFromQueue+0x34>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60da      	str	r2, [r3, #12]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68d9      	ldr	r1, [r3, #12]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6838      	ldr	r0, [r7, #0]
 800a3d8:	f002 f950 	bl	800c67c <memcpy>
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <prvUnlockQueue>:
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	f001 fda4 	bl	800bf38 <vPortEnterCritical>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e011      	b.n	800a41e <prvUnlockQueue+0x3a>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d012      	beq.n	800a428 <prvUnlockQueue+0x44>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3324      	adds	r3, #36	@ 0x24
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fe62 	bl	800b0d0 <xTaskRemoveFromEventList>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <prvUnlockQueue+0x32>
 800a412:	f000 ff3b 	bl	800b28c <vTaskMissedYield>
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	3b01      	subs	r3, #1
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	73fb      	strb	r3, [r7, #15]
 800a41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dce9      	bgt.n	800a3fa <prvUnlockQueue+0x16>
 800a426:	e000      	b.n	800a42a <prvUnlockQueue+0x46>
 800a428:	bf00      	nop
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	22ff      	movs	r2, #255	@ 0xff
 800a42e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a432:	f001 fdb3 	bl	800bf9c <vPortExitCritical>
 800a436:	f001 fd7f 	bl	800bf38 <vPortEnterCritical>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a440:	73bb      	strb	r3, [r7, #14]
 800a442:	e011      	b.n	800a468 <prvUnlockQueue+0x84>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d012      	beq.n	800a472 <prvUnlockQueue+0x8e>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3310      	adds	r3, #16
 800a450:	4618      	mov	r0, r3
 800a452:	f000 fe3d 	bl	800b0d0 <xTaskRemoveFromEventList>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <prvUnlockQueue+0x7c>
 800a45c:	f000 ff16 	bl	800b28c <vTaskMissedYield>
 800a460:	7bbb      	ldrb	r3, [r7, #14]
 800a462:	3b01      	subs	r3, #1
 800a464:	b2db      	uxtb	r3, r3
 800a466:	73bb      	strb	r3, [r7, #14]
 800a468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dce9      	bgt.n	800a444 <prvUnlockQueue+0x60>
 800a470:	e000      	b.n	800a474 <prvUnlockQueue+0x90>
 800a472:	bf00      	nop
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	22ff      	movs	r2, #255	@ 0xff
 800a478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a47c:	f001 fd8e 	bl	800bf9c <vPortExitCritical>
 800a480:	bf00      	nop
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <prvIsQueueEmpty>:
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	f001 fd52 	bl	800bf38 <vPortEnterCritical>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <prvIsQueueEmpty+0x1a>
 800a49c:	2301      	movs	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e001      	b.n	800a4a6 <prvIsQueueEmpty+0x1e>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	f001 fd79 	bl	800bf9c <vPortExitCritical>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <prvIsQueueFull>:
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	f001 fd3c 	bl	800bf38 <vPortEnterCritical>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d102      	bne.n	800a4d2 <prvIsQueueFull+0x1e>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	e001      	b.n	800a4d6 <prvIsQueueFull+0x22>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
 800a4d6:	f001 fd61 	bl	800bf9c <vPortExitCritical>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <vQueueAddToRegistry>:
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	e014      	b.n	800a51e <vQueueAddToRegistry+0x3a>
 800a4f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a534 <vQueueAddToRegistry+0x50>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10b      	bne.n	800a518 <vQueueAddToRegistry+0x34>
 800a500:	490c      	ldr	r1, [pc, #48]	@ (800a534 <vQueueAddToRegistry+0x50>)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a50a:	4a0a      	ldr	r2, [pc, #40]	@ (800a534 <vQueueAddToRegistry+0x50>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	4413      	add	r3, r2
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	e006      	b.n	800a526 <vQueueAddToRegistry+0x42>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b07      	cmp	r3, #7
 800a522:	d9e7      	bls.n	800a4f4 <vQueueAddToRegistry+0x10>
 800a524:	bf00      	nop
 800a526:	bf00      	nop
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	200011c0 	.word	0x200011c0

0800a538 <vQueueWaitForMessageRestricted>:
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	f001 fcf6 	bl	800bf38 <vPortEnterCritical>
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d103      	bne.n	800a562 <vQueueWaitForMessageRestricted+0x2a>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a568:	b25b      	sxtb	r3, r3
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56e:	d103      	bne.n	800a578 <vQueueWaitForMessageRestricted+0x40>
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a578:	f001 fd10 	bl	800bf9c <vPortExitCritical>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <vQueueWaitForMessageRestricted+0x5a>
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	3324      	adds	r3, #36	@ 0x24
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fd73 	bl	800b078 <vTaskPlaceOnEventListRestricted>
 800a592:	6978      	ldr	r0, [r7, #20]
 800a594:	f7ff ff26 	bl	800a3e4 <prvUnlockQueue>
 800a598:	bf00      	nop
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <xTaskCreateStatic>:
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08e      	sub	sp, #56	@ 0x38
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10b      	bne.n	800a5cc <xTaskCreateStatic+0x2c>
 800a5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	623b      	str	r3, [r7, #32]
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	e7fd      	b.n	800a5c8 <xTaskCreateStatic+0x28>
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10b      	bne.n	800a5ea <xTaskCreateStatic+0x4a>
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xTaskCreateStatic+0x46>
 800a5ea:	23a8      	movs	r3, #168	@ 0xa8
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2ba8      	cmp	r3, #168	@ 0xa8
 800a5f2:	d00b      	beq.n	800a60c <xTaskCreateStatic+0x6c>
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	bf00      	nop
 800a608:	bf00      	nop
 800a60a:	e7fd      	b.n	800a608 <xTaskCreateStatic+0x68>
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01e      	beq.n	800a652 <xTaskCreateStatic+0xb2>
 800a614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a616:	2b00      	cmp	r3, #0
 800a618:	d01b      	beq.n	800a652 <xTaskCreateStatic+0xb2>
 800a61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a622:	631a      	str	r2, [r3, #48]	@ 0x30
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	2202      	movs	r2, #2
 800a628:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800a62c:	2300      	movs	r3, #0
 800a62e:	9303      	str	r3, [sp, #12]
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	9302      	str	r3, [sp, #8]
 800a634:	f107 0314 	add.w	r3, r7, #20
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f851 	bl	800a6ec <prvInitialiseNewTask>
 800a64a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a64c:	f000 f8f6 	bl	800a83c <prvAddNewTaskToReadyList>
 800a650:	e001      	b.n	800a656 <xTaskCreateStatic+0xb6>
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	4618      	mov	r0, r3
 800a65a:	3728      	adds	r7, #40	@ 0x28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <xTaskCreate>:
 800a660:	b580      	push	{r7, lr}
 800a662:	b08c      	sub	sp, #48	@ 0x30
 800a664:	af04      	add	r7, sp, #16
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	4613      	mov	r3, r2
 800a66e:	80fb      	strh	r3, [r7, #6]
 800a670:	88fb      	ldrh	r3, [r7, #6]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4618      	mov	r0, r3
 800a676:	f001 fd81 	bl	800c17c <pvPortMalloc>
 800a67a:	6178      	str	r0, [r7, #20]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00e      	beq.n	800a6a0 <xTaskCreate+0x40>
 800a682:	20a8      	movs	r0, #168	@ 0xa8
 800a684:	f001 fd7a 	bl	800c17c <pvPortMalloc>
 800a688:	61f8      	str	r0, [r7, #28]
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <xTaskCreate+0x38>
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	631a      	str	r2, [r3, #48]	@ 0x30
 800a696:	e005      	b.n	800a6a4 <xTaskCreate+0x44>
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f001 fe3d 	bl	800c318 <vPortFree>
 800a69e:	e001      	b.n	800a6a4 <xTaskCreate+0x44>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	61fb      	str	r3, [r7, #28]
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d017      	beq.n	800a6da <xTaskCreate+0x7a>
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800a6b2:	88fa      	ldrh	r2, [r7, #6]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9303      	str	r3, [sp, #12]
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	9302      	str	r3, [sp, #8]
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f80f 	bl	800a6ec <prvInitialiseNewTask>
 800a6ce:	69f8      	ldr	r0, [r7, #28]
 800a6d0:	f000 f8b4 	bl	800a83c <prvAddNewTaskToReadyList>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e002      	b.n	800a6e0 <xTaskCreate+0x80>
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295
 800a6de:	61bb      	str	r3, [r7, #24]
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3720      	adds	r7, #32
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <prvInitialiseNewTask>:
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	461a      	mov	r2, r3
 800a704:	21a5      	movs	r1, #165	@ 0xa5
 800a706:	f001 ff27 	bl	800c558 <memset>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a714:	3b01      	subs	r3, #1
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f023 0307 	bic.w	r3, r3, #7
 800a722:	61bb      	str	r3, [r7, #24]
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <prvInitialiseNewTask+0x5a>
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <prvInitialiseNewTask+0x56>
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d01f      	beq.n	800a78c <prvInitialiseNewTask+0xa0>
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	e012      	b.n	800a778 <prvInitialiseNewTask+0x8c>
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	4413      	add	r3, r2
 800a758:	7819      	ldrb	r1, [r3, #0]
 800a75a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	3334      	adds	r3, #52	@ 0x34
 800a762:	460a      	mov	r2, r1
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	4413      	add	r3, r2
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d006      	beq.n	800a780 <prvInitialiseNewTask+0x94>
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	3301      	adds	r3, #1
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b0f      	cmp	r3, #15
 800a77c:	d9e9      	bls.n	800a752 <prvInitialiseNewTask+0x66>
 800a77e:	e000      	b.n	800a782 <prvInitialiseNewTask+0x96>
 800a780:	bf00      	nop
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a78a:	e003      	b.n	800a794 <prvInitialiseNewTask+0xa8>
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a796:	2b37      	cmp	r3, #55	@ 0x37
 800a798:	d901      	bls.n	800a79e <prvInitialiseNewTask+0xb2>
 800a79a:	2337      	movs	r3, #55	@ 0x37
 800a79c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	651a      	str	r2, [r3, #80]	@ 0x50
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff f965 	bl	8009a84 <vListInitialiseItem>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7bc:	3318      	adds	r3, #24
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff f960 	bl	8009a84 <vListInitialiseItem>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c8:	611a      	str	r2, [r3, #16]
 800a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d2:	619a      	str	r2, [r3, #24]
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7d8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	3354      	adds	r3, #84	@ 0x54
 800a7ee:	224c      	movs	r2, #76	@ 0x4c
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f001 feb0 	bl	800c558 <memset>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	@ (800a830 <prvInitialiseNewTask+0x144>)
 800a7fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	4a0c      	ldr	r2, [pc, #48]	@ (800a834 <prvInitialiseNewTask+0x148>)
 800a802:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a806:	4a0c      	ldr	r2, [pc, #48]	@ (800a838 <prvInitialiseNewTask+0x14c>)
 800a808:	661a      	str	r2, [r3, #96]	@ 0x60
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	68f9      	ldr	r1, [r7, #12]
 800a80e:	69b8      	ldr	r0, [r7, #24]
 800a810:	f001 fa60 	bl	800bcd4 <pxPortInitialiseStack>
 800a814:	4602      	mov	r2, r0
 800a816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <prvInitialiseNewTask+0x13a>
 800a820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	bf00      	nop
 800a828:	3720      	adds	r7, #32
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20002454 	.word	0x20002454
 800a834:	200024bc 	.word	0x200024bc
 800a838:	20002524 	.word	0x20002524

0800a83c <prvAddNewTaskToReadyList>:
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	f001 fb78 	bl	800bf38 <vPortEnterCritical>
 800a848:	4b2d      	ldr	r3, [pc, #180]	@ (800a900 <prvAddNewTaskToReadyList+0xc4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3301      	adds	r3, #1
 800a84e:	4a2c      	ldr	r2, [pc, #176]	@ (800a900 <prvAddNewTaskToReadyList+0xc4>)
 800a850:	6013      	str	r3, [r2, #0]
 800a852:	4b2c      	ldr	r3, [pc, #176]	@ (800a904 <prvAddNewTaskToReadyList+0xc8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d109      	bne.n	800a86e <prvAddNewTaskToReadyList+0x32>
 800a85a:	4a2a      	ldr	r2, [pc, #168]	@ (800a904 <prvAddNewTaskToReadyList+0xc8>)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	4b27      	ldr	r3, [pc, #156]	@ (800a900 <prvAddNewTaskToReadyList+0xc4>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d110      	bne.n	800a88a <prvAddNewTaskToReadyList+0x4e>
 800a868:	f000 fd34 	bl	800b2d4 <prvInitialiseTaskLists>
 800a86c:	e00d      	b.n	800a88a <prvAddNewTaskToReadyList+0x4e>
 800a86e:	4b26      	ldr	r3, [pc, #152]	@ (800a908 <prvAddNewTaskToReadyList+0xcc>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <prvAddNewTaskToReadyList+0x4e>
 800a876:	4b23      	ldr	r3, [pc, #140]	@ (800a904 <prvAddNewTaskToReadyList+0xc8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a880:	429a      	cmp	r2, r3
 800a882:	d802      	bhi.n	800a88a <prvAddNewTaskToReadyList+0x4e>
 800a884:	4a1f      	ldr	r2, [pc, #124]	@ (800a904 <prvAddNewTaskToReadyList+0xc8>)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	4b20      	ldr	r3, [pc, #128]	@ (800a90c <prvAddNewTaskToReadyList+0xd0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3301      	adds	r3, #1
 800a890:	4a1e      	ldr	r2, [pc, #120]	@ (800a90c <prvAddNewTaskToReadyList+0xd0>)
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	4b1d      	ldr	r3, [pc, #116]	@ (800a90c <prvAddNewTaskToReadyList+0xd0>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	645a      	str	r2, [r3, #68]	@ 0x44
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a910 <prvAddNewTaskToReadyList+0xd4>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d903      	bls.n	800a8b0 <prvAddNewTaskToReadyList+0x74>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ac:	4a18      	ldr	r2, [pc, #96]	@ (800a910 <prvAddNewTaskToReadyList+0xd4>)
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4a15      	ldr	r2, [pc, #84]	@ (800a914 <prvAddNewTaskToReadyList+0xd8>)
 800a8be:	441a      	add	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	f7ff f8e9 	bl	8009a9e <vListInsertEnd>
 800a8cc:	f001 fb66 	bl	800bf9c <vPortExitCritical>
 800a8d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a908 <prvAddNewTaskToReadyList+0xcc>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00e      	beq.n	800a8f6 <prvAddNewTaskToReadyList+0xba>
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <prvAddNewTaskToReadyList+0xc8>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d207      	bcs.n	800a8f6 <prvAddNewTaskToReadyList+0xba>
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a918 <prvAddNewTaskToReadyList+0xdc>)
 800a8e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	200016d4 	.word	0x200016d4
 800a904:	20001200 	.word	0x20001200
 800a908:	200016e0 	.word	0x200016e0
 800a90c:	200016f0 	.word	0x200016f0
 800a910:	200016dc 	.word	0x200016dc
 800a914:	20001204 	.word	0x20001204
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <vTaskDelete>:
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	f001 fb08 	bl	800bf38 <vPortEnterCritical>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <vTaskDelete+0x18>
 800a92e:	4b2d      	ldr	r3, [pc, #180]	@ (800a9e4 <vTaskDelete+0xc8>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	e000      	b.n	800a936 <vTaskDelete+0x1a>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3304      	adds	r3, #4
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff f90b 	bl	8009b58 <uxListRemove>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a946:	2b00      	cmp	r3, #0
 800a948:	d004      	beq.n	800a954 <vTaskDelete+0x38>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3318      	adds	r3, #24
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff f902 	bl	8009b58 <uxListRemove>
 800a954:	4b24      	ldr	r3, [pc, #144]	@ (800a9e8 <vTaskDelete+0xcc>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	4a23      	ldr	r2, [pc, #140]	@ (800a9e8 <vTaskDelete+0xcc>)
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	4b21      	ldr	r3, [pc, #132]	@ (800a9e4 <vTaskDelete+0xc8>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	429a      	cmp	r2, r3
 800a966:	d10b      	bne.n	800a980 <vTaskDelete+0x64>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	481f      	ldr	r0, [pc, #124]	@ (800a9ec <vTaskDelete+0xd0>)
 800a970:	f7ff f895 	bl	8009a9e <vListInsertEnd>
 800a974:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f0 <vTaskDelete+0xd4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f0 <vTaskDelete+0xd4>)
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	e009      	b.n	800a994 <vTaskDelete+0x78>
 800a980:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f4 <vTaskDelete+0xd8>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3b01      	subs	r3, #1
 800a986:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f4 <vTaskDelete+0xd8>)
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 fd10 	bl	800b3b0 <prvDeleteTCB>
 800a990:	f000 fd44 	bl	800b41c <prvResetNextTaskUnblockTime>
 800a994:	f001 fb02 	bl	800bf9c <vPortExitCritical>
 800a998:	4b17      	ldr	r3, [pc, #92]	@ (800a9f8 <vTaskDelete+0xdc>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d01c      	beq.n	800a9da <vTaskDelete+0xbe>
 800a9a0:	4b10      	ldr	r3, [pc, #64]	@ (800a9e4 <vTaskDelete+0xc8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d117      	bne.n	800a9da <vTaskDelete+0xbe>
 800a9aa:	4b14      	ldr	r3, [pc, #80]	@ (800a9fc <vTaskDelete+0xe0>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <vTaskDelete+0xae>
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60bb      	str	r3, [r7, #8]
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	e7fd      	b.n	800a9c6 <vTaskDelete+0xaa>
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <vTaskDelete+0xe4>)
 800a9cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	bf00      	nop
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20001200 	.word	0x20001200
 800a9e8:	200016f0 	.word	0x200016f0
 800a9ec:	200016a8 	.word	0x200016a8
 800a9f0:	200016bc 	.word	0x200016bc
 800a9f4:	200016d4 	.word	0x200016d4
 800a9f8:	200016e0 	.word	0x200016e0
 800a9fc:	200016fc 	.word	0x200016fc
 800aa00:	e000ed04 	.word	0xe000ed04

0800aa04 <vTaskDelayUntil>:
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	@ 0x28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10b      	bne.n	800aa30 <vTaskDelayUntil+0x2c>
 800aa18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	617b      	str	r3, [r7, #20]
 800aa2a:	bf00      	nop
 800aa2c:	bf00      	nop
 800aa2e:	e7fd      	b.n	800aa2c <vTaskDelayUntil+0x28>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <vTaskDelayUntil+0x4a>
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <vTaskDelayUntil+0x46>
 800aa4e:	4b2a      	ldr	r3, [pc, #168]	@ (800aaf8 <vTaskDelayUntil+0xf4>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00b      	beq.n	800aa6e <vTaskDelayUntil+0x6a>
 800aa56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	bf00      	nop
 800aa6a:	bf00      	nop
 800aa6c:	e7fd      	b.n	800aa6a <vTaskDelayUntil+0x66>
 800aa6e:	f000 f8ef 	bl	800ac50 <vTaskSuspendAll>
 800aa72:	4b22      	ldr	r3, [pc, #136]	@ (800aafc <vTaskDelayUntil+0xf8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	623b      	str	r3, [r7, #32]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	4413      	add	r3, r2
 800aa80:	61fb      	str	r3, [r7, #28]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6a3a      	ldr	r2, [r7, #32]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d20b      	bcs.n	800aaa4 <vTaskDelayUntil+0xa0>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	69fa      	ldr	r2, [r7, #28]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d211      	bcs.n	800aaba <vTaskDelayUntil+0xb6>
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d90d      	bls.n	800aaba <vTaskDelayUntil+0xb6>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaa2:	e00a      	b.n	800aaba <vTaskDelayUntil+0xb6>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d303      	bcc.n	800aab6 <vTaskDelayUntil+0xb2>
 800aaae:	69fa      	ldr	r2, [r7, #28]
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d901      	bls.n	800aaba <vTaskDelayUntil+0xb6>
 800aab6:	2301      	movs	r3, #1
 800aab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	69fa      	ldr	r2, [r7, #28]
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <vTaskDelayUntil+0xd0>
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fd52 	bl	800b578 <prvAddCurrentTaskToDelayedList>
 800aad4:	f000 f8ca 	bl	800ac6c <xTaskResumeAll>
 800aad8:	61b8      	str	r0, [r7, #24]
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d107      	bne.n	800aaf0 <vTaskDelayUntil+0xec>
 800aae0:	4b07      	ldr	r3, [pc, #28]	@ (800ab00 <vTaskDelayUntil+0xfc>)
 800aae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	bf00      	nop
 800aaf2:	3728      	adds	r7, #40	@ 0x28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	200016fc 	.word	0x200016fc
 800aafc:	200016d8 	.word	0x200016d8
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <vTaskDelay>:
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d018      	beq.n	800ab48 <vTaskDelay+0x44>
 800ab16:	4b14      	ldr	r3, [pc, #80]	@ (800ab68 <vTaskDelay+0x64>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00b      	beq.n	800ab36 <vTaskDelay+0x32>
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	60bb      	str	r3, [r7, #8]
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	e7fd      	b.n	800ab32 <vTaskDelay+0x2e>
 800ab36:	f000 f88b 	bl	800ac50 <vTaskSuspendAll>
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fd1b 	bl	800b578 <prvAddCurrentTaskToDelayedList>
 800ab42:	f000 f893 	bl	800ac6c <xTaskResumeAll>
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d107      	bne.n	800ab5e <vTaskDelay+0x5a>
 800ab4e:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <vTaskDelay+0x68>)
 800ab50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200016fc 	.word	0x200016fc
 800ab6c:	e000ed04 	.word	0xe000ed04

0800ab70 <vTaskStartScheduler>:
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08a      	sub	sp, #40	@ 0x28
 800ab74:	af04      	add	r7, sp, #16
 800ab76:	2300      	movs	r3, #0
 800ab78:	60bb      	str	r3, [r7, #8]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	607b      	str	r3, [r7, #4]
 800ab7e:	463a      	mov	r2, r7
 800ab80:	1d39      	adds	r1, r7, #4
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe ff28 	bl	80099dc <vApplicationGetIdleTaskMemory>
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	9202      	str	r2, [sp, #8]
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	2300      	movs	r3, #0
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	460a      	mov	r2, r1
 800ab9e:	4924      	ldr	r1, [pc, #144]	@ (800ac30 <vTaskStartScheduler+0xc0>)
 800aba0:	4824      	ldr	r0, [pc, #144]	@ (800ac34 <vTaskStartScheduler+0xc4>)
 800aba2:	f7ff fcfd 	bl	800a5a0 <xTaskCreateStatic>
 800aba6:	4603      	mov	r3, r0
 800aba8:	4a23      	ldr	r2, [pc, #140]	@ (800ac38 <vTaskStartScheduler+0xc8>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	4b22      	ldr	r3, [pc, #136]	@ (800ac38 <vTaskStartScheduler+0xc8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <vTaskStartScheduler+0x4a>
 800abb4:	2301      	movs	r3, #1
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	e001      	b.n	800abbe <vTaskStartScheduler+0x4e>
 800abba:	2300      	movs	r3, #0
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d102      	bne.n	800abca <vTaskStartScheduler+0x5a>
 800abc4:	f000 fd2c 	bl	800b620 <xTimerCreateTimerTask>
 800abc8:	6178      	str	r0, [r7, #20]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d11b      	bne.n	800ac08 <vTaskStartScheduler+0x98>
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	613b      	str	r3, [r7, #16]
 800abe2:	bf00      	nop
 800abe4:	4b15      	ldr	r3, [pc, #84]	@ (800ac3c <vTaskStartScheduler+0xcc>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3354      	adds	r3, #84	@ 0x54
 800abea:	4a15      	ldr	r2, [pc, #84]	@ (800ac40 <vTaskStartScheduler+0xd0>)
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	4b15      	ldr	r3, [pc, #84]	@ (800ac44 <vTaskStartScheduler+0xd4>)
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	4b14      	ldr	r3, [pc, #80]	@ (800ac48 <vTaskStartScheduler+0xd8>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	4b13      	ldr	r3, [pc, #76]	@ (800ac4c <vTaskStartScheduler+0xdc>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	f001 f8f5 	bl	800bdf0 <xPortStartScheduler>
 800ac06:	e00f      	b.n	800ac28 <vTaskStartScheduler+0xb8>
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d10b      	bne.n	800ac28 <vTaskStartScheduler+0xb8>
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	bf00      	nop
 800ac24:	bf00      	nop
 800ac26:	e7fd      	b.n	800ac24 <vTaskStartScheduler+0xb4>
 800ac28:	bf00      	nop
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	0800c7c0 	.word	0x0800c7c0
 800ac34:	0800b2a5 	.word	0x0800b2a5
 800ac38:	200016f8 	.word	0x200016f8
 800ac3c:	20001200 	.word	0x20001200
 800ac40:	2000023c 	.word	0x2000023c
 800ac44:	200016f4 	.word	0x200016f4
 800ac48:	200016e0 	.word	0x200016e0
 800ac4c:	200016d8 	.word	0x200016d8

0800ac50 <vTaskSuspendAll>:
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	4b04      	ldr	r3, [pc, #16]	@ (800ac68 <vTaskSuspendAll+0x18>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	4a03      	ldr	r2, [pc, #12]	@ (800ac68 <vTaskSuspendAll+0x18>)
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	bf00      	nop
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	200016fc 	.word	0x200016fc

0800ac6c <xTaskResumeAll>:
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
 800ac7a:	4b42      	ldr	r3, [pc, #264]	@ (800ad84 <xTaskResumeAll+0x118>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10b      	bne.n	800ac9a <xTaskResumeAll+0x2e>
 800ac82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	e7fd      	b.n	800ac96 <xTaskResumeAll+0x2a>
 800ac9a:	f001 f94d 	bl	800bf38 <vPortEnterCritical>
 800ac9e:	4b39      	ldr	r3, [pc, #228]	@ (800ad84 <xTaskResumeAll+0x118>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3b01      	subs	r3, #1
 800aca4:	4a37      	ldr	r2, [pc, #220]	@ (800ad84 <xTaskResumeAll+0x118>)
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	4b36      	ldr	r3, [pc, #216]	@ (800ad84 <xTaskResumeAll+0x118>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d162      	bne.n	800ad76 <xTaskResumeAll+0x10a>
 800acb0:	4b35      	ldr	r3, [pc, #212]	@ (800ad88 <xTaskResumeAll+0x11c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d05e      	beq.n	800ad76 <xTaskResumeAll+0x10a>
 800acb8:	e02f      	b.n	800ad1a <xTaskResumeAll+0xae>
 800acba:	4b34      	ldr	r3, [pc, #208]	@ (800ad8c <xTaskResumeAll+0x120>)
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3318      	adds	r3, #24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe ff46 	bl	8009b58 <uxListRemove>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3304      	adds	r3, #4
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe ff41 	bl	8009b58 <uxListRemove>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acda:	4b2d      	ldr	r3, [pc, #180]	@ (800ad90 <xTaskResumeAll+0x124>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d903      	bls.n	800acea <xTaskResumeAll+0x7e>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace6:	4a2a      	ldr	r2, [pc, #168]	@ (800ad90 <xTaskResumeAll+0x124>)
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4a27      	ldr	r2, [pc, #156]	@ (800ad94 <xTaskResumeAll+0x128>)
 800acf8:	441a      	add	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3304      	adds	r3, #4
 800acfe:	4619      	mov	r1, r3
 800ad00:	4610      	mov	r0, r2
 800ad02:	f7fe fecc 	bl	8009a9e <vListInsertEnd>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad0a:	4b23      	ldr	r3, [pc, #140]	@ (800ad98 <xTaskResumeAll+0x12c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d302      	bcc.n	800ad1a <xTaskResumeAll+0xae>
 800ad14:	4b21      	ldr	r3, [pc, #132]	@ (800ad9c <xTaskResumeAll+0x130>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ad8c <xTaskResumeAll+0x120>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1cb      	bne.n	800acba <xTaskResumeAll+0x4e>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <xTaskResumeAll+0xc0>
 800ad28:	f000 fb78 	bl	800b41c <prvResetNextTaskUnblockTime>
 800ad2c:	4b1c      	ldr	r3, [pc, #112]	@ (800ada0 <xTaskResumeAll+0x134>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	607b      	str	r3, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d010      	beq.n	800ad5a <xTaskResumeAll+0xee>
 800ad38:	f000 f858 	bl	800adec <xTaskIncrementTick>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <xTaskResumeAll+0xdc>
 800ad42:	4b16      	ldr	r3, [pc, #88]	@ (800ad9c <xTaskResumeAll+0x130>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1f1      	bne.n	800ad38 <xTaskResumeAll+0xcc>
 800ad54:	4b12      	ldr	r3, [pc, #72]	@ (800ada0 <xTaskResumeAll+0x134>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	4b10      	ldr	r3, [pc, #64]	@ (800ad9c <xTaskResumeAll+0x130>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d009      	beq.n	800ad76 <xTaskResumeAll+0x10a>
 800ad62:	2301      	movs	r3, #1
 800ad64:	60bb      	str	r3, [r7, #8]
 800ad66:	4b0f      	ldr	r3, [pc, #60]	@ (800ada4 <xTaskResumeAll+0x138>)
 800ad68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f001 f911 	bl	800bf9c <vPortExitCritical>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	200016fc 	.word	0x200016fc
 800ad88:	200016d4 	.word	0x200016d4
 800ad8c:	20001694 	.word	0x20001694
 800ad90:	200016dc 	.word	0x200016dc
 800ad94:	20001204 	.word	0x20001204
 800ad98:	20001200 	.word	0x20001200
 800ad9c:	200016e8 	.word	0x200016e8
 800ada0:	200016e4 	.word	0x200016e4
 800ada4:	e000ed04 	.word	0xe000ed04

0800ada8 <xTaskGetTickCount>:
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	4b05      	ldr	r3, [pc, #20]	@ (800adc4 <xTaskGetTickCount+0x1c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	607b      	str	r3, [r7, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	200016d8 	.word	0x200016d8

0800adc8 <xTaskGetTickCountFromISR>:
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	f001 f993 	bl	800c0f8 <vPortValidateInterruptPriority>
 800add2:	2300      	movs	r3, #0
 800add4:	607b      	str	r3, [r7, #4]
 800add6:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <xTaskGetTickCountFromISR+0x20>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	200016d8 	.word	0x200016d8

0800adec <xTaskIncrementTick>:
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	2300      	movs	r3, #0
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	4b4f      	ldr	r3, [pc, #316]	@ (800af34 <xTaskIncrementTick+0x148>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f040 8090 	bne.w	800af20 <xTaskIncrementTick+0x134>
 800ae00:	4b4d      	ldr	r3, [pc, #308]	@ (800af38 <xTaskIncrementTick+0x14c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	613b      	str	r3, [r7, #16]
 800ae08:	4a4b      	ldr	r2, [pc, #300]	@ (800af38 <xTaskIncrementTick+0x14c>)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d121      	bne.n	800ae58 <xTaskIncrementTick+0x6c>
 800ae14:	4b49      	ldr	r3, [pc, #292]	@ (800af3c <xTaskIncrementTick+0x150>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00b      	beq.n	800ae36 <xTaskIncrementTick+0x4a>
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	e7fd      	b.n	800ae32 <xTaskIncrementTick+0x46>
 800ae36:	4b41      	ldr	r3, [pc, #260]	@ (800af3c <xTaskIncrementTick+0x150>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	4b40      	ldr	r3, [pc, #256]	@ (800af40 <xTaskIncrementTick+0x154>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a3e      	ldr	r2, [pc, #248]	@ (800af3c <xTaskIncrementTick+0x150>)
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	4a3e      	ldr	r2, [pc, #248]	@ (800af40 <xTaskIncrementTick+0x154>)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	4b3e      	ldr	r3, [pc, #248]	@ (800af44 <xTaskIncrementTick+0x158>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	4a3c      	ldr	r2, [pc, #240]	@ (800af44 <xTaskIncrementTick+0x158>)
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	f000 fae2 	bl	800b41c <prvResetNextTaskUnblockTime>
 800ae58:	4b3b      	ldr	r3, [pc, #236]	@ (800af48 <xTaskIncrementTick+0x15c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d349      	bcc.n	800aef6 <xTaskIncrementTick+0x10a>
 800ae62:	4b36      	ldr	r3, [pc, #216]	@ (800af3c <xTaskIncrementTick+0x150>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d104      	bne.n	800ae76 <xTaskIncrementTick+0x8a>
 800ae6c:	4b36      	ldr	r3, [pc, #216]	@ (800af48 <xTaskIncrementTick+0x15c>)
 800ae6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	e03f      	b.n	800aef6 <xTaskIncrementTick+0x10a>
 800ae76:	4b31      	ldr	r3, [pc, #196]	@ (800af3c <xTaskIncrementTick+0x150>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	60bb      	str	r3, [r7, #8]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	607b      	str	r3, [r7, #4]
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d203      	bcs.n	800ae96 <xTaskIncrementTick+0xaa>
 800ae8e:	4a2e      	ldr	r2, [pc, #184]	@ (800af48 <xTaskIncrementTick+0x15c>)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	e02f      	b.n	800aef6 <xTaskIncrementTick+0x10a>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fe fe5c 	bl	8009b58 <uxListRemove>
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d004      	beq.n	800aeb2 <xTaskIncrementTick+0xc6>
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	3318      	adds	r3, #24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe fe53 	bl	8009b58 <uxListRemove>
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb6:	4b25      	ldr	r3, [pc, #148]	@ (800af4c <xTaskIncrementTick+0x160>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d903      	bls.n	800aec6 <xTaskIncrementTick+0xda>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	4a22      	ldr	r2, [pc, #136]	@ (800af4c <xTaskIncrementTick+0x160>)
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4a1f      	ldr	r2, [pc, #124]	@ (800af50 <xTaskIncrementTick+0x164>)
 800aed4:	441a      	add	r2, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fe fdde 	bl	8009a9e <vListInsertEnd>
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee6:	4b1b      	ldr	r3, [pc, #108]	@ (800af54 <xTaskIncrementTick+0x168>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d3b8      	bcc.n	800ae62 <xTaskIncrementTick+0x76>
 800aef0:	2301      	movs	r3, #1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e7b5      	b.n	800ae62 <xTaskIncrementTick+0x76>
 800aef6:	4b17      	ldr	r3, [pc, #92]	@ (800af54 <xTaskIncrementTick+0x168>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefc:	4914      	ldr	r1, [pc, #80]	@ (800af50 <xTaskIncrementTick+0x164>)
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	440b      	add	r3, r1
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d901      	bls.n	800af12 <xTaskIncrementTick+0x126>
 800af0e:	2301      	movs	r3, #1
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	4b11      	ldr	r3, [pc, #68]	@ (800af58 <xTaskIncrementTick+0x16c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d007      	beq.n	800af2a <xTaskIncrementTick+0x13e>
 800af1a:	2301      	movs	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e004      	b.n	800af2a <xTaskIncrementTick+0x13e>
 800af20:	4b0e      	ldr	r3, [pc, #56]	@ (800af5c <xTaskIncrementTick+0x170>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	4a0d      	ldr	r2, [pc, #52]	@ (800af5c <xTaskIncrementTick+0x170>)
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	200016fc 	.word	0x200016fc
 800af38:	200016d8 	.word	0x200016d8
 800af3c:	2000168c 	.word	0x2000168c
 800af40:	20001690 	.word	0x20001690
 800af44:	200016ec 	.word	0x200016ec
 800af48:	200016f4 	.word	0x200016f4
 800af4c:	200016dc 	.word	0x200016dc
 800af50:	20001204 	.word	0x20001204
 800af54:	20001200 	.word	0x20001200
 800af58:	200016e8 	.word	0x200016e8
 800af5c:	200016e4 	.word	0x200016e4

0800af60 <vTaskSwitchContext>:
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	4b2b      	ldr	r3, [pc, #172]	@ (800b014 <vTaskSwitchContext+0xb4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <vTaskSwitchContext+0x16>
 800af6e:	4b2a      	ldr	r3, [pc, #168]	@ (800b018 <vTaskSwitchContext+0xb8>)
 800af70:	2201      	movs	r2, #1
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	e047      	b.n	800b006 <vTaskSwitchContext+0xa6>
 800af76:	4b28      	ldr	r3, [pc, #160]	@ (800b018 <vTaskSwitchContext+0xb8>)
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	4b27      	ldr	r3, [pc, #156]	@ (800b01c <vTaskSwitchContext+0xbc>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e011      	b.n	800afa8 <vTaskSwitchContext+0x48>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10b      	bne.n	800afa2 <vTaskSwitchContext+0x42>
 800af8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	607b      	str	r3, [r7, #4]
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	e7fd      	b.n	800af9e <vTaskSwitchContext+0x3e>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	491d      	ldr	r1, [pc, #116]	@ (800b020 <vTaskSwitchContext+0xc0>)
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	440b      	add	r3, r1
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0e3      	beq.n	800af84 <vTaskSwitchContext+0x24>
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4a16      	ldr	r2, [pc, #88]	@ (800b020 <vTaskSwitchContext+0xc0>)
 800afc8:	4413      	add	r3, r2
 800afca:	60bb      	str	r3, [r7, #8]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	605a      	str	r2, [r3, #4]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	3308      	adds	r3, #8
 800afde:	429a      	cmp	r2, r3
 800afe0:	d104      	bne.n	800afec <vTaskSwitchContext+0x8c>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	605a      	str	r2, [r3, #4]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	4a0c      	ldr	r2, [pc, #48]	@ (800b024 <vTaskSwitchContext+0xc4>)
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	4a09      	ldr	r2, [pc, #36]	@ (800b01c <vTaskSwitchContext+0xbc>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	4b09      	ldr	r3, [pc, #36]	@ (800b024 <vTaskSwitchContext+0xc4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3354      	adds	r3, #84	@ 0x54
 800b002:	4a09      	ldr	r2, [pc, #36]	@ (800b028 <vTaskSwitchContext+0xc8>)
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	bf00      	nop
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	200016fc 	.word	0x200016fc
 800b018:	200016e8 	.word	0x200016e8
 800b01c:	200016dc 	.word	0x200016dc
 800b020:	20001204 	.word	0x20001204
 800b024:	20001200 	.word	0x20001200
 800b028:	2000023c 	.word	0x2000023c

0800b02c <vTaskPlaceOnEventList>:
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10b      	bne.n	800b054 <vTaskPlaceOnEventList+0x28>
 800b03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	bf00      	nop
 800b050:	bf00      	nop
 800b052:	e7fd      	b.n	800b050 <vTaskPlaceOnEventList+0x24>
 800b054:	4b07      	ldr	r3, [pc, #28]	@ (800b074 <vTaskPlaceOnEventList+0x48>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3318      	adds	r3, #24
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7fe fd42 	bl	8009ae6 <vListInsert>
 800b062:	2101      	movs	r1, #1
 800b064:	6838      	ldr	r0, [r7, #0]
 800b066:	f000 fa87 	bl	800b578 <prvAddCurrentTaskToDelayedList>
 800b06a:	bf00      	nop
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20001200 	.word	0x20001200

0800b078 <vTaskPlaceOnEventListRestricted>:
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10b      	bne.n	800b0a2 <vTaskPlaceOnEventListRestricted+0x2a>
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	e7fd      	b.n	800b09e <vTaskPlaceOnEventListRestricted+0x26>
 800b0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <vTaskPlaceOnEventListRestricted+0x54>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3318      	adds	r3, #24
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7fe fcf7 	bl	8009a9e <vListInsertEnd>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <vTaskPlaceOnEventListRestricted+0x44>
 800b0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ba:	60bb      	str	r3, [r7, #8]
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	68b8      	ldr	r0, [r7, #8]
 800b0c0:	f000 fa5a 	bl	800b578 <prvAddCurrentTaskToDelayedList>
 800b0c4:	bf00      	nop
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20001200 	.word	0x20001200

0800b0d0 <xTaskRemoveFromEventList>:
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10b      	bne.n	800b0fe <xTaskRemoveFromEventList+0x2e>
 800b0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	bf00      	nop
 800b0fa:	bf00      	nop
 800b0fc:	e7fd      	b.n	800b0fa <xTaskRemoveFromEventList+0x2a>
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	3318      	adds	r3, #24
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe fd28 	bl	8009b58 <uxListRemove>
 800b108:	4b1d      	ldr	r3, [pc, #116]	@ (800b180 <xTaskRemoveFromEventList+0xb0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d11d      	bne.n	800b14c <xTaskRemoveFromEventList+0x7c>
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	3304      	adds	r3, #4
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fd1f 	bl	8009b58 <uxListRemove>
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b11e:	4b19      	ldr	r3, [pc, #100]	@ (800b184 <xTaskRemoveFromEventList+0xb4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d903      	bls.n	800b12e <xTaskRemoveFromEventList+0x5e>
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12a:	4a16      	ldr	r2, [pc, #88]	@ (800b184 <xTaskRemoveFromEventList+0xb4>)
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4a13      	ldr	r2, [pc, #76]	@ (800b188 <xTaskRemoveFromEventList+0xb8>)
 800b13c:	441a      	add	r2, r3
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fe fcaa 	bl	8009a9e <vListInsertEnd>
 800b14a:	e005      	b.n	800b158 <xTaskRemoveFromEventList+0x88>
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	3318      	adds	r3, #24
 800b150:	4619      	mov	r1, r3
 800b152:	480e      	ldr	r0, [pc, #56]	@ (800b18c <xTaskRemoveFromEventList+0xbc>)
 800b154:	f7fe fca3 	bl	8009a9e <vListInsertEnd>
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b15c:	4b0c      	ldr	r3, [pc, #48]	@ (800b190 <xTaskRemoveFromEventList+0xc0>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b162:	429a      	cmp	r2, r3
 800b164:	d905      	bls.n	800b172 <xTaskRemoveFromEventList+0xa2>
 800b166:	2301      	movs	r3, #1
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	4b0a      	ldr	r3, [pc, #40]	@ (800b194 <xTaskRemoveFromEventList+0xc4>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	e001      	b.n	800b176 <xTaskRemoveFromEventList+0xa6>
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	200016fc 	.word	0x200016fc
 800b184:	200016dc 	.word	0x200016dc
 800b188:	20001204 	.word	0x20001204
 800b18c:	20001694 	.word	0x20001694
 800b190:	20001200 	.word	0x20001200
 800b194:	200016e8 	.word	0x200016e8

0800b198 <vTaskInternalSetTimeOutState>:
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	4b06      	ldr	r3, [pc, #24]	@ (800b1bc <vTaskInternalSetTimeOutState+0x24>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	4b05      	ldr	r3, [pc, #20]	@ (800b1c0 <vTaskInternalSetTimeOutState+0x28>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	200016ec 	.word	0x200016ec
 800b1c0:	200016d8 	.word	0x200016d8

0800b1c4 <xTaskCheckForTimeOut>:
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b088      	sub	sp, #32
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <xTaskCheckForTimeOut+0x28>
 800b1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	613b      	str	r3, [r7, #16]
 800b1e6:	bf00      	nop
 800b1e8:	bf00      	nop
 800b1ea:	e7fd      	b.n	800b1e8 <xTaskCheckForTimeOut+0x24>
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10b      	bne.n	800b20a <xTaskCheckForTimeOut+0x46>
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	e7fd      	b.n	800b206 <xTaskCheckForTimeOut+0x42>
 800b20a:	f000 fe95 	bl	800bf38 <vPortEnterCritical>
 800b20e:	4b1d      	ldr	r3, [pc, #116]	@ (800b284 <xTaskCheckForTimeOut+0xc0>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	61bb      	str	r3, [r7, #24]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b226:	d102      	bne.n	800b22e <xTaskCheckForTimeOut+0x6a>
 800b228:	2300      	movs	r3, #0
 800b22a:	61fb      	str	r3, [r7, #28]
 800b22c:	e023      	b.n	800b276 <xTaskCheckForTimeOut+0xb2>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b15      	ldr	r3, [pc, #84]	@ (800b288 <xTaskCheckForTimeOut+0xc4>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d007      	beq.n	800b24a <xTaskCheckForTimeOut+0x86>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	d302      	bcc.n	800b24a <xTaskCheckForTimeOut+0x86>
 800b244:	2301      	movs	r3, #1
 800b246:	61fb      	str	r3, [r7, #28]
 800b248:	e015      	b.n	800b276 <xTaskCheckForTimeOut+0xb2>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	429a      	cmp	r2, r3
 800b252:	d20b      	bcs.n	800b26c <xTaskCheckForTimeOut+0xa8>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	1ad2      	subs	r2, r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff ff99 	bl	800b198 <vTaskInternalSetTimeOutState>
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	e004      	b.n	800b276 <xTaskCheckForTimeOut+0xb2>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	2301      	movs	r3, #1
 800b274:	61fb      	str	r3, [r7, #28]
 800b276:	f000 fe91 	bl	800bf9c <vPortExitCritical>
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4618      	mov	r0, r3
 800b27e:	3720      	adds	r7, #32
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	200016d8 	.word	0x200016d8
 800b288:	200016ec 	.word	0x200016ec

0800b28c <vTaskMissedYield>:
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
 800b290:	4b03      	ldr	r3, [pc, #12]	@ (800b2a0 <vTaskMissedYield+0x14>)
 800b292:	2201      	movs	r2, #1
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	bf00      	nop
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	200016e8 	.word	0x200016e8

0800b2a4 <prvIdleTask>:
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	f000 f852 	bl	800b354 <prvCheckTasksWaitingTermination>
 800b2b0:	4b06      	ldr	r3, [pc, #24]	@ (800b2cc <prvIdleTask+0x28>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d9f9      	bls.n	800b2ac <prvIdleTask+0x8>
 800b2b8:	4b05      	ldr	r3, [pc, #20]	@ (800b2d0 <prvIdleTask+0x2c>)
 800b2ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	e7f0      	b.n	800b2ac <prvIdleTask+0x8>
 800b2ca:	bf00      	nop
 800b2cc:	20001204 	.word	0x20001204
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <prvInitialiseTaskLists>:
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	607b      	str	r3, [r7, #4]
 800b2de:	e00c      	b.n	800b2fa <prvInitialiseTaskLists+0x26>
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4a12      	ldr	r2, [pc, #72]	@ (800b334 <prvInitialiseTaskLists+0x60>)
 800b2ec:	4413      	add	r3, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fba8 	bl	8009a44 <vListInitialise>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	607b      	str	r3, [r7, #4]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b37      	cmp	r3, #55	@ 0x37
 800b2fe:	d9ef      	bls.n	800b2e0 <prvInitialiseTaskLists+0xc>
 800b300:	480d      	ldr	r0, [pc, #52]	@ (800b338 <prvInitialiseTaskLists+0x64>)
 800b302:	f7fe fb9f 	bl	8009a44 <vListInitialise>
 800b306:	480d      	ldr	r0, [pc, #52]	@ (800b33c <prvInitialiseTaskLists+0x68>)
 800b308:	f7fe fb9c 	bl	8009a44 <vListInitialise>
 800b30c:	480c      	ldr	r0, [pc, #48]	@ (800b340 <prvInitialiseTaskLists+0x6c>)
 800b30e:	f7fe fb99 	bl	8009a44 <vListInitialise>
 800b312:	480c      	ldr	r0, [pc, #48]	@ (800b344 <prvInitialiseTaskLists+0x70>)
 800b314:	f7fe fb96 	bl	8009a44 <vListInitialise>
 800b318:	480b      	ldr	r0, [pc, #44]	@ (800b348 <prvInitialiseTaskLists+0x74>)
 800b31a:	f7fe fb93 	bl	8009a44 <vListInitialise>
 800b31e:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <prvInitialiseTaskLists+0x78>)
 800b320:	4a05      	ldr	r2, [pc, #20]	@ (800b338 <prvInitialiseTaskLists+0x64>)
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	4b0a      	ldr	r3, [pc, #40]	@ (800b350 <prvInitialiseTaskLists+0x7c>)
 800b326:	4a05      	ldr	r2, [pc, #20]	@ (800b33c <prvInitialiseTaskLists+0x68>)
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20001204 	.word	0x20001204
 800b338:	20001664 	.word	0x20001664
 800b33c:	20001678 	.word	0x20001678
 800b340:	20001694 	.word	0x20001694
 800b344:	200016a8 	.word	0x200016a8
 800b348:	200016c0 	.word	0x200016c0
 800b34c:	2000168c 	.word	0x2000168c
 800b350:	20001690 	.word	0x20001690

0800b354 <prvCheckTasksWaitingTermination>:
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	e019      	b.n	800b390 <prvCheckTasksWaitingTermination+0x3c>
 800b35c:	f000 fdec 	bl	800bf38 <vPortEnterCritical>
 800b360:	4b10      	ldr	r3, [pc, #64]	@ (800b3a4 <prvCheckTasksWaitingTermination+0x50>)
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	607b      	str	r3, [r7, #4]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3304      	adds	r3, #4
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fbf3 	bl	8009b58 <uxListRemove>
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <prvCheckTasksWaitingTermination+0x54>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3b01      	subs	r3, #1
 800b378:	4a0b      	ldr	r2, [pc, #44]	@ (800b3a8 <prvCheckTasksWaitingTermination+0x54>)
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ac <prvCheckTasksWaitingTermination+0x58>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3b01      	subs	r3, #1
 800b382:	4a0a      	ldr	r2, [pc, #40]	@ (800b3ac <prvCheckTasksWaitingTermination+0x58>)
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	f000 fe09 	bl	800bf9c <vPortExitCritical>
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f810 	bl	800b3b0 <prvDeleteTCB>
 800b390:	4b06      	ldr	r3, [pc, #24]	@ (800b3ac <prvCheckTasksWaitingTermination+0x58>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e1      	bne.n	800b35c <prvCheckTasksWaitingTermination+0x8>
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200016a8 	.word	0x200016a8
 800b3a8:	200016d4 	.word	0x200016d4
 800b3ac:	200016bc 	.word	0x200016bc

0800b3b0 <prvDeleteTCB>:
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3354      	adds	r3, #84	@ 0x54
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f001 f8d3 	bl	800c568 <_reclaim_reent>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d108      	bne.n	800b3de <prvDeleteTCB+0x2e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 ffa1 	bl	800c318 <vPortFree>
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 ff9e 	bl	800c318 <vPortFree>
 800b3dc:	e019      	b.n	800b412 <prvDeleteTCB+0x62>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d103      	bne.n	800b3f0 <prvDeleteTCB+0x40>
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 ff95 	bl	800c318 <vPortFree>
 800b3ee:	e010      	b.n	800b412 <prvDeleteTCB+0x62>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d00b      	beq.n	800b412 <prvDeleteTCB+0x62>
 800b3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	bf00      	nop
 800b40e:	bf00      	nop
 800b410:	e7fd      	b.n	800b40e <prvDeleteTCB+0x5e>
 800b412:	bf00      	nop
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <prvResetNextTaskUnblockTime>:
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	4b0c      	ldr	r3, [pc, #48]	@ (800b454 <prvResetNextTaskUnblockTime+0x38>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <prvResetNextTaskUnblockTime+0x1a>
 800b42c:	4b0a      	ldr	r3, [pc, #40]	@ (800b458 <prvResetNextTaskUnblockTime+0x3c>)
 800b42e:	f04f 32ff 	mov.w	r2, #4294967295
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e008      	b.n	800b448 <prvResetNextTaskUnblockTime+0x2c>
 800b436:	4b07      	ldr	r3, [pc, #28]	@ (800b454 <prvResetNextTaskUnblockTime+0x38>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	607b      	str	r3, [r7, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4a04      	ldr	r2, [pc, #16]	@ (800b458 <prvResetNextTaskUnblockTime+0x3c>)
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	2000168c 	.word	0x2000168c
 800b458:	200016f4 	.word	0x200016f4

0800b45c <xTaskGetSchedulerState>:
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	4b0b      	ldr	r3, [pc, #44]	@ (800b490 <xTaskGetSchedulerState+0x34>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d102      	bne.n	800b470 <xTaskGetSchedulerState+0x14>
 800b46a:	2301      	movs	r3, #1
 800b46c:	607b      	str	r3, [r7, #4]
 800b46e:	e008      	b.n	800b482 <xTaskGetSchedulerState+0x26>
 800b470:	4b08      	ldr	r3, [pc, #32]	@ (800b494 <xTaskGetSchedulerState+0x38>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <xTaskGetSchedulerState+0x22>
 800b478:	2302      	movs	r3, #2
 800b47a:	607b      	str	r3, [r7, #4]
 800b47c:	e001      	b.n	800b482 <xTaskGetSchedulerState+0x26>
 800b47e:	2300      	movs	r3, #0
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	200016e0 	.word	0x200016e0
 800b494:	200016fc 	.word	0x200016fc

0800b498 <xTaskPriorityDisinherit>:
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d058      	beq.n	800b560 <xTaskPriorityDisinherit+0xc8>
 800b4ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b56c <xTaskPriorityDisinherit+0xd4>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d00b      	beq.n	800b4d0 <xTaskPriorityDisinherit+0x38>
 800b4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	bf00      	nop
 800b4cc:	bf00      	nop
 800b4ce:	e7fd      	b.n	800b4cc <xTaskPriorityDisinherit+0x34>
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <xTaskPriorityDisinherit+0x58>
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	60bb      	str	r3, [r7, #8]
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <xTaskPriorityDisinherit+0x54>
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4f4:	1e5a      	subs	r2, r3, #1
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	651a      	str	r2, [r3, #80]	@ 0x50
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b502:	429a      	cmp	r2, r3
 800b504:	d02c      	beq.n	800b560 <xTaskPriorityDisinherit+0xc8>
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d128      	bne.n	800b560 <xTaskPriorityDisinherit+0xc8>
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3304      	adds	r3, #4
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe fb20 	bl	8009b58 <uxListRemove>
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b524:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	619a      	str	r2, [r3, #24]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b530:	4b0f      	ldr	r3, [pc, #60]	@ (800b570 <xTaskPriorityDisinherit+0xd8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <xTaskPriorityDisinherit+0xa8>
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53c:	4a0c      	ldr	r2, [pc, #48]	@ (800b570 <xTaskPriorityDisinherit+0xd8>)
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4a09      	ldr	r2, [pc, #36]	@ (800b574 <xTaskPriorityDisinherit+0xdc>)
 800b54e:	441a      	add	r2, r3
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f7fe faa1 	bl	8009a9e <vListInsertEnd>
 800b55c:	2301      	movs	r3, #1
 800b55e:	617b      	str	r3, [r7, #20]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20001200 	.word	0x20001200
 800b570:	200016dc 	.word	0x200016dc
 800b574:	20001204 	.word	0x20001204

0800b578 <prvAddCurrentTaskToDelayedList>:
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	4b21      	ldr	r3, [pc, #132]	@ (800b608 <prvAddCurrentTaskToDelayedList+0x90>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	4b20      	ldr	r3, [pc, #128]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fae2 	bl	8009b58 <uxListRemove>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59a:	d10a      	bne.n	800b5b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d007      	beq.n	800b5b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4819      	ldr	r0, [pc, #100]	@ (800b610 <prvAddCurrentTaskToDelayedList+0x98>)
 800b5ac:	f7fe fa77 	bl	8009a9e <vListInsertEnd>
 800b5b0:	e026      	b.n	800b600 <prvAddCurrentTaskToDelayedList+0x88>
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	60bb      	str	r3, [r7, #8]
 800b5ba:	4b14      	ldr	r3, [pc, #80]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	605a      	str	r2, [r3, #4]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d209      	bcs.n	800b5de <prvAddCurrentTaskToDelayedList+0x66>
 800b5ca:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	f7fe fa85 	bl	8009ae6 <vListInsert>
 800b5dc:	e010      	b.n	800b600 <prvAddCurrentTaskToDelayedList+0x88>
 800b5de:	4b0e      	ldr	r3, [pc, #56]	@ (800b618 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	f7fe fa7b 	bl	8009ae6 <vListInsert>
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d202      	bcs.n	800b600 <prvAddCurrentTaskToDelayedList+0x88>
 800b5fa:	4a08      	ldr	r2, [pc, #32]	@ (800b61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	bf00      	nop
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	200016d8 	.word	0x200016d8
 800b60c:	20001200 	.word	0x20001200
 800b610:	200016c0 	.word	0x200016c0
 800b614:	20001690 	.word	0x20001690
 800b618:	2000168c 	.word	0x2000168c
 800b61c:	200016f4 	.word	0x200016f4

0800b620 <xTimerCreateTimerTask>:
 800b620:	b580      	push	{r7, lr}
 800b622:	b08a      	sub	sp, #40	@ 0x28
 800b624:	af04      	add	r7, sp, #16
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	f000 fb13 	bl	800bc54 <prvCheckForValidListAndQueue>
 800b62e:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a4 <xTimerCreateTimerTask+0x84>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d021      	beq.n	800b67a <xTimerCreateTimerTask+0x5a>
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	2300      	movs	r3, #0
 800b63c:	60bb      	str	r3, [r7, #8]
 800b63e:	1d3a      	adds	r2, r7, #4
 800b640:	f107 0108 	add.w	r1, r7, #8
 800b644:	f107 030c 	add.w	r3, r7, #12
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe f9e1 	bl	8009a10 <vApplicationGetTimerTaskMemory>
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	9202      	str	r2, [sp, #8]
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	2302      	movs	r3, #2
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2300      	movs	r3, #0
 800b65e:	460a      	mov	r2, r1
 800b660:	4911      	ldr	r1, [pc, #68]	@ (800b6a8 <xTimerCreateTimerTask+0x88>)
 800b662:	4812      	ldr	r0, [pc, #72]	@ (800b6ac <xTimerCreateTimerTask+0x8c>)
 800b664:	f7fe ff9c 	bl	800a5a0 <xTaskCreateStatic>
 800b668:	4603      	mov	r3, r0
 800b66a:	4a11      	ldr	r2, [pc, #68]	@ (800b6b0 <xTimerCreateTimerTask+0x90>)
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	4b10      	ldr	r3, [pc, #64]	@ (800b6b0 <xTimerCreateTimerTask+0x90>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <xTimerCreateTimerTask+0x5a>
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10b      	bne.n	800b698 <xTimerCreateTimerTask+0x78>
 800b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	613b      	str	r3, [r7, #16]
 800b692:	bf00      	nop
 800b694:	bf00      	nop
 800b696:	e7fd      	b.n	800b694 <xTimerCreateTimerTask+0x74>
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20001730 	.word	0x20001730
 800b6a8:	0800c7c8 	.word	0x0800c7c8
 800b6ac:	0800b7ed 	.word	0x0800b7ed
 800b6b0:	20001734 	.word	0x20001734

0800b6b4 <xTimerGenericCommand>:
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08a      	sub	sp, #40	@ 0x28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10b      	bne.n	800b6e4 <xTimerGenericCommand+0x30>
 800b6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	623b      	str	r3, [r7, #32]
 800b6de:	bf00      	nop
 800b6e0:	bf00      	nop
 800b6e2:	e7fd      	b.n	800b6e0 <xTimerGenericCommand+0x2c>
 800b6e4:	4b19      	ldr	r3, [pc, #100]	@ (800b74c <xTimerGenericCommand+0x98>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d02a      	beq.n	800b742 <xTimerGenericCommand+0x8e>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	613b      	str	r3, [r7, #16]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	61bb      	str	r3, [r7, #24]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	dc18      	bgt.n	800b730 <xTimerGenericCommand+0x7c>
 800b6fe:	f7ff fead 	bl	800b45c <xTaskGetSchedulerState>
 800b702:	4603      	mov	r3, r0
 800b704:	2b02      	cmp	r3, #2
 800b706:	d109      	bne.n	800b71c <xTimerGenericCommand+0x68>
 800b708:	4b10      	ldr	r3, [pc, #64]	@ (800b74c <xTimerGenericCommand+0x98>)
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	f107 0110 	add.w	r1, r7, #16
 800b710:	2300      	movs	r3, #0
 800b712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b714:	f7fe fb54 	bl	8009dc0 <xQueueGenericSend>
 800b718:	6278      	str	r0, [r7, #36]	@ 0x24
 800b71a:	e012      	b.n	800b742 <xTimerGenericCommand+0x8e>
 800b71c:	4b0b      	ldr	r3, [pc, #44]	@ (800b74c <xTimerGenericCommand+0x98>)
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	f107 0110 	add.w	r1, r7, #16
 800b724:	2300      	movs	r3, #0
 800b726:	2200      	movs	r2, #0
 800b728:	f7fe fb4a 	bl	8009dc0 <xQueueGenericSend>
 800b72c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b72e:	e008      	b.n	800b742 <xTimerGenericCommand+0x8e>
 800b730:	4b06      	ldr	r3, [pc, #24]	@ (800b74c <xTimerGenericCommand+0x98>)
 800b732:	6818      	ldr	r0, [r3, #0]
 800b734:	f107 0110 	add.w	r1, r7, #16
 800b738:	2300      	movs	r3, #0
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	f7fe fc42 	bl	8009fc4 <xQueueGenericSendFromISR>
 800b740:	6278      	str	r0, [r7, #36]	@ 0x24
 800b742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b744:	4618      	mov	r0, r3
 800b746:	3728      	adds	r7, #40	@ 0x28
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20001730 	.word	0x20001730

0800b750 <prvProcessExpiredTimer>:
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af02      	add	r7, sp, #8
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	4b23      	ldr	r3, [pc, #140]	@ (800b7e8 <prvProcessExpiredTimer+0x98>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	3304      	adds	r3, #4
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe f9f5 	bl	8009b58 <uxListRemove>
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b774:	f003 0304 	and.w	r3, r3, #4
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d023      	beq.n	800b7c4 <prvProcessExpiredTimer+0x74>
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	699a      	ldr	r2, [r3, #24]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	18d1      	adds	r1, r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	6978      	ldr	r0, [r7, #20]
 800b78a:	f000 f8d5 	bl	800b938 <prvInsertTimerInActiveList>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d020      	beq.n	800b7d6 <prvProcessExpiredTimer+0x86>
 800b794:	2300      	movs	r3, #0
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2300      	movs	r3, #0
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	2100      	movs	r1, #0
 800b79e:	6978      	ldr	r0, [r7, #20]
 800b7a0:	f7ff ff88 	bl	800b6b4 <xTimerGenericCommand>
 800b7a4:	6138      	str	r0, [r7, #16]
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d114      	bne.n	800b7d6 <prvProcessExpiredTimer+0x86>
 800b7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	e7fd      	b.n	800b7c0 <prvProcessExpiredTimer+0x70>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7ca:	f023 0301 	bic.w	r3, r3, #1
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	6978      	ldr	r0, [r7, #20]
 800b7dc:	4798      	blx	r3
 800b7de:	bf00      	nop
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20001728 	.word	0x20001728

0800b7ec <prvTimerTask>:
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	f107 0308 	add.w	r3, r7, #8
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 f859 	bl	800b8b0 <prvGetNextExpireTime>
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4619      	mov	r1, r3
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 f805 	bl	800b814 <prvProcessTimerOrBlockTask>
 800b80a:	f000 f8d7 	bl	800b9bc <prvProcessReceivedCommands>
 800b80e:	bf00      	nop
 800b810:	e7f0      	b.n	800b7f4 <prvTimerTask+0x8>
	...

0800b814 <prvProcessTimerOrBlockTask>:
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
 800b81e:	f7ff fa17 	bl	800ac50 <vTaskSuspendAll>
 800b822:	f107 0308 	add.w	r3, r7, #8
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f866 	bl	800b8f8 <prvSampleTimeNow>
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d130      	bne.n	800b896 <prvProcessTimerOrBlockTask+0x82>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10a      	bne.n	800b850 <prvProcessTimerOrBlockTask+0x3c>
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d806      	bhi.n	800b850 <prvProcessTimerOrBlockTask+0x3c>
 800b842:	f7ff fa13 	bl	800ac6c <xTaskResumeAll>
 800b846:	68f9      	ldr	r1, [r7, #12]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff ff81 	bl	800b750 <prvProcessExpiredTimer>
 800b84e:	e024      	b.n	800b89a <prvProcessTimerOrBlockTask+0x86>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d008      	beq.n	800b868 <prvProcessTimerOrBlockTask+0x54>
 800b856:	4b13      	ldr	r3, [pc, #76]	@ (800b8a4 <prvProcessTimerOrBlockTask+0x90>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <prvProcessTimerOrBlockTask+0x50>
 800b860:	2301      	movs	r3, #1
 800b862:	e000      	b.n	800b866 <prvProcessTimerOrBlockTask+0x52>
 800b864:	2300      	movs	r3, #0
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a8 <prvProcessTimerOrBlockTask+0x94>)
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	4619      	mov	r1, r3
 800b876:	f7fe fe5f 	bl	800a538 <vQueueWaitForMessageRestricted>
 800b87a:	f7ff f9f7 	bl	800ac6c <xTaskResumeAll>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <prvProcessTimerOrBlockTask+0x86>
 800b884:	4b09      	ldr	r3, [pc, #36]	@ (800b8ac <prvProcessTimerOrBlockTask+0x98>)
 800b886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	e001      	b.n	800b89a <prvProcessTimerOrBlockTask+0x86>
 800b896:	f7ff f9e9 	bl	800ac6c <xTaskResumeAll>
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2000172c 	.word	0x2000172c
 800b8a8:	20001730 	.word	0x20001730
 800b8ac:	e000ed04 	.word	0xe000ed04

0800b8b0 <prvGetNextExpireTime>:
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b8f4 <prvGetNextExpireTime+0x44>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <prvGetNextExpireTime+0x16>
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	e000      	b.n	800b8c8 <prvGetNextExpireTime+0x18>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d105      	bne.n	800b8e0 <prvGetNextExpireTime+0x30>
 800b8d4:	4b07      	ldr	r3, [pc, #28]	@ (800b8f4 <prvGetNextExpireTime+0x44>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	60fb      	str	r3, [r7, #12]
 800b8de:	e001      	b.n	800b8e4 <prvGetNextExpireTime+0x34>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	20001728 	.word	0x20001728

0800b8f8 <prvSampleTimeNow>:
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	f7ff fa52 	bl	800ada8 <xTaskGetTickCount>
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	4b0b      	ldr	r3, [pc, #44]	@ (800b934 <prvSampleTimeNow+0x3c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d205      	bcs.n	800b91c <prvSampleTimeNow+0x24>
 800b910:	f000 f93a 	bl	800bb88 <prvSwitchTimerLists>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	e002      	b.n	800b922 <prvSampleTimeNow+0x2a>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
 800b922:	4a04      	ldr	r2, [pc, #16]	@ (800b934 <prvSampleTimeNow+0x3c>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20001738 	.word	0x20001738

0800b938 <prvInsertTimerInActiveList>:
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	605a      	str	r2, [r3, #4]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	611a      	str	r2, [r3, #16]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d812      	bhi.n	800b984 <prvInsertTimerInActiveList+0x4c>
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	1ad2      	subs	r2, r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d302      	bcc.n	800b972 <prvInsertTimerInActiveList+0x3a>
 800b96c:	2301      	movs	r3, #1
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e01b      	b.n	800b9aa <prvInsertTimerInActiveList+0x72>
 800b972:	4b10      	ldr	r3, [pc, #64]	@ (800b9b4 <prvInsertTimerInActiveList+0x7c>)
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3304      	adds	r3, #4
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f7fe f8b2 	bl	8009ae6 <vListInsert>
 800b982:	e012      	b.n	800b9aa <prvInsertTimerInActiveList+0x72>
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d206      	bcs.n	800b99a <prvInsertTimerInActiveList+0x62>
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d302      	bcc.n	800b99a <prvInsertTimerInActiveList+0x62>
 800b994:	2301      	movs	r3, #1
 800b996:	617b      	str	r3, [r7, #20]
 800b998:	e007      	b.n	800b9aa <prvInsertTimerInActiveList+0x72>
 800b99a:	4b07      	ldr	r3, [pc, #28]	@ (800b9b8 <prvInsertTimerInActiveList+0x80>)
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	f7fe f89e 	bl	8009ae6 <vListInsert>
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	2000172c 	.word	0x2000172c
 800b9b8:	20001728 	.word	0x20001728

0800b9bc <prvProcessReceivedCommands>:
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08e      	sub	sp, #56	@ 0x38
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	e0ce      	b.n	800bb62 <prvProcessReceivedCommands+0x1a6>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	da19      	bge.n	800b9fe <prvProcessReceivedCommands+0x42>
 800b9ca:	1d3b      	adds	r3, r7, #4
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10b      	bne.n	800b9ee <prvProcessReceivedCommands+0x32>
 800b9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	61fb      	str	r3, [r7, #28]
 800b9e8:	bf00      	nop
 800b9ea:	bf00      	nop
 800b9ec:	e7fd      	b.n	800b9ea <prvProcessReceivedCommands+0x2e>
 800b9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9f4:	6850      	ldr	r0, [r2, #4]
 800b9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9f8:	6892      	ldr	r2, [r2, #8]
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	4798      	blx	r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f2c0 80ae 	blt.w	800bb62 <prvProcessReceivedCommands+0x1a6>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d004      	beq.n	800ba1c <prvProcessReceivedCommands+0x60>
 800ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba14:	3304      	adds	r3, #4
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe f89e 	bl	8009b58 <uxListRemove>
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff ff6a 	bl	800b8f8 <prvSampleTimeNow>
 800ba24:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b09      	cmp	r3, #9
 800ba2a:	f200 8097 	bhi.w	800bb5c <prvProcessReceivedCommands+0x1a0>
 800ba2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba34 <prvProcessReceivedCommands+0x78>)
 800ba30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba34:	0800ba5d 	.word	0x0800ba5d
 800ba38:	0800ba5d 	.word	0x0800ba5d
 800ba3c:	0800ba5d 	.word	0x0800ba5d
 800ba40:	0800bad3 	.word	0x0800bad3
 800ba44:	0800bae7 	.word	0x0800bae7
 800ba48:	0800bb33 	.word	0x0800bb33
 800ba4c:	0800ba5d 	.word	0x0800ba5d
 800ba50:	0800ba5d 	.word	0x0800ba5d
 800ba54:	0800bad3 	.word	0x0800bad3
 800ba58:	0800bae7 	.word	0x0800bae7
 800ba5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba62:	f043 0301 	orr.w	r3, r3, #1
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	18d1      	adds	r1, r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba7c:	f7ff ff5c 	bl	800b938 <prvInsertTimerInActiveList>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d06c      	beq.n	800bb60 <prvProcessReceivedCommands+0x1a4>
 800ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba8c:	4798      	blx	r3
 800ba8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d061      	beq.n	800bb60 <prvProcessReceivedCommands+0x1a4>
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	441a      	add	r2, r3
 800baa4:	2300      	movs	r3, #0
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2300      	movs	r3, #0
 800baaa:	2100      	movs	r1, #0
 800baac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800baae:	f7ff fe01 	bl	800b6b4 <xTimerGenericCommand>
 800bab2:	6238      	str	r0, [r7, #32]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d152      	bne.n	800bb60 <prvProcessReceivedCommands+0x1a4>
 800baba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	e7fd      	b.n	800bace <prvProcessReceivedCommands+0x112>
 800bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bad8:	f023 0301 	bic.w	r3, r3, #1
 800badc:	b2da      	uxtb	r2, r3
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bae4:	e03d      	b.n	800bb62 <prvProcessReceivedCommands+0x1a6>
 800bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baec:	f043 0301 	orr.w	r3, r3, #1
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafc:	619a      	str	r2, [r3, #24]
 800bafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10b      	bne.n	800bb1e <prvProcessReceivedCommands+0x162>
 800bb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	617b      	str	r3, [r7, #20]
 800bb18:	bf00      	nop
 800bb1a:	bf00      	nop
 800bb1c:	e7fd      	b.n	800bb1a <prvProcessReceivedCommands+0x15e>
 800bb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb20:	699a      	ldr	r2, [r3, #24]
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	18d1      	adds	r1, r2, r3
 800bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb2c:	f7ff ff04 	bl	800b938 <prvInsertTimerInActiveList>
 800bb30:	e017      	b.n	800bb62 <prvProcessReceivedCommands+0x1a6>
 800bb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d103      	bne.n	800bb48 <prvProcessReceivedCommands+0x18c>
 800bb40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb42:	f000 fbe9 	bl	800c318 <vPortFree>
 800bb46:	e00c      	b.n	800bb62 <prvProcessReceivedCommands+0x1a6>
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb4e:	f023 0301 	bic.w	r3, r3, #1
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bb5a:	e002      	b.n	800bb62 <prvProcessReceivedCommands+0x1a6>
 800bb5c:	bf00      	nop
 800bb5e:	e000      	b.n	800bb62 <prvProcessReceivedCommands+0x1a6>
 800bb60:	bf00      	nop
 800bb62:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <prvProcessReceivedCommands+0x1c8>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	1d39      	adds	r1, r7, #4
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe fac8 	bl	800a100 <xQueueReceive>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f47f af26 	bne.w	800b9c4 <prvProcessReceivedCommands+0x8>
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	3730      	adds	r7, #48	@ 0x30
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20001730 	.word	0x20001730

0800bb88 <prvSwitchTimerLists>:
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	e049      	b.n	800bc24 <prvSwitchTimerLists+0x9c>
 800bb90:	4b2e      	ldr	r3, [pc, #184]	@ (800bc4c <prvSwitchTimerLists+0xc4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	4b2c      	ldr	r3, [pc, #176]	@ (800bc4c <prvSwitchTimerLists+0xc4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fd ffd5 	bl	8009b58 <uxListRemove>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	4798      	blx	r3
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d02f      	beq.n	800bc24 <prvSwitchTimerLists+0x9c>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	4413      	add	r3, r2
 800bbcc:	60bb      	str	r3, [r7, #8]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d90e      	bls.n	800bbf4 <prvSwitchTimerLists+0x6c>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	605a      	str	r2, [r3, #4]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	611a      	str	r2, [r3, #16]
 800bbe2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc4c <prvSwitchTimerLists+0xc4>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7fd ff7a 	bl	8009ae6 <vListInsert>
 800bbf2:	e017      	b.n	800bc24 <prvSwitchTimerLists+0x9c>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff fd58 	bl	800b6b4 <xTimerGenericCommand>
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10b      	bne.n	800bc24 <prvSwitchTimerLists+0x9c>
 800bc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	603b      	str	r3, [r7, #0]
 800bc1e:	bf00      	nop
 800bc20:	bf00      	nop
 800bc22:	e7fd      	b.n	800bc20 <prvSwitchTimerLists+0x98>
 800bc24:	4b09      	ldr	r3, [pc, #36]	@ (800bc4c <prvSwitchTimerLists+0xc4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1b0      	bne.n	800bb90 <prvSwitchTimerLists+0x8>
 800bc2e:	4b07      	ldr	r3, [pc, #28]	@ (800bc4c <prvSwitchTimerLists+0xc4>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	617b      	str	r3, [r7, #20]
 800bc34:	4b06      	ldr	r3, [pc, #24]	@ (800bc50 <prvSwitchTimerLists+0xc8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a04      	ldr	r2, [pc, #16]	@ (800bc4c <prvSwitchTimerLists+0xc4>)
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	4a04      	ldr	r2, [pc, #16]	@ (800bc50 <prvSwitchTimerLists+0xc8>)
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	bf00      	nop
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20001728 	.word	0x20001728
 800bc50:	2000172c 	.word	0x2000172c

0800bc54 <prvCheckForValidListAndQueue>:
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	f000 f96d 	bl	800bf38 <vPortEnterCritical>
 800bc5e:	4b15      	ldr	r3, [pc, #84]	@ (800bcb4 <prvCheckForValidListAndQueue+0x60>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d120      	bne.n	800bca8 <prvCheckForValidListAndQueue+0x54>
 800bc66:	4814      	ldr	r0, [pc, #80]	@ (800bcb8 <prvCheckForValidListAndQueue+0x64>)
 800bc68:	f7fd feec 	bl	8009a44 <vListInitialise>
 800bc6c:	4813      	ldr	r0, [pc, #76]	@ (800bcbc <prvCheckForValidListAndQueue+0x68>)
 800bc6e:	f7fd fee9 	bl	8009a44 <vListInitialise>
 800bc72:	4b13      	ldr	r3, [pc, #76]	@ (800bcc0 <prvCheckForValidListAndQueue+0x6c>)
 800bc74:	4a10      	ldr	r2, [pc, #64]	@ (800bcb8 <prvCheckForValidListAndQueue+0x64>)
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	4b12      	ldr	r3, [pc, #72]	@ (800bcc4 <prvCheckForValidListAndQueue+0x70>)
 800bc7a:	4a10      	ldr	r2, [pc, #64]	@ (800bcbc <prvCheckForValidListAndQueue+0x68>)
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	4b11      	ldr	r3, [pc, #68]	@ (800bcc8 <prvCheckForValidListAndQueue+0x74>)
 800bc84:	4a11      	ldr	r2, [pc, #68]	@ (800bccc <prvCheckForValidListAndQueue+0x78>)
 800bc86:	2110      	movs	r1, #16
 800bc88:	200a      	movs	r0, #10
 800bc8a:	f7fd fff9 	bl	8009c80 <xQueueGenericCreateStatic>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4a08      	ldr	r2, [pc, #32]	@ (800bcb4 <prvCheckForValidListAndQueue+0x60>)
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	4b07      	ldr	r3, [pc, #28]	@ (800bcb4 <prvCheckForValidListAndQueue+0x60>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d005      	beq.n	800bca8 <prvCheckForValidListAndQueue+0x54>
 800bc9c:	4b05      	ldr	r3, [pc, #20]	@ (800bcb4 <prvCheckForValidListAndQueue+0x60>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	490b      	ldr	r1, [pc, #44]	@ (800bcd0 <prvCheckForValidListAndQueue+0x7c>)
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe fc1e 	bl	800a4e4 <vQueueAddToRegistry>
 800bca8:	f000 f978 	bl	800bf9c <vPortExitCritical>
 800bcac:	bf00      	nop
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20001730 	.word	0x20001730
 800bcb8:	20001700 	.word	0x20001700
 800bcbc:	20001714 	.word	0x20001714
 800bcc0:	20001728 	.word	0x20001728
 800bcc4:	2000172c 	.word	0x2000172c
 800bcc8:	200017dc 	.word	0x200017dc
 800bccc:	2000173c 	.word	0x2000173c
 800bcd0:	0800c7d0 	.word	0x0800c7d0

0800bcd4 <pxPortInitialiseStack>:
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3b04      	subs	r3, #4
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f023 0201 	bic.w	r2, r3, #1
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3b04      	subs	r3, #4
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	4a0c      	ldr	r2, [pc, #48]	@ (800bd38 <pxPortInitialiseStack+0x64>)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3b14      	subs	r3, #20
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3b04      	subs	r3, #4
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f06f 0202 	mvn.w	r2, #2
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3b20      	subs	r3, #32
 800bd28:	60fb      	str	r3, [r7, #12]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	0800bd3d 	.word	0x0800bd3d

0800bd3c <prvTaskExitError>:
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	4b13      	ldr	r3, [pc, #76]	@ (800bd94 <prvTaskExitError+0x58>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4e:	d00b      	beq.n	800bd68 <prvTaskExitError+0x2c>
 800bd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	60fb      	str	r3, [r7, #12]
 800bd62:	bf00      	nop
 800bd64:	bf00      	nop
 800bd66:	e7fd      	b.n	800bd64 <prvTaskExitError+0x28>
 800bd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	60bb      	str	r3, [r7, #8]
 800bd7a:	bf00      	nop
 800bd7c:	bf00      	nop
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0fc      	beq.n	800bd7e <prvTaskExitError+0x42>
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	20000238 	.word	0x20000238
	...

0800bda0 <SVC_Handler>:
 800bda0:	4b07      	ldr	r3, [pc, #28]	@ (800bdc0 <pxCurrentTCBConst2>)
 800bda2:	6819      	ldr	r1, [r3, #0]
 800bda4:	6808      	ldr	r0, [r1, #0]
 800bda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdaa:	f380 8809 	msr	PSP, r0
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f04f 0000 	mov.w	r0, #0
 800bdb6:	f380 8811 	msr	BASEPRI, r0
 800bdba:	4770      	bx	lr
 800bdbc:	f3af 8000 	nop.w

0800bdc0 <pxCurrentTCBConst2>:
 800bdc0:	20001200 	.word	0x20001200
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop

0800bdc8 <prvPortStartFirstTask>:
 800bdc8:	4808      	ldr	r0, [pc, #32]	@ (800bdec <prvPortStartFirstTask+0x24>)
 800bdca:	6800      	ldr	r0, [r0, #0]
 800bdcc:	6800      	ldr	r0, [r0, #0]
 800bdce:	f380 8808 	msr	MSP, r0
 800bdd2:	f04f 0000 	mov.w	r0, #0
 800bdd6:	f380 8814 	msr	CONTROL, r0
 800bdda:	b662      	cpsie	i
 800bddc:	b661      	cpsie	f
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	df00      	svc	0
 800bde8:	bf00      	nop
 800bdea:	bf00      	nop
 800bdec:	e000ed08 	.word	0xe000ed08

0800bdf0 <xPortStartScheduler>:
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4b47      	ldr	r3, [pc, #284]	@ (800bf14 <xPortStartScheduler+0x124>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a47      	ldr	r2, [pc, #284]	@ (800bf18 <xPortStartScheduler+0x128>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d10b      	bne.n	800be18 <xPortStartScheduler+0x28>
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	60fb      	str	r3, [r7, #12]
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <xPortStartScheduler+0x24>
 800be18:	4b3e      	ldr	r3, [pc, #248]	@ (800bf14 <xPortStartScheduler+0x124>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a3f      	ldr	r2, [pc, #252]	@ (800bf1c <xPortStartScheduler+0x12c>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d10b      	bne.n	800be3a <xPortStartScheduler+0x4a>
 800be22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be26:	f383 8811 	msr	BASEPRI, r3
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	e7fd      	b.n	800be36 <xPortStartScheduler+0x46>
 800be3a:	4b39      	ldr	r3, [pc, #228]	@ (800bf20 <xPortStartScheduler+0x130>)
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	607b      	str	r3, [r7, #4]
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	22ff      	movs	r2, #255	@ 0xff
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	70fb      	strb	r3, [r7, #3]
 800be54:	78fb      	ldrb	r3, [r7, #3]
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	4b31      	ldr	r3, [pc, #196]	@ (800bf24 <xPortStartScheduler+0x134>)
 800be60:	701a      	strb	r2, [r3, #0]
 800be62:	4b31      	ldr	r3, [pc, #196]	@ (800bf28 <xPortStartScheduler+0x138>)
 800be64:	2207      	movs	r2, #7
 800be66:	601a      	str	r2, [r3, #0]
 800be68:	e009      	b.n	800be7e <xPortStartScheduler+0x8e>
 800be6a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf28 <xPortStartScheduler+0x138>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3b01      	subs	r3, #1
 800be70:	4a2d      	ldr	r2, [pc, #180]	@ (800bf28 <xPortStartScheduler+0x138>)
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	70fb      	strb	r3, [r7, #3]
 800be7e:	78fb      	ldrb	r3, [r7, #3]
 800be80:	b2db      	uxtb	r3, r3
 800be82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be86:	2b80      	cmp	r3, #128	@ 0x80
 800be88:	d0ef      	beq.n	800be6a <xPortStartScheduler+0x7a>
 800be8a:	4b27      	ldr	r3, [pc, #156]	@ (800bf28 <xPortStartScheduler+0x138>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f1c3 0307 	rsb	r3, r3, #7
 800be92:	2b04      	cmp	r3, #4
 800be94:	d00b      	beq.n	800beae <xPortStartScheduler+0xbe>
 800be96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	60bb      	str	r3, [r7, #8]
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	e7fd      	b.n	800beaa <xPortStartScheduler+0xba>
 800beae:	4b1e      	ldr	r3, [pc, #120]	@ (800bf28 <xPortStartScheduler+0x138>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	4a1c      	ldr	r2, [pc, #112]	@ (800bf28 <xPortStartScheduler+0x138>)
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	4b1b      	ldr	r3, [pc, #108]	@ (800bf28 <xPortStartScheduler+0x138>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bec0:	4a19      	ldr	r2, [pc, #100]	@ (800bf28 <xPortStartScheduler+0x138>)
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	4b17      	ldr	r3, [pc, #92]	@ (800bf2c <xPortStartScheduler+0x13c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a16      	ldr	r2, [pc, #88]	@ (800bf2c <xPortStartScheduler+0x13c>)
 800bed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	4b14      	ldr	r3, [pc, #80]	@ (800bf2c <xPortStartScheduler+0x13c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a13      	ldr	r2, [pc, #76]	@ (800bf2c <xPortStartScheduler+0x13c>)
 800bede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	f000 f8da 	bl	800c09c <vPortSetupTimerInterrupt>
 800bee8:	4b11      	ldr	r3, [pc, #68]	@ (800bf30 <xPortStartScheduler+0x140>)
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	f000 f8f9 	bl	800c0e4 <vPortEnableVFP>
 800bef2:	4b10      	ldr	r3, [pc, #64]	@ (800bf34 <xPortStartScheduler+0x144>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a0f      	ldr	r2, [pc, #60]	@ (800bf34 <xPortStartScheduler+0x144>)
 800bef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	f7ff ff63 	bl	800bdc8 <prvPortStartFirstTask>
 800bf02:	f7ff f82d 	bl	800af60 <vTaskSwitchContext>
 800bf06:	f7ff ff19 	bl	800bd3c <prvTaskExitError>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	e000ed00 	.word	0xe000ed00
 800bf18:	410fc271 	.word	0x410fc271
 800bf1c:	410fc270 	.word	0x410fc270
 800bf20:	e000e400 	.word	0xe000e400
 800bf24:	2000182c 	.word	0x2000182c
 800bf28:	20001830 	.word	0x20001830
 800bf2c:	e000ed20 	.word	0xe000ed20
 800bf30:	20000238 	.word	0x20000238
 800bf34:	e000ef34 	.word	0xe000ef34

0800bf38 <vPortEnterCritical>:
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
 800bf50:	bf00      	nop
 800bf52:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <vPortEnterCritical+0x5c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3301      	adds	r3, #1
 800bf58:	4a0e      	ldr	r2, [pc, #56]	@ (800bf94 <vPortEnterCritical+0x5c>)
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bf94 <vPortEnterCritical+0x5c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d110      	bne.n	800bf86 <vPortEnterCritical+0x4e>
 800bf64:	4b0c      	ldr	r3, [pc, #48]	@ (800bf98 <vPortEnterCritical+0x60>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00b      	beq.n	800bf86 <vPortEnterCritical+0x4e>
 800bf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	603b      	str	r3, [r7, #0]
 800bf80:	bf00      	nop
 800bf82:	bf00      	nop
 800bf84:	e7fd      	b.n	800bf82 <vPortEnterCritical+0x4a>
 800bf86:	bf00      	nop
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20000238 	.word	0x20000238
 800bf98:	e000ed04 	.word	0xe000ed04

0800bf9c <vPortExitCritical>:
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4b12      	ldr	r3, [pc, #72]	@ (800bfec <vPortExitCritical+0x50>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10b      	bne.n	800bfc2 <vPortExitCritical+0x26>
 800bfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	607b      	str	r3, [r7, #4]
 800bfbc:	bf00      	nop
 800bfbe:	bf00      	nop
 800bfc0:	e7fd      	b.n	800bfbe <vPortExitCritical+0x22>
 800bfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <vPortExitCritical+0x50>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	4a08      	ldr	r2, [pc, #32]	@ (800bfec <vPortExitCritical+0x50>)
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	4b07      	ldr	r3, [pc, #28]	@ (800bfec <vPortExitCritical+0x50>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d105      	bne.n	800bfe0 <vPortExitCritical+0x44>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	20000238 	.word	0x20000238

0800bff0 <PendSV_Handler>:
 800bff0:	f3ef 8009 	mrs	r0, PSP
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	4b15      	ldr	r3, [pc, #84]	@ (800c050 <pxCurrentTCBConst>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	f01e 0f10 	tst.w	lr, #16
 800c000:	bf08      	it	eq
 800c002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00a:	6010      	str	r0, [r2, #0]
 800c00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c014:	f380 8811 	msr	BASEPRI, r0
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f7fe ff9e 	bl	800af60 <vTaskSwitchContext>
 800c024:	f04f 0000 	mov.w	r0, #0
 800c028:	f380 8811 	msr	BASEPRI, r0
 800c02c:	bc09      	pop	{r0, r3}
 800c02e:	6819      	ldr	r1, [r3, #0]
 800c030:	6808      	ldr	r0, [r1, #0]
 800c032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c036:	f01e 0f10 	tst.w	lr, #16
 800c03a:	bf08      	it	eq
 800c03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c040:	f380 8809 	msr	PSP, r0
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	f3af 8000 	nop.w

0800c050 <pxCurrentTCBConst>:
 800c050:	20001200 	.word	0x20001200
 800c054:	bf00      	nop
 800c056:	bf00      	nop

0800c058 <xPortSysTickHandler>:
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	607b      	str	r3, [r7, #4]
 800c070:	bf00      	nop
 800c072:	f7fe febb 	bl	800adec <xTaskIncrementTick>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <xPortSysTickHandler+0x2c>
 800c07c:	4b06      	ldr	r3, [pc, #24]	@ (800c098 <xPortSysTickHandler+0x40>)
 800c07e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	2300      	movs	r3, #0
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <vPortSetupTimerInterrupt>:
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d0 <vPortSetupTimerInterrupt+0x34>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d4 <vPortSetupTimerInterrupt+0x38>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]
 800c0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d8 <vPortSetupTimerInterrupt+0x3c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c0dc <vPortSetupTimerInterrupt+0x40>)
 800c0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b6:	099b      	lsrs	r3, r3, #6
 800c0b8:	4a09      	ldr	r2, [pc, #36]	@ (800c0e0 <vPortSetupTimerInterrupt+0x44>)
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	4b04      	ldr	r3, [pc, #16]	@ (800c0d0 <vPortSetupTimerInterrupt+0x34>)
 800c0c0:	2207      	movs	r2, #7
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	bf00      	nop
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	e000e010 	.word	0xe000e010
 800c0d4:	e000e018 	.word	0xe000e018
 800c0d8:	20000000 	.word	0x20000000
 800c0dc:	10624dd3 	.word	0x10624dd3
 800c0e0:	e000e014 	.word	0xe000e014

0800c0e4 <vPortEnableVFP>:
 800c0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c0f4 <vPortEnableVFP+0x10>
 800c0e8:	6801      	ldr	r1, [r0, #0]
 800c0ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c0ee:	6001      	str	r1, [r0, #0]
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	e000ed88 	.word	0xe000ed88

0800c0f8 <vPortValidateInterruptPriority>:
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	f3ef 8305 	mrs	r3, IPSR
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b0f      	cmp	r3, #15
 800c108:	d915      	bls.n	800c136 <vPortValidateInterruptPriority+0x3e>
 800c10a:	4a18      	ldr	r2, [pc, #96]	@ (800c16c <vPortValidateInterruptPriority+0x74>)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	4413      	add	r3, r2
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	72fb      	strb	r3, [r7, #11]
 800c114:	4b16      	ldr	r3, [pc, #88]	@ (800c170 <vPortValidateInterruptPriority+0x78>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	7afa      	ldrb	r2, [r7, #11]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d20b      	bcs.n	800c136 <vPortValidateInterruptPriority+0x3e>
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	607b      	str	r3, [r7, #4]
 800c130:	bf00      	nop
 800c132:	bf00      	nop
 800c134:	e7fd      	b.n	800c132 <vPortValidateInterruptPriority+0x3a>
 800c136:	4b0f      	ldr	r3, [pc, #60]	@ (800c174 <vPortValidateInterruptPriority+0x7c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c13e:	4b0e      	ldr	r3, [pc, #56]	@ (800c178 <vPortValidateInterruptPriority+0x80>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d90b      	bls.n	800c15e <vPortValidateInterruptPriority+0x66>
 800c146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	e7fd      	b.n	800c15a <vPortValidateInterruptPriority+0x62>
 800c15e:	bf00      	nop
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	e000e3f0 	.word	0xe000e3f0
 800c170:	2000182c 	.word	0x2000182c
 800c174:	e000ed0c 	.word	0xe000ed0c
 800c178:	20001830 	.word	0x20001830

0800c17c <pvPortMalloc>:
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	@ 0x28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	2300      	movs	r3, #0
 800c186:	61fb      	str	r3, [r7, #28]
 800c188:	f7fe fd62 	bl	800ac50 <vTaskSuspendAll>
 800c18c:	4b5c      	ldr	r3, [pc, #368]	@ (800c300 <pvPortMalloc+0x184>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <pvPortMalloc+0x1c>
 800c194:	f000 f924 	bl	800c3e0 <prvHeapInit>
 800c198:	4b5a      	ldr	r3, [pc, #360]	@ (800c304 <pvPortMalloc+0x188>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4013      	ands	r3, r2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 8095 	bne.w	800c2d0 <pvPortMalloc+0x154>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d01e      	beq.n	800c1ea <pvPortMalloc+0x6e>
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d015      	beq.n	800c1ea <pvPortMalloc+0x6e>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f023 0307 	bic.w	r3, r3, #7
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	607b      	str	r3, [r7, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f003 0307 	and.w	r3, r3, #7
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00b      	beq.n	800c1ea <pvPortMalloc+0x6e>
 800c1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	e7fd      	b.n	800c1e6 <pvPortMalloc+0x6a>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d06f      	beq.n	800c2d0 <pvPortMalloc+0x154>
 800c1f0:	4b45      	ldr	r3, [pc, #276]	@ (800c308 <pvPortMalloc+0x18c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d86a      	bhi.n	800c2d0 <pvPortMalloc+0x154>
 800c1fa:	4b44      	ldr	r3, [pc, #272]	@ (800c30c <pvPortMalloc+0x190>)
 800c1fc:	623b      	str	r3, [r7, #32]
 800c1fe:	4b43      	ldr	r3, [pc, #268]	@ (800c30c <pvPortMalloc+0x190>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	627b      	str	r3, [r7, #36]	@ 0x24
 800c204:	e004      	b.n	800c210 <pvPortMalloc+0x94>
 800c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c208:	623b      	str	r3, [r7, #32]
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	429a      	cmp	r2, r3
 800c218:	d903      	bls.n	800c222 <pvPortMalloc+0xa6>
 800c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1f1      	bne.n	800c206 <pvPortMalloc+0x8a>
 800c222:	4b37      	ldr	r3, [pc, #220]	@ (800c300 <pvPortMalloc+0x184>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c228:	429a      	cmp	r2, r3
 800c22a:	d051      	beq.n	800c2d0 <pvPortMalloc+0x154>
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2208      	movs	r2, #8
 800c232:	4413      	add	r3, r2
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	1ad2      	subs	r2, r2, r3
 800c246:	2308      	movs	r3, #8
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d920      	bls.n	800c290 <pvPortMalloc+0x114>
 800c24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4413      	add	r3, r2
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	f003 0307 	and.w	r3, r3, #7
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00b      	beq.n	800c278 <pvPortMalloc+0xfc>
 800c260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	613b      	str	r3, [r7, #16]
 800c272:	bf00      	nop
 800c274:	bf00      	nop
 800c276:	e7fd      	b.n	800c274 <pvPortMalloc+0xf8>
 800c278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	605a      	str	r2, [r3, #4]
 800c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	605a      	str	r2, [r3, #4]
 800c28a:	69b8      	ldr	r0, [r7, #24]
 800c28c:	f000 f90a 	bl	800c4a4 <prvInsertBlockIntoFreeList>
 800c290:	4b1d      	ldr	r3, [pc, #116]	@ (800c308 <pvPortMalloc+0x18c>)
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	4a1b      	ldr	r2, [pc, #108]	@ (800c308 <pvPortMalloc+0x18c>)
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	4b1a      	ldr	r3, [pc, #104]	@ (800c308 <pvPortMalloc+0x18c>)
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c310 <pvPortMalloc+0x194>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d203      	bcs.n	800c2b2 <pvPortMalloc+0x136>
 800c2aa:	4b17      	ldr	r3, [pc, #92]	@ (800c308 <pvPortMalloc+0x18c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a18      	ldr	r2, [pc, #96]	@ (800c310 <pvPortMalloc+0x194>)
 800c2b0:	6013      	str	r3, [r2, #0]
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	4b13      	ldr	r3, [pc, #76]	@ (800c304 <pvPortMalloc+0x188>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2be:	605a      	str	r2, [r3, #4]
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	4b13      	ldr	r3, [pc, #76]	@ (800c314 <pvPortMalloc+0x198>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	4a11      	ldr	r2, [pc, #68]	@ (800c314 <pvPortMalloc+0x198>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	f7fe fccc 	bl	800ac6c <xTaskResumeAll>
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00b      	beq.n	800c2f6 <pvPortMalloc+0x17a>
 800c2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	bf00      	nop
 800c2f2:	bf00      	nop
 800c2f4:	e7fd      	b.n	800c2f2 <pvPortMalloc+0x176>
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3728      	adds	r7, #40	@ 0x28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	2000243c 	.word	0x2000243c
 800c304:	20002450 	.word	0x20002450
 800c308:	20002440 	.word	0x20002440
 800c30c:	20002434 	.word	0x20002434
 800c310:	20002444 	.word	0x20002444
 800c314:	20002448 	.word	0x20002448

0800c318 <vPortFree>:
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	617b      	str	r3, [r7, #20]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d04f      	beq.n	800c3ca <vPortFree+0xb2>
 800c32a:	2308      	movs	r3, #8
 800c32c:	425b      	negs	r3, r3
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	4413      	add	r3, r2
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	685a      	ldr	r2, [r3, #4]
 800c33c:	4b25      	ldr	r3, [pc, #148]	@ (800c3d4 <vPortFree+0xbc>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4013      	ands	r3, r2
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10b      	bne.n	800c35e <vPortFree+0x46>
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <vPortFree+0x42>
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00b      	beq.n	800c37e <vPortFree+0x66>
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60bb      	str	r3, [r7, #8]
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <vPortFree+0x62>
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	4b14      	ldr	r3, [pc, #80]	@ (800c3d4 <vPortFree+0xbc>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4013      	ands	r3, r2
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01e      	beq.n	800c3ca <vPortFree+0xb2>
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d11a      	bne.n	800c3ca <vPortFree+0xb2>
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d4 <vPortFree+0xbc>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	43db      	mvns	r3, r3
 800c39e:	401a      	ands	r2, r3
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	605a      	str	r2, [r3, #4]
 800c3a4:	f7fe fc54 	bl	800ac50 <vTaskSuspendAll>
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d8 <vPortFree+0xc0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	4a09      	ldr	r2, [pc, #36]	@ (800c3d8 <vPortFree+0xc0>)
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	6938      	ldr	r0, [r7, #16]
 800c3b8:	f000 f874 	bl	800c4a4 <prvInsertBlockIntoFreeList>
 800c3bc:	4b07      	ldr	r3, [pc, #28]	@ (800c3dc <vPortFree+0xc4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	4a06      	ldr	r2, [pc, #24]	@ (800c3dc <vPortFree+0xc4>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	f7fe fc51 	bl	800ac6c <xTaskResumeAll>
 800c3ca:	bf00      	nop
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20002450 	.word	0x20002450
 800c3d8:	20002440 	.word	0x20002440
 800c3dc:	2000244c 	.word	0x2000244c

0800c3e0 <prvHeapInit>:
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c3ea:	60bb      	str	r3, [r7, #8]
 800c3ec:	4b27      	ldr	r3, [pc, #156]	@ (800c48c <prvHeapInit+0xac>)
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00c      	beq.n	800c414 <prvHeapInit+0x34>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3307      	adds	r3, #7
 800c3fe:	60fb      	str	r3, [r7, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f023 0307 	bic.w	r3, r3, #7
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	4a1f      	ldr	r2, [pc, #124]	@ (800c48c <prvHeapInit+0xac>)
 800c410:	4413      	add	r3, r2
 800c412:	60bb      	str	r3, [r7, #8]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	607b      	str	r3, [r7, #4]
 800c418:	4a1d      	ldr	r2, [pc, #116]	@ (800c490 <prvHeapInit+0xb0>)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	4b1c      	ldr	r3, [pc, #112]	@ (800c490 <prvHeapInit+0xb0>)
 800c420:	2200      	movs	r2, #0
 800c422:	605a      	str	r2, [r3, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	4413      	add	r3, r2
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	2208      	movs	r2, #8
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	1a9b      	subs	r3, r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f023 0307 	bic.w	r3, r3, #7
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4a15      	ldr	r2, [pc, #84]	@ (800c494 <prvHeapInit+0xb4>)
 800c440:	6013      	str	r3, [r2, #0]
 800c442:	4b14      	ldr	r3, [pc, #80]	@ (800c494 <prvHeapInit+0xb4>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2200      	movs	r2, #0
 800c448:	605a      	str	r2, [r3, #4]
 800c44a:	4b12      	ldr	r3, [pc, #72]	@ (800c494 <prvHeapInit+0xb4>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2200      	movs	r2, #0
 800c450:	601a      	str	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	603b      	str	r3, [r7, #0]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	1ad2      	subs	r2, r2, r3
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	605a      	str	r2, [r3, #4]
 800c460:	4b0c      	ldr	r3, [pc, #48]	@ (800c494 <prvHeapInit+0xb4>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	601a      	str	r2, [r3, #0]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4a0a      	ldr	r2, [pc, #40]	@ (800c498 <prvHeapInit+0xb8>)
 800c46e:	6013      	str	r3, [r2, #0]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	4a09      	ldr	r2, [pc, #36]	@ (800c49c <prvHeapInit+0xbc>)
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	4b09      	ldr	r3, [pc, #36]	@ (800c4a0 <prvHeapInit+0xc0>)
 800c47a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	bf00      	nop
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	20001834 	.word	0x20001834
 800c490:	20002434 	.word	0x20002434
 800c494:	2000243c 	.word	0x2000243c
 800c498:	20002444 	.word	0x20002444
 800c49c:	20002440 	.word	0x20002440
 800c4a0:	20002450 	.word	0x20002450

0800c4a4 <prvInsertBlockIntoFreeList>:
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	4b28      	ldr	r3, [pc, #160]	@ (800c550 <prvInsertBlockIntoFreeList+0xac>)
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e002      	b.n	800c4b8 <prvInsertBlockIntoFreeList+0x14>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d8f7      	bhi.n	800c4b2 <prvInsertBlockIntoFreeList+0xe>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	60bb      	str	r3, [r7, #8]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d108      	bne.n	800c4e6 <prvInsertBlockIntoFreeList+0x42>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	441a      	add	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	605a      	str	r2, [r3, #4]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	607b      	str	r3, [r7, #4]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	60bb      	str	r3, [r7, #8]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	441a      	add	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d118      	bne.n	800c52c <prvInsertBlockIntoFreeList+0x88>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	4b15      	ldr	r3, [pc, #84]	@ (800c554 <prvInsertBlockIntoFreeList+0xb0>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d00d      	beq.n	800c522 <prvInsertBlockIntoFreeList+0x7e>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	441a      	add	r2, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	605a      	str	r2, [r3, #4]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	e008      	b.n	800c534 <prvInsertBlockIntoFreeList+0x90>
 800c522:	4b0c      	ldr	r3, [pc, #48]	@ (800c554 <prvInsertBlockIntoFreeList+0xb0>)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	e003      	b.n	800c534 <prvInsertBlockIntoFreeList+0x90>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	601a      	str	r2, [r3, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d002      	beq.n	800c542 <prvInsertBlockIntoFreeList+0x9e>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	601a      	str	r2, [r3, #0]
 800c542:	bf00      	nop
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	20002434 	.word	0x20002434
 800c554:	2000243c 	.word	0x2000243c

0800c558 <memset>:
 800c558:	4402      	add	r2, r0
 800c55a:	4603      	mov	r3, r0
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d100      	bne.n	800c562 <memset+0xa>
 800c560:	4770      	bx	lr
 800c562:	f803 1b01 	strb.w	r1, [r3], #1
 800c566:	e7f9      	b.n	800c55c <memset+0x4>

0800c568 <_reclaim_reent>:
 800c568:	4b2d      	ldr	r3, [pc, #180]	@ (800c620 <_reclaim_reent+0xb8>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4283      	cmp	r3, r0
 800c56e:	b570      	push	{r4, r5, r6, lr}
 800c570:	4604      	mov	r4, r0
 800c572:	d053      	beq.n	800c61c <_reclaim_reent+0xb4>
 800c574:	69c3      	ldr	r3, [r0, #28]
 800c576:	b31b      	cbz	r3, 800c5c0 <_reclaim_reent+0x58>
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	b163      	cbz	r3, 800c596 <_reclaim_reent+0x2e>
 800c57c:	2500      	movs	r5, #0
 800c57e:	69e3      	ldr	r3, [r4, #28]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	5959      	ldr	r1, [r3, r5]
 800c584:	b9b1      	cbnz	r1, 800c5b4 <_reclaim_reent+0x4c>
 800c586:	3504      	adds	r5, #4
 800c588:	2d80      	cmp	r5, #128	@ 0x80
 800c58a:	d1f8      	bne.n	800c57e <_reclaim_reent+0x16>
 800c58c:	69e3      	ldr	r3, [r4, #28]
 800c58e:	4620      	mov	r0, r4
 800c590:	68d9      	ldr	r1, [r3, #12]
 800c592:	f000 f881 	bl	800c698 <_free_r>
 800c596:	69e3      	ldr	r3, [r4, #28]
 800c598:	6819      	ldr	r1, [r3, #0]
 800c59a:	b111      	cbz	r1, 800c5a2 <_reclaim_reent+0x3a>
 800c59c:	4620      	mov	r0, r4
 800c59e:	f000 f87b 	bl	800c698 <_free_r>
 800c5a2:	69e3      	ldr	r3, [r4, #28]
 800c5a4:	689d      	ldr	r5, [r3, #8]
 800c5a6:	b15d      	cbz	r5, 800c5c0 <_reclaim_reent+0x58>
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	682d      	ldr	r5, [r5, #0]
 800c5ae:	f000 f873 	bl	800c698 <_free_r>
 800c5b2:	e7f8      	b.n	800c5a6 <_reclaim_reent+0x3e>
 800c5b4:	680e      	ldr	r6, [r1, #0]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 f86e 	bl	800c698 <_free_r>
 800c5bc:	4631      	mov	r1, r6
 800c5be:	e7e1      	b.n	800c584 <_reclaim_reent+0x1c>
 800c5c0:	6961      	ldr	r1, [r4, #20]
 800c5c2:	b111      	cbz	r1, 800c5ca <_reclaim_reent+0x62>
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f000 f867 	bl	800c698 <_free_r>
 800c5ca:	69e1      	ldr	r1, [r4, #28]
 800c5cc:	b111      	cbz	r1, 800c5d4 <_reclaim_reent+0x6c>
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 f862 	bl	800c698 <_free_r>
 800c5d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c5d6:	b111      	cbz	r1, 800c5de <_reclaim_reent+0x76>
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 f85d 	bl	800c698 <_free_r>
 800c5de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5e0:	b111      	cbz	r1, 800c5e8 <_reclaim_reent+0x80>
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f858 	bl	800c698 <_free_r>
 800c5e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c5ea:	b111      	cbz	r1, 800c5f2 <_reclaim_reent+0x8a>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 f853 	bl	800c698 <_free_r>
 800c5f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c5f4:	b111      	cbz	r1, 800c5fc <_reclaim_reent+0x94>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 f84e 	bl	800c698 <_free_r>
 800c5fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c5fe:	b111      	cbz	r1, 800c606 <_reclaim_reent+0x9e>
 800c600:	4620      	mov	r0, r4
 800c602:	f000 f849 	bl	800c698 <_free_r>
 800c606:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c608:	b111      	cbz	r1, 800c610 <_reclaim_reent+0xa8>
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 f844 	bl	800c698 <_free_r>
 800c610:	6a23      	ldr	r3, [r4, #32]
 800c612:	b11b      	cbz	r3, 800c61c <_reclaim_reent+0xb4>
 800c614:	4620      	mov	r0, r4
 800c616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c61a:	4718      	bx	r3
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
 800c61e:	bf00      	nop
 800c620:	2000023c 	.word	0x2000023c

0800c624 <__errno>:
 800c624:	4b01      	ldr	r3, [pc, #4]	@ (800c62c <__errno+0x8>)
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	2000023c 	.word	0x2000023c

0800c630 <__libc_init_array>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	4d0d      	ldr	r5, [pc, #52]	@ (800c668 <__libc_init_array+0x38>)
 800c634:	4c0d      	ldr	r4, [pc, #52]	@ (800c66c <__libc_init_array+0x3c>)
 800c636:	1b64      	subs	r4, r4, r5
 800c638:	10a4      	asrs	r4, r4, #2
 800c63a:	2600      	movs	r6, #0
 800c63c:	42a6      	cmp	r6, r4
 800c63e:	d109      	bne.n	800c654 <__libc_init_array+0x24>
 800c640:	4d0b      	ldr	r5, [pc, #44]	@ (800c670 <__libc_init_array+0x40>)
 800c642:	4c0c      	ldr	r4, [pc, #48]	@ (800c674 <__libc_init_array+0x44>)
 800c644:	f000 f8a0 	bl	800c788 <_init>
 800c648:	1b64      	subs	r4, r4, r5
 800c64a:	10a4      	asrs	r4, r4, #2
 800c64c:	2600      	movs	r6, #0
 800c64e:	42a6      	cmp	r6, r4
 800c650:	d105      	bne.n	800c65e <__libc_init_array+0x2e>
 800c652:	bd70      	pop	{r4, r5, r6, pc}
 800c654:	f855 3b04 	ldr.w	r3, [r5], #4
 800c658:	4798      	blx	r3
 800c65a:	3601      	adds	r6, #1
 800c65c:	e7ee      	b.n	800c63c <__libc_init_array+0xc>
 800c65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c662:	4798      	blx	r3
 800c664:	3601      	adds	r6, #1
 800c666:	e7f2      	b.n	800c64e <__libc_init_array+0x1e>
 800c668:	0800c8bc 	.word	0x0800c8bc
 800c66c:	0800c8bc 	.word	0x0800c8bc
 800c670:	0800c8bc 	.word	0x0800c8bc
 800c674:	0800c8c0 	.word	0x0800c8c0

0800c678 <__retarget_lock_acquire_recursive>:
 800c678:	4770      	bx	lr

0800c67a <__retarget_lock_release_recursive>:
 800c67a:	4770      	bx	lr

0800c67c <memcpy>:
 800c67c:	440a      	add	r2, r1
 800c67e:	4291      	cmp	r1, r2
 800c680:	f100 33ff 	add.w	r3, r0, #4294967295
 800c684:	d100      	bne.n	800c688 <memcpy+0xc>
 800c686:	4770      	bx	lr
 800c688:	b510      	push	{r4, lr}
 800c68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c692:	4291      	cmp	r1, r2
 800c694:	d1f9      	bne.n	800c68a <memcpy+0xe>
 800c696:	bd10      	pop	{r4, pc}

0800c698 <_free_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4605      	mov	r5, r0
 800c69c:	2900      	cmp	r1, #0
 800c69e:	d041      	beq.n	800c724 <_free_r+0x8c>
 800c6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a4:	1f0c      	subs	r4, r1, #4
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bfb8      	it	lt
 800c6aa:	18e4      	addlt	r4, r4, r3
 800c6ac:	f000 f83e 	bl	800c72c <__malloc_lock>
 800c6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c728 <_free_r+0x90>)
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	b933      	cbnz	r3, 800c6c4 <_free_r+0x2c>
 800c6b6:	6063      	str	r3, [r4, #4]
 800c6b8:	6014      	str	r4, [r2, #0]
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c0:	f000 b83a 	b.w	800c738 <__malloc_unlock>
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d908      	bls.n	800c6da <_free_r+0x42>
 800c6c8:	6820      	ldr	r0, [r4, #0]
 800c6ca:	1821      	adds	r1, r4, r0
 800c6cc:	428b      	cmp	r3, r1
 800c6ce:	bf01      	itttt	eq
 800c6d0:	6819      	ldreq	r1, [r3, #0]
 800c6d2:	685b      	ldreq	r3, [r3, #4]
 800c6d4:	1809      	addeq	r1, r1, r0
 800c6d6:	6021      	streq	r1, [r4, #0]
 800c6d8:	e7ed      	b.n	800c6b6 <_free_r+0x1e>
 800c6da:	461a      	mov	r2, r3
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	b10b      	cbz	r3, 800c6e4 <_free_r+0x4c>
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d9fa      	bls.n	800c6da <_free_r+0x42>
 800c6e4:	6811      	ldr	r1, [r2, #0]
 800c6e6:	1850      	adds	r0, r2, r1
 800c6e8:	42a0      	cmp	r0, r4
 800c6ea:	d10b      	bne.n	800c704 <_free_r+0x6c>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	4401      	add	r1, r0
 800c6f0:	1850      	adds	r0, r2, r1
 800c6f2:	4283      	cmp	r3, r0
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	d1e0      	bne.n	800c6ba <_free_r+0x22>
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	6053      	str	r3, [r2, #4]
 800c6fe:	4408      	add	r0, r1
 800c700:	6010      	str	r0, [r2, #0]
 800c702:	e7da      	b.n	800c6ba <_free_r+0x22>
 800c704:	d902      	bls.n	800c70c <_free_r+0x74>
 800c706:	230c      	movs	r3, #12
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	e7d6      	b.n	800c6ba <_free_r+0x22>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	1821      	adds	r1, r4, r0
 800c710:	428b      	cmp	r3, r1
 800c712:	bf04      	itt	eq
 800c714:	6819      	ldreq	r1, [r3, #0]
 800c716:	685b      	ldreq	r3, [r3, #4]
 800c718:	6063      	str	r3, [r4, #4]
 800c71a:	bf04      	itt	eq
 800c71c:	1809      	addeq	r1, r1, r0
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	6054      	str	r4, [r2, #4]
 800c722:	e7ca      	b.n	800c6ba <_free_r+0x22>
 800c724:	bd38      	pop	{r3, r4, r5, pc}
 800c726:	bf00      	nop
 800c728:	20002590 	.word	0x20002590

0800c72c <__malloc_lock>:
 800c72c:	4801      	ldr	r0, [pc, #4]	@ (800c734 <__malloc_lock+0x8>)
 800c72e:	f7ff bfa3 	b.w	800c678 <__retarget_lock_acquire_recursive>
 800c732:	bf00      	nop
 800c734:	2000258c 	.word	0x2000258c

0800c738 <__malloc_unlock>:
 800c738:	4801      	ldr	r0, [pc, #4]	@ (800c740 <__malloc_unlock+0x8>)
 800c73a:	f7ff bf9e 	b.w	800c67a <__retarget_lock_release_recursive>
 800c73e:	bf00      	nop
 800c740:	2000258c 	.word	0x2000258c

0800c744 <sqrtf>:
 800c744:	b508      	push	{r3, lr}
 800c746:	ed2d 8b02 	vpush	{d8}
 800c74a:	eeb0 8a40 	vmov.f32	s16, s0
 800c74e:	f000 f817 	bl	800c780 <__ieee754_sqrtf>
 800c752:	eeb4 8a48 	vcmp.f32	s16, s16
 800c756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c75a:	d60c      	bvs.n	800c776 <sqrtf+0x32>
 800c75c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c77c <sqrtf+0x38>
 800c760:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c768:	d505      	bpl.n	800c776 <sqrtf+0x32>
 800c76a:	f7ff ff5b 	bl	800c624 <__errno>
 800c76e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c772:	2321      	movs	r3, #33	@ 0x21
 800c774:	6003      	str	r3, [r0, #0]
 800c776:	ecbd 8b02 	vpop	{d8}
 800c77a:	bd08      	pop	{r3, pc}
 800c77c:	00000000 	.word	0x00000000

0800c780 <__ieee754_sqrtf>:
 800c780:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c784:	4770      	bx	lr
	...

0800c788 <_init>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	bf00      	nop
 800c78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78e:	bc08      	pop	{r3}
 800c790:	469e      	mov	lr, r3
 800c792:	4770      	bx	lr

0800c794 <_fini>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	bf00      	nop
 800c798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79a:	bc08      	pop	{r3}
 800c79c:	469e      	mov	lr, r3
 800c79e:	4770      	bx	lr
