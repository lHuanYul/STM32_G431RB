
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800cb80  0800cb80  0000db80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc88  0800cc88  0000f2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc90  0800cc90  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc90  0800cc90  0000dc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc94  0800cc94  0000dc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000012c4  20000000  0800cc98  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021ac  200012c4  0800df5c  0000f2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003470  0800df5c  0000f470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033fd7  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073ca  00000000  00000000  000432cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002718  00000000  00000000  0004a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e12  00000000  00000000  0004cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b079  00000000  00000000  0004ebc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038435  00000000  00000000  00079c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f37aa  00000000  00000000  000b2070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a581a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7f4  00000000  00000000  001a5860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b0054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200012c4 	.word	0x200012c4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cb68 	.word	0x0800cb68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200012c8 	.word	0x200012c8
 800021c:	0800cb68 	.word	0x0800cb68

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b988 	b.w	8000ec0 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	468e      	mov	lr, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d962      	bls.n	8000ca4 <__udivmoddi4+0xdc>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	b14e      	cbz	r6, 8000bf8 <__udivmoddi4+0x30>
 8000be4:	f1c6 0320 	rsb	r3, r6, #32
 8000be8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bec:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf0:	40b7      	lsls	r7, r6
 8000bf2:	ea43 0808 	orr.w	r8, r3, r8
 8000bf6:	40b4      	lsls	r4, r6
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c1c:	f080 80ea 	bcs.w	8000df4 <__udivmoddi4+0x22c>
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f240 80e7 	bls.w	8000df4 <__udivmoddi4+0x22c>
 8000c26:	3902      	subs	r1, #2
 8000c28:	443b      	add	r3, r7
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	b2a3      	uxth	r3, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3e:	459c      	cmp	ip, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c48:	f080 80d6 	bcs.w	8000df8 <__udivmoddi4+0x230>
 8000c4c:	459c      	cmp	ip, r3
 8000c4e:	f240 80d3 	bls.w	8000df8 <__udivmoddi4+0x230>
 8000c52:	443b      	add	r3, r7
 8000c54:	3802      	subs	r0, #2
 8000c56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5a:	eba3 030c 	sub.w	r3, r3, ip
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40f3      	lsrs	r3, r6
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xb6>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb0>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x14c>
 8000c86:	4573      	cmp	r3, lr
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xc8>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 8105 	bhi.w	8000e9a <__udivmoddi4+0x2d2>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4690      	mov	r8, r2
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e5      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000c9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000ca2:	e7e2      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f000 8090 	beq.w	8000dca <__udivmoddi4+0x202>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f040 80a4 	bne.w	8000dfc <__udivmoddi4+0x234>
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	b2bc      	uxth	r4, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cce:	fb04 f20c 	mul.w	r2, r4, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x11e>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x11c>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f200 80e0 	bhi.w	8000ea4 <__udivmoddi4+0x2dc>
 8000ce4:	46c4      	mov	ip, r8
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf4:	fb02 f404 	mul.w	r4, r2, r4
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x144>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x142>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2d6>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa0e f401 	lsl.w	r4, lr, r1
 8000d24:	fa20 f306 	lsr.w	r3, r0, r6
 8000d28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	fa1f fc87 	uxth.w	ip, r7
 8000d3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x1a0>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d5a:	f080 809c 	bcs.w	8000e96 <__udivmoddi4+0x2ce>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8099 	bls.w	8000e96 <__udivmoddi4+0x2ce>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	fa1f fe83 	uxth.w	lr, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1ce>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d8a:	f080 8082 	bcs.w	8000e92 <__udivmoddi4+0x2ca>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d97f      	bls.n	8000e92 <__udivmoddi4+0x2ca>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da2:	4564      	cmp	r4, ip
 8000da4:	4673      	mov	r3, lr
 8000da6:	46e1      	mov	r9, ip
 8000da8:	d362      	bcc.n	8000e70 <__udivmoddi4+0x2a8>
 8000daa:	d05f      	beq.n	8000e6c <__udivmoddi4+0x2a4>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x1fe>
 8000dae:	ebb8 0203 	subs.w	r2, r8, r3
 8000db2:	eb64 0409 	sbc.w	r4, r4, r9
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	fa22 f301 	lsr.w	r3, r2, r1
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e74f      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000dca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dce:	0c01      	lsrs	r1, r0, #16
 8000dd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4638      	mov	r0, r7
 8000dde:	463c      	mov	r4, r7
 8000de0:	46b8      	mov	r8, r7
 8000de2:	46be      	mov	lr, r7
 8000de4:	2620      	movs	r6, #32
 8000de6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dea:	eba2 0208 	sub.w	r2, r2, r8
 8000dee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000df2:	e766      	b.n	8000cc2 <__udivmoddi4+0xfa>
 8000df4:	4601      	mov	r1, r0
 8000df6:	e718      	b.n	8000c2a <__udivmoddi4+0x62>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	e72c      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000dfc:	f1c6 0220 	rsb	r2, r6, #32
 8000e00:	fa2e f302 	lsr.w	r3, lr, r2
 8000e04:	40b7      	lsls	r7, r6
 8000e06:	40b1      	lsls	r1, r6
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb08 f904 	mul.w	r9, r8, r4
 8000e26:	40b0      	lsls	r0, r6
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2e:	b280      	uxth	r0, r0
 8000e30:	d93e      	bls.n	8000eb0 <__udivmoddi4+0x2e8>
 8000e32:	1879      	adds	r1, r7, r1
 8000e34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e38:	d201      	bcs.n	8000e3e <__udivmoddi4+0x276>
 8000e3a:	4589      	cmp	r9, r1
 8000e3c:	d81f      	bhi.n	8000e7e <__udivmoddi4+0x2b6>
 8000e3e:	eba1 0109 	sub.w	r1, r1, r9
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fb09 f804 	mul.w	r8, r9, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d229      	bcs.n	8000eac <__udivmoddi4+0x2e4>
 8000e58:	18ba      	adds	r2, r7, r2
 8000e5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e5e:	d2c4      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d2c2      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e64:	f1a9 0102 	sub.w	r1, r9, #2
 8000e68:	443a      	add	r2, r7
 8000e6a:	e7be      	b.n	8000dea <__udivmoddi4+0x222>
 8000e6c:	45f0      	cmp	r8, lr
 8000e6e:	d29d      	bcs.n	8000dac <__udivmoddi4+0x1e4>
 8000e70:	ebbe 0302 	subs.w	r3, lr, r2
 8000e74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e78:	3801      	subs	r0, #1
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	e796      	b.n	8000dac <__udivmoddi4+0x1e4>
 8000e7e:	eba7 0909 	sub.w	r9, r7, r9
 8000e82:	4449      	add	r1, r9
 8000e84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8c:	fb09 f804 	mul.w	r8, r9, r4
 8000e90:	e7db      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e92:	4673      	mov	r3, lr
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1ce>
 8000e96:	4650      	mov	r0, sl
 8000e98:	e766      	b.n	8000d68 <__udivmoddi4+0x1a0>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e6fd      	b.n	8000c9a <__udivmoddi4+0xd2>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3a02      	subs	r2, #2
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x144>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	443b      	add	r3, r7
 8000eaa:	e71c      	b.n	8000ce6 <__udivmoddi4+0x11e>
 8000eac:	4649      	mov	r1, r9
 8000eae:	e79c      	b.n	8000dea <__udivmoddi4+0x222>
 8000eb0:	eba1 0109 	sub.w	r1, r1, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	e7c4      	b.n	8000e4a <__udivmoddi4+0x282>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2220      	movs	r2, #32
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00b fc4b 	bl	800c778 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000ee4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eea:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000eec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef8:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000efe:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f04:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0a:	4b35      	ldr	r3, [pc, #212]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f10:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f16:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f22:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f2c:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 8000f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f38:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f52:	f003 f855 	bl	8004000 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f5c:	f000 fbcc 	bl	80016f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481d      	ldr	r0, [pc, #116]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f6c:	f003 ffce 	bl	8004f0c <HAL_ADCEx_MultiModeConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f76:	f000 fbbf 	bl	80016f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_ADC1_Init+0x120>)
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	237f      	movs	r3, #127	@ 0x7f
 8000f88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f98:	f003 fa88 	bl	80044ac <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fa2:	f000 fba9 	bl	80016f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000fb0:	f003 fa7c 	bl	80044ac <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000fba:	f000 fb9d 	bl	80016f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000fc8:	f003 fa70 	bl	80044ac <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000fd2:	f000 fb91 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	@ 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200012e0 	.word	0x200012e0
 8000fe4:	2e300800 	.word	0x2e300800

08000fe8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09a      	sub	sp, #104	@ 0x68
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2244      	movs	r2, #68	@ 0x44
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00b fbb5 	bl	800c778 <memset>
  if(adcHandle->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001016:	d160      	bne.n	80010da <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800101c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800101e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f006 f9a1 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001034:	f000 fb60 	bl	80016f8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	4a29      	ldr	r2, [pc, #164]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 800103e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a23      	ldr	r2, [pc, #140]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001068:	f641 0302 	movw	r3, #6146	@ 0x1802
 800106c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800107a:	4619      	mov	r1, r3
 800107c:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <HAL_ADC_MspInit+0x100>)
 800107e:	f005 f87f 	bl	8006180 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 8001084:	4a1a      	ldr	r2, [pc, #104]	@ (80010f0 <HAL_ADC_MspInit+0x108>)
 8001086:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 800108a:	2205      	movs	r2, #5
 800108c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a8:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010b2:	2220      	movs	r2, #32
 80010b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010be:	480b      	ldr	r0, [pc, #44]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010c0:	f004 f8da 	bl	8005278 <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80010ca:	f000 fb15 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80010d4:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	3768      	adds	r7, #104	@ 0x68
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	2000134c 	.word	0x2000134c
 80010f0:	40020408 	.word	0x40020408

080010f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <MX_FREERTOS_Init+0x38>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <MX_FREERTOS_Init+0x3c>)
 80010fe:	f008 fcea 	bl	8009ad6 <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <MX_FREERTOS_Init+0x40>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <MX_FREERTOS_Init+0x44>)
 800110a:	2100      	movs	r1, #0
 800110c:	480b      	ldr	r0, [pc, #44]	@ (800113c <MX_FREERTOS_Init+0x48>)
 800110e:	f008 fce2 	bl	8009ad6 <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <MX_FREERTOS_Init+0x4c>)
 8001116:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <MX_FREERTOS_Init+0x50>)
 800111a:	2100      	movs	r1, #0
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <MX_FREERTOS_Init+0x54>)
 800111e:	f008 fcda 	bl	8009ad6 <osThreadNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a09      	ldr	r2, [pc, #36]	@ (800114c <MX_FREERTOS_Init+0x58>)
 8001126:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0800cbb8 	.word	0x0800cbb8
 8001130:	0800213d 	.word	0x0800213d
 8001134:	200013ac 	.word	0x200013ac
 8001138:	0800cbdc 	.word	0x0800cbdc
 800113c:	080032f5 	.word	0x080032f5
 8001140:	200013b0 	.word	0x200013b0
 8001144:	0800cc00 	.word	0x0800cc00
 8001148:	08001d0d 	.word	0x08001d0d
 800114c:	200013b4 	.word	0x200013b4

08001150 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_CORDIC_Init+0x20>)
 8001156:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <MX_CORDIC_Init+0x24>)
 8001158:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_CORDIC_Init+0x20>)
 800115c:	f003 ff7a 	bl	8005054 <HAL_CORDIC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001166:	f000 fac7 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200013b8 	.word	0x200013b8
 8001174:	40020c00 	.word	0x40020c00

08001178 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_CORDIC_MspInit+0x38>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10b      	bne.n	80011a2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_CORDIC_MspInit+0x3c>)
 800118c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <HAL_CORDIC_MspInit+0x3c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6493      	str	r3, [r2, #72]	@ 0x48
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <HAL_CORDIC_MspInit+0x3c>)
 8001198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_DMA_Init+0x50>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <MX_DMA_Init+0x50>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_DMA_Init+0x50>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_DMA_Init+0x50>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011da:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <MX_DMA_Init+0x50>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_DMA_Init+0x50>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2105      	movs	r1, #5
 80011f2:	2038      	movs	r0, #56	@ 0x38
 80011f4:	f004 f818 	bl	8005228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80011f8:	2038      	movs	r0, #56	@ 0x38
 80011fa:	f004 f82f 	bl	800525c <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001212:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <MX_FDCAN1_Init+0x88>)
 8001214:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001222:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800122a:	2200      	movs	r2, #0
 800122c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001230:	2200      	movs	r2, #0
 8001232:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001236:	2200      	movs	r2, #0
 8001238:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800123c:	2214      	movs	r2, #20
 800123e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001242:	2201      	movs	r2, #1
 8001244:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001248:	220e      	movs	r2, #14
 800124a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800124e:	2202      	movs	r2, #2
 8001250:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001254:	2202      	movs	r2, #2
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800125a:	2201      	movs	r2, #1
 800125c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001260:	220e      	movs	r2, #14
 8001262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001266:	2202      	movs	r2, #2
 8001268:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800126c:	2202      	movs	r2, #2
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001272:	2200      	movs	r2, #0
 8001274:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001278:	2200      	movs	r2, #0
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800127e:	f004 facf 	bl	8005820 <HAL_FDCAN_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001288:	f000 fa36 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200013e0 	.word	0x200013e0
 8001294:	40006400 	.word	0x40006400

08001298 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09a      	sub	sp, #104	@ 0x68
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2244      	movs	r2, #68	@ 0x44
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00b fa5d 	bl	800c778 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a28      	ldr	r2, [pc, #160]	@ (8001364 <HAL_FDCAN_MspInit+0xcc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d149      	bne.n	800135c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80012ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 f849 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80012e4:	f000 fa08 	bl	80016f8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 80012ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001318:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800131c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800132a:	2309      	movs	r3, #9
 800132c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001338:	f004 ff22 	bl	8006180 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2105      	movs	r1, #5
 8001340:	2015      	movs	r0, #21
 8001342:	f003 ff71 	bl	8005228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001346:	2015      	movs	r0, #21
 8001348:	f003 ff88 	bl	800525c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2105      	movs	r1, #5
 8001350:	2016      	movs	r0, #22
 8001352:	f003 ff69 	bl	8005228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001356:	2016      	movs	r0, #22
 8001358:	f003 ff80 	bl	800525c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800135c:	bf00      	nop
 800135e:	3768      	adds	r7, #104	@ 0x68
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40006400 	.word	0x40006400
 8001368:	40021000 	.word	0x40021000

0800136c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a2e      	ldr	r2, [pc, #184]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <MX_GPIO_Init+0xd4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80013e8:	4816      	ldr	r0, [pc, #88]	@ (8001444 <MX_GPIO_Init+0xd8>)
 80013ea:	f005 f84b 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80013ee:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	480f      	ldr	r0, [pc, #60]	@ (8001444 <MX_GPIO_Init+0xd8>)
 8001408:	f004 feba 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800140c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001412:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4809      	ldr	r0, [pc, #36]	@ (8001448 <MX_GPIO_Init+0xdc>)
 8001424:	f004 feac 	bl	8006180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2105      	movs	r1, #5
 800142c:	2028      	movs	r0, #40	@ 0x28
 800142e:	f003 fefb 	bl	8005228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001432:	2028      	movs	r0, #40	@ 0x28
 8001434:	f003 ff12 	bl	800525c <HAL_NVIC_EnableIRQ>

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	@ 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800

0800144c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <MX_I2C1_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001458:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <MX_I2C1_Init+0x7c>)
 800145a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001464:	2201      	movs	r2, #1
 8001466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001486:	480e      	ldr	r0, [pc, #56]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001488:	f005 f82c 	bl	80064e4 <HAL_I2C_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001492:	f000 f931 	bl	80016f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800149a:	f005 f8be 	bl	800661a <HAL_I2CEx_ConfigAnalogFilter>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a4:	f000 f928 	bl	80016f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_I2C1_Init+0x74>)
 80014ac:	f005 f900 	bl	80066b0 <HAL_I2CEx_ConfigDigitalFilter>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 f91f 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20001444 	.word	0x20001444
 80014c4:	40005400 	.word	0x40005400
 80014c8:	40b285c2 	.word	0x40b285c2

080014cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09c      	sub	sp, #112	@ 0x70
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	2244      	movs	r2, #68	@ 0x44
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00b f943 	bl	800c778 <memset>
  if(i2cHandle->Instance==I2C1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a2d      	ldr	r2, [pc, #180]	@ (80015ac <HAL_I2C_MspInit+0xe0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d153      	bne.n	80015a4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014fc:	2340      	movs	r3, #64	@ 0x40
 80014fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4618      	mov	r0, r3
 800150a:	f005 ff31 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001514:	f000 f8f0 	bl	80016f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	4a24      	ldr	r2, [pc, #144]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800154c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154e:	2312      	movs	r3, #18
 8001550:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155a:	2304      	movs	r3, #4
 800155c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001568:	f004 fe0a 	bl	8006180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001584:	4619      	mov	r1, r3
 8001586:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <HAL_I2C_MspInit+0xe8>)
 8001588:	f004 fdfa 	bl	8006180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 8001592:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001596:	6593      	str	r3, [r2, #88]	@ 0x58
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_I2C_MspInit+0xe4>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015a4:	bf00      	nop
 80015a6:	3770      	adds	r7, #112	@ 0x70
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015bc:	f002 facc 	bl	8003b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c0:	f000 f83a 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c4:	f7ff fed2 	bl	800136c <MX_GPIO_Init>
  MX_DMA_Init();
 80015c8:	f7ff fdf6 	bl	80011b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80015cc:	f7ff fc7a 	bl	8000ec4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80015d0:	f7ff fe1c 	bl	800120c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80015d4:	f000 f9a0 	bl	8001918 <MX_TIM1_Init>
  MX_I2C1_Init();
 80015d8:	f7ff ff38 	bl	800144c <MX_I2C1_Init>
  MX_TIM2_Init();
 80015dc:	f000 fa4a 	bl	8001a74 <MX_TIM2_Init>
  MX_CORDIC_Init();
 80015e0:	f7ff fdb6 	bl	8001150 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015e4:	f008 fa18 	bl	8009a18 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015e8:	f7ff fd84 	bl	80010f4 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f002 f93b 	bl	8003868 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80015f2:	2101      	movs	r1, #1
 80015f4:	2000      	movs	r0, #0
 80015f6:	f002 f96d 	bl	80038d4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <main+0x7c>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001600:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <main+0x7c>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <main+0x7c>)
 800160a:	2200      	movs	r2, #0
 800160c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <main+0x7c>)
 8001610:	2200      	movs	r2, #0
 8001612:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <main+0x7c>)
 8001616:	2200      	movs	r2, #0
 8001618:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800161a:	4906      	ldr	r1, [pc, #24]	@ (8001634 <main+0x7c>)
 800161c:	2000      	movs	r0, #0
 800161e:	f002 f9e5 	bl	80039ec <BSP_COM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <main+0x74>
  {
    Error_Handler();
 8001628:	f000 f866 	bl	80016f8 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 800162c:	f008 fa18 	bl	8009a60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <main+0x78>
 8001634:	20001498 	.word	0x20001498

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b094      	sub	sp, #80	@ 0x50
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	2238      	movs	r2, #56	@ 0x38
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f00b f896 	bl	800c778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800165a:	2000      	movs	r0, #0
 800165c:	f005 f874 	bl	8006748 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800166a:	2340      	movs	r3, #64	@ 0x40
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001672:	2302      	movs	r3, #2
 8001674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001676:	2304      	movs	r3, #4
 8001678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800167a:	2355      	movs	r3, #85	@ 0x55
 800167c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167e:	2302      	movs	r3, #2
 8001680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0318 	add.w	r3, r7, #24
 800168e:	4618      	mov	r0, r3
 8001690:	f005 f90e 	bl	80068b0 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800169a:	f000 f82d 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	230f      	movs	r3, #15
 80016a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2303      	movs	r3, #3
 80016a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2104      	movs	r1, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 fc0c 	bl	8006ed4 <HAL_RCC_ClockConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016c2:	f000 f819 	bl	80016f8 <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3750      	adds	r7, #80	@ 0x50
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016e2:	f002 fa51 	bl	8003b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fd14 	bl	8002114 <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40001000 	.word	0x40001000

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_MspInit+0x50>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_MspInit+0x50>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6613      	str	r3, [r2, #96]	@ 0x60
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_MspInit+0x50>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_MspInit+0x50>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_MspInit+0x50>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172c:	6593      	str	r3, [r2, #88]	@ 0x58
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x50>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	210f      	movs	r1, #15
 800173e:	f06f 0001 	mvn.w	r0, #1
 8001742:	f003 fd71 	bl	8005228 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001746:	f005 f8a3 	bl	8006890 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <HAL_InitTick+0xc4>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	4a2b      	ldr	r2, [pc, #172]	@ (800181c <HAL_InitTick+0xc4>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6593      	str	r3, [r2, #88]	@ 0x58
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <HAL_InitTick+0xc4>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f005 fd78 	bl	8007280 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001790:	f005 fd4a 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8001794:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001798:	4a21      	ldr	r2, [pc, #132]	@ (8001820 <HAL_InitTick+0xc8>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	3b01      	subs	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <HAL_InitTick+0xcc>)
 80017a6:	4a20      	ldr	r2, [pc, #128]	@ (8001828 <HAL_InitTick+0xd0>)
 80017a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <HAL_InitTick+0xcc>)
 80017ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <HAL_InitTick+0xcc>)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <HAL_InitTick+0xcc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_InitTick+0xcc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017c4:	4817      	ldr	r0, [pc, #92]	@ (8001824 <HAL_InitTick+0xcc>)
 80017c6:	f005 ffc3 	bl	8007750 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11b      	bne.n	8001810 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017d8:	4812      	ldr	r0, [pc, #72]	@ (8001824 <HAL_InitTick+0xcc>)
 80017da:	f006 f87d 	bl	80078d8 <HAL_TIM_Base_Start_IT>
 80017de:	4603      	mov	r3, r0
 80017e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d111      	bne.n	8001810 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ec:	2036      	movs	r0, #54	@ 0x36
 80017ee:	f003 fd35 	bl	800525c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d808      	bhi.n	800180a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	2036      	movs	r0, #54	@ 0x36
 80017fe:	f003 fd13 	bl	8005228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <HAL_InitTick+0xd4>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e002      	b.n	8001810 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001814:	4618      	mov	r0, r3
 8001816:	3730      	adds	r7, #48	@ 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	431bde83 	.word	0x431bde83
 8001824:	200014a8 	.word	0x200014a8
 8001828:	40001000 	.word	0x40001000
 800182c:	20001268 	.word	0x20001268

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <NMI_Handler+0x4>

08001838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <MemManage_Handler+0x4>

08001848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <UsageFault_Handler+0x4>

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <FDCAN1_IT0_IRQHandler+0x10>)
 800186e:	f004 fac1 	bl	8005df4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200013e0 	.word	0x200013e0

0800187c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <FDCAN1_IT1_IRQHandler+0x10>)
 8001882:	f004 fab7 	bl	8005df4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200013e0 	.word	0x200013e0

08001890 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001896:	f006 fa37 	bl	8007d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200014f4 	.word	0x200014f4

080018a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80018a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018ac:	f004 fe02 	bl	80064b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80018b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80018b4:	f004 fdfe 	bl	80064b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018b8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80018bc:	f004 fdfa 	bl	80064b4 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f002 f875 	bl	80039b0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <TIM6_DAC_IRQHandler+0x10>)
 80018d2:	f006 fa19 	bl	8007d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200014a8 	.word	0x200014a8

080018e0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA2_Channel1_IRQHandler+0x10>)
 80018e6:	f003 fdea 	bl	80054be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000134c 	.word	0x2000134c

080018f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b098      	sub	sp, #96	@ 0x60
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2234      	movs	r2, #52	@ 0x34
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f00a ff17 	bl	800c778 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800194a:	4b48      	ldr	r3, [pc, #288]	@ (8001a6c <MX_TIM1_Init+0x154>)
 800194c:	4a48      	ldr	r2, [pc, #288]	@ (8001a70 <MX_TIM1_Init+0x158>)
 800194e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001950:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001952:	2210      	movs	r2, #16
 8001954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001956:	4b45      	ldr	r3, [pc, #276]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001958:	2220      	movs	r2, #32
 800195a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <MX_TIM1_Init+0x154>)
 800195e:	22fa      	movs	r2, #250	@ 0xfa
 8001960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001968:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <MX_TIM1_Init+0x154>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001974:	483d      	ldr	r0, [pc, #244]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001976:	f006 f870 	bl	8007a5a <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001980:	f7ff feba 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8001988:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800198c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001992:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001996:	4619      	mov	r1, r3
 8001998:	4834      	ldr	r0, [pc, #208]	@ (8001a6c <MX_TIM1_Init+0x154>)
 800199a:	f007 f927 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019a4:	f7ff fea8 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a8:	2360      	movs	r3, #96	@ 0x60
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019b0:	2302      	movs	r3, #2
 80019b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	4827      	ldr	r0, [pc, #156]	@ (8001a6c <MX_TIM1_Init+0x154>)
 80019ce:	f006 fb65 	bl	800809c <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019d8:	f7ff fe8e 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019e0:	2204      	movs	r2, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4821      	ldr	r0, [pc, #132]	@ (8001a6c <MX_TIM1_Init+0x154>)
 80019e6:	f006 fb59 	bl	800809c <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80019f0:	f7ff fe82 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019f8:	2208      	movs	r2, #8
 80019fa:	4619      	mov	r1, r3
 80019fc:	481b      	ldr	r0, [pc, #108]	@ (8001a6c <MX_TIM1_Init+0x154>)
 80019fe:	f006 fb4d 	bl	800809c <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001a08:	f7ff fe76 	bl	80016f8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001a0c:	4817      	ldr	r0, [pc, #92]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001a0e:	f007 f9fb 	bl	8008e08 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 8001a1e:	2322      	movs	r3, #34	@ 0x22
 8001a20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001a50:	f007 f94e 	bl	8008cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001a5a:	f7ff fe4d 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a5e:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <MX_TIM1_Init+0x154>)
 8001a60:	f000 f8a2 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 8001a64:	bf00      	nop
 8001a66:	3760      	adds	r7, #96	@ 0x60
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200014f4 	.word	0x200014f4
 8001a70:	40012c00 	.word	0x40012c00

08001a74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	463b      	mov	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001a9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001aae:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001ac0:	4816      	ldr	r0, [pc, #88]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001ac2:	f005 ff73 	bl	80079ac <HAL_TIM_OC_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001acc:	f7ff fe14 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	480f      	ldr	r0, [pc, #60]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001ae0:	f007 f884 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001aea:	f7ff fe05 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_TIM2_Init+0xa8>)
 8001b06:	f006 fa4f 	bl	8007fa8 <HAL_TIM_OC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b10:	f7ff fdf2 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	@ 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20001540 	.word	0x20001540

08001b20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_TIM_PWM_MspInit+0x44>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d113      	bne.n	8001b5a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <HAL_TIM_PWM_MspInit+0x48>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <HAL_TIM_PWM_MspInit+0x48>)
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_TIM_PWM_MspInit+0x48>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2019      	movs	r0, #25
 8001b50:	f003 fb6a 	bl	8005228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b54:	2019      	movs	r0, #25
 8001b56:	f003 fb81 	bl	800525c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40012c00 	.word	0x40012c00
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b7c:	d10b      	bne.n	8001b96 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_TIM_OC_MspInit+0x38>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	4a08      	ldr	r2, [pc, #32]	@ (8001ba4 <HAL_TIM_OC_MspInit+0x38>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_TIM_OC_MspInit+0x38>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a28      	ldr	r2, [pc, #160]	@ (8001c68 <HAL_TIM_MspPostInit+0xc0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d149      	bne.n	8001c5e <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_TIM_MspPostInit+0xc4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	4a27      	ldr	r2, [pc, #156]	@ (8001c6c <HAL_TIM_MspPostInit+0xc4>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd6:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <HAL_TIM_MspPostInit+0xc4>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_TIM_MspPostInit+0xc4>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	4a21      	ldr	r2, [pc, #132]	@ (8001c6c <HAL_TIM_MspPostInit+0xc4>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_TIM_MspPostInit+0xc4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4816      	ldr	r0, [pc, #88]	@ (8001c70 <HAL_TIM_MspPostInit+0xc8>)
 8001c16:	f004 fab3 	bl	8006180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c1a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480f      	ldr	r0, [pc, #60]	@ (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001c38:	f004 faa2 	bl	8006180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001c5a:	f004 fa91 	bl	8006180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000800 	.word	0x48000800
 8001c74:	48000400 	.word	0x48000400

08001c78 <average>:
    }
    return RESULT_OK(NULL);
}

static Result average(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	460b      	mov	r3, r1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint32_t total = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	83fb      	strh	r3, [r7, #30]
 8001c8e:	e00f      	b.n	8001cb0 <average+0x38>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001c90:	8bfa      	ldrh	r2, [r7, #30]
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	441a      	add	r2, r3
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <average+0x68>)
 8001c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001caa:	8bfb      	ldrh	r3, [r7, #30]
 8001cac:	3301      	adds	r3, #1
 8001cae:	83fb      	strh	r3, [r7, #30]
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d9ec      	bls.n	8001c90 <average+0x18>
    }
    *adc_store = (uint16_t)(total / ADC_NEED_LEN);
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <average+0x6c>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	801a      	strh	r2, [r3, #0]
    return RESULT_OK(NULL);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
}
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000158c 	.word	0x2000158c
 8001ce4:	38e38e39 	.word	0x38e38e39

08001ce8 <renew_adc>:

Result renew_adc(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	817b      	strh	r3, [r7, #10]
    return average(adc_id, adc_store);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ffbb 	bl	8001c78 <average>
}
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <StartAdcTask>:

void StartAdcTask(void *argument)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
 8001d14:	221b      	movs	r2, #27
 8001d16:	4903      	ldr	r1, [pc, #12]	@ (8001d24 <StartAdcTask+0x18>)
 8001d18:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <StartAdcTask+0x1c>)
 8001d1a:	f002 faf5 	bl	8004308 <HAL_ADC_Start_DMA>
    StopTask();
 8001d1e:	f007 ff6c 	bl	8009bfa <osThreadExit>
 8001d22:	bf00      	nop
 8001d24:	2000158c 	.word	0x2000158c
 8001d28:	200012e0 	.word	0x200012e0

08001d2c <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d308      	bcc.n	8001d58 <fdcan_pkt_get_byte+0x2c>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	6053      	str	r3, [r2, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2207      	movs	r2, #7
 8001d54:	711a      	strb	r2, [r3, #4]
 8001d56:	e00b      	b.n	8001d70 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	791a      	ldrb	r2, [r3, #4]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
}
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	3724      	adds	r7, #36	@ 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <fdcan_pkt_pool_alloc+0x64>)
 8001d86:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d108      	bne.n	8001da0 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	461a      	mov	r2, r3
 8001d92:	2300      	movs	r3, #0
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	6053      	str	r3, [r2, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 8001d9e:	e019      	b.n	8001dd4 <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <fdcan_pkt_pool_alloc+0x64>)
 8001da2:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001da6:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <fdcan_pkt_pool_alloc+0x64>)
 8001dae:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <fdcan_pkt_pool_alloc+0x64>)
 8001dba:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <fdcan_pkt_pool_alloc+0x64>)
 8001dc4:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	605a      	str	r2, [r3, #4]
}
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	3724      	adds	r7, #36	@ 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	200015c4 	.word	0x200015c4

08001de4 <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	2208      	movs	r2, #8
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f00a fcbf 	bl	800c778 <memset>
    pkt->len = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <fdcan_pkt_pool_free+0x48>)
 8001e02:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <fdcan_pkt_pool_free+0x48>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <fdcan_pkt_pool_free+0x48>)
 8001e14:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <fdcan_pkt_pool_free+0x48>)
 8001e1e:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200015c4 	.word	0x200015c4

08001e30 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	@ 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d308      	bcc.n	8001e5a <fdcan_pkt_buf_push+0x2a>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	6053      	str	r3, [r2, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2206      	movs	r2, #6
 8001e56:	711a      	strb	r2, [r3, #4]
 8001e58:	e01e      	b.n	8001e98 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4413      	add	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	68d2      	ldr	r2, [r2, #12]
 8001e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e6c:	fb01 f202 	mul.w	r2, r1, r2
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]
    self->len++;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	605a      	str	r2, [r3, #4]
}
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	372c      	adds	r7, #44	@ 0x2c
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <HAL_FDCAN_ErrorStatusCallback+0x30>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200013e0 	.word	0x200013e0
 8001ed8:	2000184c 	.word	0x2000184c

08001edc <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f003 fef4 	bl	8005ce4 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 8001f06:	f7ff fbf7 	bl	80016f8 <Error_Handler>
    }
}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d057      	beq.n	8001fec <HAL_FDCAN_RxFifo0Callback+0xc4>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 8001f3c:	f107 0318 	add.w	r3, r7, #24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff1b 	bl	8001d7c <fdcan_pkt_pool_alloc>
 8001f46:	7e3b      	ldrb	r3, [r7, #24]
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_FDCAN_RxFifo0Callback+0x36>
 8001f52:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001f56:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	f7ff fbcd 	bl	80016f8 <Error_Handler>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	3304      	adds	r3, #4
 8001f66:	4a24      	ldr	r2, [pc, #144]	@ (8001ff8 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001f68:	2140      	movs	r1, #64	@ 0x40
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f003 fdb2 	bl	8005ad4 <HAL_FDCAN_GetRxMessage>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_FDCAN_RxFifo0Callback+0x5a>
 8001f7e:	f7ff fbbb 	bl	80016f8 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	d90c      	bls.n	8001fb6 <HAL_FDCAN_RxFifo0Callback+0x8e>
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b21      	cmp	r3, #33	@ 0x21
 8001fa2:	d808      	bhi.n	8001fb6 <HAL_FDCAN_RxFifo0Callback+0x8e>
        {
            instant_recv_proc(pkt);
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f849 	bl	8002040 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 8001fae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fb0:	f7ff ff18 	bl	8001de4 <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001fb4:	e01a      	b.n	8001fec <HAL_FDCAN_RxFifo0Callback+0xc4>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b21      	cmp	r3, #33	@ 0x21
 8001fbc:	d916      	bls.n	8001fec <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b23      	cmp	r3, #35	@ 0x23
 8001fc4:	d812      	bhi.n	8001fec <HAL_FDCAN_RxFifo0Callback+0xc4>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fcc:	490b      	ldr	r1, [pc, #44]	@ (8001ffc <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff2e 	bl	8001e30 <fdcan_pkt_buf_push>
 8001fd4:	7c3b      	ldrb	r3, [r7, #16]
 8001fd6:	f083 0301 	eor.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001fe0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001fe4:	4b03      	ldr	r3, [pc, #12]	@ (8001ff4 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	f7ff fb86 	bl	80016f8 <Error_Handler>
}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200018a0 	.word	0x200018a0
 8001ff8:	20001878 	.word	0x20001878
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 8002016:	b480      	push	{r7}
 8002018:	b087      	sub	sp, #28
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	2300      	movs	r3, #0
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	6053      	str	r3, [r2, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2207      	movs	r2, #7
 8002032:	711a      	strb	r2, [r3, #4]
}
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 800204a:	f107 001c 	add.w	r0, r7, #28
 800204e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8002052:	2200      	movs	r2, #0
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	f7ff fe69 	bl	8001d2c <fdcan_pkt_get_byte>
 800205a:	7f3b      	ldrb	r3, [r7, #28]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <instant_recv_proc+0x40>
 8002066:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <instant_recv_proc+0x8c>)
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	461a      	mov	r2, r3
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	e893 0003 	ldmia.w	r3, {r0, r1}
 800207a:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 800207e:	e021      	b.n	80020c4 <instant_recv_proc+0x84>
    switch (code)
 8002080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002084:	2b11      	cmp	r3, #17
 8002086:	d002      	beq.n	800208e <instant_recv_proc+0x4e>
 8002088:	2b12      	cmp	r3, #18
 800208a:	d00a      	beq.n	80020a2 <instant_recv_proc+0x62>
 800208c:	e013      	b.n	80020b6 <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <instant_recv_proc+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
}
 80020a0:	e010      	b.n	80020c4 <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <instant_recv_proc+0x90>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
}
 80020b4:	e006      	b.n	80020c4 <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 80020b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ffa9 	bl	8002016 <instant_recv_proc_inner>
}
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200018a0 	.word	0x200018a0
 80020d0:	2000184d 	.word	0x2000184d

080020d4 <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/it_hall.h"
#include "motor/it_timer.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	81fb      	strh	r3, [r7, #14]
    if (
           (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[0])
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020e0:	8a1b      	ldrh	r3, [r3, #16]
    if (
 80020e2:	89fa      	ldrh	r2, [r7, #14]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d009      	beq.n	80020fc <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[1])
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020ea:	8a5b      	ldrh	r3, [r3, #18]
 80020ec:	89fa      	ldrh	r2, [r7, #14]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d004      	beq.n	80020fc <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[2])
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020f4:	8a9b      	ldrh	r3, [r3, #20]
 80020f6:	89fa      	ldrh	r2, [r7, #14]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d104      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x32>
    ) {
        motor_hall_exti(&motor_0);
 80020fc:	463b      	mov	r3, r7
 80020fe:	4904      	ldr	r1, [pc, #16]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f9a5 	bl	8002450 <motor_hall_exti>
    }
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000014 	.word	0x20000014

08002114 <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
    if (htim == motor_0.const_h.htimx[0])
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_TIM_PeriodElapsedCallback_OWN+0x24>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	429a      	cmp	r2, r3
 8002124:	d104      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback_OWN+0x1c>
    {
        motor_pwm_pulse(&motor_0);
 8002126:	463b      	mov	r3, r7
 8002128:	4903      	ldr	r1, [pc, #12]	@ (8002138 <HAL_TIM_PeriodElapsedCallback_OWN+0x24>)
 800212a:	4618      	mov	r0, r3
 800212c:	f001 f80e 	bl	800314c <motor_pwm_pulse>
    }
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000014 	.word	0x20000014

0800213c <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8002144:	2332      	movs	r3, #50	@ 0x32
 8002146:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8002148:	f007 fcb0 	bl	8009aac <osKernelGetTickCount>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8002154:	f001 fd2a 	bl	8003bac <HAL_GetTick>
 8002158:	4603      	mov	r3, r0
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <StartDefaultTask+0x34>)
 800215c:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f007 fd52 	bl	8009c08 <osDelayUntil>
        next_wake += osPeriod;
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 800216c:	bf00      	nop
 800216e:	e7f1      	b.n	8002154 <StartDefaultTask+0x18>
 8002170:	200018a4 	.word	0x200018a4

08002174 <hall_to_angle>:
        .w1 = 1.0f,
    },
};

Result hall_to_angle(uint8_t hall, volatile uint16_t *angle)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	460b      	mov	r3, r1
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	3b01      	subs	r3, #1
 8002186:	2b05      	cmp	r3, #5
 8002188:	d827      	bhi.n	80021da <hall_to_angle+0x66>
 800218a:	a201      	add	r2, pc, #4	@ (adr r2, 8002190 <hall_to_angle+0x1c>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021c1 	.word	0x080021c1
 8002194:	080021b1 	.word	0x080021b1
 8002198:	080021b9 	.word	0x080021b9
 800219c:	080021d1 	.word	0x080021d1
 80021a0:	080021c9 	.word	0x080021c9
 80021a4:	080021a9 	.word	0x080021a9
    {
        case 6:
        {
            *angle = 0;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	801a      	strh	r2, [r3, #0]
            break;
 80021ae:	e01d      	b.n	80021ec <hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 60;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	223c      	movs	r2, #60	@ 0x3c
 80021b4:	801a      	strh	r2, [r3, #0]
            break;
 80021b6:	e019      	b.n	80021ec <hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 120;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2278      	movs	r2, #120	@ 0x78
 80021bc:	801a      	strh	r2, [r3, #0]
            break;
 80021be:	e015      	b.n	80021ec <hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 180;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	22b4      	movs	r2, #180	@ 0xb4
 80021c4:	801a      	strh	r2, [r3, #0]
            break;
 80021c6:	e011      	b.n	80021ec <hall_to_angle+0x78>
        }
        case 5:
        {
            *angle = 240;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	22f0      	movs	r2, #240	@ 0xf0
 80021cc:	801a      	strh	r2, [r3, #0]
            break;
 80021ce:	e00d      	b.n	80021ec <hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 300;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021d6:	801a      	strh	r2, [r3, #0]
            break;
 80021d8:	e008      	b.n	80021ec <hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	461a      	mov	r2, r3
 80021de:	2300      	movs	r3, #0
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	6053      	str	r3, [r2, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2207      	movs	r2, #7
 80021e8:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 80021ea:	e005      	b.n	80021f8 <hall_to_angle+0x84>
    return RESULT_OK(NULL);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
}
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	3724      	adds	r7, #36	@ 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	0000      	movs	r0, r0
	...

08002208 <CLARKE_run_ideal>:
#include "motor/clarke.h"

Result CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    clarke->Alpha = clarke->As;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	edd3 7a01 	vldr	s15, [r3, #4]
 8002226:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	ee17 0a90 	vmov	r0, s15
 8002232:	f7fe f959 	bl	80004e8 <__aeabi_f2d>
 8002236:	a30c      	add	r3, pc, #48	@ (adr r3, 8002268 <CLARKE_run_ideal+0x60>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f9ac 	bl	8000598 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fc56 	bl	8000af8 <__aeabi_d2f>
 800224c:	4602      	mov	r2, r0
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	611a      	str	r2, [r3, #16]
    return RESULT_OK(NULL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
}
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	45903342 	.word	0x45903342
 800226c:	3fe279a7 	.word	0x3fe279a7

08002270 <pos_calculate>:
#include "motor/it_hall.h"
#include "main.h"

// Thread - hallExti - exit
static inline Result pos_calculate(MotorParameter *motor)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
    float htim_cnt = (float)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228a:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->rpm_fbk_hall = 100000000.0f / htim_cnt;
 8002298:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002300 <pos_calculate+0x90>
 800229c:	ed97 7a05 	vldr	s14, [r7, #20]
 80022a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_42BLF01_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (htim_cnt * (MOTOR_42BLF01_POLE / 2))) / 6 / MOTOR_42BLF01_GEAR;
 80022aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002304 <pos_calculate+0x94>
 80022ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022be:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80022c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022c6:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002308 <pos_calculate+0x98>
 80022ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    // 單次PWM中斷時的角度變化 50us*60/(0.1us*CNT)
    motor->pwm_per_it_angle_itpl = 30000.0f / htim_cnt ;
 80022d4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800230c <pos_calculate+0x9c>
 80022d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80022dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104

    return RESULT_OK(NULL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	605a      	str	r2, [r3, #4]
}
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	4cbebc20 	.word	0x4cbebc20
 8002304:	4ab71b00 	.word	0x4ab71b00
 8002308:	408ccccd 	.word	0x408ccccd
 800230c:	46ea6000 	.word	0x46ea6000

08002310 <motor_hall_update>:

Result motor_hall_update(MotorParameter *motor)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
    motor->exti_hall_cnt++;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 8002320:	b29b      	uxth	r3, r3
 8002322:	3301      	adds	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
    uint8_t hall_last = motor->exti_hall_curt;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 8002332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	8a12      	ldrh	r2, [r2, #16]
 8002340:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <motor_hall_update+0x3a>
 8002346:	2204      	movs	r2, #4
 8002348:	e000      	b.n	800234c <motor_hall_update+0x3c>
 800234a:	2200      	movs	r2, #0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	8a49      	ldrh	r1, [r1, #18]
 8002356:	400b      	ands	r3, r1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <motor_hall_update+0x50>
 800235c:	2302      	movs	r3, #2
 800235e:	e000      	b.n	8002362 <motor_hall_update+0x52>
 8002360:	2300      	movs	r3, #0
 8002362:	4313      	orrs	r3, r2
 8002364:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	6912      	ldr	r2, [r2, #16]
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	8a89      	ldrh	r1, [r1, #20]
 8002370:	400a      	ands	r2, r1
 8002372:	2a00      	cmp	r2, #0
 8002374:	d001      	beq.n	800237a <motor_hall_update+0x6a>
 8002376:	2201      	movs	r2, #1
 8002378:	e000      	b.n	800237c <motor_hall_update+0x6c>
 800237a:	2200      	movs	r2, #0
    uint8_t hall_current =
 800237c:	4313      	orrs	r3, r2
 800237e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    motor->exti_hall_last = hall_last;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002388:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    motor->exti_hall_curt = hall_current;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002392:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
    if (hall_current == 0 || hall_current == 7)
 8002396:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <motor_hall_update+0x96>
 800239e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023a2:	2b07      	cmp	r3, #7
 80023a4:	d105      	bne.n	80023b2 <motor_hall_update+0xa2>
    {
        return RESULT_ERROR(RES_ERR_FAIL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2300      	movs	r3, #0
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	6053      	str	r3, [r2, #4]
        // rotated
        motor->hall_angle_acc = 0;
        motor->pwm_it_angle_acc = 0;
    }
    return RESULT_OK(NULL);
}
 80023b0:	e044      	b.n	800243c <motor_hall_update+0x12c>
    RESULT_CHECK_RET_RES(hall_to_angle(hall_current, &motor->exti_hall_curt_d));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f103 02f2 	add.w	r2, r3, #242	@ 0xf2
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fed7 	bl	8002174 <hall_to_angle>
 80023c6:	7b3b      	ldrb	r3, [r7, #12]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <motor_hall_update+0xdc>
 80023d2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80023d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <motor_hall_update+0x134>)
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	461a      	mov	r2, r3
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80023ea:	e027      	b.n	800243c <motor_hall_update+0x12c>
    uint16_t expected = (!motor->reverse)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <motor_hall_update+0xf6>
        ? hall_seq_clw[hall_last]
 80023fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002400:	4a11      	ldr	r2, [pc, #68]	@ (8002448 <motor_hall_update+0x138>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	e003      	b.n	800240e <motor_hall_update+0xfe>
        : hall_seq_ccw[hall_last];
 8002406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <motor_hall_update+0x13c>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
    uint16_t expected = (!motor->reverse)
 800240e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (hall_current == expected)
 8002410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002414:	b29b      	uxth	r3, r3
 8002416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002418:	429a      	cmp	r2, r3
 800241a:	d109      	bne.n	8002430 <motor_hall_update+0x120>
        motor->hall_angle_acc = 0;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        motor->pwm_it_angle_acc = 0;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    return RESULT_OK(NULL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
}
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	3728      	adds	r7, #40	@ 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200018a0 	.word	0x200018a0
 8002448:	0800cc3c 	.word	0x0800cc3c
 800244c:	0800cc44 	.word	0x0800cc44

08002450 <motor_hall_exti>:

// Thread - hallExti - entrance
Result motor_hall_exti(MotorParameter *motor)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    RESULT_CHECK_RET_RES(motor_hall_update(motor));
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff55 	bl	8002310 <motor_hall_update>
 8002466:	7c3b      	ldrb	r3, [r7, #16]
 8002468:	f083 0301 	eor.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <motor_hall_exti+0x3c>
 8002472:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <motor_hall_exti+0x84>)
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	461a      	mov	r2, r3
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002486:	e882 0003 	stmia.w	r2, {r0, r1}
    RESULT_CHECK_RET_RES(pos_calculate(motor));
    return RESULT_OK(NULL);
}
 800248a:	e01e      	b.n	80024ca <motor_hall_exti+0x7a>
    RESULT_CHECK_RET_RES(pos_calculate(motor));
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff feec 	bl	8002270 <pos_calculate>
 8002498:	7a3b      	ldrb	r3, [r7, #8]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <motor_hall_exti+0x6e>
 80024a4:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <motor_hall_exti+0x84>)
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80024bc:	e005      	b.n	80024ca <motor_hall_exti+0x7a>
    return RESULT_OK(NULL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
}
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200018a0 	.word	0x200018a0

080024d8 <pwm_setup>:
#include "motor/trigonometric.h"
#include "analog/adc1/main.h"

// Thread - timer - init
Result pwm_setup(const MotorParameter *motor)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    const MotorConst* const_h = &motor->const_h;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	617b      	str	r3, [r7, #20]
    HAL_TIM_Base_Start_IT(const_h->htimx[0]);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 f9f4 	bl	80078d8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(const_h->htimx[0], const_h->TIM_CHANNEL_x[0]);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f005 fb04 	bl	8007b08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(const_h->htimx[1], const_h->TIM_CHANNEL_x[1]);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f005 fafc 	bl	8007b08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(const_h->htimx[2], const_h->TIM_CHANNEL_x[2]);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f005 faf4 	bl	8007b08 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(const_h->htimx[0], const_h->TIM_CHANNEL_x[0]);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f006 faaa 	bl	8008a84 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(const_h->htimx[1], const_h->TIM_CHANNEL_x[1]);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f006 faa2 	bl	8008a84 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(const_h->htimx[2], const_h->TIM_CHANNEL_x[2]);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f006 fa9a 	bl	8008a84 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start(const_h->ELE_htimx);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	4618      	mov	r0, r3
 8002556:	f005 f95d 	bl	8007814 <HAL_TIM_Base_Start>
    return RESULT_OK(NULL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
}
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <motor_stop_check>:

// Thread - timer - 1
static inline Result motor_stop_check(MotorParameter *motor)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 800257e:	75fb      	strb	r3, [r7, #23]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8002586:	461a      	mov	r2, r3
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	4413      	add	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	b29b      	uxth	r3, r3
 8002594:	4413      	add	r3, r2
 8002596:	82bb      	strh	r3, [r7, #20]
    if(hall_total == motor->pwm_hall_acc)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	@ 0xfe
 800259e:	b29b      	uxth	r3, r3
 80025a0:	8aba      	ldrh	r2, [r7, #20]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d120      	bne.n	80025e8 <motor_stop_check+0x7a>
    {
        motor->spin_stop_acc++;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80025ac:	3301      	adds	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
        if (motor->spin_stop_acc >= 3000)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80025bc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d915      	bls.n	80025f0 <motor_stop_check+0x82>
        {
            motor->spin_stop_acc = 0;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	679a      	str	r2, [r3, #120]	@ 0x78
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	655a      	str	r2, [r3, #84]	@ 0x54
            motor->pi_Iq.Out=0;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80025e6:	e003      	b.n	80025f0 <motor_stop_check+0x82>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    }
    motor->pwm_hall_acc = hall_total;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	8aba      	ldrh	r2, [r7, #20]
 80025f4:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
    motor->pwm_hall_last = hall_current;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	7dfa      	ldrb	r2, [r7, #23]
 80025fc:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
    return RESULT_OK(NULL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	605a      	str	r2, [r3, #4]
}
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <motor_pi_speed>:

static inline Result motor_pi_speed(MotorParameter *motor)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
    // 計算 速度PI (每100個PWM中斷)
    // if(Speed.Fbk>0 && stop_flag==0)
    PI_run(&motor->pi_speed);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8002628:	463b      	mov	r3, r7
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fef3 	bl	8003418 <PI_run>
    motor->pi_speed_cmd = CLAMP((motor->pi_speed_cmd + motor->pi_speed.Out), 0.2, 0.15);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	ee17 0a90 	vmov	r0, s15
 8002646:	f7fd ff4f 	bl	80004e8 <__aeabi_f2d>
 800264a:	a31f      	add	r3, pc, #124	@ (adr r3, 80026c8 <motor_pi_speed+0xb0>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fe fa32 	bl	8000ab8 <__aeabi_dcmpgt>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <motor_pi_speed+0x48>
 800265a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80026c0 <motor_pi_speed+0xa8>
 800265e:	e01e      	b.n	800269e <motor_pi_speed+0x86>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800266c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002670:	ee17 0a90 	vmov	r0, s15
 8002674:	f7fd ff38 	bl	80004e8 <__aeabi_f2d>
 8002678:	a30f      	add	r3, pc, #60	@ (adr r3, 80026b8 <motor_pi_speed+0xa0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe f9fd 	bl	8000a7c <__aeabi_dcmplt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <motor_pi_speed+0x76>
 8002688:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80026c4 <motor_pi_speed+0xac>
 800268c:	e007      	b.n	800269e <motor_pi_speed+0x86>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800269a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    // else if(Speed.Fbk==0 | stop_flag==1)
    //     motor->pi_speed_cmd=0.18;
    return RESULT_OK(NULL);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
}
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	33333333 	.word	0x33333333
 80026bc:	3fc33333 	.word	0x3fc33333
 80026c0:	3e4ccccd 	.word	0x3e4ccccd
 80026c4:	3e19999a 	.word	0x3e19999a
 80026c8:	9999999a 	.word	0x9999999a
 80026cc:	3fc99999 	.word	0x3fc99999

080026d0 <motor_vec_clarke>:

// Thread - timer - 3
static const float adc_to_current = (3.3f / 4095.0f) / 0.185f; // ~ 0.004356 A/LSB
static inline Result motor_vec_clarke(MotorParameter *motor)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
    // I alpha = 2/3Ia - 1/3Ib - 1/3Ic
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    float adc_zero = (float)(motor->adc_u + motor->adc_v + motor->adc_w) / 3 ;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 80026e8:	4413      	add	r3, r2
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f8b2 2112 	ldrh.w	r2, [r2, #274]	@ 0x112
 80026f0:	4413      	add	r3, r2
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fa:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80026fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]
    motor->clarke.As = ((float)motor->adc_u - adc_zero) * adc_to_current;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002714:	edd7 7a07 	vldr	s15, [r7, #28]
 8002718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002798 <motor_vec_clarke+0xc8>
 8002720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
    motor->clarke.Bs = ((float)motor->adc_v - adc_zero) * adc_to_current;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002738:	edd7 7a07 	vldr	s15, [r7, #28]
 800273c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002740:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002798 <motor_vec_clarke+0xc8>
 8002744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    motor->clarke.Cs = ((float)motor->adc_w - adc_zero) * adc_to_current;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800275c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002764:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002798 <motor_vec_clarke+0xc8>
 8002768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

    // PeriodStateVar_w += ( ( (float)motor->clarke.Cs - (float)PeriodFilter_w)*(float)PeriodKFilter );
    // PeriodFilter_w = (float)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;
		
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 8002778:	463b      	mov	r3, r7
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fd43 	bl	8002208 <CLARKE_run_ideal>

    return RESULT_OK(NULL);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
}
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	3b8ebcd0 	.word	0x3b8ebcd0

0800279c <motor_vec_park>:

// Thread - timer - 4
#define FOC_CAL_DEG_ADD 270.0f
static inline Result motor_vec_park(MotorParameter *motor)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	ed93 7a41 	vldr	s14, [r3, #260]	@ 0x104
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
    float foc_cal_deg = motor->exti_hall_curt_d + motor->pwm_it_angle_acc;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	edc7 7a07 	vstr	s15, [r7, #28]
    if      (foc_cal_deg >= 360.0f) foc_cal_deg -= 360.0f;
 80027da:	edd7 7a07 	vldr	s15, [r7, #28]
 80027de:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80028ac <motor_vec_park+0x110>
 80027e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ea:	db08      	blt.n	80027fe <motor_vec_park+0x62>
 80027ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80028ac <motor_vec_park+0x110>
 80027f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027f8:	edc7 7a07 	vstr	s15, [r7, #28]
 80027fc:	e00e      	b.n	800281c <motor_vec_park+0x80>
    else if (foc_cal_deg <    0.0f) foc_cal_deg += 360.0f;
 80027fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	d507      	bpl.n	800281c <motor_vec_park+0x80>
 800280c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002810:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80028ac <motor_vec_park+0x110>
 8002814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002818:	edc7 7a07 	vstr	s15, [r7, #28]
    foc_cal_deg += FOC_CAL_DEG_ADD;
 800281c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002820:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80028b0 <motor_vec_park+0x114>
 8002824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002828:	edc7 7a07 	vstr	s15, [r7, #28]

    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    motor->park.Beta = motor->clarke.Beta;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

    motor->park.Sine = TableSearch_sin(foc_cal_deg * DEG_TO_RAD);
 8002844:	edd7 7a07 	vldr	s15, [r7, #28]
 8002848:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80028b4 <motor_vec_park+0x118>
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	f000 fed0 	bl	80035f8 <TableSearch_sin>
 8002858:	eef0 7a40 	vmov.f32	s15, s0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    motor->park.Cosine = TableSearch_sin((foc_cal_deg + 90) * DEG_TO_RAD);
 8002862:	edd7 7a07 	vldr	s15, [r7, #28]
 8002866:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80028b8 <motor_vec_park+0x11c>
 800286a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800286e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80028b4 <motor_vec_park+0x118>
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	eeb0 0a67 	vmov.f32	s0, s15
 800287a:	f000 febd 	bl	80035f8 <TableSearch_sin>
 800287e:	eef0 7a40 	vmov.f32	s15, s0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
    
    PARK_run(&motor->park);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800288e:	463b      	mov	r3, r7
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fd4a 	bl	800332c <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float)motor->park.Qs - (float)PeriodFilter_iq)*(float)PeriodKFilter );
    // PeriodFilter_iq = (float)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
}
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	43b40000 	.word	0x43b40000
 80028b0:	43870000 	.word	0x43870000
 80028b4:	3c8efa35 	.word	0x3c8efa35
 80028b8:	42b40000 	.word	0x42b40000
 80028bc:	00000000 	.word	0x00000000

080028c0 <motor_vec_pi_id_iq>:

// Thread - timer - 5
#define IQ_REF_ADD 0
static inline Result motor_vec_pi_id_iq(MotorParameter *motor)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80028d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd6f      	ble.n	80029ba <motor_vec_pi_id_iq+0xfa>
    {
        motor->pi_Id.Ref = 0;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        motor->pi_Id.Fbk = motor->park.Ds;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f103 02bc 	add.w	r2, r3, #188	@ 0xbc
 80028f6:	463b      	mov	r3, r7
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd8c 	bl	8003418 <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = CLAMP((motor->pi_Id.Out), 0.01, -0.01);//限制最大與最小參數
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdee 	bl	80004e8 <__aeabi_f2d>
 800290c:	a338      	add	r3, pc, #224	@ (adr r3, 80029f0 <motor_vec_pi_id_iq+0x130>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	f7fe f8d1 	bl	8000ab8 <__aeabi_dcmpgt>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <motor_vec_pi_id_iq+0x60>
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <motor_vec_pi_id_iq+0x120>)
 800291e:	e012      	b.n	8002946 <motor_vec_pi_id_iq+0x86>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fdde 	bl	80004e8 <__aeabi_f2d>
 800292c:	a32a      	add	r3, pc, #168	@ (adr r3, 80029d8 <motor_vec_pi_id_iq+0x118>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	f7fe f8a3 	bl	8000a7c <__aeabi_dcmplt>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <motor_vec_pi_id_iq+0x80>
 800293c:	4b29      	ldr	r3, [pc, #164]	@ (80029e4 <motor_vec_pi_id_iq+0x124>)
 800293e:	e002      	b.n	8002946 <motor_vec_pi_id_iq+0x86>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
        // motor->pi_Iq.Fbk = motor->park.Qs;
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002952:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80029e8 <motor_vec_pi_id_iq+0x128>
 8002956:	ee77 7a87 	vadd.f32	s15, s15, s14
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8002972:	463b      	mov	r3, r7
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fd4e 	bl	8003418 <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = CLAMP(motor->pi_Iq.Out, 0.75f, 0.0f);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002982:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	dd02      	ble.n	8002996 <motor_vec_pi_id_iq+0xd6>
 8002990:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8002994:	e00d      	b.n	80029b2 <motor_vec_pi_id_iq+0xf2>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800299c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	d502      	bpl.n	80029ac <motor_vec_pi_id_iq+0xec>
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e002      	b.n	80029b2 <motor_vec_pi_id_iq+0xf2>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029b8:	e003      	b.n	80029c2 <motor_vec_pi_id_iq+0x102>

    }
    else
    {
        motor->pi_Iq.Out = 0.18;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <motor_vec_pi_id_iq+0x12c>)
 80029be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }
    return RESULT_OK(NULL);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
}
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	47ae147b 	.word	0x47ae147b
 80029dc:	bf847ae1 	.word	0xbf847ae1
 80029e0:	3c23d70a 	.word	0x3c23d70a
 80029e4:	bc23d70a 	.word	0xbc23d70a
 80029e8:	00000000 	.word	0x00000000
 80029ec:	3e3851ec 	.word	0x3e3851ec
 80029f0:	47ae147b 	.word	0x47ae147b
 80029f4:	3f847ae1 	.word	0x3f847ae1

080029f8 <motor_vec_ipark>:

// Thread - timer - 6
static inline Result motor_vec_ipark(MotorParameter *motor)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)

    //限制最大與最小參數
    // ? motor->ipark.Vdref = CLAMP((motor->ipark.Vdref += motor->pi_Id.Out), 0.06, -0.06);
    motor->ipark.Vdref = CLAMP(motor->pi_Id.Out, 0.06, -0.06);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd6d 	bl	80004e8 <__aeabi_f2d>
 8002a0e:	a326      	add	r3, pc, #152	@ (adr r3, 8002aa8 <motor_vec_ipark+0xb0>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fe f850 	bl	8000ab8 <__aeabi_dcmpgt>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <motor_vec_ipark+0x2a>
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <motor_vec_ipark+0xa8>)
 8002a20:	e012      	b.n	8002a48 <motor_vec_ipark+0x50>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd5d 	bl	80004e8 <__aeabi_f2d>
 8002a2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002a98 <motor_vec_ipark+0xa0>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fe f822 	bl	8000a7c <__aeabi_dcmplt>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <motor_vec_ipark+0x4a>
 8002a3e:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <motor_vec_ipark+0xac>)
 8002a40:	e002      	b.n	8002a48 <motor_vec_ipark+0x50>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150

    motor->ipark.Vqref = motor->pi_Iq.Out;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154

    motor->ipark.Sine = motor->park.Sine;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    motor->ipark.Cosine = motor->park.Cosine;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    IPARK_run(&motor->ipark);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8002a78:	463b      	mov	r3, r7
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fc90 	bl	80033a2 <IPARK_run>
    return RESULT_OK(NULL);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]
}
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	eb851eb8 	.word	0xeb851eb8
 8002a9c:	bfaeb851 	.word	0xbfaeb851
 8002aa0:	3d75c28f 	.word	0x3d75c28f
 8002aa4:	bd75c28f 	.word	0xbd75c28f
 8002aa8:	eb851eb8 	.word	0xeb851eb8
 8002aac:	3faeb851 	.word	0x3faeb851

08002ab0 <motor_vec_svgen>:

static inline Result motor_vec_svgen(MotorParameter *motor)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
    // svgen  //5us
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    motor->svgendq.Ubeta = motor->ipark.Beta;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    SVGEN_run(&motor->svgendq);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f503 72b0 	add.w	r2, r3, #352	@ 0x160
 8002ad8:	463b      	mov	r3, r7
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fd1d 	bl	800351c <SVGEN_run>

    motor->electric_theta_rad = TableSearch_atan2(motor->ipark.Beta, motor->ipark.Alpha);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	ed93 7a51 	vldr	s14, [r3, #324]	@ 0x144
 8002aee:	eef0 0a47 	vmov.f32	s1, s14
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	f000 fe31 	bl	800375c <TableSearch_atan2>
 8002afa:	eef0 7a40 	vmov.f32	s15, s0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    while (motor->electric_theta_rad < 0.0f) motor->electric_theta_rad += MUL_2_PI;
 8002b04:	e009      	b.n	8002b1a <motor_vec_svgen+0x6a>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 8002b0c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002b9c <motor_vec_svgen+0xec>
 8002b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 8002b20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	d4ed      	bmi.n	8002b06 <motor_vec_svgen+0x56>

    float electric_theta_deg = motor->electric_theta_rad * RAD_TO_DEG;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 8002b30:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002ba0 <motor_vec_svgen+0xf0>
 8002b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b38:	edc7 7a07 	vstr	s15, [r7, #28]
    while (electric_theta_deg >= 360.0f) electric_theta_deg -= 360.0f;
 8002b3c:	e007      	b.n	8002b4e <motor_vec_svgen+0x9e>
 8002b3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b42:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002ba4 <motor_vec_svgen+0xf4>
 8002b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b4a:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b52:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002ba4 <motor_vec_svgen+0xf4>
 8002b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	daee      	bge.n	8002b3e <motor_vec_svgen+0x8e>
    while (electric_theta_deg <    0.0f) electric_theta_deg += 360.0f;
 8002b60:	e007      	b.n	8002b72 <motor_vec_svgen+0xc2>
 8002b62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b66:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002ba4 <motor_vec_svgen+0xf4>
 8002b6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b6e:	edc7 7a07 	vstr	s15, [r7, #28]
 8002b72:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	d4f0      	bmi.n	8002b62 <motor_vec_svgen+0xb2>
    motor->electric_theta_deg = electric_theta_deg;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    return RESULT_OK(NULL);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	605a      	str	r2, [r3, #4]
}
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40c90fdb 	.word	0x40c90fdb
 8002ba0:	42652ee1 	.word	0x42652ee1
 8002ba4:	43b40000 	.word	0x43b40000

08002ba8 <motor_vec_vref>:

static inline Result motor_vec_vref(MotorParameter *motor)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    //     else
    //         motor->svpwm_Vref=0;
    //     }
    // else
        float Vref = sqrt(
            motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 8002bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
            + motor->svgendq.Ubeta * motor->svgendq.Ubeta);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	edd3 6a59 	vldr	s13, [r3, #356]	@ 0x164
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
        float Vref = sqrt(
 8002bd6:	ee17 0a90 	vmov	r0, s15
 8002bda:	f7fd fc85 	bl	80004e8 <__aeabi_f2d>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	ec43 2b10 	vmov	d0, r2, r3
 8002be6:	f009 febd 	bl	800c964 <sqrt>
 8002bea:	ec53 2b10 	vmov	r2, r3, d0
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd ff81 	bl	8000af8 <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	617b      	str	r3, [r7, #20]
        motor->svpwm_Vref = Vref;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    //		motor->electric_theta_deg      =  (int)motor_angle % 60;
    
    /*
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->electric_theta_deg      =  (int)cmd_deg % 60;*/
    return RESULT_OK(NULL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
}
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <motor_vec_svpwm>:

// Thread - timer - 7
static inline Result motor_vec_svpwm(MotorParameter *motor)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	ed2d 8b02 	vpush	{d8}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    float T1, T2;
    float theta_in_sector = motor->electric_theta_rad;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002c2c:	61fb      	str	r3, [r7, #28]
    while (theta_in_sector >= DIV_PI_3) theta_in_sector -= DIV_PI_3;
 8002c2e:	e007      	b.n	8002c40 <motor_vec_svpwm+0x28>
 8002c30:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c34:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 8002f40 <motor_vec_svpwm+0x328>
 8002c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c3c:	edc7 7a07 	vstr	s15, [r7, #28]
 8002c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c44:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002f40 <motor_vec_svpwm+0x328>
 8002c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	daee      	bge.n	8002c30 <motor_vec_svpwm+0x18>
    // ? CHECK
    if(!motor->reverse)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d020      	beq.n	8002ca4 <motor_vec_svpwm+0x8c>
    {
        T1 = motor->svpwm_Vref * TableSearch_sin(DIV_PI_3 - theta_in_sector);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	ed93 8a60 	vldr	s16, [r3, #384]	@ 0x180
 8002c68:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8002f40 <motor_vec_svpwm+0x328>
 8002c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c74:	eeb0 0a67 	vmov.f32	s0, s15
 8002c78:	f000 fcbe 	bl	80035f8 <TableSearch_sin>
 8002c7c:	eef0 7a40 	vmov.f32	s15, s0
 8002c80:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = motor->svpwm_Vref * TableSearch_sin(theta_in_sector);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	ed93 8a60 	vldr	s16, [r3, #384]	@ 0x180
 8002c8e:	ed97 0a07 	vldr	s0, [r7, #28]
 8002c92:	f000 fcb1 	bl	80035f8 <TableSearch_sin>
 8002c96:	eef0 7a40 	vmov.f32	s15, s0
 8002c9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c9e:	edc7 7a08 	vstr	s15, [r7, #32]
 8002ca2:	e01f      	b.n	8002ce4 <motor_vec_svpwm+0xcc>
    }
    else
    {
        T1 = motor->svpwm_Vref * TableSearch_sin(theta_in_sector);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	ed93 8a60 	vldr	s16, [r3, #384]	@ 0x180
 8002caa:	ed97 0a07 	vldr	s0, [r7, #28]
 8002cae:	f000 fca3 	bl	80035f8 <TableSearch_sin>
 8002cb2:	eef0 7a40 	vmov.f32	s15, s0
 8002cb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002cba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = motor->svpwm_Vref * TableSearch_sin(DIV_PI_3 - theta_in_sector);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	ed93 8a60 	vldr	s16, [r3, #384]	@ 0x180
 8002cc4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002f40 <motor_vec_svpwm+0x328>
 8002cc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd4:	f000 fc90 	bl	80035f8 <TableSearch_sin>
 8002cd8:	eef0 7a40 	vmov.f32	s15, s0
 8002cdc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002ce0:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    //------------------------------------
    float T0div2 = (1 - (T1 + T2)) / 2;
 8002ce4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ce8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d00:	edc7 7a06 	vstr	s15, [r7, #24]

    switch(motor->svgendq.Sector)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f8b3 3174 	ldrh.w	r3, [r3, #372]	@ 0x174
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	f200 80b1 	bhi.w	8002e74 <motor_vec_svpwm+0x25c>
 8002d12:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <motor_vec_svpwm+0x100>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d67 	.word	0x08002d67
 8002d1c:	08002e3f 	.word	0x08002e3f
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002dd3 	.word	0x08002dd3
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002e09 	.word	0x08002e09
    // switch(my_hall_signal_in_decimal)
    {
        case 3://120~179 2 acb
        {
            motor->pwm_duty_u = T0div2 + T1 + T2;
 8002d30:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1;
 8002d52:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            // Ta = T0div2;
            // Tb = T0div2+T1+T2;
            // Tc = T0div2+T2;
            break;
 8002d64:	e086      	b.n	8002e74 <motor_vec_svpwm+0x25c>
        }
        case 1://180~239 3 abc
        {
            motor->pwm_duty_u = T0div2 + T1 + T2;
 8002d66:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T2;
 8002d80:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d84:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            // Ta = T0div2;
            // Tb = T0div2+T1;
            // Tc = T0div2+T1+T2;
            break;
 8002d9a:	e06b      	b.n	8002e74 <motor_vec_svpwm+0x25c>
        }
        case 5://240~299 1    bac
        {
            motor->pwm_duty_u = T0div2 + T1;
 8002d9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002da0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002dae:	ed97 7a06 	vldr	s14, [r7, #24]
 8002db2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dba:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            // Ta = T0div2+T2;
            // Tb = T0div2;
            // Tc = T0div2+T1+T2;
            break;
 8002dd0:	e050      	b.n	8002e74 <motor_vec_svpwm+0x25c>
        }
        case 4://300~359 5  bca
        {
            motor->pwm_duty_u = T0div2;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002dda:	ed97 7a06 	vldr	s14, [r7, #24]
 8002dde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T2;
 8002df4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002df8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            // Ta = T0div2+T1+T2;
            // Tb = T0div2;
            // Tc = T0div2+T1;
            break;
 8002e06:	e035      	b.n	8002e74 <motor_vec_svpwm+0x25c>
        }
        case 6://0~59 4 cba
        {
            motor->pwm_duty_u = T0div2;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1;
 8002e10:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1 + T2;
 8002e22:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e26:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            // Ta = T0div2+T1+T2;
            // Tb = T0div2+T2;
            // Tc = T0div2;
            break;
 8002e3c:	e01a      	b.n	8002e74 <motor_vec_svpwm+0x25c>
        }
        case 2://60~119 6 cba
        {
            motor->pwm_duty_u = T0div2 + T2;
 8002e3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e42:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1 + T2;
 8002e58:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            // Ta = T0div2+T1;
            // Tb = T0div2+T1+T2;
            // Tc = T0div2;
            break;
 8002e72:	bf00      	nop
        }
    }
    const MotorConst* const_h = &motor->const_h;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(const_h->htimx[0], const_h->TIM_CHANNEL_x[0], (uint32_t)((float)TIM1_ARR * motor->pwm_duty_u));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10f      	bne.n	8002ea0 <motor_vec_svpwm+0x288>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002e86:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e98:	ee17 2a90 	vmov	r2, s15
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9e:	e062      	b.n	8002f66 <motor_vec_svpwm+0x34e>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d10f      	bne.n	8002ec8 <motor_vec_svpwm+0x2b0>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002eae:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec0:	ee17 3a90 	vmov	r3, s15
 8002ec4:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ec6:	e04e      	b.n	8002f66 <motor_vec_svpwm+0x34e>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d10f      	bne.n	8002ef0 <motor_vec_svpwm+0x2d8>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002ed6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee8:	ee17 3a90 	vmov	r3, s15
 8002eec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002eee:	e03a      	b.n	8002f66 <motor_vec_svpwm+0x34e>
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d10f      	bne.n	8002f18 <motor_vec_svpwm+0x300>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002efe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f10:	ee17 3a90 	vmov	r3, s15
 8002f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f16:	e026      	b.n	8002f66 <motor_vec_svpwm+0x34e>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d113      	bne.n	8002f48 <motor_vec_svpwm+0x330>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002f26:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f38:	ee17 3a90 	vmov	r3, s15
 8002f3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f3e:	e012      	b.n	8002f66 <motor_vec_svpwm+0x34e>
 8002f40:	3f860a92 	.word	0x3f860a92
 8002f44:	437a0000 	.word	0x437a0000
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002f4e:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f60:	ee17 3a90 	vmov	r3, s15
 8002f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(const_h->htimx[1], const_h->TIM_CHANNEL_x[1], (uint32_t)((float)TIM1_ARR * motor->pwm_duty_v));
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <motor_vec_svpwm+0x376>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002f74:	ed1f 7a0d 	vldr	s14, [pc, #-52]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f86:	ee17 2a90 	vmov	r2, s15
 8002f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f8c:	e05e      	b.n	800304c <motor_vec_svpwm+0x434>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d10f      	bne.n	8002fb6 <motor_vec_svpwm+0x39e>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002f9c:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fae:	ee17 3a90 	vmov	r3, s15
 8002fb2:	6393      	str	r3, [r2, #56]	@ 0x38
 8002fb4:	e04a      	b.n	800304c <motor_vec_svpwm+0x434>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d10f      	bne.n	8002fde <motor_vec_svpwm+0x3c6>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002fc4:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd6:	ee17 3a90 	vmov	r3, s15
 8002fda:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002fdc:	e036      	b.n	800304c <motor_vec_svpwm+0x434>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d10f      	bne.n	8003006 <motor_vec_svpwm+0x3ee>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002fec:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8002ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffe:	ee17 3a90 	vmov	r3, s15
 8003002:	6413      	str	r3, [r2, #64]	@ 0x40
 8003004:	e022      	b.n	800304c <motor_vec_svpwm+0x434>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	2b10      	cmp	r3, #16
 800300c:	d10f      	bne.n	800302e <motor_vec_svpwm+0x416>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8003014:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8003018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003026:	ee17 3a90 	vmov	r3, s15
 800302a:	6493      	str	r3, [r2, #72]	@ 0x48
 800302c:	e00e      	b.n	800304c <motor_vec_svpwm+0x434>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8003034:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8003038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003046:	ee17 3a90 	vmov	r3, s15
 800304a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(const_h->htimx[2], const_h->TIM_CHANNEL_x[2], (uint32_t)((float)TIM1_ARR * motor->pwm_duty_w));
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <motor_vec_svpwm+0x45c>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 800305a:	ed1f 7a46 	vldr	s14, [pc, #-280]	@ 8002f44 <motor_vec_svpwm+0x32c>
 800305e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306c:	ee17 2a90 	vmov	r2, s15
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
 8003072:	e05e      	b.n	8003132 <motor_vec_svpwm+0x51a>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	2b04      	cmp	r3, #4
 800307a:	d10f      	bne.n	800309c <motor_vec_svpwm+0x484>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8003082:	ed1f 7a50 	vldr	s14, [pc, #-320]	@ 8002f44 <motor_vec_svpwm+0x32c>
 8003086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003094:	ee17 3a90 	vmov	r3, s15
 8003098:	6393      	str	r3, [r2, #56]	@ 0x38
 800309a:	e04a      	b.n	8003132 <motor_vec_svpwm+0x51a>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10f      	bne.n	80030c4 <motor_vec_svpwm+0x4ac>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 80030aa:	ed1f 7a5a 	vldr	s14, [pc, #-360]	@ 8002f44 <motor_vec_svpwm+0x32c>
 80030ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030bc:	ee17 3a90 	vmov	r3, s15
 80030c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80030c2:	e036      	b.n	8003132 <motor_vec_svpwm+0x51a>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d10f      	bne.n	80030ec <motor_vec_svpwm+0x4d4>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 80030d2:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 8002f44 <motor_vec_svpwm+0x32c>
 80030d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ea:	e022      	b.n	8003132 <motor_vec_svpwm+0x51a>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d10f      	bne.n	8003114 <motor_vec_svpwm+0x4fc>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 80030fa:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8002f44 <motor_vec_svpwm+0x32c>
 80030fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800310c:	ee17 3a90 	vmov	r3, s15
 8003110:	6493      	str	r3, [r2, #72]	@ 0x48
 8003112:	e00e      	b.n	8003132 <motor_vec_svpwm+0x51a>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 800311a:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8002f44 <motor_vec_svpwm+0x32c>
 800311e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312c:	ee17 3a90 	vmov	r3, s15
 8003130:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
}
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	3728      	adds	r7, #40	@ 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	ecbd 8b02 	vpop	{d8}
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop

0800314c <motor_pwm_pulse>:
}//FOC 計算 END

// FOC 20kHz
// Thread - timer - 0
Result motor_pwm_pulse(MotorParameter *motor)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
    motor->pwm_count++;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800315c:	3301      	adds	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
    if (motor->pwm_count % 2 == 0)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d177      	bne.n	8003266 <motor_pwm_pulse+0x11a>
    {
        // ?
        if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 8003182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003186:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80032e4 <motor_pwm_pulse+0x198>
 800318a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003192:	d527      	bpl.n	80031e4 <motor_pwm_pulse+0x98>
        {
            motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	ed93 7a41 	vldr	s14, [r3, #260]	@ 0x104
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 80031a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
            motor->hall_angle_acc = CLAMP(motor->hall_angle_acc , 60, 0);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 80031b0:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80032e4 <motor_pwm_pulse+0x198>
 80031b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031bc:	dd01      	ble.n	80031c2 <motor_pwm_pulse+0x76>
 80031be:	4b4a      	ldr	r3, [pc, #296]	@ (80032e8 <motor_pwm_pulse+0x19c>)
 80031c0:	e00d      	b.n	80031de <motor_pwm_pulse+0x92>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 80031c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d502      	bpl.n	80031d8 <motor_pwm_pulse+0x8c>
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e002      	b.n	80031de <motor_pwm_pulse+0x92>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
        }
        renew_adc(motor->const_h.adc_u_id, &motor->adc_u);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f503 7287 	add.w	r2, r3, #270	@ 0x10e
 80031f0:	463b      	mov	r3, r7
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fd78 	bl	8001ce8 <renew_adc>
        renew_adc(motor->const_h.adc_v_id, &motor->adc_v);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	4619      	mov	r1, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8003204:	463b      	mov	r3, r7
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fd6e 	bl	8001ce8 <renew_adc>
        renew_adc(motor->const_h.adc_w_id, &motor->adc_w);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	4619      	mov	r1, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f503 7289 	add.w	r2, r3, #274	@ 0x112
 8003218:	463b      	mov	r3, r7
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fd64 	bl	8001ce8 <renew_adc>
        motor_vec_clarke(motor);
 8003220:	463b      	mov	r3, r7
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa53 	bl	80026d0 <motor_vec_clarke>
        motor_vec_park(motor);
 800322a:	463b      	mov	r3, r7
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fab4 	bl	800279c <motor_vec_park>
        motor_vec_pi_id_iq(motor);
 8003234:	463b      	mov	r3, r7
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fb41 	bl	80028c0 <motor_vec_pi_id_iq>
        motor_vec_ipark(motor);
 800323e:	463b      	mov	r3, r7
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fbd8 	bl	80029f8 <motor_vec_ipark>
        motor_vec_svgen(motor);
 8003248:	463b      	mov	r3, r7
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fc2f 	bl	8002ab0 <motor_vec_svgen>
        motor_vec_vref(motor);
 8003252:	463b      	mov	r3, r7
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fca6 	bl	8002ba8 <motor_vec_vref>
        motor_vec_svpwm(motor);
 800325c:	463b      	mov	r3, r7
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fcd9 	bl	8002c18 <motor_vec_svpwm>
    }
    if (motor->pwm_count % 100 == 0)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800326c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <motor_pwm_pulse+0x1a0>)
 800326e:	fba2 1203 	umull	r1, r2, r2, r3
 8003272:	0952      	lsrs	r2, r2, #5
 8003274:	2164      	movs	r1, #100	@ 0x64
 8003276:	fb01 f202 	mul.w	r2, r1, r2
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <motor_pwm_pulse+0x14a>
    {
        motor_stop_check(motor);
 8003282:	463b      	mov	r3, r7
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f971 	bl	800256e <motor_stop_check>
        motor_pi_speed(motor);
 800328c:	463b      	mov	r3, r7
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f9c1 	bl	8002618 <motor_pi_speed>
    }
    if (motor->pwm_count >= 1000)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800329c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032a0:	d316      	bcc.n	80032d0 <motor_pwm_pulse+0x184>
    {
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80032f0 <motor_pwm_pulse+0x1a4>
 80032b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
        motor->exti_hall_cnt = 0;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
        motor->pwm_count = 0;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
    }

    return RESULT_OK(NULL);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	605a      	str	r2, [r3, #4]
}
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	42700000 	.word	0x42700000
 80032e8:	42700000 	.word	0x42700000
 80032ec:	51eb851f 	.word	0x51eb851f
 80032f0:	43480000 	.word	0x43480000

080032f4 <StartMotorTask>:
#include "motor/it_hall.h"
#include "motor/it_timer.h"
#include "analog/adc1/main.h"

void StartMotorTask(void *argument)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
    motor_hall_update(&motor_0);
 80032fc:	463b      	mov	r3, r7
 80032fe:	4909      	ldr	r1, [pc, #36]	@ (8003324 <StartMotorTask+0x30>)
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f805 	bl	8002310 <motor_hall_update>
    pwm_setup(&motor_0);
 8003306:	463b      	mov	r3, r7
 8003308:	4906      	ldr	r1, [pc, #24]	@ (8003324 <StartMotorTask+0x30>)
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f8e4 	bl	80024d8 <pwm_setup>
    motor_0.pi_speed.Ref = 20.0f;
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <StartMotorTask+0x30>)
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <StartMotorTask+0x34>)
 8003314:	651a      	str	r2, [r3, #80]	@ 0x50
    motor_0.pwm_duty_u = 0.5f;
 8003316:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <StartMotorTask+0x30>)
 8003318:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800331c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    StopTask();
 8003320:	f006 fc6b 	bl	8009bfa <osThreadExit>
 8003324:	20000014 	.word	0x20000014
 8003328:	41a00000 	.word	0x41a00000

0800332c <PARK_run>:
#include "motor/park.h"

Result PARK_run(volatile PARK *park)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	edd3 6a01 	vldr	s13, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	ed93 7a01 	vldr	s14, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	edd3 7a06 	vldr	s15, [r3, #24]
 800336c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	edd3 6a00 	vldr	s13, [r3]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	edd3 7a05 	vldr	s15, [r3, #20]
 800337c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	edc3 7a04 	vstr	s15, [r3, #16]
    return RESULT_OK(NULL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
}
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <IPARK_run>:

Result IPARK_run(volatile IPARK *ipark)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80033b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	edd3 6a04 	vldr	s13, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80033c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	edd3 7a06 	vldr	s15, [r3, #24]
 80033e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80033f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	edc3 7a01 	vstr	s15, [r3, #4]
    return RESULT_OK(NULL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]
}
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <PI_run>:
#include "motor/pi.h"

Result PI_run(volatile PI_CONTROLLER *pi)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	ed93 7a03 	vldr	s14, [r3, #12]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	edd3 6a00 	vldr	s13, [r3]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	edd3 7a01 	vldr	s15, [r3, #4]
 8003434:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	ed93 7a02 	vldr	s14, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800344e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	d110      	bne.n	800347a <PI_run+0x62>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	ed93 7a04 	vldr	s14, [r3, #16]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	edd3 7a07 	vldr	s15, [r3, #28]
 8003464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	edc3 7a08 	vstr	s15, [r3, #32]
 8003478:	e003      	b.n	8003482 <PI_run+0x6a>
    }
    else
    {
        pi->ui = pi->i1;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	629a      	str	r2, [r3, #40]	@ 0x28

    pi->v1 = pi->up + pi->ui;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	edd3 7a08 	vldr	s15, [r3, #32]
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = CLAMP(pi->v1, pi->Umax, pi->Umin);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80034ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	dd02      	ble.n	80034bc <PI_run+0xa4>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	e00f      	b.n	80034dc <PI_run+0xc4>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	d502      	bpl.n	80034d8 <PI_run+0xc0>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	e001      	b.n	80034dc <PI_run+0xc4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6093      	str	r3, [r2, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80034ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80034f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f4:	d102      	bne.n	80034fc <PI_run+0xe4>
 80034f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80034fa:	e001      	b.n	8003500 <PI_run+0xe8>
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	62da      	str	r2, [r3, #44]	@ 0x2c
    return RESULT_OK(NULL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <SVGEN_run>:
#include "motor/svgendq.h"

Result SVGEN_run(volatile SVGENDQ *svgq)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
    float t1 = svgq->Ubeta * 0.5f;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	edd3 7a01 	vldr	s15, [r3, #4]
 800352c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003534:	edc7 7a05 	vstr	s15, [r7, #20]
    float t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80035f4 <SVGEN_run+0xd8>
 8003542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003546:	edc7 7a04 	vstr	s15, [r7, #16]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 8003552:	ed97 7a04 	vldr	s14, [r7, #16]
 8003556:	edd7 7a05 	vldr	s15, [r7, #20]
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 8003564:	edd7 7a05 	vldr	s15, [r7, #20]
 8003568:	eeb1 7a67 	vneg.f32	s14, s15
 800356c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	edd3 7a02 	vldr	s15, [r3, #8]
 8003586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	dd06      	ble.n	800359e <SVGEN_run+0x82>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	8a9b      	ldrh	r3, [r3, #20]
 8003594:	b29b      	uxth	r3, r3
 8003596:	3302      	adds	r3, #2
 8003598:	b29a      	uxth	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80035a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	dd06      	ble.n	80035bc <SVGEN_run+0xa0>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	8a9b      	ldrh	r3, [r3, #20]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3304      	adds	r3, #4
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	edd3 7a04 	vldr	s15, [r3, #16]
 80035c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	dd06      	ble.n	80035da <SVGEN_run+0xbe>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	8a9b      	ldrh	r3, [r3, #20]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	829a      	strh	r2, [r3, #20]
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
    return RESULT_OK(NULL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
}
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	3f5db3d7 	.word	0x3f5db3d7

080035f8 <TableSearch_sin>:
    15042,    //0.1499
    15042	 //0.1500
}; // Table_atan END

float TableSearch_sin(float theta)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	ed87 0a01 	vstr	s0, [r7, #4]
    while (theta >= MUL_2_PI) theta -= MUL_2_PI;
 8003602:	e007      	b.n	8003614 <TableSearch_sin+0x1c>
 8003604:	edd7 7a01 	vldr	s15, [r7, #4]
 8003608:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80036c4 <TableSearch_sin+0xcc>
 800360c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003610:	edc7 7a01 	vstr	s15, [r7, #4]
 8003614:	edd7 7a01 	vldr	s15, [r7, #4]
 8003618:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80036c4 <TableSearch_sin+0xcc>
 800361c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003624:	daee      	bge.n	8003604 <TableSearch_sin+0xc>
    while (theta < 0.0f)      theta += MUL_2_PI;
 8003626:	e007      	b.n	8003638 <TableSearch_sin+0x40>
 8003628:	edd7 7a01 	vldr	s15, [r7, #4]
 800362c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80036c4 <TableSearch_sin+0xcc>
 8003630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003634:	edc7 7a01 	vstr	s15, [r7, #4]
 8003638:	edd7 7a01 	vldr	s15, [r7, #4]
 800363c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	d4f0      	bmi.n	8003628 <TableSearch_sin+0x30>

    bool minus_flag = false;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
    if (theta > PI) {
 800364a:	edd7 7a01 	vldr	s15, [r7, #4]
 800364e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80036c8 <TableSearch_sin+0xd0>
 8003652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	dd09      	ble.n	8003670 <TableSearch_sin+0x78>
        minus_flag = true;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
        theta -= PI;
 8003660:	edd7 7a01 	vldr	s15, [r7, #4]
 8003664:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80036c8 <TableSearch_sin+0xd0>
 8003668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800366c:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    uint16_t idx = (uint16_t)(theta * 100.0f);
 8003670:	edd7 7a01 	vldr	s15, [r7, #4]
 8003674:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80036cc <TableSearch_sin+0xd4>
 8003678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	81bb      	strh	r3, [r7, #12]
    if (idx >= 316) idx = 315;
 8003686:	89bb      	ldrh	r3, [r7, #12]
 8003688:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 800368c:	d302      	bcc.n	8003694 <TableSearch_sin+0x9c>
 800368e:	f240 133b 	movw	r3, #315	@ 0x13b
 8003692:	81bb      	strh	r3, [r7, #12]
    float result = Table_sin[idx];
 8003694:	89bb      	ldrh	r3, [r7, #12]
 8003696:	4a0e      	ldr	r2, [pc, #56]	@ (80036d0 <TableSearch_sin+0xd8>)
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60bb      	str	r3, [r7, #8]
    return minus_flag ? -result : result;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <TableSearch_sin+0xb8>
 80036a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036aa:	eef1 7a67 	vneg.f32	s15, s15
 80036ae:	e001      	b.n	80036b4 <TableSearch_sin+0xbc>
 80036b0:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80036b4:	eeb0 0a67 	vmov.f32	s0, s15
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40c90fdb 	.word	0x40c90fdb
 80036c8:	40490fdb 	.word	0x40490fdb
 80036cc:	42c80000 	.word	0x42c80000
 80036d0:	200001a8 	.word	0x200001a8

080036d4 <TableSearch_atan>:

float TableSearch_atan(float theta)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t idx = (uint16_t)fabsf(theta * 100.0f);
 80036de:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003750 <TableSearch_atan+0x7c>
 80036e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ea:	eef0 7ae7 	vabs.f32	s15, s15
 80036ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f2:	ee17 3a90 	vmov	r3, s15
 80036f6:	81fb      	strh	r3, [r7, #14]
    if (idx > 1500) idx = 1500;
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80036fe:	4293      	cmp	r3, r2
 8003700:	d902      	bls.n	8003708 <TableSearch_atan+0x34>
 8003702:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003706:	81fb      	strh	r3, [r7, #14]
    float output_abs = (float)Table_atan[idx] / 10000.0f;
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <TableSearch_atan+0x80>)
 800370c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003718:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003758 <TableSearch_atan+0x84>
 800371c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003720:	edc7 7a02 	vstr	s15, [r7, #8]
    return (theta >= 0.0f) ? output_abs : -output_abs;
 8003724:	edd7 7a01 	vldr	s15, [r7, #4]
 8003728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	db02      	blt.n	8003738 <TableSearch_atan+0x64>
 8003732:	edd7 7a02 	vldr	s15, [r7, #8]
 8003736:	e003      	b.n	8003740 <TableSearch_atan+0x6c>
 8003738:	edd7 7a02 	vldr	s15, [r7, #8]
 800373c:	eef1 7a67 	vneg.f32	s15, s15
}
 8003740:	eeb0 0a67 	vmov.f32	s0, s15
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	42c80000 	.word	0x42c80000
 8003754:	20000698 	.word	0x20000698
 8003758:	461c4000 	.word	0x461c4000

0800375c <TableSearch_atan2>:

float TableSearch_atan2(float y, float x)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	ed87 0a01 	vstr	s0, [r7, #4]
 8003766:	edc7 0a00 	vstr	s1, [r7]
    if (x == 0.0f) {
 800376a:	edd7 7a00 	vldr	s15, [r7]
 800376e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	d116      	bne.n	80037a6 <TableSearch_atan2+0x4a>
        if      (y > 0.0f) return  DIV_PI_2;
 8003778:	edd7 7a01 	vldr	s15, [r7, #4]
 800377c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	dd02      	ble.n	800378c <TableSearch_atan2+0x30>
 8003786:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003804 <TableSearch_atan2+0xa8>
 800378a:	e036      	b.n	80037fa <TableSearch_atan2+0x9e>
        else if (y < 0.0f) return -DIV_PI_2;
 800378c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d502      	bpl.n	80037a0 <TableSearch_atan2+0x44>
 800379a:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003808 <TableSearch_atan2+0xac>
 800379e:	e02c      	b.n	80037fa <TableSearch_atan2+0x9e>
        else               return 0.0f; // (0,0) → 定義為 0
 80037a0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800380c <TableSearch_atan2+0xb0>
 80037a4:	e029      	b.n	80037fa <TableSearch_atan2+0x9e>
    }

    float base = TableSearch_atan(y / x);
 80037a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80037aa:	edd7 7a00 	vldr	s15, [r7]
 80037ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037b2:	eeb0 0a66 	vmov.f32	s0, s13
 80037b6:	f7ff ff8d 	bl	80036d4 <TableSearch_atan>
 80037ba:	ed87 0a03 	vstr	s0, [r7, #12]
    if (x > 0.0f)
 80037be:	edd7 7a00 	vldr	s15, [r7]
 80037c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	dd02      	ble.n	80037d2 <TableSearch_atan2+0x76>
    {
        return base; // Phase 1,4
 80037cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80037d0:	e013      	b.n	80037fa <TableSearch_atan2+0x9e>
    }
    else
    {
        return (y >= 0.0f) ? (base + PI) : (base - PI); // Phase 2,3
 80037d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037de:	db06      	blt.n	80037ee <TableSearch_atan2+0x92>
 80037e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003810 <TableSearch_atan2+0xb4>
 80037e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ec:	e005      	b.n	80037fa <TableSearch_atan2+0x9e>
 80037ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003810 <TableSearch_atan2+0xb4>
 80037f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    }
}
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	3fc90fdb 	.word	0x3fc90fdb
 8003808:	bfc90fdb 	.word	0xbfc90fdb
 800380c:	00000000 	.word	0x00000000
 8003810:	40490fdb 	.word	0x40490fdb

08003814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003814:	480d      	ldr	r0, [pc, #52]	@ (800384c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003816:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003818:	f7fe f86c 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800381c:	480c      	ldr	r0, [pc, #48]	@ (8003850 <LoopForever+0x6>)
  ldr r1, =_edata
 800381e:	490d      	ldr	r1, [pc, #52]	@ (8003854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003820:	4a0d      	ldr	r2, [pc, #52]	@ (8003858 <LoopForever+0xe>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003824:	e002      	b.n	800382c <LoopCopyDataInit>

08003826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382a:	3304      	adds	r3, #4

0800382c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800382c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800382e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003830:	d3f9      	bcc.n	8003826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003832:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003834:	4c0a      	ldr	r4, [pc, #40]	@ (8003860 <LoopForever+0x16>)
  movs r3, #0
 8003836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003838:	e001      	b.n	800383e <LoopFillZerobss>

0800383a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800383c:	3204      	adds	r2, #4

0800383e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800383e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003840:	d3fb      	bcc.n	800383a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003842:	f009 f805 	bl	800c850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003846:	f7fd feb7 	bl	80015b8 <main>

0800384a <LoopForever>:

LoopForever:
    b LoopForever
 800384a:	e7fe      	b.n	800384a <LoopForever>
  ldr   r0, =_estack
 800384c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003854:	200012c4 	.word	0x200012c4
  ldr r2, =_sidata
 8003858:	0800cc98 	.word	0x0800cc98
  ldr r2, =_sbss
 800385c:	200012c4 	.word	0x200012c4
  ldr r4, =_ebss
 8003860:	20003470 	.word	0x20003470

08003864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC1_2_IRQHandler>
	...

08003868 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8003872:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <BSP_LED_Init+0x64>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003876:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <BSP_LED_Init+0x64>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800387e:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <BSP_LED_Init+0x64>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800388a:	2320      	movs	r3, #32
 800388c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800388e:	2301      	movs	r3, #1
 8003890:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	4a0c      	ldr	r2, [pc, #48]	@ (80038d0 <BSP_LED_Init+0x68>)
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	f107 020c 	add.w	r2, r7, #12
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 fc69 	bl	8006180 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	4a07      	ldr	r2, [pc, #28]	@ (80038d0 <BSP_LED_Init+0x68>)
 80038b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b6:	2120      	movs	r1, #32
 80038b8:	2200      	movs	r2, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f002 fde2 	bl	8006484 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	20001254 	.word	0x20001254

080038d4 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	460a      	mov	r2, r1
 80038de:	71fb      	strb	r3, [r7, #7]
 80038e0:	4613      	mov	r3, r2
 80038e2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80038e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003998 <BSP_PB_Init+0xc4>)
 80038e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003998 <BSP_PB_Init+0xc4>)
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f0:	4b29      	ldr	r3, [pc, #164]	@ (8003998 <BSP_PB_Init+0xc4>)
 80038f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80038fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003900:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003902:	2302      	movs	r3, #2
 8003904:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003906:	2302      	movs	r3, #2
 8003908:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800390a:	79bb      	ldrb	r3, [r7, #6]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10c      	bne.n	800392a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <BSP_PB_Init+0xc8>)
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	f107 020c 	add.w	r2, r7, #12
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f002 fc2c 	bl	8006180 <HAL_GPIO_Init>
 8003928:	e031      	b.n	800398e <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800392a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800392e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	4a1a      	ldr	r2, [pc, #104]	@ (800399c <BSP_PB_Init+0xc8>)
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	f107 020c 	add.w	r2, r7, #12
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f002 fc1e 	bl	8006180 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <BSP_PB_Init+0xcc>)
 800394a:	441a      	add	r2, r3
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	4915      	ldr	r1, [pc, #84]	@ (80039a4 <BSP_PB_Init+0xd0>)
 8003950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f001 ff1d 	bl	8005796 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4a0f      	ldr	r2, [pc, #60]	@ (80039a0 <BSP_PB_Init+0xcc>)
 8003962:	1898      	adds	r0, r3, r2
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	4a10      	ldr	r2, [pc, #64]	@ (80039a8 <BSP_PB_Init+0xd4>)
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	461a      	mov	r2, r3
 800396e:	2100      	movs	r1, #0
 8003970:	f001 fef4 	bl	800575c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003974:	2028      	movs	r0, #40	@ 0x28
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	4a0c      	ldr	r2, [pc, #48]	@ (80039ac <BSP_PB_Init+0xd8>)
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	2200      	movs	r2, #0
 8003980:	4619      	mov	r1, r3
 8003982:	f001 fc51 	bl	8005228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003986:	2328      	movs	r3, #40	@ 0x28
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fc67 	bl	800525c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	20001258 	.word	0x20001258
 80039a0:	200018a8 	.word	0x200018a8
 80039a4:	0800cc4c 	.word	0x0800cc4c
 80039a8:	20001260 	.word	0x20001260
 80039ac:	20001264 	.word	0x20001264

080039b0 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4a04      	ldr	r2, [pc, #16]	@ (80039d0 <BSP_PB_IRQHandler+0x20>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 fefc 	bl	80057c0 <HAL_EXTI_IRQHandler>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200018a8 	.word	0x200018a8

080039d4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d903      	bls.n	8003a0a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a02:	f06f 0301 	mvn.w	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e018      	b.n	8003a3c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2294      	movs	r2, #148	@ 0x94
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <BSP_COM_Init+0x5c>)
 8003a14:	4413      	add	r3, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f852 	bl	8003ac0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2294      	movs	r2, #148	@ 0x94
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	4a08      	ldr	r2, [pc, #32]	@ (8003a48 <BSP_COM_Init+0x5c>)
 8003a26:	4413      	add	r3, r2
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f80e 	bl	8003a4c <MX_LPUART1_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8003a36:	f06f 0303 	mvn.w	r3, #3
 8003a3a:	e000      	b.n	8003a3e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200018b0 	.word	0x200018b0

08003a4c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <MX_LPUART1_Init+0x60>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	220c      	movs	r2, #12
 8003a6a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	895b      	ldrh	r3, [r3, #10]
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	891b      	ldrh	r3, [r3, #8]
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	899b      	ldrh	r3, [r3, #12]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a98:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f005 fa32 	bl	8008f04 <HAL_UART_Init>
 8003aa0:	4603      	mov	r3, r0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000125c 	.word	0x2000125c

08003ab0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7ff ff8d 	bl	80039d4 <BSP_PB_Callback>
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	@ 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8003ac8:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <COM1_MspInit+0x94>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003acc:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <COM1_MspInit+0x94>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <COM1_MspInit+0x94>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b54 <COM1_MspInit+0x94>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <COM1_MspInit+0x94>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aec:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <COM1_MspInit+0x94>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003af8:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <COM1_MspInit+0x94>)
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	4a15      	ldr	r2, [pc, #84]	@ (8003b54 <COM1_MspInit+0x94>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003b04:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <COM1_MspInit+0x94>)
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003b10:	2304      	movs	r3, #4
 8003b12:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003b20:	230c      	movs	r3, #12
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b2e:	f002 fb27 	bl	8006180 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003b32:	2308      	movs	r3, #8
 8003b34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b48:	f002 fb1a 	bl	8006180 <HAL_GPIO_Init>
}
 8003b4c:	bf00      	nop
 8003b4e:	3728      	adds	r7, #40	@ 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000

08003b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b62:	2003      	movs	r0, #3
 8003b64:	f001 fb55 	bl	8005212 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b68:	200f      	movs	r0, #15
 8003b6a:	f7fd fdf5 	bl	8001758 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	71fb      	strb	r3, [r7, #7]
 8003b78:	e001      	b.n	8003b7e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b7a:	f7fd fdc3 	bl	8001704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b7e:	79fb      	ldrb	r3, [r7, #7]

}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_IncTick+0x1c>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_IncTick+0x20>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	4a03      	ldr	r2, [pc, #12]	@ (8003ba4 <HAL_IncTick+0x1c>)
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20001944 	.word	0x20001944
 8003ba8:	2000126c 	.word	0x2000126c

08003bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	@ (8003bc0 <HAL_GetTick+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20001944 	.word	0x20001944

08003bc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3360      	adds	r3, #96	@ 0x60
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <LL_ADC_SetOffset+0x44>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	03fff000 	.word	0x03fff000

08003c74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3360      	adds	r3, #96	@ 0x60
 8003c82:	461a      	mov	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3360      	adds	r3, #96	@ 0x60
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b087      	sub	sp, #28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3360      	adds	r3, #96	@ 0x60
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3360      	adds	r3, #96	@ 0x60
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	615a      	str	r2, [r3, #20]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b087      	sub	sp, #28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3330      	adds	r3, #48	@ 0x30
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	211f      	movs	r1, #31
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0e9b      	lsrs	r3, r3, #26
 8003dc6:	f003 011f 	and.w	r1, r3, #31
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b087      	sub	sp, #28
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3314      	adds	r3, #20
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	0e5b      	lsrs	r3, r3, #25
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	0d1b      	lsrs	r3, r3, #20
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2107      	movs	r1, #7
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0d1b      	lsrs	r3, r3, #20
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0318 	and.w	r3, r3, #24
 8003e5e:	4908      	ldr	r1, [pc, #32]	@ (8003e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e60:	40d9      	lsrs	r1, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	400b      	ands	r3, r1
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	0007ffff 	.word	0x0007ffff

08003e84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 031f 	and.w	r3, r3, #31
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6093      	str	r3, [r2, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed8:	d101      	bne.n	8003ede <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f28:	d101      	bne.n	8003f2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <LL_ADC_IsEnabled+0x18>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_ADC_IsEnabled+0x1a>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d101      	bne.n	8003fca <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d101      	bne.n	8003ff0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b089      	sub	sp, #36	@ 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e167      	b.n	80042ea <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc ffdd 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ff3f 	bl	8003ec4 <LL_ADC_IsDeepPowerDownEnabled>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff25 	bl	8003ea0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff5a 	bl	8003f14 <LL_ADC_IsInternalRegulatorEnabled>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d115      	bne.n	8004092 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff3e 	bl	8003eec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004070:	4ba0      	ldr	r3, [pc, #640]	@ (80042f4 <HAL_ADC_Init+0x2f4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	4aa0      	ldr	r2, [pc, #640]	@ (80042f8 <HAL_ADC_Init+0x2f8>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004084:	e002      	b.n	800408c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f9      	bne.n	8004086 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff3c 	bl	8003f14 <LL_ADC_IsInternalRegulatorEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	f043 0210 	orr.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff75 	bl	8003fb2 <LL_ADC_REG_IsConversionOngoing>
 80040c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 8100 	bne.w	80042d8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 80fc 	bne.w	80042d8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040e8:	f043 0202 	orr.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff35 	bl	8003f64 <LL_ADC_IsEnabled>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004100:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004104:	f7ff ff2e 	bl	8003f64 <LL_ADC_IsEnabled>
 8004108:	4604      	mov	r4, r0
 800410a:	487c      	ldr	r0, [pc, #496]	@ (80042fc <HAL_ADC_Init+0x2fc>)
 800410c:	f7ff ff2a 	bl	8003f64 <LL_ADC_IsEnabled>
 8004110:	4603      	mov	r3, r0
 8004112:	4323      	orrs	r3, r4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4619      	mov	r1, r3
 800411e:	4878      	ldr	r0, [pc, #480]	@ (8004300 <HAL_ADC_Init+0x300>)
 8004120:	f7ff fd50 	bl	8003bc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7f5b      	ldrb	r3, [r3, #29]
 8004128:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800412e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004134:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800413a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004142:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800414e:	2b01      	cmp	r3, #1
 8004150:	d106      	bne.n	8004160 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	045b      	lsls	r3, r3, #17
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4b60      	ldr	r3, [pc, #384]	@ (8004304 <HAL_ADC_Init+0x304>)
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	69b9      	ldr	r1, [r7, #24]
 800418c:	430b      	orrs	r3, r1
 800418e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff14 	bl	8003fd8 <LL_ADC_INJ_IsConversionOngoing>
 80041b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d16d      	bne.n	8004294 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d16a      	bne.n	8004294 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041da:	f023 0302 	bic.w	r3, r3, #2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	69b9      	ldr	r1, [r7, #24]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d017      	beq.n	8004220 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80041fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004208:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800420c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6911      	ldr	r1, [r2, #16]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800421e:	e013      	b.n	8004248 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800422e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004244:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800424e:	2b01      	cmp	r3, #1
 8004250:	d118      	bne.n	8004284 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004274:	430a      	orrs	r2, r1
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	611a      	str	r2, [r3, #16]
 8004282:	e007      	b.n	8004294 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10c      	bne.n	80042b6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	f023 010f 	bic.w	r1, r3, #15
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b4:	e007      	b.n	80042c6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 020f 	bic.w	r2, r2, #15
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042d6:	e007      	b.n	80042e8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042dc:	f043 0210 	orr.w	r2, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3724      	adds	r7, #36	@ 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000
 80042f8:	053e2d63 	.word	0x053e2d63
 80042fc:	50000100 	.word	0x50000100
 8004300:	50000300 	.word	0x50000300
 8004304:	fff04007 	.word	0xfff04007

08004308 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004314:	4851      	ldr	r0, [pc, #324]	@ (800445c <HAL_ADC_Start_DMA+0x154>)
 8004316:	f7ff fdb5 	bl	8003e84 <LL_ADC_GetMultimode>
 800431a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fe46 	bl	8003fb2 <LL_ADC_REG_IsConversionOngoing>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	f040 808f 	bne.w	800444c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_ADC_Start_DMA+0x34>
 8004338:	2302      	movs	r3, #2
 800433a:	e08a      	b.n	8004452 <HAL_ADC_Start_DMA+0x14a>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b05      	cmp	r3, #5
 800434e:	d002      	beq.n	8004356 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b09      	cmp	r3, #9
 8004354:	d173      	bne.n	800443e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fc98 	bl	8004c8c <ADC_Enable>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d166      	bne.n	8004434 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a38      	ldr	r2, [pc, #224]	@ (8004460 <HAL_ADC_Start_DMA+0x158>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d002      	beq.n	800438a <HAL_ADC_Start_DMA+0x82>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	e001      	b.n	800438e <HAL_ADC_Start_DMA+0x86>
 800438a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	4293      	cmp	r3, r2
 8004394:	d002      	beq.n	800439c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b8:	f023 0206 	bic.w	r2, r3, #6
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	661a      	str	r2, [r3, #96]	@ 0x60
 80043c0:	e002      	b.n	80043c8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043cc:	4a25      	ldr	r2, [pc, #148]	@ (8004464 <HAL_ADC_Start_DMA+0x15c>)
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	4a24      	ldr	r2, [pc, #144]	@ (8004468 <HAL_ADC_Start_DMA+0x160>)
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	4a23      	ldr	r2, [pc, #140]	@ (800446c <HAL_ADC_Start_DMA+0x164>)
 80043de:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	221c      	movs	r2, #28
 80043e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0210 	orr.w	r2, r2, #16
 80043fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3340      	adds	r3, #64	@ 0x40
 800441a:	4619      	mov	r1, r3
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f000 ffd2 	bl	80053c8 <HAL_DMA_Start_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fdac 	bl	8003f8a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004432:	e00d      	b.n	8004450 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800443c:	e008      	b.n	8004450 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800444a:	e001      	b.n	8004450 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800444c:	2302      	movs	r3, #2
 800444e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	50000300 	.word	0x50000300
 8004460:	50000100 	.word	0x50000100
 8004464:	08004d99 	.word	0x08004d99
 8004468:	08004e71 	.word	0x08004e71
 800446c:	08004e8d 	.word	0x08004e8d

08004470 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b0b6      	sub	sp, #216	@ 0xd8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x22>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e3c8      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x7b4>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fd69 	bl	8003fb2 <LL_ADC_REG_IsConversionOngoing>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 83ad 	bne.w	8004c42 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f7ff fc4a 	bl	8003d8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fd57 	bl	8003fb2 <LL_ADC_REG_IsConversionOngoing>
 8004504:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fd63 	bl	8003fd8 <LL_ADC_INJ_IsConversionOngoing>
 8004512:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004516:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 81d9 	bne.w	80048d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 81d4 	bne.w	80048d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004532:	d10f      	bne.n	8004554 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	4619      	mov	r1, r3
 8004540:	f7ff fc51 	bl	8003de6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fbf8 	bl	8003d42 <LL_ADC_SetSamplingTimeCommonConfig>
 8004552:	e00e      	b.n	8004572 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	461a      	mov	r2, r3
 8004562:	f7ff fc40 	bl	8003de6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fbe8 	bl	8003d42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d022      	beq.n	80045da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6919      	ldr	r1, [r3, #16]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045a4:	f7ff fb42 	bl	8003c2c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	6919      	ldr	r1, [r3, #16]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f7ff fb8e 	bl	8003cd6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x124>
 80045ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ce:	e000      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x126>
 80045d0:	2300      	movs	r3, #0
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7ff fb9a 	bl	8003d0c <LL_ADC_SetOffsetSaturation>
 80045d8:	e17b      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fb47 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x15a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fb3c 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 80045fc:	4603      	mov	r3, r0
 80045fe:	0e9b      	lsrs	r3, r3, #26
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	e01e      	b.n	8004644 <HAL_ADC_ConfigChannel+0x198>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fb31 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 8004612:	4603      	mov	r3, r0
 8004614:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800462c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004634:	2320      	movs	r3, #32
 8004636:	e004      	b.n	8004642 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <HAL_ADC_ConfigChannel+0x1b0>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	e018      	b.n	800468e <HAL_ADC_ConfigChannel+0x1e2>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e004      	b.n	800468e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800468e:	429a      	cmp	r2, r3
 8004690:	d106      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fb00 	bl	8003ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fae4 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x220>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fad9 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 80046c2:	4603      	mov	r3, r0
 80046c4:	0e9b      	lsrs	r3, r3, #26
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	e01e      	b.n	800470a <HAL_ADC_ConfigChannel+0x25e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff face 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 80046d8:	4603      	mov	r3, r0
 80046da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80046ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80046f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80046fa:	2320      	movs	r3, #32
 80046fc:	e004      	b.n	8004708 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80046fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x276>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	e018      	b.n	8004754 <HAL_ADC_ConfigChannel+0x2a8>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004736:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800473a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800473e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800474a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fa9d 	bl	8003ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fa81 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x2e6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fa76 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 8004788:	4603      	mov	r3, r0
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	e01e      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x324>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa6b 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80047b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80047b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e004      	b.n	80047ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80047c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x33c>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	e016      	b.n	8004816 <HAL_ADC_ConfigChannel+0x36a>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80047fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e004      	b.n	8004816 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800480c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004816:	429a      	cmp	r2, r3
 8004818:	d106      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	2102      	movs	r1, #2
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fa3c 	bl	8003ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2103      	movs	r1, #3
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fa20 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 8004834:	4603      	mov	r3, r0
 8004836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x3a8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2103      	movs	r1, #3
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fa15 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 800484a:	4603      	mov	r3, r0
 800484c:	0e9b      	lsrs	r3, r3, #26
 800484e:	f003 021f 	and.w	r2, r3, #31
 8004852:	e017      	b.n	8004884 <HAL_ADC_ConfigChannel+0x3d8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2103      	movs	r1, #3
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fa0a 	bl	8003c74 <LL_ADC_GetOffsetChannel>
 8004860:	4603      	mov	r3, r0
 8004862:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800486c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800486e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e003      	b.n	8004882 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800487a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_ADC_ConfigChannel+0x3f0>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0e9b      	lsrs	r3, r3, #26
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	e011      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x414>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80048aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80048ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80048b4:	2320      	movs	r3, #32
 80048b6:	e003      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80048b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d106      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2103      	movs	r1, #3
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f9e7 	bl	8003ca0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fb44 	bl	8003f64 <LL_ADC_IsEnabled>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 8140 	bne.w	8004b64 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	461a      	mov	r2, r3
 80048f2:	f7ff faa3 	bl	8003e3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4a8f      	ldr	r2, [pc, #572]	@ (8004b38 <HAL_ADC_ConfigChannel+0x68c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f040 8131 	bne.w	8004b64 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <HAL_ADC_ConfigChannel+0x47e>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	0e9b      	lsrs	r3, r3, #26
 8004918:	3301      	adds	r3, #1
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2b09      	cmp	r3, #9
 8004920:	bf94      	ite	ls
 8004922:	2301      	movls	r3, #1
 8004924:	2300      	movhi	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e019      	b.n	800495e <HAL_ADC_ConfigChannel+0x4b2>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800493a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800493c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004942:	2320      	movs	r3, #32
 8004944:	e003      	b.n	800494e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	3301      	adds	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2b09      	cmp	r3, #9
 8004956:	bf94      	ite	ls
 8004958:	2301      	movls	r3, #1
 800495a:	2300      	movhi	r3, #0
 800495c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800495e:	2b00      	cmp	r3, #0
 8004960:	d079      	beq.n	8004a56 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <HAL_ADC_ConfigChannel+0x4d2>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0e9b      	lsrs	r3, r3, #26
 8004974:	3301      	adds	r3, #1
 8004976:	069b      	lsls	r3, r3, #26
 8004978:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800497c:	e015      	b.n	80049aa <HAL_ADC_ConfigChannel+0x4fe>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800498c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800498e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004996:	2320      	movs	r3, #32
 8004998:	e003      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800499a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	069b      	lsls	r3, r3, #26
 80049a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x51e>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0e9b      	lsrs	r3, r3, #26
 80049bc:	3301      	adds	r3, #1
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2101      	movs	r1, #1
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	e017      	b.n	80049fa <HAL_ADC_ConfigChannel+0x54e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80049d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80049dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e003      	b.n	80049ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80049e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x574>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	0e9b      	lsrs	r3, r3, #26
 8004a10:	3301      	adds	r3, #1
 8004a12:	f003 021f 	and.w	r2, r3, #31
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	051b      	lsls	r3, r3, #20
 8004a1e:	e018      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x5a6>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f003 021f 	and.w	r2, r3, #31
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a52:	430b      	orrs	r3, r1
 8004a54:	e081      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x5c6>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	0e9b      	lsrs	r3, r3, #26
 8004a68:	3301      	adds	r3, #1
 8004a6a:	069b      	lsls	r3, r3, #26
 8004a6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a70:	e015      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x5f2>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	e003      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	069b      	lsls	r3, r3, #26
 8004a9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x612>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	0e9b      	lsrs	r3, r3, #26
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	e017      	b.n	8004aee <HAL_ADC_ConfigChannel+0x642>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	61fb      	str	r3, [r7, #28]
  return result;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e003      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	ea42 0103 	orr.w	r1, r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <HAL_ADC_ConfigChannel+0x66e>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	0e9b      	lsrs	r3, r3, #26
 8004b04:	3301      	adds	r3, #1
 8004b06:	f003 021f 	and.w	r2, r3, #31
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	3b1e      	subs	r3, #30
 8004b12:	051b      	lsls	r3, r3, #20
 8004b14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b18:	e01e      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x6ac>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	613b      	str	r3, [r7, #16]
  return result;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004b32:	2320      	movs	r3, #32
 8004b34:	e006      	b.n	8004b44 <HAL_ADC_ConfigChannel+0x698>
 8004b36:	bf00      	nop
 8004b38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	fab3 f383 	clz	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	3301      	adds	r3, #1
 8004b46:	f003 021f 	and.w	r2, r3, #31
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	3b1e      	subs	r3, #30
 8004b52:	051b      	lsls	r3, r3, #20
 8004b54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7ff f941 	bl	8003de6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b3f      	ldr	r3, [pc, #252]	@ (8004c68 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d071      	beq.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b70:	483e      	ldr	r0, [pc, #248]	@ (8004c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004b72:	f7ff f84d 	bl	8003c10 <LL_ADC_GetCommonPathInternalCh>
 8004b76:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c70 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_ADC_ConfigChannel+0x6e2>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a3a      	ldr	r2, [pc, #232]	@ (8004c74 <HAL_ADC_ConfigChannel+0x7c8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d127      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d121      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ba2:	d157      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ba8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bac:	4619      	mov	r1, r3
 8004bae:	482f      	ldr	r0, [pc, #188]	@ (8004c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004bb0:	f7ff f81b 	bl	8003bea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bb4:	4b30      	ldr	r3, [pc, #192]	@ (8004c78 <HAL_ADC_ConfigChannel+0x7cc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <HAL_ADC_ConfigChannel+0x7d0>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bce:	e002      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f9      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bdc:	e03a      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a27      	ldr	r2, [pc, #156]	@ (8004c80 <HAL_ADC_ConfigChannel+0x7d4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d113      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a22      	ldr	r2, [pc, #136]	@ (8004c84 <HAL_ADC_ConfigChannel+0x7d8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02a      	beq.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	4619      	mov	r1, r3
 8004c08:	4818      	ldr	r0, [pc, #96]	@ (8004c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004c0a:	f7fe ffee 	bl	8003bea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c0e:	e021      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1c      	ldr	r2, [pc, #112]	@ (8004c88 <HAL_ADC_ConfigChannel+0x7dc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d11c      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d116      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a16      	ldr	r2, [pc, #88]	@ (8004c84 <HAL_ADC_ConfigChannel+0x7d8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d011      	beq.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c38:	4619      	mov	r1, r3
 8004c3a:	480c      	ldr	r0, [pc, #48]	@ (8004c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004c3c:	f7fe ffd5 	bl	8003bea <LL_ADC_SetCommonPathInternalCh>
 8004c40:	e008      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	37d8      	adds	r7, #216	@ 0xd8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	80080000 	.word	0x80080000
 8004c6c:	50000300 	.word	0x50000300
 8004c70:	c3210000 	.word	0xc3210000
 8004c74:	90c00010 	.word	0x90c00010
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	053e2d63 	.word	0x053e2d63
 8004c80:	c7520000 	.word	0xc7520000
 8004c84:	50000100 	.word	0x50000100
 8004c88:	cb840000 	.word	0xcb840000

08004c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff f961 	bl	8003f64 <LL_ADC_IsEnabled>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d169      	bne.n	8004d7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	4b36      	ldr	r3, [pc, #216]	@ (8004d88 <ADC_Enable+0xfc>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e055      	b.n	8004d7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f930 	bl	8003f3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004cdc:	482b      	ldr	r0, [pc, #172]	@ (8004d8c <ADC_Enable+0x100>)
 8004cde:	f7fe ff97 	bl	8003c10 <LL_ADC_GetCommonPathInternalCh>
 8004ce2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ce4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cec:	4b28      	ldr	r3, [pc, #160]	@ (8004d90 <ADC_Enable+0x104>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	4a28      	ldr	r2, [pc, #160]	@ (8004d94 <ADC_Enable+0x108>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d06:	e002      	b.n	8004d0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f9      	bne.n	8004d08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d14:	f7fe ff4a 	bl	8003bac <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d1a:	e028      	b.n	8004d6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff f91f 	bl	8003f64 <LL_ADC_IsEnabled>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff f903 	bl	8003f3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d36:	f7fe ff39 	bl	8003bac <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d914      	bls.n	8004d6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00d      	beq.n	8004d6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	f043 0210 	orr.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d1cf      	bne.n	8004d1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	8000003f 	.word	0x8000003f
 8004d8c:	50000300 	.word	0x50000300
 8004d90:	20000000 	.word	0x20000000
 8004d94:	053e2d63 	.word	0x053e2d63

08004d98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d14b      	bne.n	8004e4a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d021      	beq.n	8004e10 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fe ffc9 	bl	8003d68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d032      	beq.n	8004e42 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d12b      	bne.n	8004e42 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d11f      	bne.n	8004e42 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e0e:	e018      	b.n	8004e42 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d111      	bne.n	8004e42 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff fb14 	bl	8004470 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e48:	e00e      	b.n	8004e68 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff fb1e 	bl	8004498 <HAL_ADC_ErrorCallback>
}
 8004e5c:	e004      	b.n	8004e68 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fb00 	bl	8004484 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7ff faf0 	bl	8004498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <LL_ADC_IsEnabled>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <LL_ADC_IsEnabled+0x18>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_ADC_IsEnabled+0x1a>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d101      	bne.n	8004efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b0a1      	sub	sp, #132	@ 0x84
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e08b      	b.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f32:	2300      	movs	r3, #0
 8004f34:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f36:	2300      	movs	r3, #0
 8004f38:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f42:	d102      	bne.n	8004f4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f44:	4b41      	ldr	r3, [pc, #260]	@ (800504c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	e001      	b.n	8004f4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e06a      	b.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ffb9 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8004f74:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff ffb3 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d14c      	bne.n	8005020 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d149      	bne.n	8005020 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f8c:	4b30      	ldr	r3, [pc, #192]	@ (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f8e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d028      	beq.n	8004fea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004faa:	035b      	lsls	r3, r3, #13
 8004fac:	430b      	orrs	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fb8:	f7ff ff82 	bl	8004ec0 <LL_ADC_IsEnabled>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4823      	ldr	r0, [pc, #140]	@ (800504c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fc0:	f7ff ff7e 	bl	8004ec0 <LL_ADC_IsEnabled>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4323      	orrs	r3, r4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d133      	bne.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fd4:	f023 030f 	bic.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	6811      	ldr	r1, [r2, #0]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	6892      	ldr	r2, [r2, #8]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fe8:	e024      	b.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ff4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ff6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ffa:	f7ff ff61 	bl	8004ec0 <LL_ADC_IsEnabled>
 8004ffe:	4604      	mov	r4, r0
 8005000:	4812      	ldr	r0, [pc, #72]	@ (800504c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005002:	f7ff ff5d 	bl	8004ec0 <LL_ADC_IsEnabled>
 8005006:	4603      	mov	r3, r0
 8005008:	4323      	orrs	r3, r4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d112      	bne.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800500e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005016:	f023 030f 	bic.w	r3, r3, #15
 800501a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800501c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800501e:	e009      	b.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	f043 0220 	orr.w	r2, r3, #32
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005032:	e000      	b.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005034:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800503e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005042:	4618      	mov	r0, r3
 8005044:	3784      	adds	r7, #132	@ 0x84
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
 800504a:	bf00      	nop
 800504c:	50000100 	.word	0x50000100
 8005050:	50000300 	.word	0x50000300

08005054 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e023      	b.n	80050ae <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc f87c 	bl	8001178 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c8:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <__NVIC_SetPriorityGrouping+0x44>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050d4:	4013      	ands	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ea:	4a04      	ldr	r2, [pc, #16]	@ (80050fc <__NVIC_SetPriorityGrouping+0x44>)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	60d3      	str	r3, [r2, #12]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005104:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <__NVIC_GetPriorityGrouping+0x18>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	0a1b      	lsrs	r3, r3, #8
 800510a:	f003 0307 	and.w	r3, r3, #7
}
 800510e:	4618      	mov	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512a:	2b00      	cmp	r3, #0
 800512c:	db0b      	blt.n	8005146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	f003 021f 	and.w	r2, r3, #31
 8005134:	4907      	ldr	r1, [pc, #28]	@ (8005154 <__NVIC_EnableIRQ+0x38>)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	2001      	movs	r0, #1
 800513e:	fa00 f202 	lsl.w	r2, r0, r2
 8005142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	e000e100 	.word	0xe000e100

08005158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005168:	2b00      	cmp	r3, #0
 800516a:	db0a      	blt.n	8005182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	490c      	ldr	r1, [pc, #48]	@ (80051a4 <__NVIC_SetPriority+0x4c>)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	440b      	add	r3, r1
 800517c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005180:	e00a      	b.n	8005198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	4908      	ldr	r1, [pc, #32]	@ (80051a8 <__NVIC_SetPriority+0x50>)
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	3b04      	subs	r3, #4
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	440b      	add	r3, r1
 8005196:	761a      	strb	r2, [r3, #24]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000e100 	.word	0xe000e100
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f1c3 0307 	rsb	r3, r3, #7
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	bf28      	it	cs
 80051ca:	2304      	movcs	r3, #4
 80051cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d902      	bls.n	80051dc <NVIC_EncodePriority+0x30>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3b03      	subs	r3, #3
 80051da:	e000      	b.n	80051de <NVIC_EncodePriority+0x32>
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43da      	mvns	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	401a      	ands	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f4:	f04f 31ff 	mov.w	r1, #4294967295
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fa01 f303 	lsl.w	r3, r1, r3
 80051fe:	43d9      	mvns	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005204:	4313      	orrs	r3, r2
         );
}
 8005206:	4618      	mov	r0, r3
 8005208:	3724      	adds	r7, #36	@ 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ff4c 	bl	80050b8 <__NVIC_SetPriorityGrouping>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005236:	f7ff ff63 	bl	8005100 <__NVIC_GetPriorityGrouping>
 800523a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f7ff ffb3 	bl	80051ac <NVIC_EncodePriority>
 8005246:	4602      	mov	r2, r0
 8005248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ff82 	bl	8005158 <__NVIC_SetPriority>
}
 8005254:	bf00      	nop
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff56 	bl	800511c <__NVIC_EnableIRQ>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e08d      	b.n	80053a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	4b47      	ldr	r3, [pc, #284]	@ (80053b0 <HAL_DMA_Init+0x138>)
 8005292:	429a      	cmp	r2, r3
 8005294:	d80f      	bhi.n	80052b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b45      	ldr	r3, [pc, #276]	@ (80053b4 <HAL_DMA_Init+0x13c>)
 800529e:	4413      	add	r3, r2
 80052a0:	4a45      	ldr	r2, [pc, #276]	@ (80053b8 <HAL_DMA_Init+0x140>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	091b      	lsrs	r3, r3, #4
 80052a8:	009a      	lsls	r2, r3, #2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a42      	ldr	r2, [pc, #264]	@ (80053bc <HAL_DMA_Init+0x144>)
 80052b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80052b4:	e00e      	b.n	80052d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	4b40      	ldr	r3, [pc, #256]	@ (80053c0 <HAL_DMA_Init+0x148>)
 80052be:	4413      	add	r3, r2
 80052c0:	4a3d      	ldr	r2, [pc, #244]	@ (80053b8 <HAL_DMA_Init+0x140>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	009a      	lsls	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a3c      	ldr	r2, [pc, #240]	@ (80053c4 <HAL_DMA_Init+0x14c>)
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9b6 	bl	8005698 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005334:	d102      	bne.n	800533c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005350:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d010      	beq.n	800537c <HAL_DMA_Init+0x104>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b04      	cmp	r3, #4
 8005360:	d80c      	bhi.n	800537c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9d6 	bl	8005714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	e008      	b.n	800538e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40020407 	.word	0x40020407
 80053b4:	bffdfff8 	.word	0xbffdfff8
 80053b8:	cccccccd 	.word	0xcccccccd
 80053bc:	40020000 	.word	0x40020000
 80053c0:	bffdfbf8 	.word	0xbffdfbf8
 80053c4:	40020400 	.word	0x40020400

080053c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_DMA_Start_IT+0x20>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e066      	b.n	80054b6 <HAL_DMA_Start_IT+0xee>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d155      	bne.n	80054a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f8fb 	bl	800561c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 020e 	orr.w	r2, r2, #14
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e00f      	b.n	8005460 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0204 	bic.w	r2, r2, #4
 800544e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 020a 	orr.w	r2, r2, #10
 800545e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800547c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005494:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e005      	b.n	80054b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
 80054b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2204      	movs	r2, #4
 80054e0:	409a      	lsls	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d026      	beq.n	8005538 <HAL_DMA_IRQHandler+0x7a>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d021      	beq.n	8005538 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0204 	bic.w	r2, r2, #4
 8005510:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005516:	f003 021f 	and.w	r2, r3, #31
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	2104      	movs	r1, #4
 8005520:	fa01 f202 	lsl.w	r2, r1, r2
 8005524:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	2b00      	cmp	r3, #0
 800552c:	d071      	beq.n	8005612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005536:	e06c      	b.n	8005612 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	2202      	movs	r2, #2
 8005542:	409a      	lsls	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02e      	beq.n	80055aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d029      	beq.n	80055aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 020a 	bic.w	r2, r2, #10
 8005572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005580:	f003 021f 	and.w	r2, r3, #31
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	2102      	movs	r1, #2
 800558a:	fa01 f202 	lsl.w	r2, r1, r2
 800558e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d038      	beq.n	8005612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055a8:	e033      	b.n	8005612 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2208      	movs	r2, #8
 80055b4:	409a      	lsls	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02a      	beq.n	8005614 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d025      	beq.n	8005614 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 020e 	bic.w	r2, r2, #14
 80055d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055dc:	f003 021f 	and.w	r2, r3, #31
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	2101      	movs	r1, #1
 80055e6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005612:	bf00      	nop
 8005614:	bf00      	nop
}
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005632:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005644:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564a:	f003 021f 	and.w	r2, r3, #31
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f202 	lsl.w	r2, r1, r2
 8005658:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b10      	cmp	r3, #16
 8005668:	d108      	bne.n	800567c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800567a:	e007      	b.n	800568c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b16      	ldr	r3, [pc, #88]	@ (8005700 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d802      	bhi.n	80056b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80056ac:	4b15      	ldr	r3, [pc, #84]	@ (8005704 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e001      	b.n	80056b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80056b2:	4b15      	ldr	r3, [pc, #84]	@ (8005708 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056b4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3b08      	subs	r3, #8
 80056c2:	4a12      	ldr	r2, [pc, #72]	@ (800570c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	009a      	lsls	r2, r3, #2
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005710 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	2201      	movs	r2, #1
 80056ec:	409a      	lsls	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40020407 	.word	0x40020407
 8005704:	40020800 	.word	0x40020800
 8005708:	40020820 	.word	0x40020820
 800570c:	cccccccd 	.word	0xcccccccd
 8005710:	40020880 	.word	0x40020880

08005714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a08      	ldr	r2, [pc, #32]	@ (8005758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005736:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2201      	movs	r2, #1
 8005742:	409a      	lsls	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	1000823f 	.word	0x1000823f
 8005758:	40020940 	.word	0x40020940

0800575c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	460b      	mov	r3, r1
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]
      break;
 800577a:	e005      	b.n	8005788 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
      break;
 8005786:	bf00      	nop
  }

  return status;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e003      	b.n	80057b2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2201      	movs	r2, #1
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <HAL_EXTI_IRQHandler+0x5c>)
 80057ea:	4413      	add	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4798      	blx	r3
    }
  }
}
 8005812:	bf00      	nop
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40010414 	.word	0x40010414

08005820 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e147      	b.n	8005ac2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fb fd26 	bl	8001298 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0210 	bic.w	r2, r2, #16
 800585a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800585c:	f7fe f9a6 	bl	8003bac <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005862:	e012      	b.n	800588a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005864:	f7fe f9a2 	bl	8003bac <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b0a      	cmp	r3, #10
 8005870:	d90b      	bls.n	800588a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2203      	movs	r2, #3
 8005882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e11b      	b.n	8005ac2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d0e5      	beq.n	8005864 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058a8:	f7fe f980 	bl	8003bac <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058ae:	e012      	b.n	80058d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058b0:	f7fe f97c 	bl	8003bac <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b0a      	cmp	r3, #10
 80058bc:	d90b      	bls.n	80058d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c2:	f043 0201 	orr.w	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0f5      	b.n	8005ac2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0e5      	beq.n	80058b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0202 	orr.w	r2, r2, #2
 80058f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a74      	ldr	r2, [pc, #464]	@ (8005acc <HAL_FDCAN_Init+0x2ac>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d103      	bne.n	8005906 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80058fe:	4a74      	ldr	r2, [pc, #464]	@ (8005ad0 <HAL_FDCAN_Init+0x2b0>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7c1b      	ldrb	r3, [r3, #16]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d108      	bne.n	8005920 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800591c:	619a      	str	r2, [r3, #24]
 800591e:	e007      	b.n	8005930 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800592e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7c5b      	ldrb	r3, [r3, #17]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d108      	bne.n	800594a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e007      	b.n	800595a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005958:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7c9b      	ldrb	r3, [r3, #18]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d108      	bne.n	8005974 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005970:	619a      	str	r2, [r3, #24]
 8005972:	e007      	b.n	8005984 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005982:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80059a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0210 	bic.w	r2, r2, #16
 80059b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d108      	bne.n	80059d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0204 	orr.w	r2, r2, #4
 80059d0:	619a      	str	r2, [r3, #24]
 80059d2:	e02c      	b.n	8005a2e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d028      	beq.n	8005a2e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d01c      	beq.n	8005a1e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0210 	orr.w	r2, r2, #16
 8005a02:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d110      	bne.n	8005a2e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0220 	orr.w	r2, r2, #32
 8005a1a:	619a      	str	r2, [r3, #24]
 8005a1c:	e007      	b.n	8005a2e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0220 	orr.w	r2, r2, #32
 8005a2c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a3e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a46:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a56:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a58:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a62:	d115      	bne.n	8005a90 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a72:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a7c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	3b01      	subs	r3, #1
 8005a86:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a8c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a8e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb14 	bl	80060d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40006400 	.word	0x40006400
 8005ad0:	40006500 	.word	0x40006500

08005ad4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b08b      	sub	sp, #44	@ 0x2c
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005aec:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005aee:	7efb      	ldrb	r3, [r7, #27]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f040 80e8 	bne.w	8005cc6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d137      	bne.n	8005b6c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0db      	b.n	8005cd4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b2c:	d10a      	bne.n	8005b44 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b3e:	d101      	bne.n	8005b44 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b40:	2301      	movs	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	440b      	add	r3, r1
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e036      	b.n	8005bda <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0a3      	b.n	8005cd4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bae:	d101      	bne.n	8005bb4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	440b      	add	r3, r1
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	0c9b      	lsrs	r3, r3, #18
 8005bf4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e005      	b.n	8005c0a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	3304      	adds	r3, #4
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 020f 	and.w	r2, r3, #15
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0fda      	lsrs	r2, r3, #31
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	3304      	adds	r3, #4
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	e00a      	b.n	8005c96 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	441a      	add	r2, r3
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	3301      	adds	r3, #1
 8005c94:	623b      	str	r3, [r7, #32]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d3ec      	bcc.n	8005c80 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b40      	cmp	r3, #64	@ 0x40
 8005caa:	d105      	bne.n	8005cb8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005cb6:	e004      	b.n	8005cc2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e006      	b.n	8005cd4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cca:	f043 0208 	orr.w	r2, r3, #8
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
  }
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	372c      	adds	r7, #44	@ 0x2c
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	0800cc50 	.word	0x0800cc50

08005ce4 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cf4:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d16e      	bne.n	8005dda <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e065      	b.n	8005de8 <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d24:	0a1b      	lsrs	r3, r3, #8
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d107      	bne.n	8005d5c <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	0c9b      	lsrs	r3, r3, #18
 8005d52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e005      	b.n	8005d68 <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3304      	adds	r3, #4
 8005d84:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	0e1a      	lsrs	r2, r3, #24
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e006      	b.n	8005de8 <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dde:	f043 0208 	orr.w	r2, r3, #8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
  }
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08c      	sub	sp, #48	@ 0x30
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e10:	4013      	ands	r3, r2
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e28:	4013      	ands	r3, r2
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e40:	4013      	ands	r3, r2
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005e4e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e56:	6a3a      	ldr	r2, [r7, #32]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e66:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e82:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2240      	movs	r2, #64	@ 0x40
 8005ea2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f901 	bl	80060ac <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01a      	beq.n	8005eec <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d014      	beq.n	8005eec <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005eca:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ee2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005ee4:	6939      	ldr	r1, [r7, #16]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8c1 	bl	800606e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fb ffed 	bl	8001edc <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc f808 	bl	8001f28 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f24:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fc f869 	bl	8002000 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	0a5b      	lsrs	r3, r3, #9
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00d      	beq.n	8005f56 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f882 	bl	800605a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	09db      	lsrs	r3, r3, #7
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d019      	beq.n	8005f96 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	09db      	lsrs	r3, r3, #7
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d013      	beq.n	8005f96 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f76:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4013      	ands	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2280      	movs	r2, #128	@ 0x80
 8005f8c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fb ffbe 	bl	8001f12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	0b5b      	lsrs	r3, r3, #13
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	0b5b      	lsrs	r3, r3, #13
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fb6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f863 	bl	8006084 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	0bdb      	lsrs	r3, r3, #15
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	0bdb      	lsrs	r3, r3, #15
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005fde:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f859 	bl	8006098 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	0b9b      	lsrs	r3, r3, #14
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d010      	beq.n	8006014 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	0b9b      	lsrs	r3, r3, #14
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006006:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fb ff3d 	bl	8001ea4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f837 	bl	80060c0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006052:	bf00      	nop
 8006054:	3730      	adds	r7, #48	@ 0x30
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80060dc:	4b27      	ldr	r3, [pc, #156]	@ (800617c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80060de:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ee:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f6:	041a      	lsls	r2, r3, #16
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006114:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	061a      	lsls	r2, r3, #24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e005      	b.n	8006162 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3304      	adds	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	429a      	cmp	r2, r3
 800616c:	d3f3      	bcc.n	8006156 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	4000a400 	.word	0x4000a400

08006180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800618e:	e15a      	b.n	8006446 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	2101      	movs	r1, #1
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 814c 	beq.w	8006440 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d005      	beq.n	80061c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d130      	bne.n	8006222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	2203      	movs	r2, #3
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4013      	ands	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061f6:	2201      	movs	r2, #1
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	43db      	mvns	r3, r3
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4013      	ands	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	f003 0201 	and.w	r2, r3, #1
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b03      	cmp	r3, #3
 800622c:	d017      	beq.n	800625e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	2203      	movs	r2, #3
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	43db      	mvns	r3, r3
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4013      	ands	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d123      	bne.n	80062b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	08da      	lsrs	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3208      	adds	r2, #8
 8006272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	220f      	movs	r2, #15
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4013      	ands	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	08da      	lsrs	r2, r3, #3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3208      	adds	r2, #8
 80062ac:	6939      	ldr	r1, [r7, #16]
 80062ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	2203      	movs	r2, #3
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	43db      	mvns	r3, r3
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4013      	ands	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 0203 	and.w	r2, r3, #3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 80a6 	beq.w	8006440 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006464 <HAL_GPIO_Init+0x2e4>)
 80062f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006464 <HAL_GPIO_Init+0x2e4>)
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8006300:	4b58      	ldr	r3, [pc, #352]	@ (8006464 <HAL_GPIO_Init+0x2e4>)
 8006302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800630c:	4a56      	ldr	r2, [pc, #344]	@ (8006468 <HAL_GPIO_Init+0x2e8>)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	089b      	lsrs	r3, r3, #2
 8006312:	3302      	adds	r3, #2
 8006314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	220f      	movs	r2, #15
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4013      	ands	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006336:	d01f      	beq.n	8006378 <HAL_GPIO_Init+0x1f8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a4c      	ldr	r2, [pc, #304]	@ (800646c <HAL_GPIO_Init+0x2ec>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d019      	beq.n	8006374 <HAL_GPIO_Init+0x1f4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a4b      	ldr	r2, [pc, #300]	@ (8006470 <HAL_GPIO_Init+0x2f0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_GPIO_Init+0x1f0>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a4a      	ldr	r2, [pc, #296]	@ (8006474 <HAL_GPIO_Init+0x2f4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00d      	beq.n	800636c <HAL_GPIO_Init+0x1ec>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a49      	ldr	r2, [pc, #292]	@ (8006478 <HAL_GPIO_Init+0x2f8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <HAL_GPIO_Init+0x1e8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a48      	ldr	r2, [pc, #288]	@ (800647c <HAL_GPIO_Init+0x2fc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d101      	bne.n	8006364 <HAL_GPIO_Init+0x1e4>
 8006360:	2305      	movs	r3, #5
 8006362:	e00a      	b.n	800637a <HAL_GPIO_Init+0x1fa>
 8006364:	2306      	movs	r3, #6
 8006366:	e008      	b.n	800637a <HAL_GPIO_Init+0x1fa>
 8006368:	2304      	movs	r3, #4
 800636a:	e006      	b.n	800637a <HAL_GPIO_Init+0x1fa>
 800636c:	2303      	movs	r3, #3
 800636e:	e004      	b.n	800637a <HAL_GPIO_Init+0x1fa>
 8006370:	2302      	movs	r3, #2
 8006372:	e002      	b.n	800637a <HAL_GPIO_Init+0x1fa>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <HAL_GPIO_Init+0x1fa>
 8006378:	2300      	movs	r3, #0
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	f002 0203 	and.w	r2, r2, #3
 8006380:	0092      	lsls	r2, r2, #2
 8006382:	4093      	lsls	r3, r2
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800638a:	4937      	ldr	r1, [pc, #220]	@ (8006468 <HAL_GPIO_Init+0x2e8>)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	3302      	adds	r3, #2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006398:	4b39      	ldr	r3, [pc, #228]	@ (8006480 <HAL_GPIO_Init+0x300>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4013      	ands	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063bc:	4a30      	ldr	r2, [pc, #192]	@ (8006480 <HAL_GPIO_Init+0x300>)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006480 <HAL_GPIO_Init+0x300>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	43db      	mvns	r3, r3
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4013      	ands	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063e6:	4a26      	ldr	r2, [pc, #152]	@ (8006480 <HAL_GPIO_Init+0x300>)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063ec:	4b24      	ldr	r3, [pc, #144]	@ (8006480 <HAL_GPIO_Init+0x300>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4013      	ands	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006410:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <HAL_GPIO_Init+0x300>)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006416:	4b1a      	ldr	r3, [pc, #104]	@ (8006480 <HAL_GPIO_Init+0x300>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	43db      	mvns	r3, r3
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4013      	ands	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800643a:	4a11      	ldr	r2, [pc, #68]	@ (8006480 <HAL_GPIO_Init+0x300>)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	f47f ae9d 	bne.w	8006190 <HAL_GPIO_Init+0x10>
  }
}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40021000 	.word	0x40021000
 8006468:	40010000 	.word	0x40010000
 800646c:	48000400 	.word	0x48000400
 8006470:	48000800 	.word	0x48000800
 8006474:	48000c00 	.word	0x48000c00
 8006478:	48001000 	.word	0x48001000
 800647c:	48001400 	.word	0x48001400
 8006480:	40010400 	.word	0x40010400

08006484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	807b      	strh	r3, [r7, #2]
 8006490:	4613      	mov	r3, r2
 8006492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006494:	787b      	ldrb	r3, [r7, #1]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064a0:	e002      	b.n	80064a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064be:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064ca:	4a05      	ldr	r2, [pc, #20]	@ (80064e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fb fdfe 	bl	80020d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40010400 	.word	0x40010400

080064e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e08d      	b.n	8006612 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fa ffde 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	@ 0x24
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006534:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006544:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d107      	bne.n	800655e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	e006      	b.n	800656c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800656a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d108      	bne.n	8006586 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	e007      	b.n	8006596 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69d9      	ldr	r1, [r3, #28]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b20      	cmp	r3, #32
 800662e:	d138      	bne.n	80066a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800663a:	2302      	movs	r3, #2
 800663c:	e032      	b.n	80066a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2224      	movs	r2, #36	@ 0x24
 800664a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800666c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e000      	b.n	80066a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a2:	2302      	movs	r3, #2
  }
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d139      	bne.n	800673a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e033      	b.n	800673c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2224      	movs	r2, #36	@ 0x24
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006702:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0201 	orr.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	e000      	b.n	800673c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800673a:	2302      	movs	r3, #2
  }
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d141      	bne.n	80067da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006756:	4b4b      	ldr	r3, [pc, #300]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006762:	d131      	bne.n	80067c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006764:	4b47      	ldr	r3, [pc, #284]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800676a:	4a46      	ldr	r2, [pc, #280]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006774:	4b43      	ldr	r3, [pc, #268]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800677c:	4a41      	ldr	r2, [pc, #260]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800677e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006784:	4b40      	ldr	r3, [pc, #256]	@ (8006888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2232      	movs	r2, #50	@ 0x32
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	4a3f      	ldr	r2, [pc, #252]	@ (800688c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	0c9b      	lsrs	r3, r3, #18
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800679a:	e002      	b.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3b01      	subs	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a2:	4b38      	ldr	r3, [pc, #224]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ae:	d102      	bne.n	80067b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f2      	bne.n	800679c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067b6:	4b33      	ldr	r3, [pc, #204]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c2:	d158      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e057      	b.n	8006878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067d8:	e04d      	b.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e0:	d141      	bne.n	8006866 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067e2:	4b28      	ldr	r3, [pc, #160]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ee:	d131      	bne.n	8006854 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067f0:	4b24      	ldr	r3, [pc, #144]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f6:	4a23      	ldr	r2, [pc, #140]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006800:	4b20      	ldr	r3, [pc, #128]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006808:	4a1e      	ldr	r2, [pc, #120]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800680e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006810:	4b1d      	ldr	r3, [pc, #116]	@ (8006888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2232      	movs	r2, #50	@ 0x32
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	4a1c      	ldr	r2, [pc, #112]	@ (800688c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	0c9b      	lsrs	r3, r3, #18
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006826:	e002      	b.n	800682e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3b01      	subs	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800682e:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683a:	d102      	bne.n	8006842 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f2      	bne.n	8006828 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684e:	d112      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e011      	b.n	8006878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006854:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685a:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006864:	e007      	b.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006866:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800686e:	4a05      	ldr	r2, [pc, #20]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006870:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006874:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	40007000 	.word	0x40007000
 8006888:	20000000 	.word	0x20000000
 800688c:	431bde83 	.word	0x431bde83

08006890 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006894:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	4a04      	ldr	r2, [pc, #16]	@ (80068ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800689a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800689e:	6093      	str	r3, [r2, #8]
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40007000 	.word	0x40007000

080068b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e2fe      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d075      	beq.n	80069ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ce:	4b97      	ldr	r3, [pc, #604]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068d8:	4b94      	ldr	r3, [pc, #592]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b0c      	cmp	r3, #12
 80068e6:	d102      	bne.n	80068ee <HAL_RCC_OscConfig+0x3e>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d002      	beq.n	80068f4 <HAL_RCC_OscConfig+0x44>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d10b      	bne.n	800690c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f4:	4b8d      	ldr	r3, [pc, #564]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d05b      	beq.n	80069b8 <HAL_RCC_OscConfig+0x108>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d157      	bne.n	80069b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e2d9      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006914:	d106      	bne.n	8006924 <HAL_RCC_OscConfig+0x74>
 8006916:	4b85      	ldr	r3, [pc, #532]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a84      	ldr	r2, [pc, #528]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e01d      	b.n	8006960 <HAL_RCC_OscConfig+0xb0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800692c:	d10c      	bne.n	8006948 <HAL_RCC_OscConfig+0x98>
 800692e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a7e      	ldr	r2, [pc, #504]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7b      	ldr	r2, [pc, #492]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e00b      	b.n	8006960 <HAL_RCC_OscConfig+0xb0>
 8006948:	4b78      	ldr	r3, [pc, #480]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a77      	ldr	r2, [pc, #476]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 800694e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b75      	ldr	r3, [pc, #468]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a74      	ldr	r2, [pc, #464]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 800695a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800695e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fd f920 	bl	8003bac <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006970:	f7fd f91c 	bl	8003bac <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	@ 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e29e      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006982:	4b6a      	ldr	r3, [pc, #424]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0xc0>
 800698e:	e014      	b.n	80069ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fd f90c 	bl	8003bac <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006998:	f7fd f908 	bl	8003bac <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	@ 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e28a      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069aa:	4b60      	ldr	r3, [pc, #384]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0xe8>
 80069b6:	e000      	b.n	80069ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d075      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c6:	4b59      	ldr	r3, [pc, #356]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 030c 	and.w	r3, r3, #12
 80069ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069d0:	4b56      	ldr	r3, [pc, #344]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d102      	bne.n	80069e6 <HAL_RCC_OscConfig+0x136>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d002      	beq.n	80069ec <HAL_RCC_OscConfig+0x13c>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d11f      	bne.n	8006a2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ec:	4b4f      	ldr	r3, [pc, #316]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_OscConfig+0x154>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e25d      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	4b49      	ldr	r3, [pc, #292]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	4946      	ldr	r1, [pc, #280]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a18:	4b45      	ldr	r3, [pc, #276]	@ (8006b30 <HAL_RCC_OscConfig+0x280>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fa fe9b 	bl	8001758 <HAL_InitTick>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d043      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e249      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d023      	beq.n	8006a7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a34:	4b3d      	ldr	r3, [pc, #244]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3c      	ldr	r2, [pc, #240]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fd f8b4 	bl	8003bac <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a48:	f7fd f8b0 	bl	8003bac <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e232      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a5a:	4b34      	ldr	r3, [pc, #208]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a66:	4b31      	ldr	r3, [pc, #196]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	492d      	ldr	r1, [pc, #180]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]
 8006a7a:	e01a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2a      	ldr	r2, [pc, #168]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006a82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a88:	f7fd f890 	bl	8003bac <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a90:	f7fd f88c 	bl	8003bac <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e20e      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aa2:	4b22      	ldr	r3, [pc, #136]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x1e0>
 8006aae:	e000      	b.n	8006ab2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d041      	beq.n	8006b42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d01c      	beq.n	8006b00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ac6:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006acc:	4a17      	ldr	r2, [pc, #92]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad6:	f7fd f869 	bl	8003bac <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ade:	f7fd f865 	bl	8003bac <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e1e7      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006af0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0ef      	beq.n	8006ade <HAL_RCC_OscConfig+0x22e>
 8006afe:	e020      	b.n	8006b42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b00:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b06:	4a09      	ldr	r2, [pc, #36]	@ (8006b2c <HAL_RCC_OscConfig+0x27c>)
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b10:	f7fd f84c 	bl	8003bac <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b16:	e00d      	b.n	8006b34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b18:	f7fd f848 	bl	8003bac <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d906      	bls.n	8006b34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e1ca      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	20001268 	.word	0x20001268
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b34:	4b8c      	ldr	r3, [pc, #560]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1ea      	bne.n	8006b18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80a6 	beq.w	8006c9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b50:	2300      	movs	r3, #0
 8006b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b54:	4b84      	ldr	r3, [pc, #528]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_OscConfig+0x2b4>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <HAL_RCC_OscConfig+0x2b6>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b76:	4b7c      	ldr	r3, [pc, #496]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b82:	2301      	movs	r3, #1
 8006b84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b86:	4b79      	ldr	r3, [pc, #484]	@ (8006d6c <HAL_RCC_OscConfig+0x4bc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d118      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b92:	4b76      	ldr	r3, [pc, #472]	@ (8006d6c <HAL_RCC_OscConfig+0x4bc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a75      	ldr	r2, [pc, #468]	@ (8006d6c <HAL_RCC_OscConfig+0x4bc>)
 8006b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b9e:	f7fd f805 	bl	8003bac <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba6:	f7fd f801 	bl	8003bac <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e183      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d6c <HAL_RCC_OscConfig+0x4bc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d108      	bne.n	8006bde <HAL_RCC_OscConfig+0x32e>
 8006bcc:	4b66      	ldr	r3, [pc, #408]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd2:	4a65      	ldr	r2, [pc, #404]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bdc:	e024      	b.n	8006c28 <HAL_RCC_OscConfig+0x378>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d110      	bne.n	8006c08 <HAL_RCC_OscConfig+0x358>
 8006be6:	4b60      	ldr	r3, [pc, #384]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bec:	4a5e      	ldr	r2, [pc, #376]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006bee:	f043 0304 	orr.w	r3, r3, #4
 8006bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c06:	e00f      	b.n	8006c28 <HAL_RCC_OscConfig+0x378>
 8006c08:	4b57      	ldr	r3, [pc, #348]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0e:	4a56      	ldr	r2, [pc, #344]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c10:	f023 0301 	bic.w	r3, r3, #1
 8006c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c18:	4b53      	ldr	r3, [pc, #332]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1e:	4a52      	ldr	r2, [pc, #328]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c20:	f023 0304 	bic.w	r3, r3, #4
 8006c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d016      	beq.n	8006c5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c30:	f7fc ffbc 	bl	8003bac <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c36:	e00a      	b.n	8006c4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c38:	f7fc ffb8 	bl	8003bac <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e138      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c4e:	4b46      	ldr	r3, [pc, #280]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0ed      	beq.n	8006c38 <HAL_RCC_OscConfig+0x388>
 8006c5c:	e015      	b.n	8006c8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5e:	f7fc ffa5 	bl	8003bac <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c64:	e00a      	b.n	8006c7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c66:	f7fc ffa1 	bl	8003bac <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e121      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1ed      	bne.n	8006c66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c8a:	7ffb      	ldrb	r3, [r7, #31]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d105      	bne.n	8006c9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c90:	4b35      	ldr	r3, [pc, #212]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c94:	4a34      	ldr	r2, [pc, #208]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d03c      	beq.n	8006d22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01c      	beq.n	8006cea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc0:	f7fc ff74 	bl	8003bac <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cc8:	f7fc ff70 	bl	8003bac <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e0f2      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cda:	4b23      	ldr	r3, [pc, #140]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0ef      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x418>
 8006ce8:	e01b      	b.n	8006d22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cea:	4b1f      	ldr	r3, [pc, #124]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006cf2:	f023 0301 	bic.w	r3, r3, #1
 8006cf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fc ff57 	bl	8003bac <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d02:	f7fc ff53 	bl	8003bac <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e0d5      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d14:	4b14      	ldr	r3, [pc, #80]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1ef      	bne.n	8006d02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 80c9 	beq.w	8006ebe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 030c 	and.w	r3, r3, #12
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	f000 8083 	beq.w	8006e40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d15e      	bne.n	8006e00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a08      	ldr	r2, [pc, #32]	@ (8006d68 <HAL_RCC_OscConfig+0x4b8>)
 8006d48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4e:	f7fc ff2d 	bl	8003bac <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d54:	e00c      	b.n	8006d70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d56:	f7fc ff29 	bl	8003bac <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d905      	bls.n	8006d70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e0ab      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d70:	4b55      	ldr	r3, [pc, #340]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1ec      	bne.n	8006d56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d7c:	4b52      	ldr	r3, [pc, #328]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	4b52      	ldr	r3, [pc, #328]	@ (8006ecc <HAL_RCC_OscConfig+0x61c>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6a11      	ldr	r1, [r2, #32]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d8c:	3a01      	subs	r2, #1
 8006d8e:	0112      	lsls	r2, r2, #4
 8006d90:	4311      	orrs	r1, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006d96:	0212      	lsls	r2, r2, #8
 8006d98:	4311      	orrs	r1, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d9e:	0852      	lsrs	r2, r2, #1
 8006da0:	3a01      	subs	r2, #1
 8006da2:	0552      	lsls	r2, r2, #21
 8006da4:	4311      	orrs	r1, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006daa:	0852      	lsrs	r2, r2, #1
 8006dac:	3a01      	subs	r2, #1
 8006dae:	0652      	lsls	r2, r2, #25
 8006db0:	4311      	orrs	r1, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006db6:	06d2      	lsls	r2, r2, #27
 8006db8:	430a      	orrs	r2, r1
 8006dba:	4943      	ldr	r1, [pc, #268]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dc0:	4b41      	ldr	r3, [pc, #260]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a40      	ldr	r2, [pc, #256]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fc fee8 	bl	8003bac <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de0:	f7fc fee4 	bl	8003bac <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e066      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006df2:	4b35      	ldr	r3, [pc, #212]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0x530>
 8006dfe:	e05e      	b.n	8006ebe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e00:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a30      	ldr	r2, [pc, #192]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fc fece 	bl	8003bac <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fc feca 	bl	8003bac <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e04c      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e26:	4b28      	ldr	r3, [pc, #160]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e32:	4b25      	ldr	r3, [pc, #148]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	4924      	ldr	r1, [pc, #144]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006e38:	4b25      	ldr	r3, [pc, #148]	@ (8006ed0 <HAL_RCC_OscConfig+0x620>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60cb      	str	r3, [r1, #12]
 8006e3e:	e03e      	b.n	8006ebe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e039      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec8 <HAL_RCC_OscConfig+0x618>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 0203 	and.w	r2, r3, #3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d12c      	bne.n	8006eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d123      	bne.n	8006eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d11b      	bne.n	8006eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d113      	bne.n	8006eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d109      	bne.n	8006eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d001      	beq.n	8006ebe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	019f800c 	.word	0x019f800c
 8006ed0:	feeefffc 	.word	0xfeeefffc

08006ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e11e      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006eec:	4b91      	ldr	r3, [pc, #580]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d910      	bls.n	8006f1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efa:	4b8e      	ldr	r3, [pc, #568]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f023 020f 	bic.w	r2, r3, #15
 8006f02:	498c      	ldr	r1, [pc, #560]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0a:	4b8a      	ldr	r3, [pc, #552]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d001      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e106      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d073      	beq.n	8007010 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d129      	bne.n	8006f84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f30:	4b81      	ldr	r3, [pc, #516]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0f4      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f40:	f000 f9d0 	bl	80072e4 <RCC_GetSysClockFreqFromPLLSource>
 8006f44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	4a7c      	ldr	r2, [pc, #496]	@ (800713c <HAL_RCC_ClockConfig+0x268>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d93f      	bls.n	8006fce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d033      	beq.n	8006fce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d12f      	bne.n	8006fce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f6e:	4b72      	ldr	r3, [pc, #456]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f76:	4a70      	ldr	r2, [pc, #448]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f7e:	2380      	movs	r3, #128	@ 0x80
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e024      	b.n	8006fce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0c6      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f9c:	4b66      	ldr	r3, [pc, #408]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0be      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fac:	f000 f8ce 	bl	800714c <HAL_RCC_GetSysClockFreq>
 8006fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	4a61      	ldr	r2, [pc, #388]	@ (800713c <HAL_RCC_ClockConfig+0x268>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d909      	bls.n	8006fce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fba:	4b5f      	ldr	r3, [pc, #380]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fca:	2380      	movs	r3, #128	@ 0x80
 8006fcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fce:	4b5a      	ldr	r3, [pc, #360]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f023 0203 	bic.w	r2, r3, #3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	4957      	ldr	r1, [pc, #348]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe0:	f7fc fde4 	bl	8003bac <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe6:	e00a      	b.n	8006ffe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe8:	f7fc fde0 	bl	8003bac <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e095      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 020c 	and.w	r2, r3, #12
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	429a      	cmp	r2, r3
 800700e:	d1eb      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d023      	beq.n	8007064 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007028:	4b43      	ldr	r3, [pc, #268]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	4a42      	ldr	r2, [pc, #264]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 800702e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007032:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007040:	4b3d      	ldr	r3, [pc, #244]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007048:	4a3b      	ldr	r2, [pc, #236]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 800704a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800704e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007050:	4b39      	ldr	r3, [pc, #228]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4936      	ldr	r1, [pc, #216]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 800705e:	4313      	orrs	r3, r2
 8007060:	608b      	str	r3, [r1, #8]
 8007062:	e008      	b.n	8007076 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b80      	cmp	r3, #128	@ 0x80
 8007068:	d105      	bne.n	8007076 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800706a:	4b33      	ldr	r3, [pc, #204]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	4a32      	ldr	r2, [pc, #200]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8007070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007074:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007076:	4b2f      	ldr	r3, [pc, #188]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d21d      	bcs.n	80070c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007084:	4b2b      	ldr	r3, [pc, #172]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f023 020f 	bic.w	r2, r3, #15
 800708c:	4929      	ldr	r1, [pc, #164]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007094:	f7fc fd8a 	bl	8003bac <HAL_GetTick>
 8007098:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709a:	e00a      	b.n	80070b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800709c:	f7fc fd86 	bl	8003bac <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e03b      	b.n	800712a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b2:	4b20      	ldr	r3, [pc, #128]	@ (8007134 <HAL_RCC_ClockConfig+0x260>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d1ed      	bne.n	800709c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d008      	beq.n	80070de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4917      	ldr	r1, [pc, #92]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d009      	beq.n	80070fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ea:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	490f      	ldr	r1, [pc, #60]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070fe:	f000 f825 	bl	800714c <HAL_RCC_GetSysClockFreq>
 8007102:	4602      	mov	r2, r0
 8007104:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <HAL_RCC_ClockConfig+0x264>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	091b      	lsrs	r3, r3, #4
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	490c      	ldr	r1, [pc, #48]	@ (8007140 <HAL_RCC_ClockConfig+0x26c>)
 8007110:	5ccb      	ldrb	r3, [r1, r3]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	fa22 f303 	lsr.w	r3, r2, r3
 800711a:	4a0a      	ldr	r2, [pc, #40]	@ (8007144 <HAL_RCC_ClockConfig+0x270>)
 800711c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <HAL_RCC_ClockConfig+0x274>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7fa fb18 	bl	8001758 <HAL_InitTick>
 8007128:	4603      	mov	r3, r0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40022000 	.word	0x40022000
 8007138:	40021000 	.word	0x40021000
 800713c:	04c4b400 	.word	0x04c4b400
 8007140:	0800cc24 	.word	0x0800cc24
 8007144:	20000000 	.word	0x20000000
 8007148:	20001268 	.word	0x20001268

0800714c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007152:	4b2c      	ldr	r3, [pc, #176]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b04      	cmp	r3, #4
 800715c:	d102      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800715e:	4b2a      	ldr	r3, [pc, #168]	@ (8007208 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e047      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007164:	4b27      	ldr	r3, [pc, #156]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 030c 	and.w	r3, r3, #12
 800716c:	2b08      	cmp	r3, #8
 800716e:	d102      	bne.n	8007176 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007170:	4b26      	ldr	r3, [pc, #152]	@ (800720c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	e03e      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007176:	4b23      	ldr	r3, [pc, #140]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b0c      	cmp	r3, #12
 8007180:	d136      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007182:	4b20      	ldr	r3, [pc, #128]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800718c:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	091b      	lsrs	r3, r3, #4
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	3301      	adds	r3, #1
 8007198:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b03      	cmp	r3, #3
 800719e:	d10c      	bne.n	80071ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071a0:	4a1a      	ldr	r2, [pc, #104]	@ (800720c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	4a16      	ldr	r2, [pc, #88]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071aa:	68d2      	ldr	r2, [r2, #12]
 80071ac:	0a12      	lsrs	r2, r2, #8
 80071ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	617b      	str	r3, [r7, #20]
      break;
 80071b8:	e00c      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ba:	4a13      	ldr	r2, [pc, #76]	@ (8007208 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	4a10      	ldr	r2, [pc, #64]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c4:	68d2      	ldr	r2, [r2, #12]
 80071c6:	0a12      	lsrs	r2, r2, #8
 80071c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	617b      	str	r3, [r7, #20]
      break;
 80071d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	0e5b      	lsrs	r3, r3, #25
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	3301      	adds	r3, #1
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	e001      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071f4:	693b      	ldr	r3, [r7, #16]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40021000 	.word	0x40021000
 8007208:	00f42400 	.word	0x00f42400
 800720c:	016e3600 	.word	0x016e3600

08007210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007214:	4b03      	ldr	r3, [pc, #12]	@ (8007224 <HAL_RCC_GetHCLKFreq+0x14>)
 8007216:	681b      	ldr	r3, [r3, #0]
}
 8007218:	4618      	mov	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000000 	.word	0x20000000

08007228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800722c:	f7ff fff0 	bl	8007210 <HAL_RCC_GetHCLKFreq>
 8007230:	4602      	mov	r2, r0
 8007232:	4b06      	ldr	r3, [pc, #24]	@ (800724c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	4904      	ldr	r1, [pc, #16]	@ (8007250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800723e:	5ccb      	ldrb	r3, [r1, r3]
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40021000 	.word	0x40021000
 8007250:	0800cc34 	.word	0x0800cc34

08007254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007258:	f7ff ffda 	bl	8007210 <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	0adb      	lsrs	r3, r3, #11
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4904      	ldr	r1, [pc, #16]	@ (800727c <HAL_RCC_GetPCLK2Freq+0x28>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40021000 	.word	0x40021000
 800727c:	0800cc34 	.word	0x0800cc34

08007280 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220f      	movs	r2, #15
 800728e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007290:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0203 	and.w	r2, r3, #3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800729c:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072a8:	4b0c      	ldr	r3, [pc, #48]	@ (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072b4:	4b09      	ldr	r3, [pc, #36]	@ (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	08db      	lsrs	r3, r3, #3
 80072ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072c2:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <HAL_RCC_GetClockConfig+0x60>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40021000 	.word	0x40021000
 80072e0:	40022000 	.word	0x40022000

080072e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	091b      	lsrs	r3, r3, #4
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b03      	cmp	r3, #3
 8007306:	d10c      	bne.n	8007322 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007308:	4a17      	ldr	r2, [pc, #92]	@ (8007368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	4a14      	ldr	r2, [pc, #80]	@ (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007312:	68d2      	ldr	r2, [r2, #12]
 8007314:	0a12      	lsrs	r2, r2, #8
 8007316:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	617b      	str	r3, [r7, #20]
    break;
 8007320:	e00c      	b.n	800733c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007322:	4a12      	ldr	r2, [pc, #72]	@ (800736c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	4a0e      	ldr	r2, [pc, #56]	@ (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800732c:	68d2      	ldr	r2, [r2, #12]
 800732e:	0a12      	lsrs	r2, r2, #8
 8007330:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007334:	fb02 f303 	mul.w	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]
    break;
 800733a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800733c:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	3301      	adds	r3, #1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007356:	687b      	ldr	r3, [r7, #4]
}
 8007358:	4618      	mov	r0, r3
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40021000 	.word	0x40021000
 8007368:	016e3600 	.word	0x016e3600
 800736c:	00f42400 	.word	0x00f42400

08007370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007378:	2300      	movs	r3, #0
 800737a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800737c:	2300      	movs	r3, #0
 800737e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8098 	beq.w	80074be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007392:	4b43      	ldr	r3, [pc, #268]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10d      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739e:	4b40      	ldr	r3, [pc, #256]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a2:	4a3f      	ldr	r2, [pc, #252]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80073aa:	4b3d      	ldr	r3, [pc, #244]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073b6:	2301      	movs	r3, #1
 80073b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ba:	4b3a      	ldr	r3, [pc, #232]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a39      	ldr	r2, [pc, #228]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073c6:	f7fc fbf1 	bl	8003bac <HAL_GetTick>
 80073ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073cc:	e009      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ce:	f7fc fbed 	bl	8003bac <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d902      	bls.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	74fb      	strb	r3, [r7, #19]
        break;
 80073e0:	e005      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073e2:	4b30      	ldr	r3, [pc, #192]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0ef      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d159      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073f4:	4b2a      	ldr	r3, [pc, #168]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d01e      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	429a      	cmp	r2, r3
 800740e:	d019      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007410:	4b23      	ldr	r3, [pc, #140]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800741c:	4b20      	ldr	r3, [pc, #128]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007422:	4a1f      	ldr	r2, [pc, #124]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800742c:	4b1c      	ldr	r3, [pc, #112]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007432:	4a1b      	ldr	r2, [pc, #108]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800743c:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744e:	f7fc fbad 	bl	8003bac <HAL_GetTick>
 8007452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007454:	e00b      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007456:	f7fc fba9 	bl	8003bac <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007464:	4293      	cmp	r3, r2
 8007466:	d902      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	74fb      	strb	r3, [r7, #19]
            break;
 800746c:	e006      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746e:	4b0c      	ldr	r3, [pc, #48]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0ec      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800747c:	7cfb      	ldrb	r3, [r7, #19]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007482:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007490:	4903      	ldr	r1, [pc, #12]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007498:	e008      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800749a:	7cfb      	ldrb	r3, [r7, #19]
 800749c:	74bb      	strb	r3, [r7, #18]
 800749e:	e005      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074ac:	7c7b      	ldrb	r3, [r7, #17]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d105      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b2:	4ba6      	ldr	r3, [pc, #664]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b6:	4aa5      	ldr	r2, [pc, #660]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074ca:	4ba0      	ldr	r3, [pc, #640]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f023 0203 	bic.w	r2, r3, #3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	499c      	ldr	r1, [pc, #624]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074ec:	4b97      	ldr	r3, [pc, #604]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f2:	f023 020c 	bic.w	r2, r3, #12
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	4994      	ldr	r1, [pc, #592]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800750e:	4b8f      	ldr	r3, [pc, #572]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007514:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	498b      	ldr	r1, [pc, #556]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007530:	4b86      	ldr	r3, [pc, #536]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	4983      	ldr	r1, [pc, #524]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007552:	4b7e      	ldr	r3, [pc, #504]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007558:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	497a      	ldr	r1, [pc, #488]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007574:	4b75      	ldr	r3, [pc, #468]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	4972      	ldr	r1, [pc, #456]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007596:	4b6d      	ldr	r3, [pc, #436]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	4969      	ldr	r1, [pc, #420]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075b8:	4b64      	ldr	r3, [pc, #400]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	4961      	ldr	r1, [pc, #388]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075da:	4b5c      	ldr	r3, [pc, #368]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e8:	4958      	ldr	r1, [pc, #352]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d015      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075fc:	4b53      	ldr	r3, [pc, #332]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007602:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	4950      	ldr	r1, [pc, #320]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761a:	d105      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800761c:	4b4b      	ldr	r3, [pc, #300]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	4a4a      	ldr	r2, [pc, #296]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007626:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007630:	2b00      	cmp	r3, #0
 8007632:	d015      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007634:	4b45      	ldr	r3, [pc, #276]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	4942      	ldr	r1, [pc, #264]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007652:	d105      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007654:	4b3d      	ldr	r3, [pc, #244]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4a3c      	ldr	r2, [pc, #240]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800765e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d015      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800766c:	4b37      	ldr	r3, [pc, #220]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007672:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	4934      	ldr	r1, [pc, #208]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800768a:	d105      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800768c:	4b2f      	ldr	r3, [pc, #188]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4a2e      	ldr	r2, [pc, #184]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007696:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d015      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076a4:	4b29      	ldr	r3, [pc, #164]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b2:	4926      	ldr	r1, [pc, #152]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c2:	d105      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c4:	4b21      	ldr	r3, [pc, #132]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	4a20      	ldr	r2, [pc, #128]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d015      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076dc:	4b1b      	ldr	r3, [pc, #108]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	4918      	ldr	r1, [pc, #96]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076fa:	d105      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076fc:	4b13      	ldr	r3, [pc, #76]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4a12      	ldr	r2, [pc, #72]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007706:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d015      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007714:	4b0d      	ldr	r3, [pc, #52]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007722:	490a      	ldr	r1, [pc, #40]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007732:	d105      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4a04      	ldr	r2, [pc, #16]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800773a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800773e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007740:	7cbb      	ldrb	r3, [r7, #18]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000

08007750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e049      	b.n	80077f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f841 	bl	80077fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f000 fdc0 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
	...

08007814 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	d001      	beq.n	800782c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e042      	b.n	80078b2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a21      	ldr	r2, [pc, #132]	@ (80078c0 <HAL_TIM_Base_Start+0xac>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d018      	beq.n	8007870 <HAL_TIM_Base_Start+0x5c>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007846:	d013      	beq.n	8007870 <HAL_TIM_Base_Start+0x5c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1d      	ldr	r2, [pc, #116]	@ (80078c4 <HAL_TIM_Base_Start+0xb0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00e      	beq.n	8007870 <HAL_TIM_Base_Start+0x5c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1c      	ldr	r2, [pc, #112]	@ (80078c8 <HAL_TIM_Base_Start+0xb4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d009      	beq.n	8007870 <HAL_TIM_Base_Start+0x5c>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1a      	ldr	r2, [pc, #104]	@ (80078cc <HAL_TIM_Base_Start+0xb8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d004      	beq.n	8007870 <HAL_TIM_Base_Start+0x5c>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a19      	ldr	r2, [pc, #100]	@ (80078d0 <HAL_TIM_Base_Start+0xbc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d115      	bne.n	800789c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <HAL_TIM_Base_Start+0xc0>)
 8007878:	4013      	ands	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b06      	cmp	r3, #6
 8007880:	d015      	beq.n	80078ae <HAL_TIM_Base_Start+0x9a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007888:	d011      	beq.n	80078ae <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f042 0201 	orr.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800789a:	e008      	b.n	80078ae <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e000      	b.n	80078b0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40012c00 	.word	0x40012c00
 80078c4:	40000400 	.word	0x40000400
 80078c8:	40000800 	.word	0x40000800
 80078cc:	40013400 	.word	0x40013400
 80078d0:	40014000 	.word	0x40014000
 80078d4:	00010007 	.word	0x00010007

080078d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d001      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e04a      	b.n	8007986 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0201 	orr.w	r2, r2, #1
 8007906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a21      	ldr	r2, [pc, #132]	@ (8007994 <HAL_TIM_Base_Start_IT+0xbc>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d018      	beq.n	8007944 <HAL_TIM_Base_Start_IT+0x6c>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791a:	d013      	beq.n	8007944 <HAL_TIM_Base_Start_IT+0x6c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1d      	ldr	r2, [pc, #116]	@ (8007998 <HAL_TIM_Base_Start_IT+0xc0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00e      	beq.n	8007944 <HAL_TIM_Base_Start_IT+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1c      	ldr	r2, [pc, #112]	@ (800799c <HAL_TIM_Base_Start_IT+0xc4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d009      	beq.n	8007944 <HAL_TIM_Base_Start_IT+0x6c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1a      	ldr	r2, [pc, #104]	@ (80079a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <HAL_TIM_Base_Start_IT+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a19      	ldr	r2, [pc, #100]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d115      	bne.n	8007970 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	4b17      	ldr	r3, [pc, #92]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b06      	cmp	r3, #6
 8007954:	d015      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0xaa>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795c:	d011      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0201 	orr.w	r2, r2, #1
 800796c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796e:	e008      	b.n	8007982 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0201 	orr.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	e000      	b.n	8007984 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40013400 	.word	0x40013400
 80079a4:	40014000 	.word	0x40014000
 80079a8:	00010007 	.word	0x00010007

080079ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e049      	b.n	8007a52 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fa f8ca 	bl	8001b6c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f000 fc92 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e049      	b.n	8007b00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7fa f84d 	bl	8001b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f000 fc3b 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <HAL_TIM_PWM_Start+0x24>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	bf14      	ite	ne
 8007b24:	2301      	movne	r3, #1
 8007b26:	2300      	moveq	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	e03c      	b.n	8007ba6 <HAL_TIM_PWM_Start+0x9e>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d109      	bne.n	8007b46 <HAL_TIM_PWM_Start+0x3e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	bf14      	ite	ne
 8007b3e:	2301      	movne	r3, #1
 8007b40:	2300      	moveq	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	e02f      	b.n	8007ba6 <HAL_TIM_PWM_Start+0x9e>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d109      	bne.n	8007b60 <HAL_TIM_PWM_Start+0x58>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	bf14      	ite	ne
 8007b58:	2301      	movne	r3, #1
 8007b5a:	2300      	moveq	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	e022      	b.n	8007ba6 <HAL_TIM_PWM_Start+0x9e>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b0c      	cmp	r3, #12
 8007b64:	d109      	bne.n	8007b7a <HAL_TIM_PWM_Start+0x72>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	bf14      	ite	ne
 8007b72:	2301      	movne	r3, #1
 8007b74:	2300      	moveq	r3, #0
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	e015      	b.n	8007ba6 <HAL_TIM_PWM_Start+0x9e>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d109      	bne.n	8007b94 <HAL_TIM_PWM_Start+0x8c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	bf14      	ite	ne
 8007b8c:	2301      	movne	r3, #1
 8007b8e:	2300      	moveq	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	e008      	b.n	8007ba6 <HAL_TIM_PWM_Start+0x9e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	bf14      	ite	ne
 8007ba0:	2301      	movne	r3, #1
 8007ba2:	2300      	moveq	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e097      	b.n	8007cde <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_PWM_Start+0xb6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bbc:	e023      	b.n	8007c06 <HAL_TIM_PWM_Start+0xfe>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_PWM_Start+0xc6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bcc:	e01b      	b.n	8007c06 <HAL_TIM_PWM_Start+0xfe>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_PWM_Start+0xd6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bdc:	e013      	b.n	8007c06 <HAL_TIM_PWM_Start+0xfe>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b0c      	cmp	r3, #12
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_PWM_Start+0xe6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bec:	e00b      	b.n	8007c06 <HAL_TIM_PWM_Start+0xfe>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	d104      	bne.n	8007bfe <HAL_TIM_PWM_Start+0xf6>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bfc:	e003      	b.n	8007c06 <HAL_TIM_PWM_Start+0xfe>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 ff12 	bl	8008a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a33      	ldr	r2, [pc, #204]	@ (8007ce8 <HAL_TIM_PWM_Start+0x1e0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x13e>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a32      	ldr	r2, [pc, #200]	@ (8007cec <HAL_TIM_PWM_Start+0x1e4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00e      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x13e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a30      	ldr	r2, [pc, #192]	@ (8007cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d009      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x13e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a2f      	ldr	r2, [pc, #188]	@ (8007cf4 <HAL_TIM_PWM_Start+0x1ec>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d004      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x13e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf8 <HAL_TIM_PWM_Start+0x1f0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d101      	bne.n	8007c4a <HAL_TIM_PWM_Start+0x142>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <HAL_TIM_PWM_Start+0x144>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a20      	ldr	r2, [pc, #128]	@ (8007ce8 <HAL_TIM_PWM_Start+0x1e0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d018      	beq.n	8007c9c <HAL_TIM_PWM_Start+0x194>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	d013      	beq.n	8007c9c <HAL_TIM_PWM_Start+0x194>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a20      	ldr	r2, [pc, #128]	@ (8007cfc <HAL_TIM_PWM_Start+0x1f4>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00e      	beq.n	8007c9c <HAL_TIM_PWM_Start+0x194>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1f      	ldr	r2, [pc, #124]	@ (8007d00 <HAL_TIM_PWM_Start+0x1f8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d009      	beq.n	8007c9c <HAL_TIM_PWM_Start+0x194>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <HAL_TIM_PWM_Start+0x1e4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <HAL_TIM_PWM_Start+0x194>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d115      	bne.n	8007cc8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	4b18      	ldr	r3, [pc, #96]	@ (8007d04 <HAL_TIM_PWM_Start+0x1fc>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d015      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1d2>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb4:	d011      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc6:	e008      	b.n	8007cda <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	e000      	b.n	8007cdc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40012c00 	.word	0x40012c00
 8007cec:	40013400 	.word	0x40013400
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400
 8007cf8:	40014800 	.word	0x40014800
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800
 8007d04:	00010007 	.word	0x00010007

08007d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d020      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01b      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0202 	mvn.w	r2, #2
 8007d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fac0 	bl	80082d8 <HAL_TIM_IC_CaptureCallback>
 8007d58:	e005      	b.n	8007d66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fab2 	bl	80082c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fac3 	bl	80082ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d020      	beq.n	8007db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01b      	beq.n	8007db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0204 	mvn.w	r2, #4
 8007d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa9a 	bl	80082d8 <HAL_TIM_IC_CaptureCallback>
 8007da4:	e005      	b.n	8007db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa8c 	bl	80082c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa9d 	bl	80082ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d020      	beq.n	8007e04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f003 0308 	and.w	r3, r3, #8
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01b      	beq.n	8007e04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0208 	mvn.w	r2, #8
 8007dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa74 	bl	80082d8 <HAL_TIM_IC_CaptureCallback>
 8007df0:	e005      	b.n	8007dfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa66 	bl	80082c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa77 	bl	80082ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d020      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01b      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0210 	mvn.w	r2, #16
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2208      	movs	r2, #8
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa4e 	bl	80082d8 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa40 	bl	80082c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa51 	bl	80082ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0201 	mvn.w	r2, #1
 8007e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7f9 fc2e 	bl	80016d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00c      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 ffd0 	bl	8008e42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 ffc8 	bl	8008e56 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00c      	beq.n	8007eea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa0b 	bl	8008300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f06f 0220 	mvn.w	r2, #32
 8007f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 ff90 	bl	8008e2e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00c      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 ff9c 	bl	8008e6a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 ff94 	bl	8008e7e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00c      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 ff8c 	bl	8008e92 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00c      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 ff84 	bl	8008ea6 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e066      	b.n	8008094 <HAL_TIM_OC_ConfigChannel+0xec>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b14      	cmp	r3, #20
 8007fd2:	d857      	bhi.n	8008084 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fdc <HAL_TIM_OC_ConfigChannel+0x34>)
 8007fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fda:	bf00      	nop
 8007fdc:	08008031 	.word	0x08008031
 8007fe0:	08008085 	.word	0x08008085
 8007fe4:	08008085 	.word	0x08008085
 8007fe8:	08008085 	.word	0x08008085
 8007fec:	0800803f 	.word	0x0800803f
 8007ff0:	08008085 	.word	0x08008085
 8007ff4:	08008085 	.word	0x08008085
 8007ff8:	08008085 	.word	0x08008085
 8007ffc:	0800804d 	.word	0x0800804d
 8008000:	08008085 	.word	0x08008085
 8008004:	08008085 	.word	0x08008085
 8008008:	08008085 	.word	0x08008085
 800800c:	0800805b 	.word	0x0800805b
 8008010:	08008085 	.word	0x08008085
 8008014:	08008085 	.word	0x08008085
 8008018:	08008085 	.word	0x08008085
 800801c:	08008069 	.word	0x08008069
 8008020:	08008085 	.word	0x08008085
 8008024:	08008085 	.word	0x08008085
 8008028:	08008085 	.word	0x08008085
 800802c:	08008077 	.word	0x08008077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fa08 	bl	800844c <TIM_OC1_SetConfig>
      break;
 800803c:	e025      	b.n	800808a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fa91 	bl	800856c <TIM_OC2_SetConfig>
      break;
 800804a:	e01e      	b.n	800808a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fb14 	bl	8008680 <TIM_OC3_SetConfig>
      break;
 8008058:	e017      	b.n	800808a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fb95 	bl	8008790 <TIM_OC4_SetConfig>
      break;
 8008066:	e010      	b.n	800808a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fc18 	bl	80088a4 <TIM_OC5_SetConfig>
      break;
 8008074:	e009      	b.n	800808a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fc75 	bl	800896c <TIM_OC6_SetConfig>
      break;
 8008082:	e002      	b.n	800808a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e0ff      	b.n	80082ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b14      	cmp	r3, #20
 80080c6:	f200 80f0 	bhi.w	80082aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080ca:	a201      	add	r2, pc, #4	@ (adr r2, 80080d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008125 	.word	0x08008125
 80080d4:	080082ab 	.word	0x080082ab
 80080d8:	080082ab 	.word	0x080082ab
 80080dc:	080082ab 	.word	0x080082ab
 80080e0:	08008165 	.word	0x08008165
 80080e4:	080082ab 	.word	0x080082ab
 80080e8:	080082ab 	.word	0x080082ab
 80080ec:	080082ab 	.word	0x080082ab
 80080f0:	080081a7 	.word	0x080081a7
 80080f4:	080082ab 	.word	0x080082ab
 80080f8:	080082ab 	.word	0x080082ab
 80080fc:	080082ab 	.word	0x080082ab
 8008100:	080081e7 	.word	0x080081e7
 8008104:	080082ab 	.word	0x080082ab
 8008108:	080082ab 	.word	0x080082ab
 800810c:	080082ab 	.word	0x080082ab
 8008110:	08008229 	.word	0x08008229
 8008114:	080082ab 	.word	0x080082ab
 8008118:	080082ab 	.word	0x080082ab
 800811c:	080082ab 	.word	0x080082ab
 8008120:	08008269 	.word	0x08008269
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f98e 	bl	800844c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0208 	orr.w	r2, r2, #8
 800813e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0204 	bic.w	r2, r2, #4
 800814e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6999      	ldr	r1, [r3, #24]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	619a      	str	r2, [r3, #24]
      break;
 8008162:	e0a5      	b.n	80082b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f9fe 	bl	800856c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800817e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800818e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6999      	ldr	r1, [r3, #24]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	021a      	lsls	r2, r3, #8
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	619a      	str	r2, [r3, #24]
      break;
 80081a4:	e084      	b.n	80082b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fa67 	bl	8008680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69da      	ldr	r2, [r3, #28]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0208 	orr.w	r2, r2, #8
 80081c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0204 	bic.w	r2, r2, #4
 80081d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69d9      	ldr	r1, [r3, #28]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	61da      	str	r2, [r3, #28]
      break;
 80081e4:	e064      	b.n	80082b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 facf 	bl	8008790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69da      	ldr	r2, [r3, #28]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69d9      	ldr	r1, [r3, #28]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	021a      	lsls	r2, r3, #8
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	61da      	str	r2, [r3, #28]
      break;
 8008226:	e043      	b.n	80082b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fb38 	bl	80088a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0208 	orr.w	r2, r2, #8
 8008242:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0204 	bic.w	r2, r2, #4
 8008252:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008266:	e023      	b.n	80082b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fb7c 	bl	800896c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008282:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008292:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	021a      	lsls	r2, r3, #8
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80082a8:	e002      	b.n	80082b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]
      break;
 80082ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop

080082c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a42      	ldr	r2, [pc, #264]	@ (8008430 <TIM_Base_SetConfig+0x11c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00f      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008332:	d00b      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a3f      	ldr	r2, [pc, #252]	@ (8008434 <TIM_Base_SetConfig+0x120>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a3e      	ldr	r2, [pc, #248]	@ (8008438 <TIM_Base_SetConfig+0x124>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a3d      	ldr	r2, [pc, #244]	@ (800843c <TIM_Base_SetConfig+0x128>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d108      	bne.n	800835e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a33      	ldr	r2, [pc, #204]	@ (8008430 <TIM_Base_SetConfig+0x11c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d01b      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836c:	d017      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a30      	ldr	r2, [pc, #192]	@ (8008434 <TIM_Base_SetConfig+0x120>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a2f      	ldr	r2, [pc, #188]	@ (8008438 <TIM_Base_SetConfig+0x124>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00f      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a2e      	ldr	r2, [pc, #184]	@ (800843c <TIM_Base_SetConfig+0x128>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00b      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a2d      	ldr	r2, [pc, #180]	@ (8008440 <TIM_Base_SetConfig+0x12c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2c      	ldr	r2, [pc, #176]	@ (8008444 <TIM_Base_SetConfig+0x130>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d003      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a2b      	ldr	r2, [pc, #172]	@ (8008448 <TIM_Base_SetConfig+0x134>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d108      	bne.n	80083b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a16      	ldr	r2, [pc, #88]	@ (8008430 <TIM_Base_SetConfig+0x11c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a17      	ldr	r2, [pc, #92]	@ (800843c <TIM_Base_SetConfig+0x128>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a16      	ldr	r2, [pc, #88]	@ (8008440 <TIM_Base_SetConfig+0x12c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a15      	ldr	r2, [pc, #84]	@ (8008444 <TIM_Base_SetConfig+0x130>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a14      	ldr	r2, [pc, #80]	@ (8008448 <TIM_Base_SetConfig+0x134>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d103      	bne.n	8008404 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	d105      	bne.n	8008422 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f023 0201 	bic.w	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	611a      	str	r2, [r3, #16]
  }
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40000400 	.word	0x40000400
 8008438:	40000800 	.word	0x40000800
 800843c:	40013400 	.word	0x40013400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800

0800844c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	f023 0201 	bic.w	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800847a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 0302 	bic.w	r3, r3, #2
 8008498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00f      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a2b      	ldr	r2, [pc, #172]	@ (800855c <TIM_OC1_SetConfig+0x110>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00b      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008560 <TIM_OC1_SetConfig+0x114>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d007      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a29      	ldr	r2, [pc, #164]	@ (8008564 <TIM_OC1_SetConfig+0x118>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a28      	ldr	r2, [pc, #160]	@ (8008568 <TIM_OC1_SetConfig+0x11c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d10c      	bne.n	80084e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f023 0308 	bic.w	r3, r3, #8
 80084d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	@ (800855c <TIM_OC1_SetConfig+0x110>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a19      	ldr	r2, [pc, #100]	@ (8008560 <TIM_OC1_SetConfig+0x114>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a18      	ldr	r2, [pc, #96]	@ (8008564 <TIM_OC1_SetConfig+0x118>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a17      	ldr	r2, [pc, #92]	@ (8008568 <TIM_OC1_SetConfig+0x11c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d111      	bne.n	8008532 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800851c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	40012c00 	.word	0x40012c00
 800855c:	40013400 	.word	0x40013400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f023 0210 	bic.w	r2, r3, #16
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f023 0320 	bic.w	r3, r3, #32
 80085ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a28      	ldr	r2, [pc, #160]	@ (800866c <TIM_OC2_SetConfig+0x100>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_OC2_SetConfig+0x6c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a27      	ldr	r2, [pc, #156]	@ (8008670 <TIM_OC2_SetConfig+0x104>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d10d      	bne.n	80085f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1d      	ldr	r2, [pc, #116]	@ (800866c <TIM_OC2_SetConfig+0x100>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00f      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008670 <TIM_OC2_SetConfig+0x104>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00b      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1b      	ldr	r2, [pc, #108]	@ (8008674 <TIM_OC2_SetConfig+0x108>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d007      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a1a      	ldr	r2, [pc, #104]	@ (8008678 <TIM_OC2_SetConfig+0x10c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a19      	ldr	r2, [pc, #100]	@ (800867c <TIM_OC2_SetConfig+0x110>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d113      	bne.n	8008644 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800862a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40012c00 	.word	0x40012c00
 8008670:	40013400 	.word	0x40013400
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a27      	ldr	r2, [pc, #156]	@ (800877c <TIM_OC3_SetConfig+0xfc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_OC3_SetConfig+0x6a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a26      	ldr	r2, [pc, #152]	@ (8008780 <TIM_OC3_SetConfig+0x100>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d10d      	bne.n	8008706 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1c      	ldr	r2, [pc, #112]	@ (800877c <TIM_OC3_SetConfig+0xfc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00f      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1b      	ldr	r2, [pc, #108]	@ (8008780 <TIM_OC3_SetConfig+0x100>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00b      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1a      	ldr	r2, [pc, #104]	@ (8008784 <TIM_OC3_SetConfig+0x104>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a19      	ldr	r2, [pc, #100]	@ (8008788 <TIM_OC3_SetConfig+0x108>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a18      	ldr	r2, [pc, #96]	@ (800878c <TIM_OC3_SetConfig+0x10c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d113      	bne.n	8008756 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800873c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	621a      	str	r2, [r3, #32]
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40012c00 	.word	0x40012c00
 8008780:	40013400 	.word	0x40013400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800

08008790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a28      	ldr	r2, [pc, #160]	@ (8008890 <TIM_OC4_SetConfig+0x100>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC4_SetConfig+0x6c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a27      	ldr	r2, [pc, #156]	@ (8008894 <TIM_OC4_SetConfig+0x104>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d10d      	bne.n	8008818 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	031b      	lsls	r3, r3, #12
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a1d      	ldr	r2, [pc, #116]	@ (8008890 <TIM_OC4_SetConfig+0x100>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00f      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1c      	ldr	r2, [pc, #112]	@ (8008894 <TIM_OC4_SetConfig+0x104>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00b      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a1b      	ldr	r2, [pc, #108]	@ (8008898 <TIM_OC4_SetConfig+0x108>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d007      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a1a      	ldr	r2, [pc, #104]	@ (800889c <TIM_OC4_SetConfig+0x10c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a19      	ldr	r2, [pc, #100]	@ (80088a0 <TIM_OC4_SetConfig+0x110>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d113      	bne.n	8008868 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008846:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800884e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	019b      	lsls	r3, r3, #6
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	019b      	lsls	r3, r3, #6
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	4313      	orrs	r3, r2
 8008866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40013400 	.word	0x40013400
 8008898:	40014000 	.word	0x40014000
 800889c:	40014400 	.word	0x40014400
 80088a0:	40014800 	.word	0x40014800

080088a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80088e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	041b      	lsls	r3, r3, #16
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a17      	ldr	r2, [pc, #92]	@ (8008958 <TIM_OC5_SetConfig+0xb4>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00f      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a16      	ldr	r2, [pc, #88]	@ (800895c <TIM_OC5_SetConfig+0xb8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00b      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a15      	ldr	r2, [pc, #84]	@ (8008960 <TIM_OC5_SetConfig+0xbc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d007      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a14      	ldr	r2, [pc, #80]	@ (8008964 <TIM_OC5_SetConfig+0xc0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a13      	ldr	r2, [pc, #76]	@ (8008968 <TIM_OC5_SetConfig+0xc4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d109      	bne.n	8008932 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	621a      	str	r2, [r3, #32]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800

0800896c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	051b      	lsls	r3, r3, #20
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a18      	ldr	r2, [pc, #96]	@ (8008a24 <TIM_OC6_SetConfig+0xb8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00f      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a17      	ldr	r2, [pc, #92]	@ (8008a28 <TIM_OC6_SetConfig+0xbc>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00b      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a16      	ldr	r2, [pc, #88]	@ (8008a2c <TIM_OC6_SetConfig+0xc0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a15      	ldr	r2, [pc, #84]	@ (8008a30 <TIM_OC6_SetConfig+0xc4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a14      	ldr	r2, [pc, #80]	@ (8008a34 <TIM_OC6_SetConfig+0xc8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d109      	bne.n	80089fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	029b      	lsls	r3, r3, #10
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	40014000 	.word	0x40014000
 8008a30:	40014400 	.word	0x40014400
 8008a34:	40014800 	.word	0x40014800

08008a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 031f 	and.w	r3, r3, #31
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1a      	ldr	r2, [r3, #32]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	43db      	mvns	r3, r3
 8008a5a:	401a      	ands	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a1a      	ldr	r2, [r3, #32]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a70:	431a      	orrs	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
	...

08008a84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d109      	bne.n	8008aa8 <HAL_TIMEx_PWMN_Start+0x24>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	bf14      	ite	ne
 8008aa0:	2301      	movne	r3, #1
 8008aa2:	2300      	moveq	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	e022      	b.n	8008aee <HAL_TIMEx_PWMN_Start+0x6a>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d109      	bne.n	8008ac2 <HAL_TIMEx_PWMN_Start+0x3e>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	bf14      	ite	ne
 8008aba:	2301      	movne	r3, #1
 8008abc:	2300      	moveq	r3, #0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	e015      	b.n	8008aee <HAL_TIMEx_PWMN_Start+0x6a>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d109      	bne.n	8008adc <HAL_TIMEx_PWMN_Start+0x58>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	bf14      	ite	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e008      	b.n	8008aee <HAL_TIMEx_PWMN_Start+0x6a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	bf14      	ite	ne
 8008ae8:	2301      	movne	r3, #1
 8008aea:	2300      	moveq	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e069      	b.n	8008bca <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <HAL_TIMEx_PWMN_Start+0x82>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b04:	e013      	b.n	8008b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d104      	bne.n	8008b16 <HAL_TIMEx_PWMN_Start+0x92>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b14:	e00b      	b.n	8008b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d104      	bne.n	8008b26 <HAL_TIMEx_PWMN_Start+0xa2>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b24:	e003      	b.n	8008b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2204      	movs	r2, #4
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f9bf 	bl	8008eba <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a20      	ldr	r2, [pc, #128]	@ (8008bd4 <HAL_TIMEx_PWMN_Start+0x150>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d018      	beq.n	8008b88 <HAL_TIMEx_PWMN_Start+0x104>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5e:	d013      	beq.n	8008b88 <HAL_TIMEx_PWMN_Start+0x104>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd8 <HAL_TIMEx_PWMN_Start+0x154>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00e      	beq.n	8008b88 <HAL_TIMEx_PWMN_Start+0x104>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008bdc <HAL_TIMEx_PWMN_Start+0x158>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d009      	beq.n	8008b88 <HAL_TIMEx_PWMN_Start+0x104>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a19      	ldr	r2, [pc, #100]	@ (8008be0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d004      	beq.n	8008b88 <HAL_TIMEx_PWMN_Start+0x104>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a18      	ldr	r2, [pc, #96]	@ (8008be4 <HAL_TIMEx_PWMN_Start+0x160>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d115      	bne.n	8008bb4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	4b16      	ldr	r3, [pc, #88]	@ (8008be8 <HAL_TIMEx_PWMN_Start+0x164>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b06      	cmp	r3, #6
 8008b98:	d015      	beq.n	8008bc6 <HAL_TIMEx_PWMN_Start+0x142>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ba0:	d011      	beq.n	8008bc6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0201 	orr.w	r2, r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb2:	e008      	b.n	8008bc6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0201 	orr.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	e000      	b.n	8008bc8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40012c00 	.word	0x40012c00
 8008bd8:	40000400 	.word	0x40000400
 8008bdc:	40000800 	.word	0x40000800
 8008be0:	40013400 	.word	0x40013400
 8008be4:	40014000 	.word	0x40014000
 8008be8:	00010007 	.word	0x00010007

08008bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e065      	b.n	8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2c      	ldr	r2, [pc, #176]	@ (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a2b      	ldr	r2, [pc, #172]	@ (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c7a:	d013      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a18      	ldr	r2, [pc, #96]	@ (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	@ (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a12      	ldr	r2, [pc, #72]	@ (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a13      	ldr	r2, [pc, #76]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d10c      	bne.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	40012c00 	.word	0x40012c00
 8008ce0:	40013400 	.word	0x40013400
 8008ce4:	40000400 	.word	0x40000400
 8008ce8:	40000800 	.word	0x40000800
 8008cec:	40014000 	.word	0x40014000

08008cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e073      	b.n	8008df4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	041b      	lsls	r3, r3, #16
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a19      	ldr	r2, [pc, #100]	@ (8008e00 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d004      	beq.n	8008da8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a18      	ldr	r2, [pc, #96]	@ (8008e04 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d11c      	bne.n	8008de2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db2:	051b      	lsls	r3, r3, #20
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	40013400 	.word	0x40013400

08008e08 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008e9a:	bf00      	nop
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b087      	sub	sp, #28
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	2204      	movs	r2, #4
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	43db      	mvns	r3, r3
 8008edc:	401a      	ands	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a1a      	ldr	r2, [r3, #32]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f003 030f 	and.w	r3, r3, #15
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	621a      	str	r2, [r3, #32]
}
 8008ef8:	bf00      	nop
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e042      	b.n	8008f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f83b 	bl	8008fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2224      	movs	r2, #36	@ 0x24
 8008f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0201 	bic.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fafe 	bl	8009550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f82f 	bl	8008fb8 <UART_SetConfig>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e01b      	b.n	8008f9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0201 	orr.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fb7d 	bl	8009694 <UART_CheckIdleState>
 8008f9a:	4603      	mov	r3, r0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fbc:	b08c      	sub	sp, #48	@ 0x30
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	4bab      	ldr	r3, [pc, #684]	@ (8009294 <UART_SetConfig+0x2dc>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4aa0      	ldr	r2, [pc, #640]	@ (8009298 <UART_SetConfig+0x2e0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d004      	beq.n	8009024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009020:	4313      	orrs	r3, r2
 8009022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800902e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009038:	430b      	orrs	r3, r1
 800903a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009042:	f023 010f 	bic.w	r1, r3, #15
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a91      	ldr	r2, [pc, #580]	@ (800929c <UART_SetConfig+0x2e4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d125      	bne.n	80090a8 <UART_SetConfig+0xf0>
 800905c:	4b90      	ldr	r3, [pc, #576]	@ (80092a0 <UART_SetConfig+0x2e8>)
 800905e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b03      	cmp	r3, #3
 8009068:	d81a      	bhi.n	80090a0 <UART_SetConfig+0xe8>
 800906a:	a201      	add	r2, pc, #4	@ (adr r2, 8009070 <UART_SetConfig+0xb8>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009081 	.word	0x08009081
 8009074:	08009091 	.word	0x08009091
 8009078:	08009089 	.word	0x08009089
 800907c:	08009099 	.word	0x08009099
 8009080:	2301      	movs	r3, #1
 8009082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009086:	e0d6      	b.n	8009236 <UART_SetConfig+0x27e>
 8009088:	2302      	movs	r3, #2
 800908a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908e:	e0d2      	b.n	8009236 <UART_SetConfig+0x27e>
 8009090:	2304      	movs	r3, #4
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009096:	e0ce      	b.n	8009236 <UART_SetConfig+0x27e>
 8009098:	2308      	movs	r3, #8
 800909a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800909e:	e0ca      	b.n	8009236 <UART_SetConfig+0x27e>
 80090a0:	2310      	movs	r3, #16
 80090a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090a6:	e0c6      	b.n	8009236 <UART_SetConfig+0x27e>
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a7d      	ldr	r2, [pc, #500]	@ (80092a4 <UART_SetConfig+0x2ec>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d138      	bne.n	8009124 <UART_SetConfig+0x16c>
 80090b2:	4b7b      	ldr	r3, [pc, #492]	@ (80092a0 <UART_SetConfig+0x2e8>)
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b8:	f003 030c 	and.w	r3, r3, #12
 80090bc:	2b0c      	cmp	r3, #12
 80090be:	d82d      	bhi.n	800911c <UART_SetConfig+0x164>
 80090c0:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <UART_SetConfig+0x110>)
 80090c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c6:	bf00      	nop
 80090c8:	080090fd 	.word	0x080090fd
 80090cc:	0800911d 	.word	0x0800911d
 80090d0:	0800911d 	.word	0x0800911d
 80090d4:	0800911d 	.word	0x0800911d
 80090d8:	0800910d 	.word	0x0800910d
 80090dc:	0800911d 	.word	0x0800911d
 80090e0:	0800911d 	.word	0x0800911d
 80090e4:	0800911d 	.word	0x0800911d
 80090e8:	08009105 	.word	0x08009105
 80090ec:	0800911d 	.word	0x0800911d
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	0800911d 	.word	0x0800911d
 80090f8:	08009115 	.word	0x08009115
 80090fc:	2300      	movs	r3, #0
 80090fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009102:	e098      	b.n	8009236 <UART_SetConfig+0x27e>
 8009104:	2302      	movs	r3, #2
 8009106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800910a:	e094      	b.n	8009236 <UART_SetConfig+0x27e>
 800910c:	2304      	movs	r3, #4
 800910e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009112:	e090      	b.n	8009236 <UART_SetConfig+0x27e>
 8009114:	2308      	movs	r3, #8
 8009116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800911a:	e08c      	b.n	8009236 <UART_SetConfig+0x27e>
 800911c:	2310      	movs	r3, #16
 800911e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009122:	e088      	b.n	8009236 <UART_SetConfig+0x27e>
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a5f      	ldr	r2, [pc, #380]	@ (80092a8 <UART_SetConfig+0x2f0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d125      	bne.n	800917a <UART_SetConfig+0x1c2>
 800912e:	4b5c      	ldr	r3, [pc, #368]	@ (80092a0 <UART_SetConfig+0x2e8>)
 8009130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009134:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009138:	2b30      	cmp	r3, #48	@ 0x30
 800913a:	d016      	beq.n	800916a <UART_SetConfig+0x1b2>
 800913c:	2b30      	cmp	r3, #48	@ 0x30
 800913e:	d818      	bhi.n	8009172 <UART_SetConfig+0x1ba>
 8009140:	2b20      	cmp	r3, #32
 8009142:	d00a      	beq.n	800915a <UART_SetConfig+0x1a2>
 8009144:	2b20      	cmp	r3, #32
 8009146:	d814      	bhi.n	8009172 <UART_SetConfig+0x1ba>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <UART_SetConfig+0x19a>
 800914c:	2b10      	cmp	r3, #16
 800914e:	d008      	beq.n	8009162 <UART_SetConfig+0x1aa>
 8009150:	e00f      	b.n	8009172 <UART_SetConfig+0x1ba>
 8009152:	2300      	movs	r3, #0
 8009154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009158:	e06d      	b.n	8009236 <UART_SetConfig+0x27e>
 800915a:	2302      	movs	r3, #2
 800915c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009160:	e069      	b.n	8009236 <UART_SetConfig+0x27e>
 8009162:	2304      	movs	r3, #4
 8009164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009168:	e065      	b.n	8009236 <UART_SetConfig+0x27e>
 800916a:	2308      	movs	r3, #8
 800916c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009170:	e061      	b.n	8009236 <UART_SetConfig+0x27e>
 8009172:	2310      	movs	r3, #16
 8009174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009178:	e05d      	b.n	8009236 <UART_SetConfig+0x27e>
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a4b      	ldr	r2, [pc, #300]	@ (80092ac <UART_SetConfig+0x2f4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d125      	bne.n	80091d0 <UART_SetConfig+0x218>
 8009184:	4b46      	ldr	r3, [pc, #280]	@ (80092a0 <UART_SetConfig+0x2e8>)
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800918a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800918e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009190:	d016      	beq.n	80091c0 <UART_SetConfig+0x208>
 8009192:	2bc0      	cmp	r3, #192	@ 0xc0
 8009194:	d818      	bhi.n	80091c8 <UART_SetConfig+0x210>
 8009196:	2b80      	cmp	r3, #128	@ 0x80
 8009198:	d00a      	beq.n	80091b0 <UART_SetConfig+0x1f8>
 800919a:	2b80      	cmp	r3, #128	@ 0x80
 800919c:	d814      	bhi.n	80091c8 <UART_SetConfig+0x210>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <UART_SetConfig+0x1f0>
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	d008      	beq.n	80091b8 <UART_SetConfig+0x200>
 80091a6:	e00f      	b.n	80091c8 <UART_SetConfig+0x210>
 80091a8:	2300      	movs	r3, #0
 80091aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ae:	e042      	b.n	8009236 <UART_SetConfig+0x27e>
 80091b0:	2302      	movs	r3, #2
 80091b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b6:	e03e      	b.n	8009236 <UART_SetConfig+0x27e>
 80091b8:	2304      	movs	r3, #4
 80091ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091be:	e03a      	b.n	8009236 <UART_SetConfig+0x27e>
 80091c0:	2308      	movs	r3, #8
 80091c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091c6:	e036      	b.n	8009236 <UART_SetConfig+0x27e>
 80091c8:	2310      	movs	r3, #16
 80091ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ce:	e032      	b.n	8009236 <UART_SetConfig+0x27e>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a30      	ldr	r2, [pc, #192]	@ (8009298 <UART_SetConfig+0x2e0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d12a      	bne.n	8009230 <UART_SetConfig+0x278>
 80091da:	4b31      	ldr	r3, [pc, #196]	@ (80092a0 <UART_SetConfig+0x2e8>)
 80091dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091e8:	d01a      	beq.n	8009220 <UART_SetConfig+0x268>
 80091ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091ee:	d81b      	bhi.n	8009228 <UART_SetConfig+0x270>
 80091f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091f4:	d00c      	beq.n	8009210 <UART_SetConfig+0x258>
 80091f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091fa:	d815      	bhi.n	8009228 <UART_SetConfig+0x270>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <UART_SetConfig+0x250>
 8009200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009204:	d008      	beq.n	8009218 <UART_SetConfig+0x260>
 8009206:	e00f      	b.n	8009228 <UART_SetConfig+0x270>
 8009208:	2300      	movs	r3, #0
 800920a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800920e:	e012      	b.n	8009236 <UART_SetConfig+0x27e>
 8009210:	2302      	movs	r3, #2
 8009212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009216:	e00e      	b.n	8009236 <UART_SetConfig+0x27e>
 8009218:	2304      	movs	r3, #4
 800921a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800921e:	e00a      	b.n	8009236 <UART_SetConfig+0x27e>
 8009220:	2308      	movs	r3, #8
 8009222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009226:	e006      	b.n	8009236 <UART_SetConfig+0x27e>
 8009228:	2310      	movs	r3, #16
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800922e:	e002      	b.n	8009236 <UART_SetConfig+0x27e>
 8009230:	2310      	movs	r3, #16
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a17      	ldr	r2, [pc, #92]	@ (8009298 <UART_SetConfig+0x2e0>)
 800923c:	4293      	cmp	r3, r2
 800923e:	f040 80a8 	bne.w	8009392 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009246:	2b08      	cmp	r3, #8
 8009248:	d834      	bhi.n	80092b4 <UART_SetConfig+0x2fc>
 800924a:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <UART_SetConfig+0x298>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009275 	.word	0x08009275
 8009254:	080092b5 	.word	0x080092b5
 8009258:	0800927d 	.word	0x0800927d
 800925c:	080092b5 	.word	0x080092b5
 8009260:	08009283 	.word	0x08009283
 8009264:	080092b5 	.word	0x080092b5
 8009268:	080092b5 	.word	0x080092b5
 800926c:	080092b5 	.word	0x080092b5
 8009270:	0800928b 	.word	0x0800928b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009274:	f7fd ffd8 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8009278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800927a:	e021      	b.n	80092c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800927c:	4b0c      	ldr	r3, [pc, #48]	@ (80092b0 <UART_SetConfig+0x2f8>)
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009280:	e01e      	b.n	80092c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009282:	f7fd ff63 	bl	800714c <HAL_RCC_GetSysClockFreq>
 8009286:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009288:	e01a      	b.n	80092c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009290:	e016      	b.n	80092c0 <UART_SetConfig+0x308>
 8009292:	bf00      	nop
 8009294:	cfff69f3 	.word	0xcfff69f3
 8009298:	40008000 	.word	0x40008000
 800929c:	40013800 	.word	0x40013800
 80092a0:	40021000 	.word	0x40021000
 80092a4:	40004400 	.word	0x40004400
 80092a8:	40004800 	.word	0x40004800
 80092ac:	40004c00 	.word	0x40004c00
 80092b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 812a 	beq.w	800951c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092cc:	4a9e      	ldr	r2, [pc, #632]	@ (8009548 <UART_SetConfig+0x590>)
 80092ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092da:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	4413      	add	r3, r2
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d305      	bcc.n	80092f8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d903      	bls.n	8009300 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092fe:	e10d      	b.n	800951c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	2200      	movs	r2, #0
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	60fa      	str	r2, [r7, #12]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930c:	4a8e      	ldr	r2, [pc, #568]	@ (8009548 <UART_SetConfig+0x590>)
 800930e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009312:	b29b      	uxth	r3, r3
 8009314:	2200      	movs	r2, #0
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	607a      	str	r2, [r7, #4]
 800931a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800931e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009322:	f7f7 fc39 	bl	8000b98 <__aeabi_uldivmod>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	020b      	lsls	r3, r1, #8
 8009338:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800933c:	0202      	lsls	r2, r0, #8
 800933e:	6979      	ldr	r1, [r7, #20]
 8009340:	6849      	ldr	r1, [r1, #4]
 8009342:	0849      	lsrs	r1, r1, #1
 8009344:	2000      	movs	r0, #0
 8009346:	460c      	mov	r4, r1
 8009348:	4605      	mov	r5, r0
 800934a:	eb12 0804 	adds.w	r8, r2, r4
 800934e:	eb43 0905 	adc.w	r9, r3, r5
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	469a      	mov	sl, r3
 800935a:	4693      	mov	fp, r2
 800935c:	4652      	mov	r2, sl
 800935e:	465b      	mov	r3, fp
 8009360:	4640      	mov	r0, r8
 8009362:	4649      	mov	r1, r9
 8009364:	f7f7 fc18 	bl	8000b98 <__aeabi_uldivmod>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4613      	mov	r3, r2
 800936e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009376:	d308      	bcc.n	800938a <UART_SetConfig+0x3d2>
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800937e:	d204      	bcs.n	800938a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6a3a      	ldr	r2, [r7, #32]
 8009386:	60da      	str	r2, [r3, #12]
 8009388:	e0c8      	b.n	800951c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009390:	e0c4      	b.n	800951c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800939a:	d167      	bne.n	800946c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800939c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d828      	bhi.n	80093f6 <UART_SetConfig+0x43e>
 80093a4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <UART_SetConfig+0x3f4>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093d1 	.word	0x080093d1
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093e1 	.word	0x080093e1
 80093b8:	080093f7 	.word	0x080093f7
 80093bc:	080093e7 	.word	0x080093e7
 80093c0:	080093f7 	.word	0x080093f7
 80093c4:	080093f7 	.word	0x080093f7
 80093c8:	080093f7 	.word	0x080093f7
 80093cc:	080093ef 	.word	0x080093ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093d0:	f7fd ff2a 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 80093d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093d6:	e014      	b.n	8009402 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d8:	f7fd ff3c 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 80093dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093de:	e010      	b.n	8009402 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093e0:	4b5a      	ldr	r3, [pc, #360]	@ (800954c <UART_SetConfig+0x594>)
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093e4:	e00d      	b.n	8009402 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093e6:	f7fd feb1 	bl	800714c <HAL_RCC_GetSysClockFreq>
 80093ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ec:	e009      	b.n	8009402 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093f4:	e005      	b.n	8009402 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8089 	beq.w	800951c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940e:	4a4e      	ldr	r2, [pc, #312]	@ (8009548 <UART_SetConfig+0x590>)
 8009410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009414:	461a      	mov	r2, r3
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	fbb3 f3f2 	udiv	r3, r3, r2
 800941c:	005a      	lsls	r2, r3, #1
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	441a      	add	r2, r3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	fbb2 f3f3 	udiv	r3, r2, r3
 800942e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	2b0f      	cmp	r3, #15
 8009434:	d916      	bls.n	8009464 <UART_SetConfig+0x4ac>
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800943c:	d212      	bcs.n	8009464 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	b29b      	uxth	r3, r3
 8009442:	f023 030f 	bic.w	r3, r3, #15
 8009446:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	b29b      	uxth	r3, r3
 800944e:	f003 0307 	and.w	r3, r3, #7
 8009452:	b29a      	uxth	r2, r3
 8009454:	8bfb      	ldrh	r3, [r7, #30]
 8009456:	4313      	orrs	r3, r2
 8009458:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	8bfa      	ldrh	r2, [r7, #30]
 8009460:	60da      	str	r2, [r3, #12]
 8009462:	e05b      	b.n	800951c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800946a:	e057      	b.n	800951c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800946c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009470:	2b08      	cmp	r3, #8
 8009472:	d828      	bhi.n	80094c6 <UART_SetConfig+0x50e>
 8009474:	a201      	add	r2, pc, #4	@ (adr r2, 800947c <UART_SetConfig+0x4c4>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094a1 	.word	0x080094a1
 8009480:	080094a9 	.word	0x080094a9
 8009484:	080094b1 	.word	0x080094b1
 8009488:	080094c7 	.word	0x080094c7
 800948c:	080094b7 	.word	0x080094b7
 8009490:	080094c7 	.word	0x080094c7
 8009494:	080094c7 	.word	0x080094c7
 8009498:	080094c7 	.word	0x080094c7
 800949c:	080094bf 	.word	0x080094bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a0:	f7fd fec2 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 80094a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094a6:	e014      	b.n	80094d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094a8:	f7fd fed4 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 80094ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094ae:	e010      	b.n	80094d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094b0:	4b26      	ldr	r3, [pc, #152]	@ (800954c <UART_SetConfig+0x594>)
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094b4:	e00d      	b.n	80094d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094b6:	f7fd fe49 	bl	800714c <HAL_RCC_GetSysClockFreq>
 80094ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094bc:	e009      	b.n	80094d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094c4:	e005      	b.n	80094d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094d0:	bf00      	nop
    }

    if (pclk != 0U)
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d021      	beq.n	800951c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	4a1a      	ldr	r2, [pc, #104]	@ (8009548 <UART_SetConfig+0x590>)
 80094de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	441a      	add	r2, r3
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	d909      	bls.n	8009516 <UART_SetConfig+0x55e>
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009508:	d205      	bcs.n	8009516 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	b29a      	uxth	r2, r3
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	60da      	str	r2, [r3, #12]
 8009514:	e002      	b.n	800951c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2201      	movs	r2, #1
 8009520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2201      	movs	r2, #1
 8009528:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2200      	movs	r2, #0
 8009530:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2200      	movs	r2, #0
 8009536:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009538:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800953c:	4618      	mov	r0, r3
 800953e:	3730      	adds	r7, #48	@ 0x30
 8009540:	46bd      	mov	sp, r7
 8009542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009546:	bf00      	nop
 8009548:	0800cc60 	.word	0x0800cc60
 800954c:	00f42400 	.word	0x00f42400

08009550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	f003 0308 	and.w	r3, r3, #8
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e4:	f003 0310 	and.w	r3, r3, #16
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00a      	beq.n	8009624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d01a      	beq.n	8009666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800964a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800964e:	d10a      	bne.n	8009666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b098      	sub	sp, #96	@ 0x60
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096a4:	f7fa fa82 	bl	8003bac <HAL_GetTick>
 80096a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d12f      	bne.n	8009718 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096c0:	2200      	movs	r2, #0
 80096c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f88e 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d022      	beq.n	8009718 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80096f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2220      	movs	r2, #32
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e063      	b.n	80097e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b04      	cmp	r3, #4
 8009724:	d149      	bne.n	80097ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009726:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800972e:	2200      	movs	r2, #0
 8009730:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f857 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d03c      	beq.n	80097ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	623b      	str	r3, [r7, #32]
   return(result);
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800975e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009760:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e6      	bne.n	8009740 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	60fb      	str	r3, [r7, #12]
   return(result);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f023 0301 	bic.w	r3, r3, #1
 8009788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009792:	61fa      	str	r2, [r7, #28]
 8009794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	69b9      	ldr	r1, [r7, #24]
 8009798:	69fa      	ldr	r2, [r7, #28]
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	617b      	str	r3, [r7, #20]
   return(result);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e5      	bne.n	8009772 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e012      	b.n	80097e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3758      	adds	r7, #88	@ 0x58
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4613      	mov	r3, r2
 80097f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f8:	e04f      	b.n	800989a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009800:	d04b      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009802:	f7fa f9d3 	bl	8003bac <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	429a      	cmp	r2, r3
 8009810:	d302      	bcc.n	8009818 <UART_WaitOnFlagUntilTimeout+0x30>
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e04e      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d037      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0xb2>
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b80      	cmp	r3, #128	@ 0x80
 800982e:	d034      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b40      	cmp	r3, #64	@ 0x40
 8009834:	d031      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	f003 0308 	and.w	r3, r3, #8
 8009840:	2b08      	cmp	r3, #8
 8009842:	d110      	bne.n	8009866 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2208      	movs	r2, #8
 800984a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f838 	bl	80098c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2208      	movs	r2, #8
 8009856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e029      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009874:	d111      	bne.n	800989a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800987e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 f81e 	bl	80098c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e00f      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69da      	ldr	r2, [r3, #28]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4013      	ands	r3, r2
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	bf0c      	ite	eq
 80098aa:	2301      	moveq	r3, #1
 80098ac:	2300      	movne	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d0a0      	beq.n	80097fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b095      	sub	sp, #84	@ 0x54
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80098ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e6      	bne.n	80098ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	61fb      	str	r3, [r7, #28]
   return(result);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3308      	adds	r3, #8
 800991e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d118      	bne.n	800996e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	60bb      	str	r3, [r7, #8]
   return(result);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f023 0310 	bic.w	r3, r3, #16
 8009950:	647b      	str	r3, [r7, #68]	@ 0x44
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800995a:	61bb      	str	r3, [r7, #24]
 800995c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	6979      	ldr	r1, [r7, #20]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	613b      	str	r3, [r7, #16]
   return(result);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e6      	bne.n	800993c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2220      	movs	r2, #32
 8009972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009982:	bf00      	nop
 8009984:	3754      	adds	r7, #84	@ 0x54
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <__NVIC_SetPriority>:
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800999c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	db0a      	blt.n	80099ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	490c      	ldr	r1, [pc, #48]	@ (80099dc <__NVIC_SetPriority+0x4c>)
 80099aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ae:	0112      	lsls	r2, r2, #4
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	440b      	add	r3, r1
 80099b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80099b8:	e00a      	b.n	80099d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	4908      	ldr	r1, [pc, #32]	@ (80099e0 <__NVIC_SetPriority+0x50>)
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	3b04      	subs	r3, #4
 80099c8:	0112      	lsls	r2, r2, #4
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	440b      	add	r3, r1
 80099ce:	761a      	strb	r2, [r3, #24]
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	e000e100 	.word	0xe000e100
 80099e0:	e000ed00 	.word	0xe000ed00

080099e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80099e8:	4b05      	ldr	r3, [pc, #20]	@ (8009a00 <SysTick_Handler+0x1c>)
 80099ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80099ec:	f001 fe44 	bl	800b678 <xTaskGetSchedulerState>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d001      	beq.n	80099fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80099f6:	f002 fc3f 	bl	800c278 <xPortSysTickHandler>
  }
}
 80099fa:	bf00      	nop
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	e000e010 	.word	0xe000e010

08009a04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a08:	2100      	movs	r1, #0
 8009a0a:	f06f 0004 	mvn.w	r0, #4
 8009a0e:	f7ff ffbf 	bl	8009990 <__NVIC_SetPriority>
#endif
}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	603b      	str	r3, [r7, #0]
  return(result);
 8009a24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a2a:	f06f 0305 	mvn.w	r3, #5
 8009a2e:	607b      	str	r3, [r7, #4]
 8009a30:	e00c      	b.n	8009a4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a32:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <osKernelInitialize+0x44>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a3a:	4b08      	ldr	r3, [pc, #32]	@ (8009a5c <osKernelInitialize+0x44>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	607b      	str	r3, [r7, #4]
 8009a44:	e002      	b.n	8009a4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a4c:	687b      	ldr	r3, [r7, #4]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20001948 	.word	0x20001948

08009a60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a66:	f3ef 8305 	mrs	r3, IPSR
 8009a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a72:	f06f 0305 	mvn.w	r3, #5
 8009a76:	607b      	str	r3, [r7, #4]
 8009a78:	e010      	b.n	8009a9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa8 <osKernelStart+0x48>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d109      	bne.n	8009a96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a82:	f7ff ffbf 	bl	8009a04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a86:	4b08      	ldr	r3, [pc, #32]	@ (8009aa8 <osKernelStart+0x48>)
 8009a88:	2202      	movs	r2, #2
 8009a8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a8c:	f001 f97e 	bl	800ad8c <vTaskStartScheduler>
      stat = osOK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	607b      	str	r3, [r7, #4]
 8009a94:	e002      	b.n	8009a9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a9c:	687b      	ldr	r3, [r7, #4]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20001948 	.word	0x20001948

08009aac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ab2:	f3ef 8305 	mrs	r3, IPSR
 8009ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ab8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009abe:	f001 fa91 	bl	800afe4 <xTaskGetTickCountFromISR>
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	e002      	b.n	8009acc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009ac6:	f001 fa7d 	bl	800afc4 <xTaskGetTickCount>
 8009aca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009acc:	687b      	ldr	r3, [r7, #4]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b08e      	sub	sp, #56	@ 0x38
 8009ada:	af04      	add	r7, sp, #16
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae6:	f3ef 8305 	mrs	r3, IPSR
 8009aea:	617b      	str	r3, [r7, #20]
  return(result);
 8009aec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d17e      	bne.n	8009bf0 <osThreadNew+0x11a>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d07b      	beq.n	8009bf0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009af8:	2380      	movs	r3, #128	@ 0x80
 8009afa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009afc:	2318      	movs	r3, #24
 8009afe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009b04:	f04f 33ff 	mov.w	r3, #4294967295
 8009b08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d045      	beq.n	8009b9c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <osThreadNew+0x48>
        name = attr->name;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d008      	beq.n	8009b44 <osThreadNew+0x6e>
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b38      	cmp	r3, #56	@ 0x38
 8009b36:	d805      	bhi.n	8009b44 <osThreadNew+0x6e>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <osThreadNew+0x72>
        return (NULL);
 8009b44:	2300      	movs	r3, #0
 8009b46:	e054      	b.n	8009bf2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00e      	beq.n	8009b7e <osThreadNew+0xa8>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2ba7      	cmp	r3, #167	@ 0xa7
 8009b66:	d90a      	bls.n	8009b7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d006      	beq.n	8009b7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <osThreadNew+0xa8>
        mem = 1;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	e010      	b.n	8009ba0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10c      	bne.n	8009ba0 <osThreadNew+0xca>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d108      	bne.n	8009ba0 <osThreadNew+0xca>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <osThreadNew+0xca>
          mem = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	e001      	b.n	8009ba0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d110      	bne.n	8009bc8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bae:	9202      	str	r2, [sp, #8]
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6a3a      	ldr	r2, [r7, #32]
 8009bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fe33 	bl	800a828 <xTaskCreateStatic>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	613b      	str	r3, [r7, #16]
 8009bc6:	e013      	b.n	8009bf0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d110      	bne.n	8009bf0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	f107 0310 	add.w	r3, r7, #16
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fe81 	bl	800a8e8 <xTaskCreate>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d001      	beq.n	8009bf0 <osThreadNew+0x11a>
            hTask = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009bf0:	693b      	ldr	r3, [r7, #16]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3728      	adds	r7, #40	@ 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f000 ffd0 	bl	800aba4 <vTaskDelete>
#endif
  for (;;);
 8009c04:	bf00      	nop
 8009c06:	e7fd      	b.n	8009c04 <osThreadExit+0xa>

08009c08 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c10:	f3ef 8305 	mrs	r3, IPSR
 8009c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c16:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009c1c:	f06f 0305 	mvn.w	r3, #5
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e019      	b.n	8009c58 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009c28:	f001 f9cc 	bl	800afc4 <xTaskGetTickCount>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <osDelayUntil+0x4a>
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	db06      	blt.n	8009c52 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	6939      	ldr	r1, [r7, #16]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 f81e 	bl	800ac8c <vTaskDelayUntil>
 8009c50:	e002      	b.n	8009c58 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009c52:	f06f 0303 	mvn.w	r3, #3
 8009c56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c58:	697b      	ldr	r3, [r7, #20]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4a07      	ldr	r2, [pc, #28]	@ (8009c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	4a06      	ldr	r2, [pc, #24]	@ (8009c94 <vApplicationGetIdleTaskMemory+0x30>)
 8009c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2280      	movs	r2, #128	@ 0x80
 8009c80:	601a      	str	r2, [r3, #0]
}
 8009c82:	bf00      	nop
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	2000194c 	.word	0x2000194c
 8009c94:	200019f4 	.word	0x200019f4

08009c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4a07      	ldr	r2, [pc, #28]	@ (8009cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4a06      	ldr	r2, [pc, #24]	@ (8009cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8009cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cb6:	601a      	str	r2, [r3, #0]
}
 8009cb8:	bf00      	nop
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	20001bf4 	.word	0x20001bf4
 8009cc8:	20001c9c 	.word	0x20001c9c

08009ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f103 0208 	add.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f103 0208 	add.w	r2, r3, #8
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f103 0208 	add.w	r2, r3, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d1a:	bf00      	nop
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d26:	b480      	push	{r7}
 8009d28:	b085      	sub	sp, #20
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	601a      	str	r2, [r3, #0]
}
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d84:	d103      	bne.n	8009d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e00c      	b.n	8009da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3308      	adds	r3, #8
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e002      	b.n	8009d9c <vListInsert+0x2e>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d2f6      	bcs.n	8009d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	601a      	str	r2, [r3, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6892      	ldr	r2, [r2, #8]
 8009df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6852      	ldr	r2, [r2, #4]
 8009e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d103      	bne.n	8009e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	1e5a      	subs	r2, r3, #1
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10b      	bne.n	8009e60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e5a:	bf00      	nop
 8009e5c:	bf00      	nop
 8009e5e:	e7fd      	b.n	8009e5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e60:	f002 f97a 	bl	800c158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6c:	68f9      	ldr	r1, [r7, #12]
 8009e6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	441a      	add	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e90:	3b01      	subs	r3, #1
 8009e92:	68f9      	ldr	r1, [r7, #12]
 8009e94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e96:	fb01 f303 	mul.w	r3, r1, r3
 8009e9a:	441a      	add	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	22ff      	movs	r2, #255	@ 0xff
 8009ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	22ff      	movs	r2, #255	@ 0xff
 8009eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d114      	bne.n	8009ee0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01a      	beq.n	8009ef4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3310      	adds	r3, #16
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fa12 	bl	800b2ec <xTaskRemoveFromEventList>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d012      	beq.n	8009ef4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ece:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <xQueueGenericReset+0xd0>)
 8009ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	e009      	b.n	8009ef4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3310      	adds	r3, #16
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fef1 	bl	8009ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3324      	adds	r3, #36	@ 0x24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff feec 	bl	8009ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ef4:	f002 f962 	bl	800c1bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ef8:	2301      	movs	r3, #1
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	e000ed04 	.word	0xe000ed04

08009f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08e      	sub	sp, #56	@ 0x38
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	e7fd      	b.n	8009f30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10b      	bne.n	8009f52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	e7fd      	b.n	8009f4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <xQueueGenericCreateStatic+0x56>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <xQueueGenericCreateStatic+0x5a>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e000      	b.n	8009f64 <xQueueGenericCreateStatic+0x5c>
 8009f62:	2300      	movs	r3, #0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10b      	bne.n	8009f80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	623b      	str	r3, [r7, #32]
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d102      	bne.n	8009f8c <xQueueGenericCreateStatic+0x84>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <xQueueGenericCreateStatic+0x88>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e000      	b.n	8009f92 <xQueueGenericCreateStatic+0x8a>
 8009f90:	2300      	movs	r3, #0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10b      	bne.n	8009fae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	61fb      	str	r3, [r7, #28]
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	e7fd      	b.n	8009faa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fae:	2350      	movs	r3, #80	@ 0x50
 8009fb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b50      	cmp	r3, #80	@ 0x50
 8009fb6:	d00b      	beq.n	8009fd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	61bb      	str	r3, [r7, #24]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fe4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4613      	mov	r3, r2
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f805 	bl	800a002 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3730      	adds	r7, #48	@ 0x30
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d103      	bne.n	800a01e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e002      	b.n	800a024 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a030:	2101      	movs	r1, #1
 800a032:	69b8      	ldr	r0, [r7, #24]
 800a034:	f7ff fefe 	bl	8009e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	78fa      	ldrb	r2, [r7, #3]
 800a03c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08e      	sub	sp, #56	@ 0x38
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a056:	2300      	movs	r3, #0
 800a058:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10b      	bne.n	800a07c <xQueueGenericSend+0x34>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	e7fd      	b.n	800a078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d103      	bne.n	800a08a <xQueueGenericSend+0x42>
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <xQueueGenericSend+0x46>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <xQueueGenericSend+0x48>
 800a08e:	2300      	movs	r3, #0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xQueueGenericSend+0x64>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d103      	bne.n	800a0ba <xQueueGenericSend+0x72>
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <xQueueGenericSend+0x76>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e000      	b.n	800a0c0 <xQueueGenericSend+0x78>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10b      	bne.n	800a0dc <xQueueGenericSend+0x94>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	623b      	str	r3, [r7, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	bf00      	nop
 800a0da:	e7fd      	b.n	800a0d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0dc:	f001 facc 	bl	800b678 <xTaskGetSchedulerState>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <xQueueGenericSend+0xa4>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <xQueueGenericSend+0xa8>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e000      	b.n	800a0f2 <xQueueGenericSend+0xaa>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <xQueueGenericSend+0xc6>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	61fb      	str	r3, [r7, #28]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a10e:	f002 f823 	bl	800c158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d302      	bcc.n	800a124 <xQueueGenericSend+0xdc>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d129      	bne.n	800a178 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12a:	f000 fa0f 	bl	800a54c <prvCopyDataToQueue>
 800a12e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	d010      	beq.n	800a15a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	3324      	adds	r3, #36	@ 0x24
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 f8d5 	bl	800b2ec <xTaskRemoveFromEventList>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d013      	beq.n	800a170 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a148:	4b3f      	ldr	r3, [pc, #252]	@ (800a248 <xQueueGenericSend+0x200>)
 800a14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	e00a      	b.n	800a170 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d007      	beq.n	800a170 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a160:	4b39      	ldr	r3, [pc, #228]	@ (800a248 <xQueueGenericSend+0x200>)
 800a162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a170:	f002 f824 	bl	800c1bc <vPortExitCritical>
				return pdPASS;
 800a174:	2301      	movs	r3, #1
 800a176:	e063      	b.n	800a240 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d103      	bne.n	800a186 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a17e:	f002 f81d 	bl	800c1bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a182:	2300      	movs	r3, #0
 800a184:	e05c      	b.n	800a240 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a18c:	f107 0314 	add.w	r3, r7, #20
 800a190:	4618      	mov	r0, r3
 800a192:	f001 f90f 	bl	800b3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a196:	2301      	movs	r3, #1
 800a198:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a19a:	f002 f80f 	bl	800c1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a19e:	f000 fe65 	bl	800ae6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1a2:	f001 ffd9 	bl	800c158 <vPortEnterCritical>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1ac:	b25b      	sxtb	r3, r3
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b2:	d103      	bne.n	800a1bc <xQueueGenericSend+0x174>
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1c2:	b25b      	sxtb	r3, r3
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c8:	d103      	bne.n	800a1d2 <xQueueGenericSend+0x18a>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1d2:	f001 fff3 	bl	800c1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d6:	1d3a      	adds	r2, r7, #4
 800a1d8:	f107 0314 	add.w	r3, r7, #20
 800a1dc:	4611      	mov	r1, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f001 f8fe 	bl	800b3e0 <xTaskCheckForTimeOut>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d124      	bne.n	800a234 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1ec:	f000 faa6 	bl	800a73c <prvIsQueueFull>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d018      	beq.n	800a228 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	3310      	adds	r3, #16
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 f822 	bl	800b248 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a206:	f000 fa31 	bl	800a66c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a20a:	f000 fe3d 	bl	800ae88 <xTaskResumeAll>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	f47f af7c 	bne.w	800a10e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a216:	4b0c      	ldr	r3, [pc, #48]	@ (800a248 <xQueueGenericSend+0x200>)
 800a218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	e772      	b.n	800a10e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a22a:	f000 fa1f 	bl	800a66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a22e:	f000 fe2b 	bl	800ae88 <xTaskResumeAll>
 800a232:	e76c      	b.n	800a10e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a236:	f000 fa19 	bl	800a66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a23a:	f000 fe25 	bl	800ae88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a23e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a240:	4618      	mov	r0, r3
 800a242:	3738      	adds	r7, #56	@ 0x38
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b090      	sub	sp, #64	@ 0x40
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <xQueueGenericSendFromISR+0x3e>
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <xQueueGenericSendFromISR+0x42>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <xQueueGenericSendFromISR+0x44>
 800a28e:	2300      	movs	r3, #0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10b      	bne.n	800a2ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2a6:	bf00      	nop
 800a2a8:	bf00      	nop
 800a2aa:	e7fd      	b.n	800a2a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d103      	bne.n	800a2ba <xQueueGenericSendFromISR+0x6e>
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d101      	bne.n	800a2be <xQueueGenericSendFromISR+0x72>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e000      	b.n	800a2c0 <xQueueGenericSendFromISR+0x74>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10b      	bne.n	800a2dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	623b      	str	r3, [r7, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	e7fd      	b.n	800a2d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2dc:	f002 f81c 	bl	800c318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2e0:	f3ef 8211 	mrs	r2, BASEPRI
 800a2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	61fa      	str	r2, [r7, #28]
 800a2f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a304:	429a      	cmp	r2, r3
 800a306:	d302      	bcc.n	800a30e <xQueueGenericSendFromISR+0xc2>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d12f      	bne.n	800a36e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a314:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a324:	f000 f912 	bl	800a54c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a328:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d112      	bne.n	800a358 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33c:	3324      	adds	r3, #36	@ 0x24
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 ffd4 	bl	800b2ec <xTaskRemoveFromEventList>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00e      	beq.n	800a368 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	e007      	b.n	800a368 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a358:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a35c:	3301      	adds	r3, #1
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	b25a      	sxtb	r2, r3
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a368:	2301      	movs	r3, #1
 800a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a36c:	e001      	b.n	800a372 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a374:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a37c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a380:	4618      	mov	r0, r3
 800a382:	3740      	adds	r7, #64	@ 0x40
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08c      	sub	sp, #48	@ 0x30
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a394:	2300      	movs	r3, #0
 800a396:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10b      	bne.n	800a3ba <xQueueReceive+0x32>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	623b      	str	r3, [r7, #32]
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	e7fd      	b.n	800a3b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d103      	bne.n	800a3c8 <xQueueReceive+0x40>
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <xQueueReceive+0x44>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e000      	b.n	800a3ce <xQueueReceive+0x46>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <xQueueReceive+0x62>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	61fb      	str	r3, [r7, #28]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ea:	f001 f945 	bl	800b678 <xTaskGetSchedulerState>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <xQueueReceive+0x72>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <xQueueReceive+0x76>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e000      	b.n	800a400 <xQueueReceive+0x78>
 800a3fe:	2300      	movs	r3, #0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10b      	bne.n	800a41c <xQueueReceive+0x94>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	61bb      	str	r3, [r7, #24]
}
 800a416:	bf00      	nop
 800a418:	bf00      	nop
 800a41a:	e7fd      	b.n	800a418 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a41c:	f001 fe9c 	bl	800c158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a424:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01f      	beq.n	800a46c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a42c:	68b9      	ldr	r1, [r7, #8]
 800a42e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a430:	f000 f8f6 	bl	800a620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	1e5a      	subs	r2, r3, #1
 800a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00f      	beq.n	800a464 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	3310      	adds	r3, #16
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 ff4f 	bl	800b2ec <xTaskRemoveFromEventList>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a454:	4b3c      	ldr	r3, [pc, #240]	@ (800a548 <xQueueReceive+0x1c0>)
 800a456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a464:	f001 feaa 	bl	800c1bc <vPortExitCritical>
				return pdPASS;
 800a468:	2301      	movs	r3, #1
 800a46a:	e069      	b.n	800a540 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a472:	f001 fea3 	bl	800c1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a476:	2300      	movs	r3, #0
 800a478:	e062      	b.n	800a540 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a480:	f107 0310 	add.w	r3, r7, #16
 800a484:	4618      	mov	r0, r3
 800a486:	f000 ff95 	bl	800b3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a48a:	2301      	movs	r3, #1
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a48e:	f001 fe95 	bl	800c1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a492:	f000 fceb 	bl	800ae6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a496:	f001 fe5f 	bl	800c158 <vPortEnterCritical>
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4a0:	b25b      	sxtb	r3, r3
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d103      	bne.n	800a4b0 <xQueueReceive+0x128>
 800a4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4b6:	b25b      	sxtb	r3, r3
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4bc:	d103      	bne.n	800a4c6 <xQueueReceive+0x13e>
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4c6:	f001 fe79 	bl	800c1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ca:	1d3a      	adds	r2, r7, #4
 800a4cc:	f107 0310 	add.w	r3, r7, #16
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 ff84 	bl	800b3e0 <xTaskCheckForTimeOut>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d123      	bne.n	800a526 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4e0:	f000 f916 	bl	800a710 <prvIsQueueEmpty>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d017      	beq.n	800a51a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	3324      	adds	r3, #36	@ 0x24
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 fea8 	bl	800b248 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4fa:	f000 f8b7 	bl	800a66c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4fe:	f000 fcc3 	bl	800ae88 <xTaskResumeAll>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d189      	bne.n	800a41c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a508:	4b0f      	ldr	r3, [pc, #60]	@ (800a548 <xQueueReceive+0x1c0>)
 800a50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	e780      	b.n	800a41c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a51c:	f000 f8a6 	bl	800a66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a520:	f000 fcb2 	bl	800ae88 <xTaskResumeAll>
 800a524:	e77a      	b.n	800a41c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a528:	f000 f8a0 	bl	800a66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a52c:	f000 fcac 	bl	800ae88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a532:	f000 f8ed 	bl	800a710 <prvIsQueueEmpty>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f43f af6f 	beq.w	800a41c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a53e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a540:	4618      	mov	r0, r3
 800a542:	3730      	adds	r7, #48	@ 0x30
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10d      	bne.n	800a586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d14d      	bne.n	800a60e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	4618      	mov	r0, r3
 800a578:	f001 f89c 	bl	800b6b4 <xTaskPriorityDisinherit>
 800a57c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	609a      	str	r2, [r3, #8]
 800a584:	e043      	b.n	800a60e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d119      	bne.n	800a5c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6858      	ldr	r0, [r3, #4]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a594:	461a      	mov	r2, r3
 800a596:	68b9      	ldr	r1, [r7, #8]
 800a598:	f002 f980 	bl	800c89c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a4:	441a      	add	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d32b      	bcc.n	800a60e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	605a      	str	r2, [r3, #4]
 800a5be:	e026      	b.n	800a60e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	68d8      	ldr	r0, [r3, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	f002 f966 	bl	800c89c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d8:	425b      	negs	r3, r3
 800a5da:	441a      	add	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68da      	ldr	r2, [r3, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d207      	bcs.n	800a5fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f4:	425b      	negs	r3, r3
 800a5f6:	441a      	add	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d105      	bne.n	800a60e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a616:	697b      	ldr	r3, [r7, #20]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d018      	beq.n	800a664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63a:	441a      	add	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d303      	bcc.n	800a654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68d9      	ldr	r1, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65c:	461a      	mov	r2, r3
 800a65e:	6838      	ldr	r0, [r7, #0]
 800a660:	f002 f91c 	bl	800c89c <memcpy>
	}
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a674:	f001 fd70 	bl	800c158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a67e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a680:	e011      	b.n	800a6a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a686:	2b00      	cmp	r3, #0
 800a688:	d012      	beq.n	800a6b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3324      	adds	r3, #36	@ 0x24
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 fe2c 	bl	800b2ec <xTaskRemoveFromEventList>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a69a:	f000 ff05 	bl	800b4a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dce9      	bgt.n	800a682 <prvUnlockQueue+0x16>
 800a6ae:	e000      	b.n	800a6b2 <prvUnlockQueue+0x46>
					break;
 800a6b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	22ff      	movs	r2, #255	@ 0xff
 800a6b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a6ba:	f001 fd7f 	bl	800c1bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6be:	f001 fd4b 	bl	800c158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ca:	e011      	b.n	800a6f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d012      	beq.n	800a6fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3310      	adds	r3, #16
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 fe07 	bl	800b2ec <xTaskRemoveFromEventList>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6e4:	f000 fee0 	bl	800b4a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dce9      	bgt.n	800a6cc <prvUnlockQueue+0x60>
 800a6f8:	e000      	b.n	800a6fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	22ff      	movs	r2, #255	@ 0xff
 800a700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a704:	f001 fd5a 	bl	800c1bc <vPortExitCritical>
}
 800a708:	bf00      	nop
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a718:	f001 fd1e 	bl	800c158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a720:	2b00      	cmp	r3, #0
 800a722:	d102      	bne.n	800a72a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a724:	2301      	movs	r3, #1
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	e001      	b.n	800a72e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a72e:	f001 fd45 	bl	800c1bc <vPortExitCritical>

	return xReturn;
 800a732:	68fb      	ldr	r3, [r7, #12]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a744:	f001 fd08 	bl	800c158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a750:	429a      	cmp	r2, r3
 800a752:	d102      	bne.n	800a75a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a754:	2301      	movs	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e001      	b.n	800a75e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a75e:	f001 fd2d 	bl	800c1bc <vPortExitCritical>

	return xReturn;
 800a762:	68fb      	ldr	r3, [r7, #12]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e014      	b.n	800a7a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a77c:	4a0f      	ldr	r2, [pc, #60]	@ (800a7bc <vQueueAddToRegistry+0x50>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a788:	490c      	ldr	r1, [pc, #48]	@ (800a7bc <vQueueAddToRegistry+0x50>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a792:	4a0a      	ldr	r2, [pc, #40]	@ (800a7bc <vQueueAddToRegistry+0x50>)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	4413      	add	r3, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a79e:	e006      	b.n	800a7ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b07      	cmp	r3, #7
 800a7aa:	d9e7      	bls.n	800a77c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	2000209c 	.word	0x2000209c

0800a7c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7d0:	f001 fcc2 	bl	800c158 <vPortEnterCritical>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e0:	d103      	bne.n	800a7ea <vQueueWaitForMessageRestricted+0x2a>
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7f0:	b25b      	sxtb	r3, r3
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d103      	bne.n	800a800 <vQueueWaitForMessageRestricted+0x40>
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a800:	f001 fcdc 	bl	800c1bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3324      	adds	r3, #36	@ 0x24
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fd3d 	bl	800b294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a81a:	6978      	ldr	r0, [r7, #20]
 800a81c:	f7ff ff26 	bl	800a66c <prvUnlockQueue>
	}
 800a820:	bf00      	nop
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	@ 0x38
 800a82c:	af04      	add	r7, sp, #16
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	623b      	str	r3, [r7, #32]
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	e7fd      	b.n	800a850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	61fb      	str	r3, [r7, #28]
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	e7fd      	b.n	800a86e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a872:	23a8      	movs	r3, #168	@ 0xa8
 800a874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2ba8      	cmp	r3, #168	@ 0xa8
 800a87a:	d00b      	beq.n	800a894 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	61bb      	str	r3, [r7, #24]
}
 800a88e:	bf00      	nop
 800a890:	bf00      	nop
 800a892:	e7fd      	b.n	800a890 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a894:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01e      	beq.n	800a8da <xTaskCreateStatic+0xb2>
 800a89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01b      	beq.n	800a8da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9303      	str	r3, [sp, #12]
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	f107 0314 	add.w	r3, r7, #20
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 f851 	bl	800a974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8d4:	f000 f8f6 	bl	800aac4 <prvAddNewTaskToReadyList>
 800a8d8:	e001      	b.n	800a8de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8de:	697b      	ldr	r3, [r7, #20]
	}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3728      	adds	r7, #40	@ 0x28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08c      	sub	sp, #48	@ 0x30
 800a8ec:	af04      	add	r7, sp, #16
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	603b      	str	r3, [r7, #0]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8f8:	88fb      	ldrh	r3, [r7, #6]
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fd4d 	bl	800c39c <pvPortMalloc>
 800a902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00e      	beq.n	800a928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a90a:	20a8      	movs	r0, #168	@ 0xa8
 800a90c:	f001 fd46 	bl	800c39c <pvPortMalloc>
 800a910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a91e:	e005      	b.n	800a92c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a920:	6978      	ldr	r0, [r7, #20]
 800a922:	f001 fe09 	bl	800c538 <vPortFree>
 800a926:	e001      	b.n	800a92c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a928:	2300      	movs	r3, #0
 800a92a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d017      	beq.n	800a962 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a93a:	88fa      	ldrh	r2, [r7, #6]
 800a93c:	2300      	movs	r3, #0
 800a93e:	9303      	str	r3, [sp, #12]
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	9302      	str	r3, [sp, #8]
 800a944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 f80f 	bl	800a974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a956:	69f8      	ldr	r0, [r7, #28]
 800a958:	f000 f8b4 	bl	800aac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a95c:	2301      	movs	r3, #1
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e002      	b.n	800a968 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a968:	69bb      	ldr	r3, [r7, #24]
	}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	461a      	mov	r2, r3
 800a98c:	21a5      	movs	r1, #165	@ 0xa5
 800a98e:	f001 fef3 	bl	800c778 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a99c:	3b01      	subs	r3, #1
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00b      	beq.n	800a9ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	617b      	str	r3, [r7, #20]
}
 800a9c8:	bf00      	nop
 800a9ca:	bf00      	nop
 800a9cc:	e7fd      	b.n	800a9ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01f      	beq.n	800aa14 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61fb      	str	r3, [r7, #28]
 800a9d8:	e012      	b.n	800aa00 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	4413      	add	r3, r2
 800a9e0:	7819      	ldrb	r1, [r3, #0]
 800a9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	3334      	adds	r3, #52	@ 0x34
 800a9ea:	460a      	mov	r2, r1
 800a9ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d006      	beq.n	800aa08 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	61fb      	str	r3, [r7, #28]
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	2b0f      	cmp	r3, #15
 800aa04:	d9e9      	bls.n	800a9da <prvInitialiseNewTask+0x66>
 800aa06:	e000      	b.n	800aa0a <prvInitialiseNewTask+0x96>
			{
				break;
 800aa08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa12:	e003      	b.n	800aa1c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1e:	2b37      	cmp	r3, #55	@ 0x37
 800aa20:	d901      	bls.n	800aa26 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa22:	2337      	movs	r3, #55	@ 0x37
 800aa24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa30:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	2200      	movs	r2, #0
 800aa36:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff f965 	bl	8009d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	3318      	adds	r3, #24
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff f960 	bl	8009d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa74:	3354      	adds	r3, #84	@ 0x54
 800aa76:	224c      	movs	r2, #76	@ 0x4c
 800aa78:	2100      	movs	r1, #0
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 fe7c 	bl	800c778 <memset>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	4a0d      	ldr	r2, [pc, #52]	@ (800aab8 <prvInitialiseNewTask+0x144>)
 800aa84:	659a      	str	r2, [r3, #88]	@ 0x58
 800aa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa88:	4a0c      	ldr	r2, [pc, #48]	@ (800aabc <prvInitialiseNewTask+0x148>)
 800aa8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8e:	4a0c      	ldr	r2, [pc, #48]	@ (800aac0 <prvInitialiseNewTask+0x14c>)
 800aa90:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	68f9      	ldr	r1, [r7, #12]
 800aa96:	69b8      	ldr	r0, [r7, #24]
 800aa98:	f001 fa2a 	bl	800bef0 <pxPortInitialiseStack>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaae:	bf00      	nop
 800aab0:	3720      	adds	r7, #32
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20003330 	.word	0x20003330
 800aabc:	20003398 	.word	0x20003398
 800aac0:	20003400 	.word	0x20003400

0800aac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aacc:	f001 fb44 	bl	800c158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aad0:	4b2d      	ldr	r3, [pc, #180]	@ (800ab88 <prvAddNewTaskToReadyList+0xc4>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	4a2c      	ldr	r2, [pc, #176]	@ (800ab88 <prvAddNewTaskToReadyList+0xc4>)
 800aad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aada:	4b2c      	ldr	r3, [pc, #176]	@ (800ab8c <prvAddNewTaskToReadyList+0xc8>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aae2:	4a2a      	ldr	r2, [pc, #168]	@ (800ab8c <prvAddNewTaskToReadyList+0xc8>)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aae8:	4b27      	ldr	r3, [pc, #156]	@ (800ab88 <prvAddNewTaskToReadyList+0xc4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d110      	bne.n	800ab12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aaf0:	f000 fcfe 	bl	800b4f0 <prvInitialiseTaskLists>
 800aaf4:	e00d      	b.n	800ab12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aaf6:	4b26      	ldr	r3, [pc, #152]	@ (800ab90 <prvAddNewTaskToReadyList+0xcc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d109      	bne.n	800ab12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aafe:	4b23      	ldr	r3, [pc, #140]	@ (800ab8c <prvAddNewTaskToReadyList+0xc8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d802      	bhi.n	800ab12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab0c:	4a1f      	ldr	r2, [pc, #124]	@ (800ab8c <prvAddNewTaskToReadyList+0xc8>)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab12:	4b20      	ldr	r3, [pc, #128]	@ (800ab94 <prvAddNewTaskToReadyList+0xd0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3301      	adds	r3, #1
 800ab18:	4a1e      	ldr	r2, [pc, #120]	@ (800ab94 <prvAddNewTaskToReadyList+0xd0>)
 800ab1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ab94 <prvAddNewTaskToReadyList+0xd0>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab28:	4b1b      	ldr	r3, [pc, #108]	@ (800ab98 <prvAddNewTaskToReadyList+0xd4>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d903      	bls.n	800ab38 <prvAddNewTaskToReadyList+0x74>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab34:	4a18      	ldr	r2, [pc, #96]	@ (800ab98 <prvAddNewTaskToReadyList+0xd4>)
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4a15      	ldr	r2, [pc, #84]	@ (800ab9c <prvAddNewTaskToReadyList+0xd8>)
 800ab46:	441a      	add	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f7ff f8e9 	bl	8009d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab54:	f001 fb32 	bl	800c1bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab58:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <prvAddNewTaskToReadyList+0xcc>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00e      	beq.n	800ab7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab60:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <prvAddNewTaskToReadyList+0xc8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d207      	bcs.n	800ab7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aba0 <prvAddNewTaskToReadyList+0xdc>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	200025b0 	.word	0x200025b0
 800ab8c:	200020dc 	.word	0x200020dc
 800ab90:	200025bc 	.word	0x200025bc
 800ab94:	200025cc 	.word	0x200025cc
 800ab98:	200025b8 	.word	0x200025b8
 800ab9c:	200020e0 	.word	0x200020e0
 800aba0:	e000ed04 	.word	0xe000ed04

0800aba4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800abac:	f001 fad4 	bl	800c158 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d102      	bne.n	800abbc <vTaskDelete+0x18>
 800abb6:	4b2d      	ldr	r3, [pc, #180]	@ (800ac6c <vTaskDelete+0xc8>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	e000      	b.n	800abbe <vTaskDelete+0x1a>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff f90b 	bl	8009de0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d004      	beq.n	800abdc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3318      	adds	r3, #24
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f902 	bl	8009de0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800abdc:	4b24      	ldr	r3, [pc, #144]	@ (800ac70 <vTaskDelete+0xcc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	4a23      	ldr	r2, [pc, #140]	@ (800ac70 <vTaskDelete+0xcc>)
 800abe4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800abe6:	4b21      	ldr	r3, [pc, #132]	@ (800ac6c <vTaskDelete+0xc8>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	429a      	cmp	r2, r3
 800abee:	d10b      	bne.n	800ac08 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	481f      	ldr	r0, [pc, #124]	@ (800ac74 <vTaskDelete+0xd0>)
 800abf8:	f7ff f895 	bl	8009d26 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800abfc:	4b1e      	ldr	r3, [pc, #120]	@ (800ac78 <vTaskDelete+0xd4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3301      	adds	r3, #1
 800ac02:	4a1d      	ldr	r2, [pc, #116]	@ (800ac78 <vTaskDelete+0xd4>)
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	e009      	b.n	800ac1c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ac08:	4b1c      	ldr	r3, [pc, #112]	@ (800ac7c <vTaskDelete+0xd8>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac7c <vTaskDelete+0xd8>)
 800ac10:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 fcda 	bl	800b5cc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ac18:	f000 fd0e 	bl	800b638 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ac1c:	f001 face 	bl	800c1bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ac20:	4b17      	ldr	r3, [pc, #92]	@ (800ac80 <vTaskDelete+0xdc>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01c      	beq.n	800ac62 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ac28:	4b10      	ldr	r3, [pc, #64]	@ (800ac6c <vTaskDelete+0xc8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d117      	bne.n	800ac62 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ac32:	4b14      	ldr	r3, [pc, #80]	@ (800ac84 <vTaskDelete+0xe0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00b      	beq.n	800ac52 <vTaskDelete+0xae>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60bb      	str	r3, [r7, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	e7fd      	b.n	800ac4e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ac52:	4b0d      	ldr	r3, [pc, #52]	@ (800ac88 <vTaskDelete+0xe4>)
 800ac54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac62:	bf00      	nop
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	200020dc 	.word	0x200020dc
 800ac70:	200025cc 	.word	0x200025cc
 800ac74:	20002584 	.word	0x20002584
 800ac78:	20002598 	.word	0x20002598
 800ac7c:	200025b0 	.word	0x200025b0
 800ac80:	200025bc 	.word	0x200025bc
 800ac84:	200025d8 	.word	0x200025d8
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	@ 0x28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10b      	bne.n	800acb8 <vTaskDelayUntil+0x2c>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	617b      	str	r3, [r7, #20]
}
 800acb2:	bf00      	nop
 800acb4:	bf00      	nop
 800acb6:	e7fd      	b.n	800acb4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10b      	bne.n	800acd6 <vTaskDelayUntil+0x4a>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	613b      	str	r3, [r7, #16]
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	e7fd      	b.n	800acd2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800acd6:	4b2a      	ldr	r3, [pc, #168]	@ (800ad80 <vTaskDelayUntil+0xf4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <vTaskDelayUntil+0x6a>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60fb      	str	r3, [r7, #12]
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	e7fd      	b.n	800acf2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800acf6:	f000 f8b9 	bl	800ae6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800acfa:	4b22      	ldr	r3, [pc, #136]	@ (800ad84 <vTaskDelayUntil+0xf8>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	4413      	add	r3, r2
 800ad08:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6a3a      	ldr	r2, [r7, #32]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d20b      	bcs.n	800ad2c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d211      	bcs.n	800ad42 <vTaskDelayUntil+0xb6>
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d90d      	bls.n	800ad42 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ad26:	2301      	movs	r3, #1
 800ad28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad2a:	e00a      	b.n	800ad42 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	69fa      	ldr	r2, [r7, #28]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d303      	bcc.n	800ad3e <vTaskDelayUntil+0xb2>
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d901      	bls.n	800ad42 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d006      	beq.n	800ad5c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ad4e:	69fa      	ldr	r2, [r7, #28]
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2100      	movs	r1, #0
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fd1c 	bl	800b794 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ad5c:	f000 f894 	bl	800ae88 <xTaskResumeAll>
 800ad60:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d107      	bne.n	800ad78 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800ad68:	4b07      	ldr	r3, [pc, #28]	@ (800ad88 <vTaskDelayUntil+0xfc>)
 800ad6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad78:	bf00      	nop
 800ad7a:	3728      	adds	r7, #40	@ 0x28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	200025d8 	.word	0x200025d8
 800ad84:	200025b4 	.word	0x200025b4
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08a      	sub	sp, #40	@ 0x28
 800ad90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	1d39      	adds	r1, r7, #4
 800ad9e:	f107 0308 	add.w	r3, r7, #8
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe ff5e 	bl	8009c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	9202      	str	r2, [sp, #8]
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	2300      	movs	r3, #0
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	2300      	movs	r3, #0
 800adb8:	460a      	mov	r2, r1
 800adba:	4924      	ldr	r1, [pc, #144]	@ (800ae4c <vTaskStartScheduler+0xc0>)
 800adbc:	4824      	ldr	r0, [pc, #144]	@ (800ae50 <vTaskStartScheduler+0xc4>)
 800adbe:	f7ff fd33 	bl	800a828 <xTaskCreateStatic>
 800adc2:	4603      	mov	r3, r0
 800adc4:	4a23      	ldr	r2, [pc, #140]	@ (800ae54 <vTaskStartScheduler+0xc8>)
 800adc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adc8:	4b22      	ldr	r3, [pc, #136]	@ (800ae54 <vTaskStartScheduler+0xc8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800add0:	2301      	movs	r3, #1
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	e001      	b.n	800adda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d102      	bne.n	800ade6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ade0:	f000 fd2c 	bl	800b83c <xTimerCreateTimerTask>
 800ade4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d11b      	bne.n	800ae24 <vTaskStartScheduler+0x98>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	613b      	str	r3, [r7, #16]
}
 800adfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae00:	4b15      	ldr	r3, [pc, #84]	@ (800ae58 <vTaskStartScheduler+0xcc>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3354      	adds	r3, #84	@ 0x54
 800ae06:	4a15      	ldr	r2, [pc, #84]	@ (800ae5c <vTaskStartScheduler+0xd0>)
 800ae08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae0a:	4b15      	ldr	r3, [pc, #84]	@ (800ae60 <vTaskStartScheduler+0xd4>)
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae12:	4b14      	ldr	r3, [pc, #80]	@ (800ae64 <vTaskStartScheduler+0xd8>)
 800ae14:	2201      	movs	r2, #1
 800ae16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae18:	4b13      	ldr	r3, [pc, #76]	@ (800ae68 <vTaskStartScheduler+0xdc>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae1e:	f001 f8f7 	bl	800c010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae22:	e00f      	b.n	800ae44 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2a:	d10b      	bne.n	800ae44 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	60fb      	str	r3, [r7, #12]
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <vTaskStartScheduler+0xb4>
}
 800ae44:	bf00      	nop
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	0800cba0 	.word	0x0800cba0
 800ae50:	0800b4c1 	.word	0x0800b4c1
 800ae54:	200025d4 	.word	0x200025d4
 800ae58:	200020dc 	.word	0x200020dc
 800ae5c:	20001274 	.word	0x20001274
 800ae60:	200025d0 	.word	0x200025d0
 800ae64:	200025bc 	.word	0x200025bc
 800ae68:	200025b4 	.word	0x200025b4

0800ae6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae70:	4b04      	ldr	r3, [pc, #16]	@ (800ae84 <vTaskSuspendAll+0x18>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	4a03      	ldr	r2, [pc, #12]	@ (800ae84 <vTaskSuspendAll+0x18>)
 800ae78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae7a:	bf00      	nop
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	200025d8 	.word	0x200025d8

0800ae88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae96:	4b42      	ldr	r3, [pc, #264]	@ (800afa0 <xTaskResumeAll+0x118>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10b      	bne.n	800aeb6 <xTaskResumeAll+0x2e>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	603b      	str	r3, [r7, #0]
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	e7fd      	b.n	800aeb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aeb6:	f001 f94f 	bl	800c158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aeba:	4b39      	ldr	r3, [pc, #228]	@ (800afa0 <xTaskResumeAll+0x118>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	4a37      	ldr	r2, [pc, #220]	@ (800afa0 <xTaskResumeAll+0x118>)
 800aec2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec4:	4b36      	ldr	r3, [pc, #216]	@ (800afa0 <xTaskResumeAll+0x118>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d162      	bne.n	800af92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aecc:	4b35      	ldr	r3, [pc, #212]	@ (800afa4 <xTaskResumeAll+0x11c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d05e      	beq.n	800af92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aed4:	e02f      	b.n	800af36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed6:	4b34      	ldr	r3, [pc, #208]	@ (800afa8 <xTaskResumeAll+0x120>)
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3318      	adds	r3, #24
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe ff7c 	bl	8009de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fe ff77 	bl	8009de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef6:	4b2d      	ldr	r3, [pc, #180]	@ (800afac <xTaskResumeAll+0x124>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d903      	bls.n	800af06 <xTaskResumeAll+0x7e>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af02:	4a2a      	ldr	r2, [pc, #168]	@ (800afac <xTaskResumeAll+0x124>)
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0a:	4613      	mov	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4a27      	ldr	r2, [pc, #156]	@ (800afb0 <xTaskResumeAll+0x128>)
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3304      	adds	r3, #4
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7fe ff02 	bl	8009d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af26:	4b23      	ldr	r3, [pc, #140]	@ (800afb4 <xTaskResumeAll+0x12c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d302      	bcc.n	800af36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af30:	4b21      	ldr	r3, [pc, #132]	@ (800afb8 <xTaskResumeAll+0x130>)
 800af32:	2201      	movs	r2, #1
 800af34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af36:	4b1c      	ldr	r3, [pc, #112]	@ (800afa8 <xTaskResumeAll+0x120>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1cb      	bne.n	800aed6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af44:	f000 fb78 	bl	800b638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af48:	4b1c      	ldr	r3, [pc, #112]	@ (800afbc <xTaskResumeAll+0x134>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d010      	beq.n	800af76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af54:	f000 f858 	bl	800b008 <xTaskIncrementTick>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800af5e:	4b16      	ldr	r3, [pc, #88]	@ (800afb8 <xTaskResumeAll+0x130>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3b01      	subs	r3, #1
 800af68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1f1      	bne.n	800af54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800af70:	4b12      	ldr	r3, [pc, #72]	@ (800afbc <xTaskResumeAll+0x134>)
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af76:	4b10      	ldr	r3, [pc, #64]	@ (800afb8 <xTaskResumeAll+0x130>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d009      	beq.n	800af92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af7e:	2301      	movs	r3, #1
 800af80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af82:	4b0f      	ldr	r3, [pc, #60]	@ (800afc0 <xTaskResumeAll+0x138>)
 800af84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af92:	f001 f913 	bl	800c1bc <vPortExitCritical>

	return xAlreadyYielded;
 800af96:	68bb      	ldr	r3, [r7, #8]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200025d8 	.word	0x200025d8
 800afa4:	200025b0 	.word	0x200025b0
 800afa8:	20002570 	.word	0x20002570
 800afac:	200025b8 	.word	0x200025b8
 800afb0:	200020e0 	.word	0x200020e0
 800afb4:	200020dc 	.word	0x200020dc
 800afb8:	200025c4 	.word	0x200025c4
 800afbc:	200025c0 	.word	0x200025c0
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afca:	4b05      	ldr	r3, [pc, #20]	@ (800afe0 <xTaskGetTickCount+0x1c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afd0:	687b      	ldr	r3, [r7, #4]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	200025b4 	.word	0x200025b4

0800afe4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afea:	f001 f995 	bl	800c318 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800afee:	2300      	movs	r3, #0
 800aff0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aff2:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <xTaskGetTickCountFromISR+0x20>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aff8:	683b      	ldr	r3, [r7, #0]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	200025b4 	.word	0x200025b4

0800b008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b00e:	2300      	movs	r3, #0
 800b010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b012:	4b4f      	ldr	r3, [pc, #316]	@ (800b150 <xTaskIncrementTick+0x148>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f040 8090 	bne.w	800b13c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b01c:	4b4d      	ldr	r3, [pc, #308]	@ (800b154 <xTaskIncrementTick+0x14c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b024:	4a4b      	ldr	r2, [pc, #300]	@ (800b154 <xTaskIncrementTick+0x14c>)
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d121      	bne.n	800b074 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b030:	4b49      	ldr	r3, [pc, #292]	@ (800b158 <xTaskIncrementTick+0x150>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00b      	beq.n	800b052 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	603b      	str	r3, [r7, #0]
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	e7fd      	b.n	800b04e <xTaskIncrementTick+0x46>
 800b052:	4b41      	ldr	r3, [pc, #260]	@ (800b158 <xTaskIncrementTick+0x150>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	4b40      	ldr	r3, [pc, #256]	@ (800b15c <xTaskIncrementTick+0x154>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a3e      	ldr	r2, [pc, #248]	@ (800b158 <xTaskIncrementTick+0x150>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	4a3e      	ldr	r2, [pc, #248]	@ (800b15c <xTaskIncrementTick+0x154>)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	4b3e      	ldr	r3, [pc, #248]	@ (800b160 <xTaskIncrementTick+0x158>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3301      	adds	r3, #1
 800b06c:	4a3c      	ldr	r2, [pc, #240]	@ (800b160 <xTaskIncrementTick+0x158>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	f000 fae2 	bl	800b638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b074:	4b3b      	ldr	r3, [pc, #236]	@ (800b164 <xTaskIncrementTick+0x15c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d349      	bcc.n	800b112 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b07e:	4b36      	ldr	r3, [pc, #216]	@ (800b158 <xTaskIncrementTick+0x150>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d104      	bne.n	800b092 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b088:	4b36      	ldr	r3, [pc, #216]	@ (800b164 <xTaskIncrementTick+0x15c>)
 800b08a:	f04f 32ff 	mov.w	r2, #4294967295
 800b08e:	601a      	str	r2, [r3, #0]
					break;
 800b090:	e03f      	b.n	800b112 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b092:	4b31      	ldr	r3, [pc, #196]	@ (800b158 <xTaskIncrementTick+0x150>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d203      	bcs.n	800b0b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0aa:	4a2e      	ldr	r2, [pc, #184]	@ (800b164 <xTaskIncrementTick+0x15c>)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0b0:	e02f      	b.n	800b112 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe fe92 	bl	8009de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	3318      	adds	r3, #24
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe fe89 	bl	8009de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d2:	4b25      	ldr	r3, [pc, #148]	@ (800b168 <xTaskIncrementTick+0x160>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d903      	bls.n	800b0e2 <xTaskIncrementTick+0xda>
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0de:	4a22      	ldr	r2, [pc, #136]	@ (800b168 <xTaskIncrementTick+0x160>)
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b16c <xTaskIncrementTick+0x164>)
 800b0f0:	441a      	add	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f7fe fe14 	bl	8009d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b102:	4b1b      	ldr	r3, [pc, #108]	@ (800b170 <xTaskIncrementTick+0x168>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d3b8      	bcc.n	800b07e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b10c:	2301      	movs	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b110:	e7b5      	b.n	800b07e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b112:	4b17      	ldr	r3, [pc, #92]	@ (800b170 <xTaskIncrementTick+0x168>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b118:	4914      	ldr	r1, [pc, #80]	@ (800b16c <xTaskIncrementTick+0x164>)
 800b11a:	4613      	mov	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	440b      	add	r3, r1
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d901      	bls.n	800b12e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b12a:	2301      	movs	r3, #1
 800b12c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b12e:	4b11      	ldr	r3, [pc, #68]	@ (800b174 <xTaskIncrementTick+0x16c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d007      	beq.n	800b146 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b136:	2301      	movs	r3, #1
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	e004      	b.n	800b146 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b13c:	4b0e      	ldr	r3, [pc, #56]	@ (800b178 <xTaskIncrementTick+0x170>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	4a0d      	ldr	r2, [pc, #52]	@ (800b178 <xTaskIncrementTick+0x170>)
 800b144:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b146:	697b      	ldr	r3, [r7, #20]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200025d8 	.word	0x200025d8
 800b154:	200025b4 	.word	0x200025b4
 800b158:	20002568 	.word	0x20002568
 800b15c:	2000256c 	.word	0x2000256c
 800b160:	200025c8 	.word	0x200025c8
 800b164:	200025d0 	.word	0x200025d0
 800b168:	200025b8 	.word	0x200025b8
 800b16c:	200020e0 	.word	0x200020e0
 800b170:	200020dc 	.word	0x200020dc
 800b174:	200025c4 	.word	0x200025c4
 800b178:	200025c0 	.word	0x200025c0

0800b17c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b182:	4b2b      	ldr	r3, [pc, #172]	@ (800b230 <vTaskSwitchContext+0xb4>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b18a:	4b2a      	ldr	r3, [pc, #168]	@ (800b234 <vTaskSwitchContext+0xb8>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b190:	e047      	b.n	800b222 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b192:	4b28      	ldr	r3, [pc, #160]	@ (800b234 <vTaskSwitchContext+0xb8>)
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b198:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <vTaskSwitchContext+0xbc>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	e011      	b.n	800b1c4 <vTaskSwitchContext+0x48>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10b      	bne.n	800b1be <vTaskSwitchContext+0x42>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	607b      	str	r3, [r7, #4]
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	e7fd      	b.n	800b1ba <vTaskSwitchContext+0x3e>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	491d      	ldr	r1, [pc, #116]	@ (800b23c <vTaskSwitchContext+0xc0>)
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	440b      	add	r3, r1
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d0e3      	beq.n	800b1a0 <vTaskSwitchContext+0x24>
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4a16      	ldr	r2, [pc, #88]	@ (800b23c <vTaskSwitchContext+0xc0>)
 800b1e4:	4413      	add	r3, r2
 800b1e6:	60bb      	str	r3, [r7, #8]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	605a      	str	r2, [r3, #4]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d104      	bne.n	800b208 <vTaskSwitchContext+0x8c>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	685a      	ldr	r2, [r3, #4]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	605a      	str	r2, [r3, #4]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	4a0c      	ldr	r2, [pc, #48]	@ (800b240 <vTaskSwitchContext+0xc4>)
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	4a09      	ldr	r2, [pc, #36]	@ (800b238 <vTaskSwitchContext+0xbc>)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b218:	4b09      	ldr	r3, [pc, #36]	@ (800b240 <vTaskSwitchContext+0xc4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3354      	adds	r3, #84	@ 0x54
 800b21e:	4a09      	ldr	r2, [pc, #36]	@ (800b244 <vTaskSwitchContext+0xc8>)
 800b220:	6013      	str	r3, [r2, #0]
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	200025d8 	.word	0x200025d8
 800b234:	200025c4 	.word	0x200025c4
 800b238:	200025b8 	.word	0x200025b8
 800b23c:	200020e0 	.word	0x200020e0
 800b240:	200020dc 	.word	0x200020dc
 800b244:	20001274 	.word	0x20001274

0800b248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	60fb      	str	r3, [r7, #12]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b270:	4b07      	ldr	r3, [pc, #28]	@ (800b290 <vTaskPlaceOnEventList+0x48>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3318      	adds	r3, #24
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7fe fd78 	bl	8009d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b27e:	2101      	movs	r1, #1
 800b280:	6838      	ldr	r0, [r7, #0]
 800b282:	f000 fa87 	bl	800b794 <prvAddCurrentTaskToDelayedList>
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	200020dc 	.word	0x200020dc

0800b294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10b      	bne.n	800b2be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	617b      	str	r3, [r7, #20]
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	e7fd      	b.n	800b2ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2be:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3318      	adds	r3, #24
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f7fe fd2d 	bl	8009d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f000 fa5a 	bl	800b794 <prvAddCurrentTaskToDelayedList>
	}
 800b2e0:	bf00      	nop
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	200020dc 	.word	0x200020dc

0800b2ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	60fb      	str	r3, [r7, #12]
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop
 800b318:	e7fd      	b.n	800b316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	3318      	adds	r3, #24
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe fd5e 	bl	8009de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b324:	4b1d      	ldr	r3, [pc, #116]	@ (800b39c <xTaskRemoveFromEventList+0xb0>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d11d      	bne.n	800b368 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fd55 	bl	8009de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b33a:	4b19      	ldr	r3, [pc, #100]	@ (800b3a0 <xTaskRemoveFromEventList+0xb4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d903      	bls.n	800b34a <xTaskRemoveFromEventList+0x5e>
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b346:	4a16      	ldr	r2, [pc, #88]	@ (800b3a0 <xTaskRemoveFromEventList+0xb4>)
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4a13      	ldr	r2, [pc, #76]	@ (800b3a4 <xTaskRemoveFromEventList+0xb8>)
 800b358:	441a      	add	r2, r3
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4619      	mov	r1, r3
 800b360:	4610      	mov	r0, r2
 800b362:	f7fe fce0 	bl	8009d26 <vListInsertEnd>
 800b366:	e005      	b.n	800b374 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	3318      	adds	r3, #24
 800b36c:	4619      	mov	r1, r3
 800b36e:	480e      	ldr	r0, [pc, #56]	@ (800b3a8 <xTaskRemoveFromEventList+0xbc>)
 800b370:	f7fe fcd9 	bl	8009d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b378:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ac <xTaskRemoveFromEventList+0xc0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37e:	429a      	cmp	r2, r3
 800b380:	d905      	bls.n	800b38e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b382:	2301      	movs	r3, #1
 800b384:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b386:	4b0a      	ldr	r3, [pc, #40]	@ (800b3b0 <xTaskRemoveFromEventList+0xc4>)
 800b388:	2201      	movs	r2, #1
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	e001      	b.n	800b392 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b392:	697b      	ldr	r3, [r7, #20]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3718      	adds	r7, #24
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	200025d8 	.word	0x200025d8
 800b3a0:	200025b8 	.word	0x200025b8
 800b3a4:	200020e0 	.word	0x200020e0
 800b3a8:	20002570 	.word	0x20002570
 800b3ac:	200020dc 	.word	0x200020dc
 800b3b0:	200025c4 	.word	0x200025c4

0800b3b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3bc:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <vTaskInternalSetTimeOutState+0x24>)
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3c4:	4b05      	ldr	r3, [pc, #20]	@ (800b3dc <vTaskInternalSetTimeOutState+0x28>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	605a      	str	r2, [r3, #4]
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	200025c8 	.word	0x200025c8
 800b3dc:	200025b4 	.word	0x200025b4

0800b3e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10b      	bne.n	800b408 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
}
 800b402:	bf00      	nop
 800b404:	bf00      	nop
 800b406:	e7fd      	b.n	800b404 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10b      	bne.n	800b426 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	60fb      	str	r3, [r7, #12]
}
 800b420:	bf00      	nop
 800b422:	bf00      	nop
 800b424:	e7fd      	b.n	800b422 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b426:	f000 fe97 	bl	800c158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b42a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4a0 <xTaskCheckForTimeOut+0xc0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b442:	d102      	bne.n	800b44a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b444:	2300      	movs	r3, #0
 800b446:	61fb      	str	r3, [r7, #28]
 800b448:	e023      	b.n	800b492 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4b15      	ldr	r3, [pc, #84]	@ (800b4a4 <xTaskCheckForTimeOut+0xc4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	429a      	cmp	r2, r3
 800b454:	d007      	beq.n	800b466 <xTaskCheckForTimeOut+0x86>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d302      	bcc.n	800b466 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	e015      	b.n	800b492 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d20b      	bcs.n	800b488 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff99 	bl	800b3b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e004      	b.n	800b492 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b48e:	2301      	movs	r3, #1
 800b490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b492:	f000 fe93 	bl	800c1bc <vPortExitCritical>

	return xReturn;
 800b496:	69fb      	ldr	r3, [r7, #28]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	200025b4 	.word	0x200025b4
 800b4a4:	200025c8 	.word	0x200025c8

0800b4a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4ac:	4b03      	ldr	r3, [pc, #12]	@ (800b4bc <vTaskMissedYield+0x14>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	601a      	str	r2, [r3, #0]
}
 800b4b2:	bf00      	nop
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	200025c4 	.word	0x200025c4

0800b4c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4c8:	f000 f852 	bl	800b570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4cc:	4b06      	ldr	r3, [pc, #24]	@ (800b4e8 <prvIdleTask+0x28>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d9f9      	bls.n	800b4c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4d4:	4b05      	ldr	r3, [pc, #20]	@ (800b4ec <prvIdleTask+0x2c>)
 800b4d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4e4:	e7f0      	b.n	800b4c8 <prvIdleTask+0x8>
 800b4e6:	bf00      	nop
 800b4e8:	200020e0 	.word	0x200020e0
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	607b      	str	r3, [r7, #4]
 800b4fa:	e00c      	b.n	800b516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4a12      	ldr	r2, [pc, #72]	@ (800b550 <prvInitialiseTaskLists+0x60>)
 800b508:	4413      	add	r3, r2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe fbde 	bl	8009ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3301      	adds	r3, #1
 800b514:	607b      	str	r3, [r7, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b37      	cmp	r3, #55	@ 0x37
 800b51a:	d9ef      	bls.n	800b4fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b51c:	480d      	ldr	r0, [pc, #52]	@ (800b554 <prvInitialiseTaskLists+0x64>)
 800b51e:	f7fe fbd5 	bl	8009ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b522:	480d      	ldr	r0, [pc, #52]	@ (800b558 <prvInitialiseTaskLists+0x68>)
 800b524:	f7fe fbd2 	bl	8009ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b528:	480c      	ldr	r0, [pc, #48]	@ (800b55c <prvInitialiseTaskLists+0x6c>)
 800b52a:	f7fe fbcf 	bl	8009ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b52e:	480c      	ldr	r0, [pc, #48]	@ (800b560 <prvInitialiseTaskLists+0x70>)
 800b530:	f7fe fbcc 	bl	8009ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b534:	480b      	ldr	r0, [pc, #44]	@ (800b564 <prvInitialiseTaskLists+0x74>)
 800b536:	f7fe fbc9 	bl	8009ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b53a:	4b0b      	ldr	r3, [pc, #44]	@ (800b568 <prvInitialiseTaskLists+0x78>)
 800b53c:	4a05      	ldr	r2, [pc, #20]	@ (800b554 <prvInitialiseTaskLists+0x64>)
 800b53e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b540:	4b0a      	ldr	r3, [pc, #40]	@ (800b56c <prvInitialiseTaskLists+0x7c>)
 800b542:	4a05      	ldr	r2, [pc, #20]	@ (800b558 <prvInitialiseTaskLists+0x68>)
 800b544:	601a      	str	r2, [r3, #0]
}
 800b546:	bf00      	nop
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	200020e0 	.word	0x200020e0
 800b554:	20002540 	.word	0x20002540
 800b558:	20002554 	.word	0x20002554
 800b55c:	20002570 	.word	0x20002570
 800b560:	20002584 	.word	0x20002584
 800b564:	2000259c 	.word	0x2000259c
 800b568:	20002568 	.word	0x20002568
 800b56c:	2000256c 	.word	0x2000256c

0800b570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b576:	e019      	b.n	800b5ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b578:	f000 fdee 	bl	800c158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b57c:	4b10      	ldr	r3, [pc, #64]	@ (800b5c0 <prvCheckTasksWaitingTermination+0x50>)
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3304      	adds	r3, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe fc29 	bl	8009de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b58e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c4 <prvCheckTasksWaitingTermination+0x54>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3b01      	subs	r3, #1
 800b594:	4a0b      	ldr	r2, [pc, #44]	@ (800b5c4 <prvCheckTasksWaitingTermination+0x54>)
 800b596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b598:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c8 <prvCheckTasksWaitingTermination+0x58>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	4a0a      	ldr	r2, [pc, #40]	@ (800b5c8 <prvCheckTasksWaitingTermination+0x58>)
 800b5a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5a2:	f000 fe0b 	bl	800c1bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f810 	bl	800b5cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ac:	4b06      	ldr	r3, [pc, #24]	@ (800b5c8 <prvCheckTasksWaitingTermination+0x58>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e1      	bne.n	800b578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20002584 	.word	0x20002584
 800b5c4:	200025b0 	.word	0x200025b0
 800b5c8:	20002598 	.word	0x20002598

0800b5cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3354      	adds	r3, #84	@ 0x54
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 f8d5 	bl	800c788 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d108      	bne.n	800b5fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 ffa3 	bl	800c538 <vPortFree>
				vPortFree( pxTCB );
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 ffa0 	bl	800c538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5f8:	e019      	b.n	800b62e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b600:	2b01      	cmp	r3, #1
 800b602:	d103      	bne.n	800b60c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 ff97 	bl	800c538 <vPortFree>
	}
 800b60a:	e010      	b.n	800b62e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b612:	2b02      	cmp	r3, #2
 800b614:	d00b      	beq.n	800b62e <prvDeleteTCB+0x62>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60fb      	str	r3, [r7, #12]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <prvDeleteTCB+0x5e>
	}
 800b62e:	bf00      	nop
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b63e:	4b0c      	ldr	r3, [pc, #48]	@ (800b670 <prvResetNextTaskUnblockTime+0x38>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b648:	4b0a      	ldr	r3, [pc, #40]	@ (800b674 <prvResetNextTaskUnblockTime+0x3c>)
 800b64a:	f04f 32ff 	mov.w	r2, #4294967295
 800b64e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b650:	e008      	b.n	800b664 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b652:	4b07      	ldr	r3, [pc, #28]	@ (800b670 <prvResetNextTaskUnblockTime+0x38>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	4a04      	ldr	r2, [pc, #16]	@ (800b674 <prvResetNextTaskUnblockTime+0x3c>)
 800b662:	6013      	str	r3, [r2, #0]
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	20002568 	.word	0x20002568
 800b674:	200025d0 	.word	0x200025d0

0800b678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b67e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <xTaskGetSchedulerState+0x34>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d102      	bne.n	800b68c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b686:	2301      	movs	r3, #1
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	e008      	b.n	800b69e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b68c:	4b08      	ldr	r3, [pc, #32]	@ (800b6b0 <xTaskGetSchedulerState+0x38>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b694:	2302      	movs	r3, #2
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	e001      	b.n	800b69e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b69e:	687b      	ldr	r3, [r7, #4]
	}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	200025bc 	.word	0x200025bc
 800b6b0:	200025d8 	.word	0x200025d8

0800b6b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d058      	beq.n	800b77c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b788 <xTaskPriorityDisinherit+0xd4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d00b      	beq.n	800b6ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	60fb      	str	r3, [r7, #12]
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	e7fd      	b.n	800b6e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10b      	bne.n	800b70c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	60bb      	str	r3, [r7, #8]
}
 800b706:	bf00      	nop
 800b708:	bf00      	nop
 800b70a:	e7fd      	b.n	800b708 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b71e:	429a      	cmp	r2, r3
 800b720:	d02c      	beq.n	800b77c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b726:	2b00      	cmp	r3, #0
 800b728:	d128      	bne.n	800b77c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fb56 	bl	8009de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b740:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74c:	4b0f      	ldr	r3, [pc, #60]	@ (800b78c <xTaskPriorityDisinherit+0xd8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d903      	bls.n	800b75c <xTaskPriorityDisinherit+0xa8>
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b758:	4a0c      	ldr	r2, [pc, #48]	@ (800b78c <xTaskPriorityDisinherit+0xd8>)
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b760:	4613      	mov	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4a09      	ldr	r2, [pc, #36]	@ (800b790 <xTaskPriorityDisinherit+0xdc>)
 800b76a:	441a      	add	r2, r3
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	3304      	adds	r3, #4
 800b770:	4619      	mov	r1, r3
 800b772:	4610      	mov	r0, r2
 800b774:	f7fe fad7 	bl	8009d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b778:	2301      	movs	r3, #1
 800b77a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b77c:	697b      	ldr	r3, [r7, #20]
	}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	200020dc 	.word	0x200020dc
 800b78c:	200025b8 	.word	0x200025b8
 800b790:	200020e0 	.word	0x200020e0

0800b794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b79e:	4b21      	ldr	r3, [pc, #132]	@ (800b824 <prvAddCurrentTaskToDelayedList+0x90>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7a4:	4b20      	ldr	r3, [pc, #128]	@ (800b828 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fb18 	bl	8009de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b6:	d10a      	bne.n	800b7ce <prvAddCurrentTaskToDelayedList+0x3a>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7be:	4b1a      	ldr	r3, [pc, #104]	@ (800b828 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4819      	ldr	r0, [pc, #100]	@ (800b82c <prvAddCurrentTaskToDelayedList+0x98>)
 800b7c8:	f7fe faad 	bl	8009d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7cc:	e026      	b.n	800b81c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7d6:	4b14      	ldr	r3, [pc, #80]	@ (800b828 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d209      	bcs.n	800b7fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7e6:	4b12      	ldr	r3, [pc, #72]	@ (800b830 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b828 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4610      	mov	r0, r2
 800b7f4:	f7fe fabb 	bl	8009d6e <vListInsert>
}
 800b7f8:	e010      	b.n	800b81c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b834 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b828 <prvAddCurrentTaskToDelayedList+0x94>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	3304      	adds	r3, #4
 800b804:	4619      	mov	r1, r3
 800b806:	4610      	mov	r0, r2
 800b808:	f7fe fab1 	bl	8009d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b80c:	4b0a      	ldr	r3, [pc, #40]	@ (800b838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	429a      	cmp	r2, r3
 800b814:	d202      	bcs.n	800b81c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b816:	4a08      	ldr	r2, [pc, #32]	@ (800b838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	6013      	str	r3, [r2, #0]
}
 800b81c:	bf00      	nop
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	200025b4 	.word	0x200025b4
 800b828:	200020dc 	.word	0x200020dc
 800b82c:	2000259c 	.word	0x2000259c
 800b830:	2000256c 	.word	0x2000256c
 800b834:	20002568 	.word	0x20002568
 800b838:	200025d0 	.word	0x200025d0

0800b83c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08a      	sub	sp, #40	@ 0x28
 800b840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b846:	f000 fb13 	bl	800be70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b84a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c0 <xTimerCreateTimerTask+0x84>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d021      	beq.n	800b896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b85a:	1d3a      	adds	r2, r7, #4
 800b85c:	f107 0108 	add.w	r1, r7, #8
 800b860:	f107 030c 	add.w	r3, r7, #12
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe fa17 	bl	8009c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b86a:	6879      	ldr	r1, [r7, #4]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	9202      	str	r2, [sp, #8]
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	2302      	movs	r3, #2
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	2300      	movs	r3, #0
 800b87a:	460a      	mov	r2, r1
 800b87c:	4911      	ldr	r1, [pc, #68]	@ (800b8c4 <xTimerCreateTimerTask+0x88>)
 800b87e:	4812      	ldr	r0, [pc, #72]	@ (800b8c8 <xTimerCreateTimerTask+0x8c>)
 800b880:	f7fe ffd2 	bl	800a828 <xTaskCreateStatic>
 800b884:	4603      	mov	r3, r0
 800b886:	4a11      	ldr	r2, [pc, #68]	@ (800b8cc <xTimerCreateTimerTask+0x90>)
 800b888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b88a:	4b10      	ldr	r3, [pc, #64]	@ (800b8cc <xTimerCreateTimerTask+0x90>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b892:	2301      	movs	r3, #1
 800b894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10b      	bne.n	800b8b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	613b      	str	r3, [r7, #16]
}
 800b8ae:	bf00      	nop
 800b8b0:	bf00      	nop
 800b8b2:	e7fd      	b.n	800b8b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8b4:	697b      	ldr	r3, [r7, #20]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	2000260c 	.word	0x2000260c
 800b8c4:	0800cba8 	.word	0x0800cba8
 800b8c8:	0800ba09 	.word	0x0800ba09
 800b8cc:	20002610 	.word	0x20002610

0800b8d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08a      	sub	sp, #40	@ 0x28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10b      	bne.n	800b900 <xTimerGenericCommand+0x30>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	623b      	str	r3, [r7, #32]
}
 800b8fa:	bf00      	nop
 800b8fc:	bf00      	nop
 800b8fe:	e7fd      	b.n	800b8fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b900:	4b19      	ldr	r3, [pc, #100]	@ (800b968 <xTimerGenericCommand+0x98>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d02a      	beq.n	800b95e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b05      	cmp	r3, #5
 800b918:	dc18      	bgt.n	800b94c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b91a:	f7ff fead 	bl	800b678 <xTaskGetSchedulerState>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b02      	cmp	r3, #2
 800b922:	d109      	bne.n	800b938 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b924:	4b10      	ldr	r3, [pc, #64]	@ (800b968 <xTimerGenericCommand+0x98>)
 800b926:	6818      	ldr	r0, [r3, #0]
 800b928:	f107 0110 	add.w	r1, r7, #16
 800b92c:	2300      	movs	r3, #0
 800b92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b930:	f7fe fb8a 	bl	800a048 <xQueueGenericSend>
 800b934:	6278      	str	r0, [r7, #36]	@ 0x24
 800b936:	e012      	b.n	800b95e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b938:	4b0b      	ldr	r3, [pc, #44]	@ (800b968 <xTimerGenericCommand+0x98>)
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	f107 0110 	add.w	r1, r7, #16
 800b940:	2300      	movs	r3, #0
 800b942:	2200      	movs	r2, #0
 800b944:	f7fe fb80 	bl	800a048 <xQueueGenericSend>
 800b948:	6278      	str	r0, [r7, #36]	@ 0x24
 800b94a:	e008      	b.n	800b95e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b94c:	4b06      	ldr	r3, [pc, #24]	@ (800b968 <xTimerGenericCommand+0x98>)
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	f107 0110 	add.w	r1, r7, #16
 800b954:	2300      	movs	r3, #0
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	f7fe fc78 	bl	800a24c <xQueueGenericSendFromISR>
 800b95c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b960:	4618      	mov	r0, r3
 800b962:	3728      	adds	r7, #40	@ 0x28
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	2000260c 	.word	0x2000260c

0800b96c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af02      	add	r7, sp, #8
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b976:	4b23      	ldr	r3, [pc, #140]	@ (800ba04 <prvProcessExpiredTimer+0x98>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	3304      	adds	r3, #4
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe fa2b 	bl	8009de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b00      	cmp	r3, #0
 800b996:	d023      	beq.n	800b9e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	699a      	ldr	r2, [r3, #24]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	18d1      	adds	r1, r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	6978      	ldr	r0, [r7, #20]
 800b9a6:	f000 f8d5 	bl	800bb54 <prvInsertTimerInActiveList>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d020      	beq.n	800b9f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6978      	ldr	r0, [r7, #20]
 800b9bc:	f7ff ff88 	bl	800b8d0 <xTimerGenericCommand>
 800b9c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d114      	bne.n	800b9f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	60fb      	str	r3, [r7, #12]
}
 800b9da:	bf00      	nop
 800b9dc:	bf00      	nop
 800b9de:	e7fd      	b.n	800b9dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9e6:	f023 0301 	bic.w	r3, r3, #1
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	6978      	ldr	r0, [r7, #20]
 800b9f8:	4798      	blx	r3
}
 800b9fa:	bf00      	nop
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20002604 	.word	0x20002604

0800ba08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 f859 	bl	800bacc <prvGetNextExpireTime>
 800ba1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f805 	bl	800ba30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba26:	f000 f8d7 	bl	800bbd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba2a:	bf00      	nop
 800ba2c:	e7f0      	b.n	800ba10 <prvTimerTask+0x8>
	...

0800ba30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba3a:	f7ff fa17 	bl	800ae6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba3e:	f107 0308 	add.w	r3, r7, #8
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 f866 	bl	800bb14 <prvSampleTimeNow>
 800ba48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d130      	bne.n	800bab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <prvProcessTimerOrBlockTask+0x3c>
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d806      	bhi.n	800ba6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba5e:	f7ff fa13 	bl	800ae88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba62:	68f9      	ldr	r1, [r7, #12]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff ff81 	bl	800b96c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba6a:	e024      	b.n	800bab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d008      	beq.n	800ba84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba72:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <prvProcessTimerOrBlockTask+0x90>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <prvProcessTimerOrBlockTask+0x50>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e000      	b.n	800ba82 <prvProcessTimerOrBlockTask+0x52>
 800ba80:	2300      	movs	r3, #0
 800ba82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba84:	4b0f      	ldr	r3, [pc, #60]	@ (800bac4 <prvProcessTimerOrBlockTask+0x94>)
 800ba86:	6818      	ldr	r0, [r3, #0]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4619      	mov	r1, r3
 800ba92:	f7fe fe95 	bl	800a7c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba96:	f7ff f9f7 	bl	800ae88 <xTaskResumeAll>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800baa0:	4b09      	ldr	r3, [pc, #36]	@ (800bac8 <prvProcessTimerOrBlockTask+0x98>)
 800baa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
}
 800bab0:	e001      	b.n	800bab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bab2:	f7ff f9e9 	bl	800ae88 <xTaskResumeAll>
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	20002608 	.word	0x20002608
 800bac4:	2000260c 	.word	0x2000260c
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bad4:	4b0e      	ldr	r3, [pc, #56]	@ (800bb10 <prvGetNextExpireTime+0x44>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <prvGetNextExpireTime+0x16>
 800bade:	2201      	movs	r2, #1
 800bae0:	e000      	b.n	800bae4 <prvGetNextExpireTime+0x18>
 800bae2:	2200      	movs	r2, #0
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d105      	bne.n	800bafc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <prvGetNextExpireTime+0x44>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	e001      	b.n	800bb00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb00:	68fb      	ldr	r3, [r7, #12]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20002604 	.word	0x20002604

0800bb14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb1c:	f7ff fa52 	bl	800afc4 <xTaskGetTickCount>
 800bb20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb22:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <prvSampleTimeNow+0x3c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d205      	bcs.n	800bb38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb2c:	f000 f93a 	bl	800bda4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	e002      	b.n	800bb3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb3e:	4a04      	ldr	r2, [pc, #16]	@ (800bb50 <prvSampleTimeNow+0x3c>)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb44:	68fb      	ldr	r3, [r7, #12]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20002614 	.word	0x20002614

0800bb54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d812      	bhi.n	800bba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	1ad2      	subs	r2, r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d302      	bcc.n	800bb8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	e01b      	b.n	800bbc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb8e:	4b10      	ldr	r3, [pc, #64]	@ (800bbd0 <prvInsertTimerInActiveList+0x7c>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f7fe f8e8 	bl	8009d6e <vListInsert>
 800bb9e:	e012      	b.n	800bbc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d206      	bcs.n	800bbb6 <prvInsertTimerInActiveList+0x62>
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d302      	bcc.n	800bbb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e007      	b.n	800bbc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbb6:	4b07      	ldr	r3, [pc, #28]	@ (800bbd4 <prvInsertTimerInActiveList+0x80>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f7fe f8d4 	bl	8009d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbc6:	697b      	ldr	r3, [r7, #20]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20002608 	.word	0x20002608
 800bbd4:	20002604 	.word	0x20002604

0800bbd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08e      	sub	sp, #56	@ 0x38
 800bbdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbde:	e0ce      	b.n	800bd7e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	da19      	bge.n	800bc1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbe6:	1d3b      	adds	r3, r7, #4
 800bbe8:	3304      	adds	r3, #4
 800bbea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10b      	bne.n	800bc0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	61fb      	str	r3, [r7, #28]
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	e7fd      	b.n	800bc06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc10:	6850      	ldr	r0, [r2, #4]
 800bc12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc14:	6892      	ldr	r2, [r2, #8]
 800bc16:	4611      	mov	r1, r2
 800bc18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f2c0 80ae 	blt.w	800bd7e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d004      	beq.n	800bc38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc30:	3304      	adds	r3, #4
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fe f8d4 	bl	8009de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc38:	463b      	mov	r3, r7
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff ff6a 	bl	800bb14 <prvSampleTimeNow>
 800bc40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	f200 8097 	bhi.w	800bd78 <prvProcessReceivedCommands+0x1a0>
 800bc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc50 <prvProcessReceivedCommands+0x78>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bc79 	.word	0x0800bc79
 800bc54:	0800bc79 	.word	0x0800bc79
 800bc58:	0800bc79 	.word	0x0800bc79
 800bc5c:	0800bcef 	.word	0x0800bcef
 800bc60:	0800bd03 	.word	0x0800bd03
 800bc64:	0800bd4f 	.word	0x0800bd4f
 800bc68:	0800bc79 	.word	0x0800bc79
 800bc6c:	0800bc79 	.word	0x0800bc79
 800bc70:	0800bcef 	.word	0x0800bcef
 800bc74:	0800bd03 	.word	0x0800bd03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc7e:	f043 0301 	orr.w	r3, r3, #1
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	18d1      	adds	r1, r2, r3
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc98:	f7ff ff5c 	bl	800bb54 <prvInsertTimerInActiveList>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d06c      	beq.n	800bd7c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bca8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d061      	beq.n	800bd7c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	441a      	add	r2, r3
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcca:	f7ff fe01 	bl	800b8d0 <xTimerGenericCommand>
 800bcce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d152      	bne.n	800bd7c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	61bb      	str	r3, [r7, #24]
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	e7fd      	b.n	800bcea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcf4:	f023 0301 	bic.w	r3, r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bd00:	e03d      	b.n	800bd7e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd08:	f043 0301 	orr.w	r3, r3, #1
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10b      	bne.n	800bd3a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	617b      	str	r3, [r7, #20]
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop
 800bd38:	e7fd      	b.n	800bd36 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3c:	699a      	ldr	r2, [r3, #24]
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd40:	18d1      	adds	r1, r2, r3
 800bd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd48:	f7ff ff04 	bl	800bb54 <prvInsertTimerInActiveList>
					break;
 800bd4c:	e017      	b.n	800bd7e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bd5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd5e:	f000 fbeb 	bl	800c538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd62:	e00c      	b.n	800bd7e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd6a:	f023 0301 	bic.w	r3, r3, #1
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bd76:	e002      	b.n	800bd7e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bd78:	bf00      	nop
 800bd7a:	e000      	b.n	800bd7e <prvProcessReceivedCommands+0x1a6>
					break;
 800bd7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd7e:	4b08      	ldr	r3, [pc, #32]	@ (800bda0 <prvProcessReceivedCommands+0x1c8>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	1d39      	adds	r1, r7, #4
 800bd84:	2200      	movs	r2, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fafe 	bl	800a388 <xQueueReceive>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f47f af26 	bne.w	800bbe0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	3730      	adds	r7, #48	@ 0x30
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	2000260c 	.word	0x2000260c

0800bda4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdaa:	e049      	b.n	800be40 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdac:	4b2e      	ldr	r3, [pc, #184]	@ (800be68 <prvSwitchTimerLists+0xc4>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb6:	4b2c      	ldr	r3, [pc, #176]	@ (800be68 <prvSwitchTimerLists+0xc4>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fe f80b 	bl	8009de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d02f      	beq.n	800be40 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4413      	add	r3, r2
 800bde8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d90e      	bls.n	800be10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800be68 <prvSwitchTimerLists+0xc4>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3304      	adds	r3, #4
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f7fd ffb0 	bl	8009d6e <vListInsert>
 800be0e:	e017      	b.n	800be40 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be10:	2300      	movs	r3, #0
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	2300      	movs	r3, #0
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	2100      	movs	r1, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fd58 	bl	800b8d0 <xTimerGenericCommand>
 800be20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10b      	bne.n	800be40 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	603b      	str	r3, [r7, #0]
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	e7fd      	b.n	800be3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be40:	4b09      	ldr	r3, [pc, #36]	@ (800be68 <prvSwitchTimerLists+0xc4>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1b0      	bne.n	800bdac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be4a:	4b07      	ldr	r3, [pc, #28]	@ (800be68 <prvSwitchTimerLists+0xc4>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be50:	4b06      	ldr	r3, [pc, #24]	@ (800be6c <prvSwitchTimerLists+0xc8>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a04      	ldr	r2, [pc, #16]	@ (800be68 <prvSwitchTimerLists+0xc4>)
 800be56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be58:	4a04      	ldr	r2, [pc, #16]	@ (800be6c <prvSwitchTimerLists+0xc8>)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	6013      	str	r3, [r2, #0]
}
 800be5e:	bf00      	nop
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20002604 	.word	0x20002604
 800be6c:	20002608 	.word	0x20002608

0800be70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be76:	f000 f96f 	bl	800c158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be7a:	4b15      	ldr	r3, [pc, #84]	@ (800bed0 <prvCheckForValidListAndQueue+0x60>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d120      	bne.n	800bec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be82:	4814      	ldr	r0, [pc, #80]	@ (800bed4 <prvCheckForValidListAndQueue+0x64>)
 800be84:	f7fd ff22 	bl	8009ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be88:	4813      	ldr	r0, [pc, #76]	@ (800bed8 <prvCheckForValidListAndQueue+0x68>)
 800be8a:	f7fd ff1f 	bl	8009ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be8e:	4b13      	ldr	r3, [pc, #76]	@ (800bedc <prvCheckForValidListAndQueue+0x6c>)
 800be90:	4a10      	ldr	r2, [pc, #64]	@ (800bed4 <prvCheckForValidListAndQueue+0x64>)
 800be92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be94:	4b12      	ldr	r3, [pc, #72]	@ (800bee0 <prvCheckForValidListAndQueue+0x70>)
 800be96:	4a10      	ldr	r2, [pc, #64]	@ (800bed8 <prvCheckForValidListAndQueue+0x68>)
 800be98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be9a:	2300      	movs	r3, #0
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	4b11      	ldr	r3, [pc, #68]	@ (800bee4 <prvCheckForValidListAndQueue+0x74>)
 800bea0:	4a11      	ldr	r2, [pc, #68]	@ (800bee8 <prvCheckForValidListAndQueue+0x78>)
 800bea2:	2110      	movs	r1, #16
 800bea4:	200a      	movs	r0, #10
 800bea6:	f7fe f82f 	bl	8009f08 <xQueueGenericCreateStatic>
 800beaa:	4603      	mov	r3, r0
 800beac:	4a08      	ldr	r2, [pc, #32]	@ (800bed0 <prvCheckForValidListAndQueue+0x60>)
 800beae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800beb0:	4b07      	ldr	r3, [pc, #28]	@ (800bed0 <prvCheckForValidListAndQueue+0x60>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d005      	beq.n	800bec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800beb8:	4b05      	ldr	r3, [pc, #20]	@ (800bed0 <prvCheckForValidListAndQueue+0x60>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	490b      	ldr	r1, [pc, #44]	@ (800beec <prvCheckForValidListAndQueue+0x7c>)
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fe fc54 	bl	800a76c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bec4:	f000 f97a 	bl	800c1bc <vPortExitCritical>
}
 800bec8:	bf00      	nop
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	2000260c 	.word	0x2000260c
 800bed4:	200025dc 	.word	0x200025dc
 800bed8:	200025f0 	.word	0x200025f0
 800bedc:	20002604 	.word	0x20002604
 800bee0:	20002608 	.word	0x20002608
 800bee4:	200026b8 	.word	0x200026b8
 800bee8:	20002618 	.word	0x20002618
 800beec:	0800cbb0 	.word	0x0800cbb0

0800bef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3b04      	subs	r3, #4
 800bf00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bf08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3b04      	subs	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f023 0201 	bic.w	r2, r3, #1
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3b04      	subs	r3, #4
 800bf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf20:	4a0c      	ldr	r2, [pc, #48]	@ (800bf54 <pxPortInitialiseStack+0x64>)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	3b14      	subs	r3, #20
 800bf2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3b04      	subs	r3, #4
 800bf36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f06f 0202 	mvn.w	r2, #2
 800bf3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3b20      	subs	r3, #32
 800bf44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	0800bf59 	.word	0x0800bf59

0800bf58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf62:	4b13      	ldr	r3, [pc, #76]	@ (800bfb0 <prvTaskExitError+0x58>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6a:	d00b      	beq.n	800bf84 <prvTaskExitError+0x2c>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	60fb      	str	r3, [r7, #12]
}
 800bf7e:	bf00      	nop
 800bf80:	bf00      	nop
 800bf82:	e7fd      	b.n	800bf80 <prvTaskExitError+0x28>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	60bb      	str	r3, [r7, #8]
}
 800bf96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf98:	bf00      	nop
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0fc      	beq.n	800bf9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	20001270 	.word	0x20001270
	...

0800bfc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfc0:	4b07      	ldr	r3, [pc, #28]	@ (800bfe0 <pxCurrentTCBConst2>)
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	6808      	ldr	r0, [r1, #0]
 800bfc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfca:	f380 8809 	msr	PSP, r0
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f04f 0000 	mov.w	r0, #0
 800bfd6:	f380 8811 	msr	BASEPRI, r0
 800bfda:	4770      	bx	lr
 800bfdc:	f3af 8000 	nop.w

0800bfe0 <pxCurrentTCBConst2>:
 800bfe0:	200020dc 	.word	0x200020dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop

0800bfe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfe8:	4808      	ldr	r0, [pc, #32]	@ (800c00c <prvPortStartFirstTask+0x24>)
 800bfea:	6800      	ldr	r0, [r0, #0]
 800bfec:	6800      	ldr	r0, [r0, #0]
 800bfee:	f380 8808 	msr	MSP, r0
 800bff2:	f04f 0000 	mov.w	r0, #0
 800bff6:	f380 8814 	msr	CONTROL, r0
 800bffa:	b662      	cpsie	i
 800bffc:	b661      	cpsie	f
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	df00      	svc	0
 800c008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c00a:	bf00      	nop
 800c00c:	e000ed08 	.word	0xe000ed08

0800c010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c016:	4b47      	ldr	r3, [pc, #284]	@ (800c134 <xPortStartScheduler+0x124>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a47      	ldr	r2, [pc, #284]	@ (800c138 <xPortStartScheduler+0x128>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d10b      	bne.n	800c038 <xPortStartScheduler+0x28>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	60fb      	str	r3, [r7, #12]
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	e7fd      	b.n	800c034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c038:	4b3e      	ldr	r3, [pc, #248]	@ (800c134 <xPortStartScheduler+0x124>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a3f      	ldr	r2, [pc, #252]	@ (800c13c <xPortStartScheduler+0x12c>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d10b      	bne.n	800c05a <xPortStartScheduler+0x4a>
	__asm volatile
 800c042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c046:	f383 8811 	msr	BASEPRI, r3
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	613b      	str	r3, [r7, #16]
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop
 800c058:	e7fd      	b.n	800c056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c05a:	4b39      	ldr	r3, [pc, #228]	@ (800c140 <xPortStartScheduler+0x130>)
 800c05c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	22ff      	movs	r2, #255	@ 0xff
 800c06a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c074:	78fb      	ldrb	r3, [r7, #3]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	4b31      	ldr	r3, [pc, #196]	@ (800c144 <xPortStartScheduler+0x134>)
 800c080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c082:	4b31      	ldr	r3, [pc, #196]	@ (800c148 <xPortStartScheduler+0x138>)
 800c084:	2207      	movs	r2, #7
 800c086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c088:	e009      	b.n	800c09e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c08a:	4b2f      	ldr	r3, [pc, #188]	@ (800c148 <xPortStartScheduler+0x138>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3b01      	subs	r3, #1
 800c090:	4a2d      	ldr	r2, [pc, #180]	@ (800c148 <xPortStartScheduler+0x138>)
 800c092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c094:	78fb      	ldrb	r3, [r7, #3]
 800c096:	b2db      	uxtb	r3, r3
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0a6:	2b80      	cmp	r3, #128	@ 0x80
 800c0a8:	d0ef      	beq.n	800c08a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0aa:	4b27      	ldr	r3, [pc, #156]	@ (800c148 <xPortStartScheduler+0x138>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f1c3 0307 	rsb	r3, r3, #7
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d00b      	beq.n	800c0ce <xPortStartScheduler+0xbe>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	60bb      	str	r3, [r7, #8]
}
 800c0c8:	bf00      	nop
 800c0ca:	bf00      	nop
 800c0cc:	e7fd      	b.n	800c0ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c148 <xPortStartScheduler+0x138>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	021b      	lsls	r3, r3, #8
 800c0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c148 <xPortStartScheduler+0x138>)
 800c0d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c148 <xPortStartScheduler+0x138>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0e0:	4a19      	ldr	r2, [pc, #100]	@ (800c148 <xPortStartScheduler+0x138>)
 800c0e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0ec:	4b17      	ldr	r3, [pc, #92]	@ (800c14c <xPortStartScheduler+0x13c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a16      	ldr	r2, [pc, #88]	@ (800c14c <xPortStartScheduler+0x13c>)
 800c0f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c0f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0f8:	4b14      	ldr	r3, [pc, #80]	@ (800c14c <xPortStartScheduler+0x13c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a13      	ldr	r2, [pc, #76]	@ (800c14c <xPortStartScheduler+0x13c>)
 800c0fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c104:	f000 f8da 	bl	800c2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c108:	4b11      	ldr	r3, [pc, #68]	@ (800c150 <xPortStartScheduler+0x140>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c10e:	f000 f8f9 	bl	800c304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c112:	4b10      	ldr	r3, [pc, #64]	@ (800c154 <xPortStartScheduler+0x144>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a0f      	ldr	r2, [pc, #60]	@ (800c154 <xPortStartScheduler+0x144>)
 800c118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c11c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c11e:	f7ff ff63 	bl	800bfe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c122:	f7ff f82b 	bl	800b17c <vTaskSwitchContext>
	prvTaskExitError();
 800c126:	f7ff ff17 	bl	800bf58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	e000ed00 	.word	0xe000ed00
 800c138:	410fc271 	.word	0x410fc271
 800c13c:	410fc270 	.word	0x410fc270
 800c140:	e000e400 	.word	0xe000e400
 800c144:	20002708 	.word	0x20002708
 800c148:	2000270c 	.word	0x2000270c
 800c14c:	e000ed20 	.word	0xe000ed20
 800c150:	20001270 	.word	0x20001270
 800c154:	e000ef34 	.word	0xe000ef34

0800c158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	607b      	str	r3, [r7, #4]
}
 800c170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c172:	4b10      	ldr	r3, [pc, #64]	@ (800c1b4 <vPortEnterCritical+0x5c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	4a0e      	ldr	r2, [pc, #56]	@ (800c1b4 <vPortEnterCritical+0x5c>)
 800c17a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c17c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b4 <vPortEnterCritical+0x5c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d110      	bne.n	800c1a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c184:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b8 <vPortEnterCritical+0x60>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00b      	beq.n	800c1a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	603b      	str	r3, [r7, #0]
}
 800c1a0:	bf00      	nop
 800c1a2:	bf00      	nop
 800c1a4:	e7fd      	b.n	800c1a2 <vPortEnterCritical+0x4a>
	}
}
 800c1a6:	bf00      	nop
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	20001270 	.word	0x20001270
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1c2:	4b12      	ldr	r3, [pc, #72]	@ (800c20c <vPortExitCritical+0x50>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <vPortExitCritical+0x26>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	607b      	str	r3, [r7, #4]
}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	e7fd      	b.n	800c1de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c20c <vPortExitCritical+0x50>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	4a08      	ldr	r2, [pc, #32]	@ (800c20c <vPortExitCritical+0x50>)
 800c1ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1ec:	4b07      	ldr	r3, [pc, #28]	@ (800c20c <vPortExitCritical+0x50>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <vPortExitCritical+0x44>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	f383 8811 	msr	BASEPRI, r3
}
 800c1fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	20001270 	.word	0x20001270

0800c210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c210:	f3ef 8009 	mrs	r0, PSP
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	4b15      	ldr	r3, [pc, #84]	@ (800c270 <pxCurrentTCBConst>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	f01e 0f10 	tst.w	lr, #16
 800c220:	bf08      	it	eq
 800c222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22a:	6010      	str	r0, [r2, #0]
 800c22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c234:	f380 8811 	msr	BASEPRI, r0
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f7fe ff9c 	bl	800b17c <vTaskSwitchContext>
 800c244:	f04f 0000 	mov.w	r0, #0
 800c248:	f380 8811 	msr	BASEPRI, r0
 800c24c:	bc09      	pop	{r0, r3}
 800c24e:	6819      	ldr	r1, [r3, #0]
 800c250:	6808      	ldr	r0, [r1, #0]
 800c252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c256:	f01e 0f10 	tst.w	lr, #16
 800c25a:	bf08      	it	eq
 800c25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c260:	f380 8809 	msr	PSP, r0
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	f3af 8000 	nop.w

0800c270 <pxCurrentTCBConst>:
 800c270:	200020dc 	.word	0x200020dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop

0800c278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	607b      	str	r3, [r7, #4]
}
 800c290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c292:	f7fe feb9 	bl	800b008 <xTaskIncrementTick>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c29c:	4b06      	ldr	r3, [pc, #24]	@ (800c2b8 <xPortSysTickHandler+0x40>)
 800c29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	f383 8811 	msr	BASEPRI, r3
}
 800c2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	e000ed04 	.word	0xe000ed04

0800c2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f0 <vPortSetupTimerInterrupt+0x34>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f4 <vPortSetupTimerInterrupt+0x38>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f8 <vPortSetupTimerInterrupt+0x3c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c2fc <vPortSetupTimerInterrupt+0x40>)
 800c2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d6:	099b      	lsrs	r3, r3, #6
 800c2d8:	4a09      	ldr	r2, [pc, #36]	@ (800c300 <vPortSetupTimerInterrupt+0x44>)
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2de:	4b04      	ldr	r3, [pc, #16]	@ (800c2f0 <vPortSetupTimerInterrupt+0x34>)
 800c2e0:	2207      	movs	r2, #7
 800c2e2:	601a      	str	r2, [r3, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	e000e010 	.word	0xe000e010
 800c2f4:	e000e018 	.word	0xe000e018
 800c2f8:	20000000 	.word	0x20000000
 800c2fc:	10624dd3 	.word	0x10624dd3
 800c300:	e000e014 	.word	0xe000e014

0800c304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c314 <vPortEnableVFP+0x10>
 800c308:	6801      	ldr	r1, [r0, #0]
 800c30a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c30e:	6001      	str	r1, [r0, #0]
 800c310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c312:	bf00      	nop
 800c314:	e000ed88 	.word	0xe000ed88

0800c318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c31e:	f3ef 8305 	mrs	r3, IPSR
 800c322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b0f      	cmp	r3, #15
 800c328:	d915      	bls.n	800c356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c32a:	4a18      	ldr	r2, [pc, #96]	@ (800c38c <vPortValidateInterruptPriority+0x74>)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4413      	add	r3, r2
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c334:	4b16      	ldr	r3, [pc, #88]	@ (800c390 <vPortValidateInterruptPriority+0x78>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	7afa      	ldrb	r2, [r7, #11]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d20b      	bcs.n	800c356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
 800c352:	bf00      	nop
 800c354:	e7fd      	b.n	800c352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c356:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <vPortValidateInterruptPriority+0x7c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c35e:	4b0e      	ldr	r3, [pc, #56]	@ (800c398 <vPortValidateInterruptPriority+0x80>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	429a      	cmp	r2, r3
 800c364:	d90b      	bls.n	800c37e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	603b      	str	r3, [r7, #0]
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <vPortValidateInterruptPriority+0x62>
	}
 800c37e:	bf00      	nop
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	e000e3f0 	.word	0xe000e3f0
 800c390:	20002708 	.word	0x20002708
 800c394:	e000ed0c 	.word	0xe000ed0c
 800c398:	2000270c 	.word	0x2000270c

0800c39c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	@ 0x28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3a8:	f7fe fd60 	bl	800ae6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c520 <pvPortMalloc+0x184>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3b4:	f000 f924 	bl	800c600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c524 <pvPortMalloc+0x188>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4013      	ands	r3, r2
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f040 8095 	bne.w	800c4f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d01e      	beq.n	800c40a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d015      	beq.n	800c40a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f023 0307 	bic.w	r3, r3, #7
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f003 0307 	and.w	r3, r3, #7
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <pvPortMalloc+0x6e>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	617b      	str	r3, [r7, #20]
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	e7fd      	b.n	800c406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d06f      	beq.n	800c4f0 <pvPortMalloc+0x154>
 800c410:	4b45      	ldr	r3, [pc, #276]	@ (800c528 <pvPortMalloc+0x18c>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	429a      	cmp	r2, r3
 800c418:	d86a      	bhi.n	800c4f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c41a:	4b44      	ldr	r3, [pc, #272]	@ (800c52c <pvPortMalloc+0x190>)
 800c41c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c41e:	4b43      	ldr	r3, [pc, #268]	@ (800c52c <pvPortMalloc+0x190>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c424:	e004      	b.n	800c430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	429a      	cmp	r2, r3
 800c438:	d903      	bls.n	800c442 <pvPortMalloc+0xa6>
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1f1      	bne.n	800c426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c442:	4b37      	ldr	r3, [pc, #220]	@ (800c520 <pvPortMalloc+0x184>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c448:	429a      	cmp	r2, r3
 800c44a:	d051      	beq.n	800c4f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2208      	movs	r2, #8
 800c452:	4413      	add	r3, r2
 800c454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	1ad2      	subs	r2, r2, r3
 800c466:	2308      	movs	r3, #8
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d920      	bls.n	800c4b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c46e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4413      	add	r3, r2
 800c474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	f003 0307 	and.w	r3, r3, #7
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <pvPortMalloc+0xfc>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	613b      	str	r3, [r7, #16]
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	e7fd      	b.n	800c494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	1ad2      	subs	r2, r2, r3
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4aa:	69b8      	ldr	r0, [r7, #24]
 800c4ac:	f000 f90a 	bl	800c6c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c528 <pvPortMalloc+0x18c>)
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c528 <pvPortMalloc+0x18c>)
 800c4bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4be:	4b1a      	ldr	r3, [pc, #104]	@ (800c528 <pvPortMalloc+0x18c>)
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c530 <pvPortMalloc+0x194>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d203      	bcs.n	800c4d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4ca:	4b17      	ldr	r3, [pc, #92]	@ (800c528 <pvPortMalloc+0x18c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a18      	ldr	r2, [pc, #96]	@ (800c530 <pvPortMalloc+0x194>)
 800c4d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	4b13      	ldr	r3, [pc, #76]	@ (800c524 <pvPortMalloc+0x188>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4e6:	4b13      	ldr	r3, [pc, #76]	@ (800c534 <pvPortMalloc+0x198>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	4a11      	ldr	r2, [pc, #68]	@ (800c534 <pvPortMalloc+0x198>)
 800c4ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4f0:	f7fe fcca 	bl	800ae88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <pvPortMalloc+0x17a>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	60fb      	str	r3, [r7, #12]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <pvPortMalloc+0x176>
	return pvReturn;
 800c516:	69fb      	ldr	r3, [r7, #28]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3728      	adds	r7, #40	@ 0x28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	20003318 	.word	0x20003318
 800c524:	2000332c 	.word	0x2000332c
 800c528:	2000331c 	.word	0x2000331c
 800c52c:	20003310 	.word	0x20003310
 800c530:	20003320 	.word	0x20003320
 800c534:	20003324 	.word	0x20003324

0800c538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d04f      	beq.n	800c5ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c54a:	2308      	movs	r3, #8
 800c54c:	425b      	negs	r3, r3
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	4413      	add	r3, r2
 800c552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	4b25      	ldr	r3, [pc, #148]	@ (800c5f4 <vPortFree+0xbc>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4013      	ands	r3, r2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10b      	bne.n	800c57e <vPortFree+0x46>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	60fb      	str	r3, [r7, #12]
}
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	e7fd      	b.n	800c57a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00b      	beq.n	800c59e <vPortFree+0x66>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	60bb      	str	r3, [r7, #8]
}
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	e7fd      	b.n	800c59a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	4b14      	ldr	r3, [pc, #80]	@ (800c5f4 <vPortFree+0xbc>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01e      	beq.n	800c5ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d11a      	bne.n	800c5ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f4 <vPortFree+0xbc>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	43db      	mvns	r3, r3
 800c5be:	401a      	ands	r2, r3
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5c4:	f7fe fc52 	bl	800ae6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c5f8 <vPortFree+0xc0>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	4a09      	ldr	r2, [pc, #36]	@ (800c5f8 <vPortFree+0xc0>)
 800c5d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5d6:	6938      	ldr	r0, [r7, #16]
 800c5d8:	f000 f874 	bl	800c6c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5dc:	4b07      	ldr	r3, [pc, #28]	@ (800c5fc <vPortFree+0xc4>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	4a06      	ldr	r2, [pc, #24]	@ (800c5fc <vPortFree+0xc4>)
 800c5e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5e6:	f7fe fc4f 	bl	800ae88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ea:	bf00      	nop
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	2000332c 	.word	0x2000332c
 800c5f8:	2000331c 	.word	0x2000331c
 800c5fc:	20003328 	.word	0x20003328

0800c600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c606:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c60a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c60c:	4b27      	ldr	r3, [pc, #156]	@ (800c6ac <prvHeapInit+0xac>)
 800c60e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00c      	beq.n	800c634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3307      	adds	r3, #7
 800c61e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f023 0307 	bic.w	r3, r3, #7
 800c626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	4a1f      	ldr	r2, [pc, #124]	@ (800c6ac <prvHeapInit+0xac>)
 800c630:	4413      	add	r3, r2
 800c632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c638:	4a1d      	ldr	r2, [pc, #116]	@ (800c6b0 <prvHeapInit+0xb0>)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c63e:	4b1c      	ldr	r3, [pc, #112]	@ (800c6b0 <prvHeapInit+0xb0>)
 800c640:	2200      	movs	r2, #0
 800c642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	4413      	add	r3, r2
 800c64a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c64c:	2208      	movs	r2, #8
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	1a9b      	subs	r3, r3, r2
 800c652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f023 0307 	bic.w	r3, r3, #7
 800c65a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	4a15      	ldr	r2, [pc, #84]	@ (800c6b4 <prvHeapInit+0xb4>)
 800c660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c662:	4b14      	ldr	r3, [pc, #80]	@ (800c6b4 <prvHeapInit+0xb4>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2200      	movs	r2, #0
 800c668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c66a:	4b12      	ldr	r3, [pc, #72]	@ (800c6b4 <prvHeapInit+0xb4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	1ad2      	subs	r2, r2, r3
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c680:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b4 <prvHeapInit+0xb4>)
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	4a0a      	ldr	r2, [pc, #40]	@ (800c6b8 <prvHeapInit+0xb8>)
 800c68e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	4a09      	ldr	r2, [pc, #36]	@ (800c6bc <prvHeapInit+0xbc>)
 800c696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c698:	4b09      	ldr	r3, [pc, #36]	@ (800c6c0 <prvHeapInit+0xc0>)
 800c69a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c69e:	601a      	str	r2, [r3, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	20002710 	.word	0x20002710
 800c6b0:	20003310 	.word	0x20003310
 800c6b4:	20003318 	.word	0x20003318
 800c6b8:	20003320 	.word	0x20003320
 800c6bc:	2000331c 	.word	0x2000331c
 800c6c0:	2000332c 	.word	0x2000332c

0800c6c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6cc:	4b28      	ldr	r3, [pc, #160]	@ (800c770 <prvInsertBlockIntoFreeList+0xac>)
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	e002      	b.n	800c6d8 <prvInsertBlockIntoFreeList+0x14>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d8f7      	bhi.n	800c6d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d108      	bne.n	800c706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	441a      	add	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d118      	bne.n	800c74c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	4b15      	ldr	r3, [pc, #84]	@ (800c774 <prvInsertBlockIntoFreeList+0xb0>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d00d      	beq.n	800c742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	441a      	add	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e008      	b.n	800c754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c742:	4b0c      	ldr	r3, [pc, #48]	@ (800c774 <prvInsertBlockIntoFreeList+0xb0>)
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	e003      	b.n	800c754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d002      	beq.n	800c762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c762:	bf00      	nop
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	20003310 	.word	0x20003310
 800c774:	20003318 	.word	0x20003318

0800c778 <memset>:
 800c778:	4402      	add	r2, r0
 800c77a:	4603      	mov	r3, r0
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d100      	bne.n	800c782 <memset+0xa>
 800c780:	4770      	bx	lr
 800c782:	f803 1b01 	strb.w	r1, [r3], #1
 800c786:	e7f9      	b.n	800c77c <memset+0x4>

0800c788 <_reclaim_reent>:
 800c788:	4b2d      	ldr	r3, [pc, #180]	@ (800c840 <_reclaim_reent+0xb8>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4283      	cmp	r3, r0
 800c78e:	b570      	push	{r4, r5, r6, lr}
 800c790:	4604      	mov	r4, r0
 800c792:	d053      	beq.n	800c83c <_reclaim_reent+0xb4>
 800c794:	69c3      	ldr	r3, [r0, #28]
 800c796:	b31b      	cbz	r3, 800c7e0 <_reclaim_reent+0x58>
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	b163      	cbz	r3, 800c7b6 <_reclaim_reent+0x2e>
 800c79c:	2500      	movs	r5, #0
 800c79e:	69e3      	ldr	r3, [r4, #28]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	5959      	ldr	r1, [r3, r5]
 800c7a4:	b9b1      	cbnz	r1, 800c7d4 <_reclaim_reent+0x4c>
 800c7a6:	3504      	adds	r5, #4
 800c7a8:	2d80      	cmp	r5, #128	@ 0x80
 800c7aa:	d1f8      	bne.n	800c79e <_reclaim_reent+0x16>
 800c7ac:	69e3      	ldr	r3, [r4, #28]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	68d9      	ldr	r1, [r3, #12]
 800c7b2:	f000 f881 	bl	800c8b8 <_free_r>
 800c7b6:	69e3      	ldr	r3, [r4, #28]
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	b111      	cbz	r1, 800c7c2 <_reclaim_reent+0x3a>
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 f87b 	bl	800c8b8 <_free_r>
 800c7c2:	69e3      	ldr	r3, [r4, #28]
 800c7c4:	689d      	ldr	r5, [r3, #8]
 800c7c6:	b15d      	cbz	r5, 800c7e0 <_reclaim_reent+0x58>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	682d      	ldr	r5, [r5, #0]
 800c7ce:	f000 f873 	bl	800c8b8 <_free_r>
 800c7d2:	e7f8      	b.n	800c7c6 <_reclaim_reent+0x3e>
 800c7d4:	680e      	ldr	r6, [r1, #0]
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f000 f86e 	bl	800c8b8 <_free_r>
 800c7dc:	4631      	mov	r1, r6
 800c7de:	e7e1      	b.n	800c7a4 <_reclaim_reent+0x1c>
 800c7e0:	6961      	ldr	r1, [r4, #20]
 800c7e2:	b111      	cbz	r1, 800c7ea <_reclaim_reent+0x62>
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f000 f867 	bl	800c8b8 <_free_r>
 800c7ea:	69e1      	ldr	r1, [r4, #28]
 800c7ec:	b111      	cbz	r1, 800c7f4 <_reclaim_reent+0x6c>
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f000 f862 	bl	800c8b8 <_free_r>
 800c7f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c7f6:	b111      	cbz	r1, 800c7fe <_reclaim_reent+0x76>
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f000 f85d 	bl	800c8b8 <_free_r>
 800c7fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c800:	b111      	cbz	r1, 800c808 <_reclaim_reent+0x80>
 800c802:	4620      	mov	r0, r4
 800c804:	f000 f858 	bl	800c8b8 <_free_r>
 800c808:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c80a:	b111      	cbz	r1, 800c812 <_reclaim_reent+0x8a>
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 f853 	bl	800c8b8 <_free_r>
 800c812:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c814:	b111      	cbz	r1, 800c81c <_reclaim_reent+0x94>
 800c816:	4620      	mov	r0, r4
 800c818:	f000 f84e 	bl	800c8b8 <_free_r>
 800c81c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c81e:	b111      	cbz	r1, 800c826 <_reclaim_reent+0x9e>
 800c820:	4620      	mov	r0, r4
 800c822:	f000 f849 	bl	800c8b8 <_free_r>
 800c826:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c828:	b111      	cbz	r1, 800c830 <_reclaim_reent+0xa8>
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 f844 	bl	800c8b8 <_free_r>
 800c830:	6a23      	ldr	r3, [r4, #32]
 800c832:	b11b      	cbz	r3, 800c83c <_reclaim_reent+0xb4>
 800c834:	4620      	mov	r0, r4
 800c836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c83a:	4718      	bx	r3
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	bf00      	nop
 800c840:	20001274 	.word	0x20001274

0800c844 <__errno>:
 800c844:	4b01      	ldr	r3, [pc, #4]	@ (800c84c <__errno+0x8>)
 800c846:	6818      	ldr	r0, [r3, #0]
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	20001274 	.word	0x20001274

0800c850 <__libc_init_array>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	4d0d      	ldr	r5, [pc, #52]	@ (800c888 <__libc_init_array+0x38>)
 800c854:	4c0d      	ldr	r4, [pc, #52]	@ (800c88c <__libc_init_array+0x3c>)
 800c856:	1b64      	subs	r4, r4, r5
 800c858:	10a4      	asrs	r4, r4, #2
 800c85a:	2600      	movs	r6, #0
 800c85c:	42a6      	cmp	r6, r4
 800c85e:	d109      	bne.n	800c874 <__libc_init_array+0x24>
 800c860:	4d0b      	ldr	r5, [pc, #44]	@ (800c890 <__libc_init_array+0x40>)
 800c862:	4c0c      	ldr	r4, [pc, #48]	@ (800c894 <__libc_init_array+0x44>)
 800c864:	f000 f980 	bl	800cb68 <_init>
 800c868:	1b64      	subs	r4, r4, r5
 800c86a:	10a4      	asrs	r4, r4, #2
 800c86c:	2600      	movs	r6, #0
 800c86e:	42a6      	cmp	r6, r4
 800c870:	d105      	bne.n	800c87e <__libc_init_array+0x2e>
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	f855 3b04 	ldr.w	r3, [r5], #4
 800c878:	4798      	blx	r3
 800c87a:	3601      	adds	r6, #1
 800c87c:	e7ee      	b.n	800c85c <__libc_init_array+0xc>
 800c87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c882:	4798      	blx	r3
 800c884:	3601      	adds	r6, #1
 800c886:	e7f2      	b.n	800c86e <__libc_init_array+0x1e>
 800c888:	0800cc90 	.word	0x0800cc90
 800c88c:	0800cc90 	.word	0x0800cc90
 800c890:	0800cc90 	.word	0x0800cc90
 800c894:	0800cc94 	.word	0x0800cc94

0800c898 <__retarget_lock_acquire_recursive>:
 800c898:	4770      	bx	lr

0800c89a <__retarget_lock_release_recursive>:
 800c89a:	4770      	bx	lr

0800c89c <memcpy>:
 800c89c:	440a      	add	r2, r1
 800c89e:	4291      	cmp	r1, r2
 800c8a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8a4:	d100      	bne.n	800c8a8 <memcpy+0xc>
 800c8a6:	4770      	bx	lr
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8b2:	4291      	cmp	r1, r2
 800c8b4:	d1f9      	bne.n	800c8aa <memcpy+0xe>
 800c8b6:	bd10      	pop	{r4, pc}

0800c8b8 <_free_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	d041      	beq.n	800c944 <_free_r+0x8c>
 800c8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8c4:	1f0c      	subs	r4, r1, #4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bfb8      	it	lt
 800c8ca:	18e4      	addlt	r4, r4, r3
 800c8cc:	f000 f83e 	bl	800c94c <__malloc_lock>
 800c8d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c948 <_free_r+0x90>)
 800c8d2:	6813      	ldr	r3, [r2, #0]
 800c8d4:	b933      	cbnz	r3, 800c8e4 <_free_r+0x2c>
 800c8d6:	6063      	str	r3, [r4, #4]
 800c8d8:	6014      	str	r4, [r2, #0]
 800c8da:	4628      	mov	r0, r5
 800c8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8e0:	f000 b83a 	b.w	800c958 <__malloc_unlock>
 800c8e4:	42a3      	cmp	r3, r4
 800c8e6:	d908      	bls.n	800c8fa <_free_r+0x42>
 800c8e8:	6820      	ldr	r0, [r4, #0]
 800c8ea:	1821      	adds	r1, r4, r0
 800c8ec:	428b      	cmp	r3, r1
 800c8ee:	bf01      	itttt	eq
 800c8f0:	6819      	ldreq	r1, [r3, #0]
 800c8f2:	685b      	ldreq	r3, [r3, #4]
 800c8f4:	1809      	addeq	r1, r1, r0
 800c8f6:	6021      	streq	r1, [r4, #0]
 800c8f8:	e7ed      	b.n	800c8d6 <_free_r+0x1e>
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	b10b      	cbz	r3, 800c904 <_free_r+0x4c>
 800c900:	42a3      	cmp	r3, r4
 800c902:	d9fa      	bls.n	800c8fa <_free_r+0x42>
 800c904:	6811      	ldr	r1, [r2, #0]
 800c906:	1850      	adds	r0, r2, r1
 800c908:	42a0      	cmp	r0, r4
 800c90a:	d10b      	bne.n	800c924 <_free_r+0x6c>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	4401      	add	r1, r0
 800c910:	1850      	adds	r0, r2, r1
 800c912:	4283      	cmp	r3, r0
 800c914:	6011      	str	r1, [r2, #0]
 800c916:	d1e0      	bne.n	800c8da <_free_r+0x22>
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	6053      	str	r3, [r2, #4]
 800c91e:	4408      	add	r0, r1
 800c920:	6010      	str	r0, [r2, #0]
 800c922:	e7da      	b.n	800c8da <_free_r+0x22>
 800c924:	d902      	bls.n	800c92c <_free_r+0x74>
 800c926:	230c      	movs	r3, #12
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	e7d6      	b.n	800c8da <_free_r+0x22>
 800c92c:	6820      	ldr	r0, [r4, #0]
 800c92e:	1821      	adds	r1, r4, r0
 800c930:	428b      	cmp	r3, r1
 800c932:	bf04      	itt	eq
 800c934:	6819      	ldreq	r1, [r3, #0]
 800c936:	685b      	ldreq	r3, [r3, #4]
 800c938:	6063      	str	r3, [r4, #4]
 800c93a:	bf04      	itt	eq
 800c93c:	1809      	addeq	r1, r1, r0
 800c93e:	6021      	streq	r1, [r4, #0]
 800c940:	6054      	str	r4, [r2, #4]
 800c942:	e7ca      	b.n	800c8da <_free_r+0x22>
 800c944:	bd38      	pop	{r3, r4, r5, pc}
 800c946:	bf00      	nop
 800c948:	2000346c 	.word	0x2000346c

0800c94c <__malloc_lock>:
 800c94c:	4801      	ldr	r0, [pc, #4]	@ (800c954 <__malloc_lock+0x8>)
 800c94e:	f7ff bfa3 	b.w	800c898 <__retarget_lock_acquire_recursive>
 800c952:	bf00      	nop
 800c954:	20003468 	.word	0x20003468

0800c958 <__malloc_unlock>:
 800c958:	4801      	ldr	r0, [pc, #4]	@ (800c960 <__malloc_unlock+0x8>)
 800c95a:	f7ff bf9e 	b.w	800c89a <__retarget_lock_release_recursive>
 800c95e:	bf00      	nop
 800c960:	20003468 	.word	0x20003468

0800c964 <sqrt>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	ed2d 8b02 	vpush	{d8}
 800c96a:	ec55 4b10 	vmov	r4, r5, d0
 800c96e:	f000 f825 	bl	800c9bc <__ieee754_sqrt>
 800c972:	4622      	mov	r2, r4
 800c974:	462b      	mov	r3, r5
 800c976:	4620      	mov	r0, r4
 800c978:	4629      	mov	r1, r5
 800c97a:	eeb0 8a40 	vmov.f32	s16, s0
 800c97e:	eef0 8a60 	vmov.f32	s17, s1
 800c982:	f7f4 f8a3 	bl	8000acc <__aeabi_dcmpun>
 800c986:	b990      	cbnz	r0, 800c9ae <sqrt+0x4a>
 800c988:	2200      	movs	r2, #0
 800c98a:	2300      	movs	r3, #0
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	f7f4 f874 	bl	8000a7c <__aeabi_dcmplt>
 800c994:	b158      	cbz	r0, 800c9ae <sqrt+0x4a>
 800c996:	f7ff ff55 	bl	800c844 <__errno>
 800c99a:	2321      	movs	r3, #33	@ 0x21
 800c99c:	6003      	str	r3, [r0, #0]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	f7f3 ff21 	bl	80007ec <__aeabi_ddiv>
 800c9aa:	ec41 0b18 	vmov	d8, r0, r1
 800c9ae:	eeb0 0a48 	vmov.f32	s0, s16
 800c9b2:	eef0 0a68 	vmov.f32	s1, s17
 800c9b6:	ecbd 8b02 	vpop	{d8}
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}

0800c9bc <__ieee754_sqrt>:
 800c9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	4a66      	ldr	r2, [pc, #408]	@ (800cb5c <__ieee754_sqrt+0x1a0>)
 800c9c2:	ec55 4b10 	vmov	r4, r5, d0
 800c9c6:	43aa      	bics	r2, r5
 800c9c8:	462b      	mov	r3, r5
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	d110      	bne.n	800c9f0 <__ieee754_sqrt+0x34>
 800c9ce:	4622      	mov	r2, r4
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	f7f3 fde0 	bl	8000598 <__aeabi_dmul>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f7f3 fc24 	bl	800022c <__adddf3>
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	ec45 4b10 	vmov	d0, r4, r5
 800c9ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	dc0e      	bgt.n	800ca12 <__ieee754_sqrt+0x56>
 800c9f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c9f8:	4322      	orrs	r2, r4
 800c9fa:	d0f5      	beq.n	800c9e8 <__ieee754_sqrt+0x2c>
 800c9fc:	b19d      	cbz	r5, 800ca26 <__ieee754_sqrt+0x6a>
 800c9fe:	4622      	mov	r2, r4
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fc10 	bl	8000228 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	f7f3 feee 	bl	80007ec <__aeabi_ddiv>
 800ca10:	e7e8      	b.n	800c9e4 <__ieee754_sqrt+0x28>
 800ca12:	152a      	asrs	r2, r5, #20
 800ca14:	d115      	bne.n	800ca42 <__ieee754_sqrt+0x86>
 800ca16:	2000      	movs	r0, #0
 800ca18:	e009      	b.n	800ca2e <__ieee754_sqrt+0x72>
 800ca1a:	0acb      	lsrs	r3, r1, #11
 800ca1c:	3a15      	subs	r2, #21
 800ca1e:	0549      	lsls	r1, r1, #21
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d0fa      	beq.n	800ca1a <__ieee754_sqrt+0x5e>
 800ca24:	e7f7      	b.n	800ca16 <__ieee754_sqrt+0x5a>
 800ca26:	462a      	mov	r2, r5
 800ca28:	e7fa      	b.n	800ca20 <__ieee754_sqrt+0x64>
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	02dc      	lsls	r4, r3, #11
 800ca30:	d5fb      	bpl.n	800ca2a <__ieee754_sqrt+0x6e>
 800ca32:	1e44      	subs	r4, r0, #1
 800ca34:	1b12      	subs	r2, r2, r4
 800ca36:	f1c0 0420 	rsb	r4, r0, #32
 800ca3a:	fa21 f404 	lsr.w	r4, r1, r4
 800ca3e:	4323      	orrs	r3, r4
 800ca40:	4081      	lsls	r1, r0
 800ca42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca46:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ca4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca4e:	07d2      	lsls	r2, r2, #31
 800ca50:	bf5c      	itt	pl
 800ca52:	005b      	lslpl	r3, r3, #1
 800ca54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ca58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca5c:	bf58      	it	pl
 800ca5e:	0049      	lslpl	r1, r1, #1
 800ca60:	2600      	movs	r6, #0
 800ca62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ca66:	107f      	asrs	r7, r7, #1
 800ca68:	0049      	lsls	r1, r1, #1
 800ca6a:	2016      	movs	r0, #22
 800ca6c:	4632      	mov	r2, r6
 800ca6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ca72:	1915      	adds	r5, r2, r4
 800ca74:	429d      	cmp	r5, r3
 800ca76:	bfde      	ittt	le
 800ca78:	192a      	addle	r2, r5, r4
 800ca7a:	1b5b      	suble	r3, r3, r5
 800ca7c:	1936      	addle	r6, r6, r4
 800ca7e:	0fcd      	lsrs	r5, r1, #31
 800ca80:	3801      	subs	r0, #1
 800ca82:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ca86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ca8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ca8e:	d1f0      	bne.n	800ca72 <__ieee754_sqrt+0xb6>
 800ca90:	4605      	mov	r5, r0
 800ca92:	2420      	movs	r4, #32
 800ca94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	eb0c 0e00 	add.w	lr, ip, r0
 800ca9e:	dc02      	bgt.n	800caa6 <__ieee754_sqrt+0xea>
 800caa0:	d113      	bne.n	800caca <__ieee754_sqrt+0x10e>
 800caa2:	458e      	cmp	lr, r1
 800caa4:	d811      	bhi.n	800caca <__ieee754_sqrt+0x10e>
 800caa6:	f1be 0f00 	cmp.w	lr, #0
 800caaa:	eb0e 000c 	add.w	r0, lr, ip
 800caae:	da3f      	bge.n	800cb30 <__ieee754_sqrt+0x174>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	db3d      	blt.n	800cb30 <__ieee754_sqrt+0x174>
 800cab4:	f102 0801 	add.w	r8, r2, #1
 800cab8:	1a9b      	subs	r3, r3, r2
 800caba:	458e      	cmp	lr, r1
 800cabc:	bf88      	it	hi
 800cabe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cac2:	eba1 010e 	sub.w	r1, r1, lr
 800cac6:	4465      	add	r5, ip
 800cac8:	4642      	mov	r2, r8
 800caca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cace:	3c01      	subs	r4, #1
 800cad0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cad4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cad8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cadc:	d1dc      	bne.n	800ca98 <__ieee754_sqrt+0xdc>
 800cade:	4319      	orrs	r1, r3
 800cae0:	d01b      	beq.n	800cb1a <__ieee754_sqrt+0x15e>
 800cae2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800cb60 <__ieee754_sqrt+0x1a4>
 800cae6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800cb64 <__ieee754_sqrt+0x1a8>
 800caea:	e9da 0100 	ldrd	r0, r1, [sl]
 800caee:	e9db 2300 	ldrd	r2, r3, [fp]
 800caf2:	f7f3 fb99 	bl	8000228 <__aeabi_dsub>
 800caf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800cafa:	4602      	mov	r2, r0
 800cafc:	460b      	mov	r3, r1
 800cafe:	4640      	mov	r0, r8
 800cb00:	4649      	mov	r1, r9
 800cb02:	f7f3 ffc5 	bl	8000a90 <__aeabi_dcmple>
 800cb06:	b140      	cbz	r0, 800cb1a <__ieee754_sqrt+0x15e>
 800cb08:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cb0c:	e9da 0100 	ldrd	r0, r1, [sl]
 800cb10:	e9db 2300 	ldrd	r2, r3, [fp]
 800cb14:	d10e      	bne.n	800cb34 <__ieee754_sqrt+0x178>
 800cb16:	3601      	adds	r6, #1
 800cb18:	4625      	mov	r5, r4
 800cb1a:	1073      	asrs	r3, r6, #1
 800cb1c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb20:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800cb24:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800cb28:	086b      	lsrs	r3, r5, #1
 800cb2a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800cb2e:	e759      	b.n	800c9e4 <__ieee754_sqrt+0x28>
 800cb30:	4690      	mov	r8, r2
 800cb32:	e7c1      	b.n	800cab8 <__ieee754_sqrt+0xfc>
 800cb34:	f7f3 fb7a 	bl	800022c <__adddf3>
 800cb38:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4640      	mov	r0, r8
 800cb42:	4649      	mov	r1, r9
 800cb44:	f7f3 ff9a 	bl	8000a7c <__aeabi_dcmplt>
 800cb48:	b120      	cbz	r0, 800cb54 <__ieee754_sqrt+0x198>
 800cb4a:	1cab      	adds	r3, r5, #2
 800cb4c:	bf08      	it	eq
 800cb4e:	3601      	addeq	r6, #1
 800cb50:	3502      	adds	r5, #2
 800cb52:	e7e2      	b.n	800cb1a <__ieee754_sqrt+0x15e>
 800cb54:	1c6b      	adds	r3, r5, #1
 800cb56:	f023 0501 	bic.w	r5, r3, #1
 800cb5a:	e7de      	b.n	800cb1a <__ieee754_sqrt+0x15e>
 800cb5c:	7ff00000 	.word	0x7ff00000
 800cb60:	0800cc80 	.word	0x0800cc80
 800cb64:	0800cc78 	.word	0x0800cc78

0800cb68 <_init>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	bf00      	nop
 800cb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6e:	bc08      	pop	{r3}
 800cb70:	469e      	mov	lr, r3
 800cb72:	4770      	bx	lr

0800cb74 <_fini>:
 800cb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb76:	bf00      	nop
 800cb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7a:	bc08      	pop	{r3}
 800cb7c:	469e      	mov	lr, r3
 800cb7e:	4770      	bx	lr
