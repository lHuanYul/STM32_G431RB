
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c694  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800c878  0800c878  0000d878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c988  0800c988  0000f2a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c988  0800c988  0000d988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c990  0800c990  0000f2a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c990  0800c990  0000d990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c994  0800c994  0000d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000012a4  20000000  0800c998  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b0  200012a4  0800dc3c  0000f2a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003454  0800dc3c  0000f454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033c1f  00000000  00000000  0000f2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007342  00000000  00000000  00042ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026f8  00000000  00000000  0004a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de7  00000000  00000000  0004c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b096  00000000  00000000  0004e717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000381d4  00000000  00000000  000797ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3726  00000000  00000000  000b1981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a50a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7a0  00000000  00000000  001a50ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001af88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200012a4 	.word	0x200012a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c85c 	.word	0x0800c85c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200012a8 	.word	0x200012a8
 800021c:	0800c85c 	.word	0x0800c85c

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b988 	b.w	8000ec0 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	468e      	mov	lr, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d962      	bls.n	8000ca4 <__udivmoddi4+0xdc>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	b14e      	cbz	r6, 8000bf8 <__udivmoddi4+0x30>
 8000be4:	f1c6 0320 	rsb	r3, r6, #32
 8000be8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bec:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf0:	40b7      	lsls	r7, r6
 8000bf2:	ea43 0808 	orr.w	r8, r3, r8
 8000bf6:	40b4      	lsls	r4, r6
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c1c:	f080 80ea 	bcs.w	8000df4 <__udivmoddi4+0x22c>
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f240 80e7 	bls.w	8000df4 <__udivmoddi4+0x22c>
 8000c26:	3902      	subs	r1, #2
 8000c28:	443b      	add	r3, r7
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	b2a3      	uxth	r3, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3e:	459c      	cmp	ip, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c48:	f080 80d6 	bcs.w	8000df8 <__udivmoddi4+0x230>
 8000c4c:	459c      	cmp	ip, r3
 8000c4e:	f240 80d3 	bls.w	8000df8 <__udivmoddi4+0x230>
 8000c52:	443b      	add	r3, r7
 8000c54:	3802      	subs	r0, #2
 8000c56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5a:	eba3 030c 	sub.w	r3, r3, ip
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40f3      	lsrs	r3, r6
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xb6>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb0>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x14c>
 8000c86:	4573      	cmp	r3, lr
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xc8>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 8105 	bhi.w	8000e9a <__udivmoddi4+0x2d2>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4690      	mov	r8, r2
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e5      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000c9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000ca2:	e7e2      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f000 8090 	beq.w	8000dca <__udivmoddi4+0x202>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f040 80a4 	bne.w	8000dfc <__udivmoddi4+0x234>
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	b2bc      	uxth	r4, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cce:	fb04 f20c 	mul.w	r2, r4, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x11e>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x11c>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f200 80e0 	bhi.w	8000ea4 <__udivmoddi4+0x2dc>
 8000ce4:	46c4      	mov	ip, r8
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf4:	fb02 f404 	mul.w	r4, r2, r4
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x144>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x142>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2d6>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa0e f401 	lsl.w	r4, lr, r1
 8000d24:	fa20 f306 	lsr.w	r3, r0, r6
 8000d28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	fa1f fc87 	uxth.w	ip, r7
 8000d3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x1a0>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d5a:	f080 809c 	bcs.w	8000e96 <__udivmoddi4+0x2ce>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8099 	bls.w	8000e96 <__udivmoddi4+0x2ce>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	fa1f fe83 	uxth.w	lr, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1ce>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d8a:	f080 8082 	bcs.w	8000e92 <__udivmoddi4+0x2ca>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d97f      	bls.n	8000e92 <__udivmoddi4+0x2ca>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da2:	4564      	cmp	r4, ip
 8000da4:	4673      	mov	r3, lr
 8000da6:	46e1      	mov	r9, ip
 8000da8:	d362      	bcc.n	8000e70 <__udivmoddi4+0x2a8>
 8000daa:	d05f      	beq.n	8000e6c <__udivmoddi4+0x2a4>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x1fe>
 8000dae:	ebb8 0203 	subs.w	r2, r8, r3
 8000db2:	eb64 0409 	sbc.w	r4, r4, r9
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	fa22 f301 	lsr.w	r3, r2, r1
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e74f      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000dca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dce:	0c01      	lsrs	r1, r0, #16
 8000dd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4638      	mov	r0, r7
 8000dde:	463c      	mov	r4, r7
 8000de0:	46b8      	mov	r8, r7
 8000de2:	46be      	mov	lr, r7
 8000de4:	2620      	movs	r6, #32
 8000de6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dea:	eba2 0208 	sub.w	r2, r2, r8
 8000dee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000df2:	e766      	b.n	8000cc2 <__udivmoddi4+0xfa>
 8000df4:	4601      	mov	r1, r0
 8000df6:	e718      	b.n	8000c2a <__udivmoddi4+0x62>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	e72c      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000dfc:	f1c6 0220 	rsb	r2, r6, #32
 8000e00:	fa2e f302 	lsr.w	r3, lr, r2
 8000e04:	40b7      	lsls	r7, r6
 8000e06:	40b1      	lsls	r1, r6
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb08 f904 	mul.w	r9, r8, r4
 8000e26:	40b0      	lsls	r0, r6
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2e:	b280      	uxth	r0, r0
 8000e30:	d93e      	bls.n	8000eb0 <__udivmoddi4+0x2e8>
 8000e32:	1879      	adds	r1, r7, r1
 8000e34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e38:	d201      	bcs.n	8000e3e <__udivmoddi4+0x276>
 8000e3a:	4589      	cmp	r9, r1
 8000e3c:	d81f      	bhi.n	8000e7e <__udivmoddi4+0x2b6>
 8000e3e:	eba1 0109 	sub.w	r1, r1, r9
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fb09 f804 	mul.w	r8, r9, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d229      	bcs.n	8000eac <__udivmoddi4+0x2e4>
 8000e58:	18ba      	adds	r2, r7, r2
 8000e5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e5e:	d2c4      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d2c2      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e64:	f1a9 0102 	sub.w	r1, r9, #2
 8000e68:	443a      	add	r2, r7
 8000e6a:	e7be      	b.n	8000dea <__udivmoddi4+0x222>
 8000e6c:	45f0      	cmp	r8, lr
 8000e6e:	d29d      	bcs.n	8000dac <__udivmoddi4+0x1e4>
 8000e70:	ebbe 0302 	subs.w	r3, lr, r2
 8000e74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e78:	3801      	subs	r0, #1
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	e796      	b.n	8000dac <__udivmoddi4+0x1e4>
 8000e7e:	eba7 0909 	sub.w	r9, r7, r9
 8000e82:	4449      	add	r1, r9
 8000e84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8c:	fb09 f804 	mul.w	r8, r9, r4
 8000e90:	e7db      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e92:	4673      	mov	r3, lr
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1ce>
 8000e96:	4650      	mov	r0, sl
 8000e98:	e766      	b.n	8000d68 <__udivmoddi4+0x1a0>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e6fd      	b.n	8000c9a <__udivmoddi4+0xd2>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3a02      	subs	r2, #2
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x144>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	443b      	add	r3, r7
 8000eaa:	e71c      	b.n	8000ce6 <__udivmoddi4+0x11e>
 8000eac:	4649      	mov	r1, r9
 8000eae:	e79c      	b.n	8000dea <__udivmoddi4+0x222>
 8000eb0:	eba1 0109 	sub.w	r1, r1, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	e7c4      	b.n	8000e4a <__udivmoddi4+0x282>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2220      	movs	r2, #32
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00b fa23 	bl	800c328 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000ee4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eea:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000eec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef8:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000efe:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f04:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0a:	4b35      	ldr	r3, [pc, #212]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f10:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f16:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f22:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f2c:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 8000f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f38:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f52:	f002 ff07 	bl	8003d64 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f5c:	f000 fbb6 	bl	80016cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481d      	ldr	r0, [pc, #116]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f6c:	f003 fe80 	bl	8004c70 <HAL_ADCEx_MultiModeConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f76:	f000 fba9 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_ADC1_Init+0x120>)
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	237f      	movs	r3, #127	@ 0x7f
 8000f88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000f98:	f003 f93a 	bl	8004210 <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fa2:	f000 fb93 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000fb0:	f003 f92e 	bl	8004210 <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000fba:	f000 fb87 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_ADC1_Init+0x11c>)
 8000fc8:	f003 f922 	bl	8004210 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000fd2:	f000 fb7b 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	@ 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200012c0 	.word	0x200012c0
 8000fe4:	2e300800 	.word	0x2e300800

08000fe8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09a      	sub	sp, #104	@ 0x68
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2244      	movs	r2, #68	@ 0x44
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00b f98d 	bl	800c328 <memset>
  if(adcHandle->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001016:	d160      	bne.n	80010da <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800101c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800101e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f006 f853 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001034:	f000 fb4a 	bl	80016cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	4a29      	ldr	r2, [pc, #164]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 800103e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a23      	ldr	r2, [pc, #140]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <HAL_ADC_MspInit+0xfc>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001068:	f641 0302 	movw	r3, #6146	@ 0x1802
 800106c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800107a:	4619      	mov	r1, r3
 800107c:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <HAL_ADC_MspInit+0x100>)
 800107e:	f004 ff31 	bl	8005ee4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 8001084:	4a1a      	ldr	r2, [pc, #104]	@ (80010f0 <HAL_ADC_MspInit+0x108>)
 8001086:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 800108a:	2205      	movs	r2, #5
 800108c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a8:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010b2:	2220      	movs	r2, #32
 80010b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010be:	480b      	ldr	r0, [pc, #44]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010c0:	f003 ff8c 	bl	8004fdc <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80010ca:	f000 faff 	bl	80016cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80010d4:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <HAL_ADC_MspInit+0x104>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	3768      	adds	r7, #104	@ 0x68
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	2000132c 	.word	0x2000132c
 80010f0:	40020408 	.word	0x40020408

080010f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <MX_FREERTOS_Init+0x38>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <MX_FREERTOS_Init+0x3c>)
 80010fe:	f008 fac4 	bl	800968a <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <MX_FREERTOS_Init+0x40>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <MX_FREERTOS_Init+0x44>)
 800110a:	2100      	movs	r1, #0
 800110c:	480b      	ldr	r0, [pc, #44]	@ (800113c <MX_FREERTOS_Init+0x48>)
 800110e:	f008 fabc 	bl	800968a <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <MX_FREERTOS_Init+0x4c>)
 8001116:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <MX_FREERTOS_Init+0x50>)
 800111a:	2100      	movs	r1, #0
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <MX_FREERTOS_Init+0x54>)
 800111e:	f008 fab4 	bl	800968a <osThreadNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a09      	ldr	r2, [pc, #36]	@ (800114c <MX_FREERTOS_Init+0x58>)
 8001126:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0800c8b0 	.word	0x0800c8b0
 8001130:	08002115 	.word	0x08002115
 8001134:	2000138c 	.word	0x2000138c
 8001138:	0800c8d4 	.word	0x0800c8d4
 800113c:	0800307d 	.word	0x0800307d
 8001140:	20001390 	.word	0x20001390
 8001144:	0800c8f8 	.word	0x0800c8f8
 8001148:	08001ce5 	.word	0x08001ce5
 800114c:	20001394 	.word	0x20001394

08001150 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_CORDIC_Init+0x20>)
 8001156:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <MX_CORDIC_Init+0x24>)
 8001158:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_CORDIC_Init+0x20>)
 800115c:	f003 fe2c 	bl	8004db8 <HAL_CORDIC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001166:	f000 fab1 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20001398 	.word	0x20001398
 8001174:	40020c00 	.word	0x40020c00

08001178 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_CORDIC_MspInit+0x38>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10b      	bne.n	80011a2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_CORDIC_MspInit+0x3c>)
 800118c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <HAL_CORDIC_MspInit+0x3c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6493      	str	r3, [r2, #72]	@ 0x48
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <HAL_CORDIC_MspInit+0x3c>)
 8001198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_DMA_Init+0x50>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <MX_DMA_Init+0x50>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_DMA_Init+0x50>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_DMA_Init+0x50>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011da:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <MX_DMA_Init+0x50>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_DMA_Init+0x50>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2105      	movs	r1, #5
 80011f2:	2038      	movs	r0, #56	@ 0x38
 80011f4:	f003 feca 	bl	8004f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80011f8:	2038      	movs	r0, #56	@ 0x38
 80011fa:	f003 fee1 	bl	8004fc0 <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001212:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <MX_FDCAN1_Init+0x88>)
 8001214:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001222:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800122a:	2200      	movs	r2, #0
 800122c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001230:	2200      	movs	r2, #0
 8001232:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001236:	2200      	movs	r2, #0
 8001238:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800123c:	2214      	movs	r2, #20
 800123e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001242:	2201      	movs	r2, #1
 8001244:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001248:	220e      	movs	r2, #14
 800124a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800124e:	2202      	movs	r2, #2
 8001250:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001254:	2202      	movs	r2, #2
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800125a:	2201      	movs	r2, #1
 800125c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001260:	220e      	movs	r2, #14
 8001262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001266:	2202      	movs	r2, #2
 8001268:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800126c:	2202      	movs	r2, #2
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001272:	2200      	movs	r2, #0
 8001274:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 8001278:	2200      	movs	r2, #0
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_FDCAN1_Init+0x84>)
 800127e:	f004 f981 	bl	8005584 <HAL_FDCAN_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001288:	f000 fa20 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200013c0 	.word	0x200013c0
 8001294:	40006400 	.word	0x40006400

08001298 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09a      	sub	sp, #104	@ 0x68
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2244      	movs	r2, #68	@ 0x44
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00b f835 	bl	800c328 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a28      	ldr	r2, [pc, #160]	@ (8001364 <HAL_FDCAN_MspInit+0xcc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d149      	bne.n	800135c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80012ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 fefb 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80012e4:	f000 f9f2 	bl	80016cc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 80012ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_FDCAN_MspInit+0xd0>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001318:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800131c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800132a:	2309      	movs	r3, #9
 800132c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001338:	f004 fdd4 	bl	8005ee4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2105      	movs	r1, #5
 8001340:	2015      	movs	r0, #21
 8001342:	f003 fe23 	bl	8004f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001346:	2015      	movs	r0, #21
 8001348:	f003 fe3a 	bl	8004fc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2105      	movs	r1, #5
 8001350:	2016      	movs	r0, #22
 8001352:	f003 fe1b 	bl	8004f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001356:	2016      	movs	r0, #22
 8001358:	f003 fe32 	bl	8004fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800135c:	bf00      	nop
 800135e:	3768      	adds	r7, #104	@ 0x68
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40006400 	.word	0x40006400
 8001368:	40021000 	.word	0x40021000

0800136c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <MX_GPIO_Init+0xac>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a24      	ldr	r2, [pc, #144]	@ (8001418 <MX_GPIO_Init+0xac>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <MX_GPIO_Init+0xac>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <MX_GPIO_Init+0xac>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a18      	ldr	r2, [pc, #96]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_GPIO_Init+0xac>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013e8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4808      	ldr	r0, [pc, #32]	@ (800141c <MX_GPIO_Init+0xb0>)
 80013fa:	f004 fd73 	bl	8005ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	2028      	movs	r0, #40	@ 0x28
 8001404:	f003 fdc2 	bl	8004f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001408:	2028      	movs	r0, #40	@ 0x28
 800140a:	f003 fdd9 	bl	8004fc0 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	@ 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	48000800 	.word	0x48000800

08001420 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <MX_I2C1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_I2C1_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	@ (800149c <MX_I2C1_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	@ (8001494 <MX_I2C1_Init+0x74>)
 800145c:	f004 fef4 	bl	8006248 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f931 	bl	80016cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	@ (8001494 <MX_I2C1_Init+0x74>)
 800146e:	f004 ff86 	bl	800637e <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f928 	bl	80016cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001480:	f004 ffc8 	bl	8006414 <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f91f 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20001424 	.word	0x20001424
 8001498:	40005400 	.word	0x40005400
 800149c:	40b285c2 	.word	0x40b285c2

080014a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09c      	sub	sp, #112	@ 0x70
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	2244      	movs	r2, #68	@ 0x44
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a ff31 	bl	800c328 <memset>
  if(i2cHandle->Instance==I2C1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001580 <HAL_I2C_MspInit+0xe0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d153      	bne.n	8001578 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014d0:	2340      	movs	r3, #64	@ 0x40
 80014d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fdf9 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014e8:	f000 f8f0 	bl	80016cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800151c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001520:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152e:	2304      	movs	r3, #4
 8001530:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153c:	f004 fcd2 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	@ (8001588 <HAL_I2C_MspInit+0xe8>)
 800155c:	f004 fcc2 	bl	8005ee4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001564:	4a07      	ldr	r2, [pc, #28]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 8001566:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800156a:	6593      	str	r3, [r2, #88]	@ 0x58
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_I2C_MspInit+0xe4>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001578:	bf00      	nop
 800157a:	3770      	adds	r7, #112	@ 0x70
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40005400 	.word	0x40005400
 8001584:	40021000 	.word	0x40021000
 8001588:	48000400 	.word	0x48000400

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001590:	f002 f994 	bl	80038bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001594:	f000 f83a 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f7ff fee8 	bl	800136c <MX_GPIO_Init>
  MX_DMA_Init();
 800159c:	f7ff fe0c 	bl	80011b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80015a0:	f7ff fc90 	bl	8000ec4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80015a4:	f7ff fe32 	bl	800120c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80015a8:	f000 f9a0 	bl	80018ec <MX_TIM1_Init>
  MX_I2C1_Init();
 80015ac:	f7ff ff38 	bl	8001420 <MX_I2C1_Init>
  MX_TIM2_Init();
 80015b0:	f000 fa4c 	bl	8001a4c <MX_TIM2_Init>
  MX_CORDIC_Init();
 80015b4:	f7ff fdcc 	bl	8001150 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015b8:	f008 f808 	bl	80095cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015bc:	f7ff fd9a 	bl	80010f4 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f002 f803 	bl	80035cc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80015c6:	2101      	movs	r1, #1
 80015c8:	2000      	movs	r0, #0
 80015ca:	f002 f835 	bl	8003638 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <main+0x7c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <main+0x7c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <main+0x7c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <main+0x7c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <main+0x7c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80015ee:	4906      	ldr	r1, [pc, #24]	@ (8001608 <main+0x7c>)
 80015f0:	2000      	movs	r0, #0
 80015f2:	f002 f8ad 	bl	8003750 <BSP_COM_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <main+0x74>
  {
    Error_Handler();
 80015fc:	f000 f866 	bl	80016cc <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8001600:	f008 f808 	bl	8009614 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <main+0x78>
 8001608:	20001478 	.word	0x20001478

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	@ 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2238      	movs	r2, #56	@ 0x38
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00a fe84 	bl	800c328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800162e:	2000      	movs	r0, #0
 8001630:	f004 ff3c 	bl	80064ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163e:	2340      	movs	r3, #64	@ 0x40
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800164a:	2304      	movs	r3, #4
 800164c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800164e:	2355      	movs	r3, #85	@ 0x55
 8001650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001652:	2302      	movs	r3, #2
 8001654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001656:	2302      	movs	r3, #2
 8001658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	4618      	mov	r0, r3
 8001664:	f004 ffd6 	bl	8006614 <HAL_RCC_OscConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800166e:	f000 f82d 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001672:	230f      	movs	r3, #15
 8001674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2303      	movs	r3, #3
 8001678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2104      	movs	r1, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f005 fad4 	bl	8006c38 <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001696:	f000 f819 	bl	80016cc <Error_Handler>
  }
}
 800169a:	bf00      	nop
 800169c:	3750      	adds	r7, #80	@ 0x50
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016b6:	f002 f919 	bl	80038ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fd16 	bl	80020ec <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40001000 	.word	0x40001000

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Error_Handler+0x8>

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_MspInit+0x50>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e2:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <HAL_MspInit+0x50>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_MspInit+0x50>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_MspInit+0x50>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_MspInit+0x50>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_MspInit+0x50>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	210f      	movs	r1, #15
 8001712:	f06f 0001 	mvn.w	r0, #1
 8001716:	f003 fc39 	bl	8004f8c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800171a:	f004 ff6b 	bl	80065f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	@ 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800173c:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <HAL_InitTick+0xc4>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a2b      	ldr	r2, [pc, #172]	@ (80017f0 <HAL_InitTick+0xc4>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <HAL_InitTick+0xc4>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 020c 	add.w	r2, r7, #12
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f005 fc40 	bl	8006fe4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001764:	f005 fc12 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8001768:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800176a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176c:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <HAL_InitTick+0xc8>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	3b01      	subs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_InitTick+0xcc>)
 800177a:	4a20      	ldr	r2, [pc, #128]	@ (80017fc <HAL_InitTick+0xd0>)
 800177c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177e:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_InitTick+0xcc>)
 8001780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001784:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <HAL_InitTick+0xcc>)
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_InitTick+0xcc>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_InitTick+0xcc>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001798:	4817      	ldr	r0, [pc, #92]	@ (80017f8 <HAL_InitTick+0xcc>)
 800179a:	f005 fe8b 	bl	80074b4 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d11b      	bne.n	80017e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017ac:	4812      	ldr	r0, [pc, #72]	@ (80017f8 <HAL_InitTick+0xcc>)
 80017ae:	f005 ff45 	bl	800763c <HAL_TIM_Base_Start_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017c0:	2036      	movs	r0, #54	@ 0x36
 80017c2:	f003 fbfd 	bl	8004fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d808      	bhi.n	80017de <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	2036      	movs	r0, #54	@ 0x36
 80017d2:	f003 fbdb 	bl	8004f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <HAL_InitTick+0xd4>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e002      	b.n	80017e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3730      	adds	r7, #48	@ 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	20001488 	.word	0x20001488
 80017fc:	40001000 	.word	0x40001000
 8001800:	20001248 	.word	0x20001248

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <FDCAN1_IT0_IRQHandler+0x10>)
 8001842:	f004 f989 	bl	8005b58 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200013c0 	.word	0x200013c0

08001850 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <FDCAN1_IT1_IRQHandler+0x10>)
 8001856:	f004 f97f 	bl	8005b58 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200013c0 	.word	0x200013c0

08001864 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800186a:	f006 f8ff 	bl	8007a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200014d4 	.word	0x200014d4

08001878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800187c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001880:	f004 fcca 	bl	8006218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001884:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001888:	f004 fcc6 	bl	8006218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800188c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001890:	f004 fcc2 	bl	8006218 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8001894:	2000      	movs	r0, #0
 8001896:	f001 ff3d 	bl	8003714 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <TIM6_DAC_IRQHandler+0x10>)
 80018a6:	f006 f8e1 	bl	8007a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001488 	.word	0x20001488

080018b4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <DMA2_Channel1_IRQHandler+0x10>)
 80018ba:	f003 fcb2 	bl	8005222 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000132c 	.word	0x2000132c

080018c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b098      	sub	sp, #96	@ 0x60
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2234      	movs	r2, #52	@ 0x34
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00a fd05 	bl	800c328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191e:	4b49      	ldr	r3, [pc, #292]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001920:	4a49      	ldr	r2, [pc, #292]	@ (8001a48 <MX_TIM1_Init+0x15c>)
 8001922:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001924:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001926:	2210      	movs	r2, #16
 8001928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800192a:	4b46      	ldr	r3, [pc, #280]	@ (8001a44 <MX_TIM1_Init+0x158>)
 800192c:	2220      	movs	r2, #32
 800192e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8001930:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001932:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001936:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b42      	ldr	r3, [pc, #264]	@ (8001a44 <MX_TIM1_Init+0x158>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194a:	483e      	ldr	r0, [pc, #248]	@ (8001a44 <MX_TIM1_Init+0x158>)
 800194c:	f005 ff37 	bl	80077be <HAL_TIM_PWM_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001956:	f7ff feb9 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 800195e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001962:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001968:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800196c:	4619      	mov	r1, r3
 800196e:	4835      	ldr	r0, [pc, #212]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001970:	f006 ff3a 	bl	80087e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800197a:	f7ff fea7 	bl	80016cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	@ 0x60
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001986:	2302      	movs	r3, #2
 8001988:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4828      	ldr	r0, [pc, #160]	@ (8001a44 <MX_TIM1_Init+0x158>)
 80019a4:	f006 fa2c 	bl	8007e00 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019ae:	f7ff fe8d 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b6:	2204      	movs	r2, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4822      	ldr	r0, [pc, #136]	@ (8001a44 <MX_TIM1_Init+0x158>)
 80019bc:	f006 fa20 	bl	8007e00 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80019c6:	f7ff fe81 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ce:	2208      	movs	r2, #8
 80019d0:	4619      	mov	r1, r3
 80019d2:	481c      	ldr	r0, [pc, #112]	@ (8001a44 <MX_TIM1_Init+0x158>)
 80019d4:	f006 fa14 	bl	8007e00 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80019de:	f7ff fe75 	bl	80016cc <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80019e2:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <MX_TIM1_Init+0x158>)
 80019e4:	f007 f80e 	bl	8008a04 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80019f4:	2322      	movs	r3, #34	@ 0x22
 80019f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001a26:	f006 ff61 	bl	80088ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001a30:	f7ff fe4c 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a34:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <MX_TIM1_Init+0x158>)
 8001a36:	f000 f8a3 	bl	8001b80 <HAL_TIM_MspPostInit>

}
 8001a3a:	bf00      	nop
 8001a3c:	3760      	adds	r7, #96	@ 0x60
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200014d4 	.word	0x200014d4
 8001a48:	40012c00 	.word	0x40012c00

08001a4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	615a      	str	r2, [r3, #20]
 8001a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a70:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001a98:	4816      	ldr	r0, [pc, #88]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001a9a:	f005 fe39 	bl	8007710 <HAL_TIM_OC_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001aa4:	f7ff fe12 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001ab8:	f006 fe96 	bl	80087e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ac2:	f7ff fe03 	bl	80016cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_TIM2_Init+0xa8>)
 8001ade:	f006 f915 	bl	8007d0c <HAL_TIM_OC_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ae8:	f7ff fdf0 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	@ 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20001520 	.word	0x20001520

08001af8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <HAL_TIM_PWM_MspInit+0x44>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d113      	bne.n	8001b32 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x48>)
 8001b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x48>)
 8001b10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x48>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	2019      	movs	r0, #25
 8001b28:	f003 fa30 	bl	8004f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b2c:	2019      	movs	r0, #25
 8001b2e:	f003 fa47 	bl	8004fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b54:	d10b      	bne.n	8001b6e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_TIM_OC_MspInit+0x38>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_TIM_OC_MspInit+0x38>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_TIM_OC_MspInit+0x38>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a28      	ldr	r2, [pc, #160]	@ (8001c40 <HAL_TIM_MspPostInit+0xc0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d149      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a27      	ldr	r2, [pc, #156]	@ (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a21      	ldr	r2, [pc, #132]	@ (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001be2:	2302      	movs	r3, #2
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4816      	ldr	r0, [pc, #88]	@ (8001c48 <HAL_TIM_MspPostInit+0xc8>)
 8001bee:	f004 f979 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001bf2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c04:	2306      	movs	r3, #6
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <HAL_TIM_MspPostInit+0xcc>)
 8001c10:	f004 f968 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c26:	2304      	movs	r3, #4
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <HAL_TIM_MspPostInit+0xcc>)
 8001c32:	f004 f957 	bl	8005ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	@ 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000400 	.word	0x48000400

08001c50 <average>:
    }
    return RESULT_OK(NULL);
}

static Result average(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint32_t total = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	83fb      	strh	r3, [r7, #30]
 8001c66:	e00f      	b.n	8001c88 <average+0x38>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001c68:	8bfa      	ldrh	r2, [r7, #30]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	441a      	add	r2, r3
 8001c70:	897b      	ldrh	r3, [r7, #10]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <average+0x68>)
 8001c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	4413      	add	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001c82:	8bfb      	ldrh	r3, [r7, #30]
 8001c84:	3301      	adds	r3, #1
 8001c86:	83fb      	strh	r3, [r7, #30]
 8001c88:	8bfb      	ldrh	r3, [r7, #30]
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d9ec      	bls.n	8001c68 <average+0x18>
    }
    *adc_store = (uint16_t)(total / ADC_NEED_LEN);
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <average+0x6c>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	801a      	strh	r2, [r3, #0]
    return RESULT_OK(NULL);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
}
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000156c 	.word	0x2000156c
 8001cbc:	38e38e39 	.word	0x38e38e39

08001cc0 <renew_adc>:

Result renew_adc(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	817b      	strh	r3, [r7, #10]
    return average(adc_id, adc_store);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8979      	ldrh	r1, [r7, #10]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ffbb 	bl	8001c50 <average>
}
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <StartAdcTask>:

void StartAdcTask(void *argument)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
 8001cec:	221b      	movs	r2, #27
 8001cee:	4903      	ldr	r1, [pc, #12]	@ (8001cfc <StartAdcTask+0x18>)
 8001cf0:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <StartAdcTask+0x1c>)
 8001cf2:	f002 f9bb 	bl	800406c <HAL_ADC_Start_DMA>
    StopTask();
 8001cf6:	f007 fd5a 	bl	80097ae <osThreadExit>
 8001cfa:	bf00      	nop
 8001cfc:	2000156c 	.word	0x2000156c
 8001d00:	200012c0 	.word	0x200012c0

08001d04 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	7b1b      	ldrb	r3, [r3, #12]
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d308      	bcc.n	8001d30 <fdcan_pkt_get_byte+0x2c>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2300      	movs	r3, #0
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	6053      	str	r3, [r2, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	711a      	strb	r2, [r3, #4]
 8001d2e:	e00b      	b.n	8001d48 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4413      	add	r3, r2
 8001d36:	791a      	ldrb	r2, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	605a      	str	r2, [r3, #4]
}
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	3724      	adds	r7, #36	@ 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <fdcan_pkt_pool_alloc+0x64>)
 8001d5e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d108      	bne.n	8001d78 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	6053      	str	r3, [r2, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 8001d76:	e019      	b.n	8001dac <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <fdcan_pkt_pool_alloc+0x64>)
 8001d7a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001d7e:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	4a0c      	ldr	r2, [pc, #48]	@ (8001db8 <fdcan_pkt_pool_alloc+0x64>)
 8001d86:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <fdcan_pkt_pool_alloc+0x64>)
 8001d92:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <fdcan_pkt_pool_alloc+0x64>)
 8001d9c:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	3724      	adds	r7, #36	@ 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	200015a4 	.word	0x200015a4

08001dbc <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	2208      	movs	r2, #8
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00a faab 	bl	800c328 <memset>
    pkt->len = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <fdcan_pkt_pool_free+0x48>)
 8001dda:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <fdcan_pkt_pool_free+0x48>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <fdcan_pkt_pool_free+0x48>)
 8001dec:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <fdcan_pkt_pool_free+0x48>)
 8001df6:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200015a4 	.word	0x200015a4

08001e08 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b08b      	sub	sp, #44	@ 0x2c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d308      	bcc.n	8001e32 <fdcan_pkt_buf_push+0x2a>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	461a      	mov	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	6053      	str	r3, [r2, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	711a      	strb	r2, [r3, #4]
 8001e30:	e01e      	b.n	8001e70 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	68d2      	ldr	r2, [r2, #12]
 8001e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e44:	fb01 f202 	mul.w	r2, r1, r2
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
    self->len++;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	605a      	str	r2, [r3, #4]
}
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	372c      	adds	r7, #44	@ 0x2c
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a08      	ldr	r2, [pc, #32]	@ (8001eac <HAL_FDCAN_ErrorStatusCallback+0x30>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d107      	bne.n	8001e9e <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200013c0 	.word	0x200013c0
 8001eb0:	2000182c 	.word	0x2000182c

08001eb4 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f003 fdba 	bl	8005a48 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 8001ede:	f7ff fbf5 	bl	80016cc <Error_Handler>
    }
}
 8001ee2:	bf00      	nop
 8001ee4:	3730      	adds	r7, #48	@ 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d057      	beq.n	8001fc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 8001f14:	f107 0318 	add.w	r3, r7, #24
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff1b 	bl	8001d54 <fdcan_pkt_pool_alloc>
 8001f1e:	7e3b      	ldrb	r3, [r7, #24]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_FDCAN_RxFifo0Callback+0x36>
 8001f2a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	f7ff fbcb 	bl	80016cc <Error_Handler>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	4a24      	ldr	r2, [pc, #144]	@ (8001fd0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001f40:	2140      	movs	r1, #64	@ 0x40
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f003 fc78 	bl	8005838 <HAL_FDCAN_GetRxMessage>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_FDCAN_RxFifo0Callback+0x5a>
 8001f56:	f7ff fbb9 	bl	80016cc <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b1f      	cmp	r3, #31
 8001f72:	d90c      	bls.n	8001f8e <HAL_FDCAN_RxFifo0Callback+0x8e>
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b21      	cmp	r3, #33	@ 0x21
 8001f7a:	d808      	bhi.n	8001f8e <HAL_FDCAN_RxFifo0Callback+0x8e>
        {
            instant_recv_proc(pkt);
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f849 	bl	8002018 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 8001f86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f88:	f7ff ff18 	bl	8001dbc <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001f8c:	e01a      	b.n	8001fc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b21      	cmp	r3, #33	@ 0x21
 8001f94:	d916      	bls.n	8001fc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b23      	cmp	r3, #35	@ 0x23
 8001f9c:	d812      	bhi.n	8001fc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	490b      	ldr	r1, [pc, #44]	@ (8001fd4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff2e 	bl	8001e08 <fdcan_pkt_buf_push>
 8001fac:	7c3b      	ldrb	r3, [r7, #16]
 8001fae:	f083 0301 	eor.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001fb8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	f7ff fb84 	bl	80016cc <Error_Handler>
}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	@ 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20001880 	.word	0x20001880
 8001fd0:	20001858 	.word	0x20001858
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	461a      	mov	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	6053      	str	r3, [r2, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2207      	movs	r2, #7
 800200a:	711a      	strb	r2, [r3, #4]
}
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 8002022:	f107 001c 	add.w	r0, r7, #28
 8002026:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800202a:	2200      	movs	r2, #0
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	f7ff fe69 	bl	8001d04 <fdcan_pkt_get_byte>
 8002032:	7f3b      	ldrb	r3, [r7, #28]
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <instant_recv_proc+0x40>
 800203e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <instant_recv_proc+0x8c>)
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	461a      	mov	r2, r3
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002052:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 8002056:	e021      	b.n	800209c <instant_recv_proc+0x84>
    switch (code)
 8002058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800205c:	2b11      	cmp	r3, #17
 800205e:	d002      	beq.n	8002066 <instant_recv_proc+0x4e>
 8002060:	2b12      	cmp	r3, #18
 8002062:	d00a      	beq.n	800207a <instant_recv_proc+0x62>
 8002064:	e013      	b.n	800208e <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <instant_recv_proc+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
}
 8002078:	e010      	b.n	800209c <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <instant_recv_proc+0x90>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
}
 800208c:	e006      	b.n	800209c <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 800208e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ffa9 	bl	8001fee <instant_recv_proc_inner>
}
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	3728      	adds	r7, #40	@ 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20001880 	.word	0x20001880
 80020a8:	2000182d 	.word	0x2000182d

080020ac <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/it_hall.h"
#include "motor/it_timer.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	81fb      	strh	r3, [r7, #14]
    if (
           (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[0])
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020b8:	8a1b      	ldrh	r3, [r3, #16]
    if (
 80020ba:	89fa      	ldrh	r2, [r7, #14]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d009      	beq.n	80020d4 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[1])
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020c2:	8a5b      	ldrh	r3, [r3, #18]
 80020c4:	89fa      	ldrh	r2, [r7, #14]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d004      	beq.n	80020d4 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[2])
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020cc:	8a9b      	ldrh	r3, [r3, #20]
 80020ce:	89fa      	ldrh	r2, [r7, #14]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d104      	bne.n	80020de <HAL_GPIO_EXTI_Callback+0x32>
    ) {
        motor_hall_exti(&motor_0);
 80020d4:	463b      	mov	r3, r7
 80020d6:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f921 	bl	8002320 <motor_hall_exti>
    }
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000014 	.word	0x20000014

080020ec <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
    if (htim == motor_0.const_h.PWM_htimx[0])
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_TIM_PeriodElapsedCallback_OWN+0x24>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d104      	bne.n	8002108 <HAL_TIM_PeriodElapsedCallback_OWN+0x1c>
    {
        motor_pwm_pulse(&motor_0);
 80020fe:	463b      	mov	r3, r7
 8002100:	4903      	ldr	r1, [pc, #12]	@ (8002110 <HAL_TIM_PeriodElapsedCallback_OWN+0x24>)
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fea8 	bl	8002e58 <motor_pwm_pulse>
    }
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000014 	.word	0x20000014

08002114 <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 800211c:	2332      	movs	r3, #50	@ 0x32
 800211e:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8002120:	f007 fa9e 	bl	8009660 <osKernelGetTickCount>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 800212c:	f001 fbf0 	bl	8003910 <HAL_GetTick>
 8002130:	4603      	mov	r3, r0
 8002132:	4a05      	ldr	r2, [pc, #20]	@ (8002148 <StartDefaultTask+0x34>)
 8002134:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f007 fb40 	bl	80097bc <osDelayUntil>
        next_wake += osPeriod;
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8002144:	bf00      	nop
 8002146:	e7f1      	b.n	800212c <StartDefaultTask+0x18>
 8002148:	20001884 	.word	0x20001884
 800214c:	00000000 	.word	0x00000000

08002150 <CLARKE_run_ideal>:
#include "motor/clarke.h"

Result CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
    clarke->Alpha = clarke->As;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	ed93 7a00 	vldr	s14, [r3]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	edd3 7a01 	vldr	s15, [r3, #4]
 800216e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002176:	ee17 0a90 	vmov	r0, s15
 800217a:	f7fe f9b5 	bl	80004e8 <__aeabi_f2d>
 800217e:	a30c      	add	r3, pc, #48	@ (adr r3, 80021b0 <CLARKE_run_ideal+0x60>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe fa08 	bl	8000598 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fcb2 	bl	8000af8 <__aeabi_d2f>
 8002194:	4602      	mov	r2, r0
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	611a      	str	r2, [r3, #16]
    return RESULT_OK(NULL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
}
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	45903342 	.word	0x45903342
 80021b4:	3fe279a7 	.word	0x3fe279a7

080021b8 <pos_calculate>:
#include "motor/it_hall.h"
#include "main.h"

// Thread - hallExti - exit
static inline Result pos_calculate(MotorParameter *motor)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    // timer累加時間計數
    float per_elec_cyc_100ns = (float)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d2:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (per_elec_cyc_100ns * (MOTOR_POLE / 2))) / 6 / MOTOR_GEAR;
 80021e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80021e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ec:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800223c <pos_calculate+0x84>
 80021f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f4:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80021f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021fc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002240 <pos_calculate+0x88>
 8002200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 單次PWM中斷時的角度變化 900000 = (1/pwm_freq)*50M*360
    motor->pwm_it_angle = ((180000.0f) / per_elec_cyc_100ns) / 6 ;
 800220a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002244 <pos_calculate+0x8c>
 800220e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002216:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800221a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4

    return RESULT_OK(NULL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
}
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	4ab71b00 	.word	0x4ab71b00
 8002240:	408ccccd 	.word	0x408ccccd
 8002244:	482fc800 	.word	0x482fc800

08002248 <motor_hall_update>:

Result motor_hall_update(MotorParameter *motor)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	@ 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    uint8_t hall_last = motor->gpio_hall_current;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8002258:	77fb      	strb	r3, [r7, #31]
    motor->gpio_hall_last = hall_last;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7ffa      	ldrb	r2, [r7, #31]
 800225e:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	8a12      	ldrh	r2, [r2, #16]
 800226c:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <motor_hall_update+0x2e>
 8002272:	2204      	movs	r2, #4
 8002274:	e000      	b.n	8002278 <motor_hall_update+0x30>
 8002276:	2200      	movs	r2, #0
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	8a49      	ldrh	r1, [r1, #18]
 8002282:	400b      	ands	r3, r1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <motor_hall_update+0x44>
 8002288:	2302      	movs	r3, #2
 800228a:	e000      	b.n	800228e <motor_hall_update+0x46>
 800228c:	2300      	movs	r3, #0
 800228e:	4313      	orrs	r3, r2
 8002290:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	6912      	ldr	r2, [r2, #16]
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	8a89      	ldrh	r1, [r1, #20]
 800229c:	400a      	ands	r2, r1
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d001      	beq.n	80022a6 <motor_hall_update+0x5e>
 80022a2:	2201      	movs	r2, #1
 80022a4:	e000      	b.n	80022a8 <motor_hall_update+0x60>
 80022a6:	2200      	movs	r2, #0
    uint8_t hall_current =
 80022a8:	4313      	orrs	r3, r2
 80022aa:	77bb      	strb	r3, [r7, #30]
    motor->gpio_hall_current = hall_current;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	7fba      	ldrb	r2, [r7, #30]
 80022b0:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    if (hall_current == 0 || hall_current == 7)
 80022b4:	7fbb      	ldrb	r3, [r7, #30]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <motor_hall_update+0x78>
 80022ba:	7fbb      	ldrb	r3, [r7, #30]
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d105      	bne.n	80022cc <motor_hall_update+0x84>
    {
        return RESULT_ERROR(RES_ERR_FAIL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	461a      	mov	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	6053      	str	r3, [r2, #4]
    if (hall_current == expected)
    {
        motor->gpio_hall_angle_acc = 0;
    }
    return RESULT_OK(NULL);
}
 80022ca:	e01f      	b.n	800230c <motor_hall_update+0xc4>
    uint16_t expected = (!motor->reverse)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <motor_hall_update+0x9c>
        ? hall_seq_clw[hall_last]
 80022dc:	7ffb      	ldrb	r3, [r7, #31]
 80022de:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <motor_hall_update+0xd0>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	e002      	b.n	80022ea <motor_hall_update+0xa2>
        : hall_seq_ccw[hall_last];
 80022e4:	7ffb      	ldrb	r3, [r7, #31]
 80022e6:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <motor_hall_update+0xd4>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
    uint16_t expected = (!motor->reverse)
 80022ea:	83bb      	strh	r3, [r7, #28]
    if (hall_current == expected)
 80022ec:	7fbb      	ldrb	r3, [r7, #30]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	8bba      	ldrh	r2, [r7, #28]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d104      	bne.n	8002300 <motor_hall_update+0xb8>
        motor->gpio_hall_angle_acc = 0;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    return RESULT_OK(NULL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
}
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	3724      	adds	r7, #36	@ 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	0800c934 	.word	0x0800c934
 800231c:	0800c93c 	.word	0x0800c93c

08002320 <motor_hall_exti>:

// Thread - hallExti - entrance
Result motor_hall_exti(MotorParameter *motor)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
    RESULT_CHECK_RET_RES(motor_hall_update(motor));
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff89 	bl	8002248 <motor_hall_update>
 8002336:	7c3b      	ldrb	r3, [r7, #16]
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <motor_hall_exti+0x3c>
 8002342:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <motor_hall_exti+0x5c>)
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	461a      	mov	r2, r3
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002356:	e882 0003 	stmia.w	r2, {r0, r1}
 800235a:	e00a      	b.n	8002372 <motor_hall_exti+0x52>
    pos_calculate(motor);
 800235c:	463b      	mov	r3, r7
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff29 	bl	80021b8 <pos_calculate>
    return RESULT_OK(NULL);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
}
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20001880 	.word	0x20001880

08002380 <pwm_setup>:
#include "motor/trigonometric.h"
#include "analog/adc1/main.h"

// Thread - timer - init
Result pwm_setup(const MotorParameter *motor)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    const MotorConst* const_h = &motor->const_h;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	617b      	str	r3, [r7, #20]
    HAL_TIM_Base_Start_IT(const_h->PWM_htimx[0]);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	4618      	mov	r0, r3
 8002394:	f005 f952 	bl	800763c <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(const_h->PWM_htimx[0], const_h->PWM_TIM_CHANNEL_x[0]);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f005 fa62 	bl	800786c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(const_h->PWM_htimx[1], const_h->PWM_TIM_CHANNEL_x[1]);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f005 fa5a 	bl	800786c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(const_h->PWM_htimx[2], const_h->PWM_TIM_CHANNEL_x[2]);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f005 fa52 	bl	800786c <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start(const_h->ELE_htimx);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	4618      	mov	r0, r3
 80023ce:	f005 f8d3 	bl	8007578 <HAL_TIM_Base_Start>
    return RESULT_OK(NULL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	605a      	str	r2, [r3, #4]
}
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <hall_to_angle>:

static uint16_t hall_to_angle(uint8_t value)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
    switch(value)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d81b      	bhi.n	8002432 <hall_to_angle+0x4a>
 80023fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <hall_to_angle+0x18>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002425 	.word	0x08002425
 8002404:	0800241d 	.word	0x0800241d
 8002408:	08002421 	.word	0x08002421
 800240c:	0800242d 	.word	0x0800242d
 8002410:	08002429 	.word	0x08002429
 8002414:	08002419 	.word	0x08002419
    {
        case 6:	return 0;
 8002418:	2300      	movs	r3, #0
 800241a:	e00e      	b.n	800243a <hall_to_angle+0x52>
        case 2: return 60;
 800241c:	233c      	movs	r3, #60	@ 0x3c
 800241e:	e00c      	b.n	800243a <hall_to_angle+0x52>
        case 3:	return 120;
 8002420:	2378      	movs	r3, #120	@ 0x78
 8002422:	e00a      	b.n	800243a <hall_to_angle+0x52>
        case 1:	return 180;
 8002424:	23b4      	movs	r3, #180	@ 0xb4
 8002426:	e008      	b.n	800243a <hall_to_angle+0x52>
        case 5:	return 240;
 8002428:	23f0      	movs	r3, #240	@ 0xf0
 800242a:	e006      	b.n	800243a <hall_to_angle+0x52>
        case 4:	return 300;
 800242c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002430:	e003      	b.n	800243a <hall_to_angle+0x52>
        default:
        {
            Error_Handler();
 8002432:	f7ff f94b 	bl	80016cc <Error_Handler>
            return 0xFFFF;
 8002436:	f64f 73ff 	movw	r3, #65535	@ 0xffff
        }
    }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop

08002444 <motor_stop_check>:

// Thread - timer - 1
static inline Result motor_stop_check(MotorParameter *motor)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->gpio_hall_current;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8002454:	75fb      	strb	r3, [r7, #23]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	0092      	lsls	r2, r2, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	b29b      	uxth	r3, r3
 800246c:	4413      	add	r3, r2
 800246e:	82bb      	strh	r3, [r7, #20]
    if(hall_total == motor->pwm_hall_acc)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8002476:	b29b      	uxth	r3, r3
 8002478:	8aba      	ldrh	r2, [r7, #20]
 800247a:	429a      	cmp	r2, r3
 800247c:	d125      	bne.n	80024ca <motor_stop_check+0x86>
    {
        motor->spin_stop_acc++;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8002484:	b29b      	uxth	r3, r3
 8002486:	3301      	adds	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
        if (motor->spin_stop_acc >= 3000)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8002496:	b29b      	uxth	r3, r3
 8002498:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800249c:	4293      	cmp	r3, r2
 800249e:	d918      	bls.n	80024d2 <motor_stop_check+0x8e>
        {
            motor->spin_stop_acc = 0;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pwm_it_angle_acc = 59;               // 歸零角度累加
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <motor_stop_check+0xb8>)
 80024ac:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	65da      	str	r2, [r3, #92]	@ 0x5c
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	639a      	str	r2, [r3, #56]	@ 0x38
            motor->pi_Iq.Out=0;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80024c8:	e003      	b.n	80024d2 <motor_stop_check+0x8e>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    }
    motor->pwm_hall_acc = hall_total;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	8aba      	ldrh	r2, [r7, #20]
 80024d6:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    motor->pwm_hall_last = hall_current;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	7dfa      	ldrb	r2, [r7, #23]
 80024de:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    return RESULT_OK(NULL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
}
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	426c0000 	.word	0x426c0000

08002500 <motor_vec_clarke>:

// Thread - timer - 2
static const float adc_to_current = (3.3f / 4095.0f) / 0.185f; // ~ 0.004356 A/LSB
static inline Result motor_vec_clarke(MotorParameter *motor)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
    // I alpha = 2/3Ia - 1/3Ib - 1/3Ic
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    float adc_zero = (float)(motor->adc_u + motor->adc_v + motor->adc_w) / 3 ;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800251a:	b29b      	uxth	r3, r3
 800251c:	4413      	add	r3, r2
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8002524:	b292      	uxth	r2, r2
 8002526:	4413      	add	r3, r2
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002530:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002538:	edc7 7a07 	vstr	s15, [r7, #28]
    motor->clarke.As = ((float)motor->adc_u - adc_zero) * adc_to_current;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 8002542:	b29b      	uxth	r3, r3
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800254c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002554:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80025d4 <motor_vec_clarke+0xd4>
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    motor->clarke.Bs = ((float)motor->adc_v - adc_zero) * adc_to_current;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 8002568:	b29b      	uxth	r3, r3
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002572:	edd7 7a07 	vldr	s15, [r7, #28]
 8002576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80025d4 <motor_vec_clarke+0xd4>
 800257e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
    motor->clarke.Cs = ((float)motor->adc_w - adc_zero) * adc_to_current;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800258e:	b29b      	uxth	r3, r3
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002598:	edd7 7a07 	vldr	s15, [r7, #28]
 800259c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80025d4 <motor_vec_clarke+0xd4>
 80025a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc

    // PeriodStateVar_w += ( ( (float)motor->clarke.Cs - (float)PeriodFilter_w)*(float)PeriodKFilter );
    // PeriodFilter_w = (float)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;
		
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 80025b4:	463b      	mov	r3, r7
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fdc9 	bl	8002150 <CLARKE_run_ideal>

    return RESULT_OK(NULL);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	605a      	str	r2, [r3, #4]
}
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	3b8ebcd0 	.word	0x3b8ebcd0

080025d8 <motor_vec_park>:

// Thread - timer - 3
static inline Result motor_vec_park(MotorParameter *motor, float foc_cal_deg)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6178      	str	r0, [r7, #20]
 80025e0:	6139      	str	r1, [r7, #16]
 80025e2:	ed87 0a03 	vstr	s0, [r7, #12]
    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    motor->park.Beta = motor->clarke.Beta;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

    motor->park.Sine = TableSearch_sin(foc_cal_deg * DEG_TO_RAD);
 80025fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002602:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002668 <motor_vec_park+0x90>
 8002606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f000 feb3 	bl	8003378 <TableSearch_sin>
 8002612:	eef0 7a40 	vmov.f32	s15, s0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
    motor->park.Cosine = TableSearch_sin((foc_cal_deg + 90) * DEG_TO_RAD);
 800261c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002620:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800266c <motor_vec_park+0x94>
 8002624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002628:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002668 <motor_vec_park+0x90>
 800262c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	f000 fea0 	bl	8003378 <TableSearch_sin>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
    
    PARK_run(&motor->park);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8002648:	463b      	mov	r3, r7
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fd2d 	bl	80030ac <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float)motor->park.Qs - (float)PeriodFilter_iq)*(float)PeriodKFilter );
    // PeriodFilter_iq = (float)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	605a      	str	r2, [r3, #4]
}
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	3c8efa35 	.word	0x3c8efa35
 800266c:	42b40000 	.word	0x42b40000

08002670 <motor_vec_pi_id_iq>:

// Thread - timer - 4
#define IQ_REF_ADD 0
static inline Result motor_vec_pi_id_iq(MotorParameter *motor)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	dd6c      	ble.n	8002764 <motor_vec_pi_id_iq+0xf4>
    {
        motor->pi_Id.Ref = 0;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        motor->pi_Id.Fbk = motor->park.Ds;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 80026a6:	463b      	mov	r3, r7
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fd74 	bl	8003198 <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = CLAMP((motor->pi_Id.Out), 0.01, -0.01);//限制最大與最小參數
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff16 	bl	80004e8 <__aeabi_f2d>
 80026bc:	a336      	add	r3, pc, #216	@ (adr r3, 8002798 <motor_vec_pi_id_iq+0x128>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fe f9f9 	bl	8000ab8 <__aeabi_dcmpgt>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <motor_vec_pi_id_iq+0x60>
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <motor_vec_pi_id_iq+0x118>)
 80026ce:	e012      	b.n	80026f6 <motor_vec_pi_id_iq+0x86>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff06 	bl	80004e8 <__aeabi_f2d>
 80026dc:	a328      	add	r3, pc, #160	@ (adr r3, 8002780 <motor_vec_pi_id_iq+0x110>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fe f9cb 	bl	8000a7c <__aeabi_dcmplt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <motor_vec_pi_id_iq+0x80>
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <motor_vec_pi_id_iq+0x11c>)
 80026ee:	e002      	b.n	80026f6 <motor_vec_pi_id_iq+0x86>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
        // motor->pi_Iq.Fbk = motor->park.Qs;
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002702:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002790 <motor_vec_pi_id_iq+0x120>
 8002706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	671a      	str	r2, [r3, #112]	@ 0x70
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8002720:	463b      	mov	r3, r7
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fd37 	bl	8003198 <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = CLAMP(motor->pi_Iq.Out, 0.75f, 0.0f);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8002730:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	dd02      	ble.n	8002744 <motor_vec_pi_id_iq+0xd4>
 800273e:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8002742:	e00c      	b.n	800275e <motor_vec_pi_id_iq+0xee>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800274a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	d502      	bpl.n	800275a <motor_vec_pi_id_iq+0xea>
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e001      	b.n	800275e <motor_vec_pi_id_iq+0xee>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	6753      	str	r3, [r2, #116]	@ 0x74
 8002762:	e002      	b.n	800276a <motor_vec_pi_id_iq+0xfa>

    }
    else
    {
        motor->pi_Iq.Out = 0.18;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <motor_vec_pi_id_iq+0x124>)
 8002768:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    return RESULT_OK(NULL);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
}
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	47ae147b 	.word	0x47ae147b
 8002784:	bf847ae1 	.word	0xbf847ae1
 8002788:	3c23d70a 	.word	0x3c23d70a
 800278c:	bc23d70a 	.word	0xbc23d70a
 8002790:	00000000 	.word	0x00000000
 8002794:	3e3851ec 	.word	0x3e3851ec
 8002798:	47ae147b 	.word	0x47ae147b
 800279c:	3f847ae1 	.word	0x3f847ae1

080027a0 <motor_vec_ipark>:

// Thread - timer - 5
static inline Result motor_vec_ipark(MotorParameter *motor)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)

    //限制最大與最小參數
    // ? motor->ipark.Vdref = CLAMP((motor->ipark.Vdref += motor->pi_Id.Out), 0.06, -0.06);
    motor->ipark.Vdref = CLAMP(motor->pi_Id.Out, 0.06, -0.06);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fe99 	bl	80004e8 <__aeabi_f2d>
 80027b6:	a326      	add	r3, pc, #152	@ (adr r3, 8002850 <motor_vec_ipark+0xb0>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f97c 	bl	8000ab8 <__aeabi_dcmpgt>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <motor_vec_ipark+0x2a>
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <motor_vec_ipark+0xa8>)
 80027c8:	e012      	b.n	80027f0 <motor_vec_ipark+0x50>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe89 	bl	80004e8 <__aeabi_f2d>
 80027d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002840 <motor_vec_ipark+0xa0>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fe f94e 	bl	8000a7c <__aeabi_dcmplt>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <motor_vec_ipark+0x4a>
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <motor_vec_ipark+0xac>)
 80027e8:	e002      	b.n	80027f0 <motor_vec_ipark+0x50>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

    motor->ipark.Vqref = motor->pi_Iq.Out;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    motor->ipark.Sine = motor->park.Sine;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor->ipark.Cosine = motor->park.Cosine;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    IPARK_run(&motor->ipark);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 800281e:	463b      	mov	r3, r7
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fc7d 	bl	8003122 <IPARK_run>
    return RESULT_OK(NULL);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
}
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f3af 8000 	nop.w
 8002840:	eb851eb8 	.word	0xeb851eb8
 8002844:	bfaeb851 	.word	0xbfaeb851
 8002848:	3d75c28f 	.word	0x3d75c28f
 800284c:	bd75c28f 	.word	0xbd75c28f
 8002850:	eb851eb8 	.word	0xeb851eb8
 8002854:	3faeb851 	.word	0x3faeb851

08002858 <motor_vec_svpwm>:

// Thread - timer - exit
static inline Result motor_vec_svpwm(MotorParameter *motor)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	@ 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
    // svgen  //5us
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    motor->svgendq.Ubeta = motor->ipark.Beta;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    SVGEN_run(&motor->svgendq);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8002880:	463b      	mov	r3, r7
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd09 	bl	800329c <SVGEN_run>
    motor->electric_theta_rad = TableSearch_atan2(motor->ipark.Beta, motor->ipark.Alpha);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002896:	eef0 0a47 	vmov.f32	s1, s14
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	f000 fe0f 	bl	80034c0 <TableSearch_atan2>
 80028a2:	eef0 7a40 	vmov.f32	s15, s0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
    if (motor->electric_theta_rad < 0.0f)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 80028b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	d509      	bpl.n	80028d0 <motor_vec_svpwm+0x78>
        motor->electric_theta_rad += MUL_2_PI;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 80028c2:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002bf4 <motor_vec_svpwm+0x39c>
 80028c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
    float theta_in_sector = fmodf(motor->electric_theta_rad, DIV_PI_3);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 80028d6:	eddf 0ac8 	vldr	s1, [pc, #800]	@ 8002bf8 <motor_vec_svpwm+0x3a0>
 80028da:	eeb0 0a67 	vmov.f32	s0, s15
 80028de:	f009 fe45 	bl	800c56c <fmodf>
 80028e2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor->electric_theta_deg = fmodf(motor->electric_theta_rad * RAD_TO_DEG, 360.0f);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 80028ec:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8002bfc <motor_vec_svpwm+0x3a4>
 80028f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f4:	eddf 0ac2 	vldr	s1, [pc, #776]	@ 8002c00 <motor_vec_svpwm+0x3a8>
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	f009 fe36 	bl	800c56c <fmodf>
 8002900:	eef0 7a40 	vmov.f32	s15, s0
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
    //     }
    //     else
    //         motor->SVPWM_Vref=0;
    //     }
    // else
        float Vref = sqrt(motor->svgendq.Ualpha * motor->svgendq.Ualpha + motor->svgendq.Ubeta * motor->svgendq.Ubeta);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	ed93 7a50 	vldr	s14, [r3, #320]	@ 0x140
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8002916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	edd3 6a51 	vldr	s13, [r3, #324]	@ 0x144
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	edd3 7a51 	vldr	s15, [r3, #324]	@ 0x144
 8002926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292e:	ee17 0a90 	vmov	r0, s15
 8002932:	f7fd fdd9 	bl	80004e8 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ec43 2b10 	vmov	d0, r2, r3
 800293e:	f009 fde9 	bl	800c514 <sqrt>
 8002942:	ec53 2b10 	vmov	r2, r3, d0
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f8d5 	bl	8000af8 <__aeabi_d2f>
 800294e:	4603      	mov	r3, r0
 8002950:	623b      	str	r3, [r7, #32]
        motor->SVPWM_Vref = Vref;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->electric_theta_deg      =  (int)cmd_deg % 60;*/
    //------------------------------------
    float T1, T2;
    // ? CHECK
    if(!motor->reverse)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8002960:	f083 0301 	eor.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01e      	beq.n	80029a8 <motor_vec_svpwm+0x150>
    {
        T1 = Vref * TableSearch_sin(DIV_PI_3 - theta_in_sector);
 800296a:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8002bf8 <motor_vec_svpwm+0x3a0>
 800296e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002976:	eeb0 0a67 	vmov.f32	s0, s15
 800297a:	f000 fcfd 	bl	8003378 <TableSearch_sin>
 800297e:	eeb0 7a40 	vmov.f32	s14, s0
 8002982:	edd7 7a08 	vldr	s15, [r7, #32]
 8002986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        T2 = Vref * TableSearch_sin(theta_in_sector);
 800298e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002992:	f000 fcf1 	bl	8003378 <TableSearch_sin>
 8002996:	eeb0 7a40 	vmov.f32	s14, s0
 800299a:	edd7 7a08 	vldr	s15, [r7, #32]
 800299e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80029a6:	e01d      	b.n	80029e4 <motor_vec_svpwm+0x18c>
    }
    else
    {
        T1 = Vref * TableSearch_sin(theta_in_sector);
 80029a8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80029ac:	f000 fce4 	bl	8003378 <TableSearch_sin>
 80029b0:	eeb0 7a40 	vmov.f32	s14, s0
 80029b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        T2 = Vref * TableSearch_sin(DIV_PI_3 - theta_in_sector);
 80029c0:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002bf8 <motor_vec_svpwm+0x3a0>
 80029c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029cc:	eeb0 0a67 	vmov.f32	s0, s15
 80029d0:	f000 fcd2 	bl	8003378 <TableSearch_sin>
 80029d4:	eeb0 7a40 	vmov.f32	s14, s0
 80029d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80029dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    //------------------------------------
    float T0div2 = (1 - (T1 + T2)) / 2;
 80029e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80029e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80029fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a00:	edc7 7a07 	vstr	s15, [r7, #28]

    const MotorConst* const_h = &motor->const_h;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
    switch(motor->svgendq.Sector)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	f200 80b2 	bhi.w	8002b7c <motor_vec_svpwm+0x324>
 8002a18:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <motor_vec_svpwm+0x1c8>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a6f 	.word	0x08002a6f
 8002a24:	08002b47 	.word	0x08002b47
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002adb 	.word	0x08002adb
 8002a30:	08002aa5 	.word	0x08002aa5
 8002a34:	08002b11 	.word	0x08002b11
    // switch(my_hall_signal_in_decimal)
    {
        case 3://120~179 2 acb
        {
            motor->pwm_duty_u = T0div2 + T1 + T2;
 8002a38:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a3c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
            motor->pwm_duty_v = T0div2;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            motor->pwm_duty_w = T0div2 + T1;
 8002a5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
            // Ta = T0div2;
            // Tb = T0div2+T1+T2;
            // Tc = T0div2+T2;
            break;
 8002a6c:	e086      	b.n	8002b7c <motor_vec_svpwm+0x324>
        }
        case 1://180~239 3 abc
        {
            motor->pwm_duty_u = T0div2 + T1 + T2;
 8002a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
            motor->pwm_duty_v = T0div2 + T2;
 8002a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a8c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
            motor->pwm_duty_w = T0div2;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            // Ta = T0div2;
            // Tb = T0div2+T1;
            // Tc = T0div2+T1+T2;
            break;
 8002aa2:	e06b      	b.n	8002b7c <motor_vec_svpwm+0x324>
        }
        case 5://240~299 1    bac
        {
            motor->pwm_duty_u = T0div2 + T1;
 8002aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aa8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
            motor->pwm_duty_w = T0div2;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            // Ta = T0div2+T2;
            // Tb = T0div2;
            // Tc = T0div2+T1+T2;
            break;
 8002ad8:	e050      	b.n	8002b7c <motor_vec_svpwm+0x324>
        }
        case 4://300~359 5  bca
        {
            motor->pwm_duty_u = T0div2;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002ae2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
            motor->pwm_duty_w = T0div2 + T2;
 8002afc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b00:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
            // Ta = T0div2+T1+T2;
            // Tb = T0div2;
            // Tc = T0div2+T1;
            break;
 8002b0e:	e035      	b.n	8002b7c <motor_vec_svpwm+0x324>
        }
        case 6://0~59 4 cba
        {
            motor->pwm_duty_u = T0div2;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
            motor->pwm_duty_v = T0div2 + T1;
 8002b18:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
            motor->pwm_duty_w = T0div2 + T1 + T2;
 8002b2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
            // Ta = T0div2+T1+T2;
            // Tb = T0div2+T2;
            // Tc = T0div2;
            break;
 8002b44:	e01a      	b.n	8002b7c <motor_vec_svpwm+0x324>
        }
        case 2://60~119 6 cba
        {
            motor->pwm_duty_u = T0div2 + T2;
 8002b46:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b4a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
            motor->pwm_duty_v = T0div2;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            motor->pwm_duty_w = T0div2 + T1 + T2;
 8002b60:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b64:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
            // Ta = T0div2+T1;
            // Tb = T0div2+T1+T2;
            // Tc = T0div2;
            break;
 8002b7a:	bf00      	nop
        }
    }
    __HAL_TIM_SET_COMPARE(const_h->PWM_htimx[0], const_h->PWM_TIM_CHANNEL_x[0], (uint32_t)((float)TIM1_ARR * motor->pwm_duty_u));
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10f      	bne.n	8002ba4 <motor_vec_svpwm+0x34c>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002b8a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9c:	ee17 2a90 	vmov	r2, s15
 8002ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ba2:	e068      	b.n	8002c76 <motor_vec_svpwm+0x41e>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d10f      	bne.n	8002bcc <motor_vec_svpwm+0x374>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002bb2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 3a90 	vmov	r3, s15
 8002bc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bca:	e054      	b.n	8002c76 <motor_vec_svpwm+0x41e>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d119      	bne.n	8002c08 <motor_vec_svpwm+0x3b0>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002bda:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bec:	ee17 3a90 	vmov	r3, s15
 8002bf0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002bf2:	e040      	b.n	8002c76 <motor_vec_svpwm+0x41e>
 8002bf4:	40c90fdb 	.word	0x40c90fdb
 8002bf8:	3f860a92 	.word	0x3f860a92
 8002bfc:	42652ee1 	.word	0x42652ee1
 8002c00:	43b40000 	.word	0x43b40000
 8002c04:	43f98000 	.word	0x43f98000
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d10f      	bne.n	8002c30 <motor_vec_svpwm+0x3d8>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002c16:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c28:	ee17 3a90 	vmov	r3, s15
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	e022      	b.n	8002c76 <motor_vec_svpwm+0x41e>
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d10f      	bne.n	8002c58 <motor_vec_svpwm+0x400>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002c3e:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c50:	ee17 3a90 	vmov	r3, s15
 8002c54:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c56:	e00e      	b.n	8002c76 <motor_vec_svpwm+0x41e>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8002c5e:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c70:	ee17 3a90 	vmov	r3, s15
 8002c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(const_h->PWM_htimx[1], const_h->PWM_TIM_CHANNEL_x[1], (uint32_t)((float)TIM1_ARR * motor->pwm_duty_v));
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <motor_vec_svpwm+0x446>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8002c84:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c96:	ee17 2a90 	vmov	r2, s15
 8002c9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c9c:	e05e      	b.n	8002d5c <motor_vec_svpwm+0x504>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d10f      	bne.n	8002cc6 <motor_vec_svpwm+0x46e>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8002cac:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cbe:	ee17 3a90 	vmov	r3, s15
 8002cc2:	6393      	str	r3, [r2, #56]	@ 0x38
 8002cc4:	e04a      	b.n	8002d5c <motor_vec_svpwm+0x504>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d10f      	bne.n	8002cee <motor_vec_svpwm+0x496>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8002cd4:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce6:	ee17 3a90 	vmov	r3, s15
 8002cea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002cec:	e036      	b.n	8002d5c <motor_vec_svpwm+0x504>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d10f      	bne.n	8002d16 <motor_vec_svpwm+0x4be>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8002cfc:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0e:	ee17 3a90 	vmov	r3, s15
 8002d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d14:	e022      	b.n	8002d5c <motor_vec_svpwm+0x504>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d10f      	bne.n	8002d3e <motor_vec_svpwm+0x4e6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8002d24:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d36:	ee17 3a90 	vmov	r3, s15
 8002d3a:	6493      	str	r3, [r2, #72]	@ 0x48
 8002d3c:	e00e      	b.n	8002d5c <motor_vec_svpwm+0x504>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 8002d44:	ed1f 7a51 	vldr	s14, [pc, #-324]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d56:	ee17 3a90 	vmov	r3, s15
 8002d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(const_h->PWM_htimx[2], const_h->PWM_TIM_CHANNEL_x[2], (uint32_t)((float)TIM1_ARR * motor->pwm_duty_w));
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <motor_vec_svpwm+0x52c>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
 8002d6a:	ed1f 7a5a 	vldr	s14, [pc, #-360]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7c:	ee17 2a90 	vmov	r2, s15
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d82:	e05e      	b.n	8002e42 <motor_vec_svpwm+0x5ea>
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d10f      	bne.n	8002dac <motor_vec_svpwm+0x554>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
 8002d92:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da4:	ee17 3a90 	vmov	r3, s15
 8002da8:	6393      	str	r3, [r2, #56]	@ 0x38
 8002daa:	e04a      	b.n	8002e42 <motor_vec_svpwm+0x5ea>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d10f      	bne.n	8002dd4 <motor_vec_svpwm+0x57c>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
 8002dba:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dcc:	ee17 3a90 	vmov	r3, s15
 8002dd0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002dd2:	e036      	b.n	8002e42 <motor_vec_svpwm+0x5ea>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d10f      	bne.n	8002dfc <motor_vec_svpwm+0x5a4>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
 8002de2:	ed1f 7a78 	vldr	s14, [pc, #-480]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df4:	ee17 3a90 	vmov	r3, s15
 8002df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfa:	e022      	b.n	8002e42 <motor_vec_svpwm+0x5ea>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d10f      	bne.n	8002e24 <motor_vec_svpwm+0x5cc>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
 8002e0a:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1c:	ee17 3a90 	vmov	r3, s15
 8002e20:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e22:	e00e      	b.n	8002e42 <motor_vec_svpwm+0x5ea>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
 8002e2a:	ed1f 7a8a 	vldr	s14, [pc, #-552]	@ 8002c04 <motor_vec_svpwm+0x3ac>
 8002e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3c:	ee17 3a90 	vmov	r3, s15
 8002e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
}
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	3730      	adds	r7, #48	@ 0x30
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <motor_pwm_pulse>:

uint32_t running = 0;
// Thread - timer - entrance
#define FOC_CAL_DEG_ADD 270
Result motor_pwm_pulse(MotorParameter *motor)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
    running++;
 8002e62:	4b7f      	ldr	r3, [pc, #508]	@ (8003060 <motor_pwm_pulse+0x208>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a7d      	ldr	r2, [pc, #500]	@ (8003060 <motor_pwm_pulse+0x208>)
 8002e6a:	6013      	str	r3, [r2, #0]
    if((motor->gpio_hall_angle_acc + motor->pwm_it_angle) < 60) // 累計移動角度
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8002e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8003064 <motor_pwm_pulse+0x20c>
 8002e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e88:	d527      	bpl.n	8002eda <motor_pwm_pulse+0x82>
    {
        motor->gpio_hall_angle_acc += motor->pwm_it_angle;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	ed93 7a39 	vldr	s14, [r3, #228]	@ 0xe4
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
        motor->gpio_hall_angle_acc = CLAMP(motor->gpio_hall_angle_acc , 60, 0);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002ea6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003064 <motor_pwm_pulse+0x20c>
 8002eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	dd01      	ble.n	8002eb8 <motor_pwm_pulse+0x60>
 8002eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003068 <motor_pwm_pulse+0x210>)
 8002eb6:	e00d      	b.n	8002ed4 <motor_pwm_pulse+0x7c>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d502      	bpl.n	8002ece <motor_pwm_pulse+0x76>
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e002      	b.n	8002ed4 <motor_pwm_pulse+0x7c>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    }

    renew_adc(motor->const_h.adc_u_id, &motor->adc_u);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f103 02ee 	add.w	r2, r3, #238	@ 0xee
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fee9 	bl	8001cc0 <renew_adc>
    renew_adc(motor->const_h.adc_v_id, &motor->adc_v);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8002efa:	463b      	mov	r3, r7
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fedf 	bl	8001cc0 <renew_adc>
    renew_adc(motor->const_h.adc_w_id, &motor->adc_w);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	789b      	ldrb	r3, [r3, #2]
 8002f06:	4619      	mov	r1, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f103 02f2 	add.w	r2, r3, #242	@ 0xf2
 8002f0e:	463b      	mov	r3, r7
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fed5 	bl	8001cc0 <renew_adc>

    motor_stop_check(motor);
 8002f16:	463b      	mov	r3, r7
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fa92 	bl	8002444 <motor_stop_check>
    float motor_angle = fmodf((float)hall_to_angle(motor->gpio_hall_current) + motor->pwm_it_angle_acc, 360.0f) + (float)FOC_CAL_DEG_ADD;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fa5d 	bl	80023e8 <hall_to_angle>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8002f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f42:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 800306c <motor_pwm_pulse+0x214>
 8002f46:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4a:	f009 fb0f 	bl	800c56c <fmodf>
 8002f4e:	eef0 7a40 	vmov.f32	s15, s0
 8002f52:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8003070 <motor_pwm_pulse+0x218>
 8002f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f5a:	edc7 7a07 	vstr	s15, [r7, #28]

    // 外部VR轉速設定
    // Speed.Ref= 57 + (glo_ADC0_value[3]/30)*23;
    motor->pwm_count++;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
    // 計算 速度PI (每100個PWM中斷)
    if(motor->pwm_count >= 100)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b63      	cmp	r3, #99	@ 0x63
 8002f7a:	d944      	bls.n	8003006 <motor_pwm_pulse+0x1ae>
    {
        // if(Speed.Fbk>0 && stop_flag==0)
        PI_run(&motor->pi_speed);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8002f82:	463b      	mov	r3, r7
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f906 	bl	8003198 <PI_run>
        motor->pi_speed_cmd = CLAMP((motor->pi_speed_cmd + motor->pi_speed.Out), 0.2, 0.15);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	ee17 0a90 	vmov	r0, s15
 8002fa0:	f7fd faa2 	bl	80004e8 <__aeabi_f2d>
 8002fa4:	a32a      	add	r3, pc, #168	@ (adr r3, 8003050 <motor_pwm_pulse+0x1f8>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f7fd fd85 	bl	8000ab8 <__aeabi_dcmpgt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <motor_pwm_pulse+0x162>
 8002fb4:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8003074 <motor_pwm_pulse+0x21c>
 8002fb8:	e01e      	b.n	8002ff8 <motor_pwm_pulse+0x1a0>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	ee17 0a90 	vmov	r0, s15
 8002fce:	f7fd fa8b 	bl	80004e8 <__aeabi_f2d>
 8002fd2:	a321      	add	r3, pc, #132	@ (adr r3, 8003058 <motor_pwm_pulse+0x200>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fd50 	bl	8000a7c <__aeabi_dcmplt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <motor_pwm_pulse+0x190>
 8002fe2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003078 <motor_pwm_pulse+0x220>
 8002fe6:	e007      	b.n	8002ff8 <motor_pwm_pulse+0x1a0>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        // else if(Speed.Fbk==0 | stop_flag==1)
        //     motor->pi_speed_cmd=0.18;
        motor->pwm_count = 0;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2200      	movs	r2, #0
 8003002:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
    }

    motor_vec_clarke(motor);
 8003006:	463b      	mov	r3, r7
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fa78 	bl	8002500 <motor_vec_clarke>
    motor_vec_park(motor, motor_angle);
 8003010:	463b      	mov	r3, r7
 8003012:	ed97 0a07 	vldr	s0, [r7, #28]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fadd 	bl	80025d8 <motor_vec_park>
    motor_vec_pi_id_iq(motor);
 800301e:	463b      	mov	r3, r7
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fb24 	bl	8002670 <motor_vec_pi_id_iq>
    motor_vec_ipark(motor);
 8003028:	463b      	mov	r3, r7
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fbb7 	bl	80027a0 <motor_vec_ipark>
    motor_vec_svpwm(motor);
 8003032:	463b      	mov	r3, r7
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fc0e 	bl	8002858 <motor_vec_svpwm>

    return RESULT_OK(NULL);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
}
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	9999999a 	.word	0x9999999a
 8003054:	3fc99999 	.word	0x3fc99999
 8003058:	33333333 	.word	0x33333333
 800305c:	3fc33333 	.word	0x3fc33333
 8003060:	20001888 	.word	0x20001888
 8003064:	42700000 	.word	0x42700000
 8003068:	42700000 	.word	0x42700000
 800306c:	43b40000 	.word	0x43b40000
 8003070:	43870000 	.word	0x43870000
 8003074:	3e4ccccd 	.word	0x3e4ccccd
 8003078:	3e19999a 	.word	0x3e19999a

0800307c <StartMotorTask>:
#include "motor/it_hall.h"
#include "motor/it_timer.h"
#include "analog/adc1/main.h"

void StartMotorTask(void *argument)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
    motor_hall_update(&motor_0);
 8003084:	463b      	mov	r3, r7
 8003086:	4907      	ldr	r1, [pc, #28]	@ (80030a4 <StartMotorTask+0x28>)
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f8dd 	bl	8002248 <motor_hall_update>
    pwm_setup(&motor_0);
 800308e:	463b      	mov	r3, r7
 8003090:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <StartMotorTask+0x28>)
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff f974 	bl	8002380 <pwm_setup>
    motor_0.pi_speed.Ref = 20.0f;
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <StartMotorTask+0x28>)
 800309a:	4a03      	ldr	r2, [pc, #12]	@ (80030a8 <StartMotorTask+0x2c>)
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34
    StopTask();
 800309e:	f006 fb86 	bl	80097ae <osThreadExit>
 80030a2:	bf00      	nop
 80030a4:	20000014 	.word	0x20000014
 80030a8:	41a00000 	.word	0x41a00000

080030ac <PARK_run>:
#include "motor/park.h"

Result PARK_run(volatile PARK *park)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	edd3 7a06 	vldr	s15, [r3, #24]
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80030d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80030ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	edd3 6a00 	vldr	s13, [r3]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80030fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	edc3 7a04 	vstr	s15, [r3, #16]
    return RESULT_OK(NULL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
}
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <IPARK_run>:

Result IPARK_run(volatile IPARK *ipark)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	edd3 7a06 	vldr	s15, [r3, #24]
 8003138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	edd3 7a05 	vldr	s15, [r3, #20]
 8003148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	ed93 7a04 	vldr	s14, [r3, #16]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	edd3 6a03 	vldr	s13, [r3, #12]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	edc3 7a01 	vstr	s15, [r3, #4]
    return RESULT_OK(NULL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	605a      	str	r2, [r3, #4]
}
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <PI_run>:
#include "motor/pi.h"

Result PI_run(volatile PI_CONTROLLER *pi)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	edd3 6a00 	vldr	s13, [r3]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80031ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d110      	bne.n	80031fa <PI_run+0x62>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	ed93 7a04 	vldr	s14, [r3, #16]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80031e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	edc3 7a08 	vstr	s15, [r3, #32]
 80031f8:	e003      	b.n	8003202 <PI_run+0x6a>
    }
    else
    {
        pi->ui = pi->i1;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28

    pi->v1 = pi->up + pi->ui;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	edd3 7a08 	vldr	s15, [r3, #32]
 8003216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = CLAMP(pi->v1, pi->Umax, pi->Umin);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	edd3 7a05 	vldr	s15, [r3, #20]
 800322c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	dd02      	ble.n	800323c <PI_run+0xa4>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	e00f      	b.n	800325c <PI_run+0xc4>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	edd3 7a06 	vldr	s15, [r3, #24]
 8003248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d502      	bpl.n	8003258 <PI_run+0xc0>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	e001      	b.n	800325c <PI_run+0xc4>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	6093      	str	r3, [r2, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	ed93 7a02 	vldr	s14, [r3, #8]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800326c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	d102      	bne.n	800327c <PI_run+0xe4>
 8003276:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800327a:	e001      	b.n	8003280 <PI_run+0xe8>
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c
    return RESULT_OK(NULL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]
}
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <SVGEN_run>:
#include "motor/svgendq.h"

Result SVGEN_run(volatile SVGENDQ *svgq)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    float t1 = svgq->Ubeta * 0.5f;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b4:	edc7 7a05 	vstr	s15, [r7, #20]
    float t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003374 <SVGEN_run+0xd8>
 80032c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c6:	edc7 7a04 	vstr	s15, [r7, #16]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 80032d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80032d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 80032e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032e8:	eeb1 7a67 	vneg.f32	s14, s15
 80032ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80032f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	edd3 7a02 	vldr	s15, [r3, #8]
 8003306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	dd06      	ble.n	800331e <SVGEN_run+0x82>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	8a9b      	ldrh	r3, [r3, #20]
 8003314:	b29b      	uxth	r3, r3
 8003316:	3302      	adds	r3, #2
 8003318:	b29a      	uxth	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	edd3 7a03 	vldr	s15, [r3, #12]
 8003324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	dd06      	ble.n	800333c <SVGEN_run+0xa0>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	8a9b      	ldrh	r3, [r3, #20]
 8003332:	b29b      	uxth	r3, r3
 8003334:	3304      	adds	r3, #4
 8003336:	b29a      	uxth	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	dd06      	ble.n	800335a <SVGEN_run+0xbe>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	8a9b      	ldrh	r3, [r3, #20]
 8003350:	b29b      	uxth	r3, r3
 8003352:	3301      	adds	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	829a      	strh	r2, [r3, #20]
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
    return RESULT_OK(NULL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	605a      	str	r2, [r3, #4]
}
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	3f5db3d7 	.word	0x3f5db3d7

08003378 <TableSearch_sin>:
    15042,    //0.1499
    15042	 //0.1500
}; // Table_atan END

float TableSearch_sin(float theta)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	ed87 0a01 	vstr	s0, [r7, #4]
    theta = fmodf(theta, MUL_2_PI);
 8003382:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8003428 <TableSearch_sin+0xb0>
 8003386:	ed97 0a01 	vldr	s0, [r7, #4]
 800338a:	f009 f8ef 	bl	800c56c <fmodf>
 800338e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (theta < 0.0f) theta += MUL_2_PI;
 8003392:	edd7 7a01 	vldr	s15, [r7, #4]
 8003396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	d507      	bpl.n	80033b0 <TableSearch_sin+0x38>
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003428 <TableSearch_sin+0xb0>
 80033a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ac:	edc7 7a01 	vstr	s15, [r7, #4]

    bool minus_flag = false;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
    if (theta > PI) {
 80033b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800342c <TableSearch_sin+0xb4>
 80033bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	dd09      	ble.n	80033da <TableSearch_sin+0x62>
        minus_flag = true;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
        theta -= PI;
 80033ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800342c <TableSearch_sin+0xb4>
 80033d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033d6:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    uint16_t idx = (uint16_t)(theta * 100.0f);
 80033da:	edd7 7a01 	vldr	s15, [r7, #4]
 80033de:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003430 <TableSearch_sin+0xb8>
 80033e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ea:	ee17 3a90 	vmov	r3, s15
 80033ee:	81bb      	strh	r3, [r7, #12]
    if (idx >= 316) idx = 315;
 80033f0:	89bb      	ldrh	r3, [r7, #12]
 80033f2:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 80033f6:	d302      	bcc.n	80033fe <TableSearch_sin+0x86>
 80033f8:	f240 133b 	movw	r3, #315	@ 0x13b
 80033fc:	81bb      	strh	r3, [r7, #12]
    float result = Table_sin[idx];
 80033fe:	89bb      	ldrh	r3, [r7, #12]
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <TableSearch_sin+0xbc>)
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60bb      	str	r3, [r7, #8]
    return minus_flag ? -result : result;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <TableSearch_sin+0xa2>
 8003410:	edd7 7a02 	vldr	s15, [r7, #8]
 8003414:	eef1 7a67 	vneg.f32	s15, s15
 8003418:	e001      	b.n	800341e <TableSearch_sin+0xa6>
 800341a:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800341e:	eeb0 0a67 	vmov.f32	s0, s15
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40c90fdb 	.word	0x40c90fdb
 800342c:	40490fdb 	.word	0x40490fdb
 8003430:	42c80000 	.word	0x42c80000
 8003434:	20000188 	.word	0x20000188

08003438 <TableSearch_atan>:

float TableSearch_atan(float theta)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t idx = (uint16_t)fabsf(theta * 100.0f);
 8003442:	edd7 7a01 	vldr	s15, [r7, #4]
 8003446:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80034b4 <TableSearch_atan+0x7c>
 800344a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344e:	eef0 7ae7 	vabs.f32	s15, s15
 8003452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003456:	ee17 3a90 	vmov	r3, s15
 800345a:	81fb      	strh	r3, [r7, #14]
    if (idx > 1500) idx = 1500;
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003462:	4293      	cmp	r3, r2
 8003464:	d902      	bls.n	800346c <TableSearch_atan+0x34>
 8003466:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800346a:	81fb      	strh	r3, [r7, #14]
    float output_abs = (float)Table_atan[idx] / 10000.0f;
 800346c:	89fb      	ldrh	r3, [r7, #14]
 800346e:	4a12      	ldr	r2, [pc, #72]	@ (80034b8 <TableSearch_atan+0x80>)
 8003470:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800347c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80034bc <TableSearch_atan+0x84>
 8003480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003484:	edc7 7a02 	vstr	s15, [r7, #8]
    return (theta >= 0.0f) ? output_abs : -output_abs;
 8003488:	edd7 7a01 	vldr	s15, [r7, #4]
 800348c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	db02      	blt.n	800349c <TableSearch_atan+0x64>
 8003496:	edd7 7a02 	vldr	s15, [r7, #8]
 800349a:	e003      	b.n	80034a4 <TableSearch_atan+0x6c>
 800349c:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a0:	eef1 7a67 	vneg.f32	s15, s15
}
 80034a4:	eeb0 0a67 	vmov.f32	s0, s15
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	42c80000 	.word	0x42c80000
 80034b8:	20000678 	.word	0x20000678
 80034bc:	461c4000 	.word	0x461c4000

080034c0 <TableSearch_atan2>:

float TableSearch_atan2(float y, float x)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80034ca:	edc7 0a00 	vstr	s1, [r7]
    if (x == 0.0f) {
 80034ce:	edd7 7a00 	vldr	s15, [r7]
 80034d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	d116      	bne.n	800350a <TableSearch_atan2+0x4a>
        if      (y > 0.0f) return  DIV_PI_2;
 80034dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80034e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	dd02      	ble.n	80034f0 <TableSearch_atan2+0x30>
 80034ea:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003568 <TableSearch_atan2+0xa8>
 80034ee:	e036      	b.n	800355e <TableSearch_atan2+0x9e>
        else if (y < 0.0f) return -DIV_PI_2;
 80034f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fc:	d502      	bpl.n	8003504 <TableSearch_atan2+0x44>
 80034fe:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800356c <TableSearch_atan2+0xac>
 8003502:	e02c      	b.n	800355e <TableSearch_atan2+0x9e>
        else               return 0.0f; // (0,0) → 定義為 0
 8003504:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003570 <TableSearch_atan2+0xb0>
 8003508:	e029      	b.n	800355e <TableSearch_atan2+0x9e>
    }

    float base = TableSearch_atan(y / x);
 800350a:	ed97 7a01 	vldr	s14, [r7, #4]
 800350e:	edd7 7a00 	vldr	s15, [r7]
 8003512:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003516:	eeb0 0a66 	vmov.f32	s0, s13
 800351a:	f7ff ff8d 	bl	8003438 <TableSearch_atan>
 800351e:	ed87 0a03 	vstr	s0, [r7, #12]
    if (x > 0.0f)
 8003522:	edd7 7a00 	vldr	s15, [r7]
 8003526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	dd02      	ble.n	8003536 <TableSearch_atan2+0x76>
    {
        return base; // Phase 1,4
 8003530:	edd7 7a03 	vldr	s15, [r7, #12]
 8003534:	e013      	b.n	800355e <TableSearch_atan2+0x9e>
    }
    else
    {
        return (y >= 0.0f) ? (base + PI) : (base - PI); // Phase 2,3
 8003536:	edd7 7a01 	vldr	s15, [r7, #4]
 800353a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	db06      	blt.n	8003552 <TableSearch_atan2+0x92>
 8003544:	edd7 7a03 	vldr	s15, [r7, #12]
 8003548:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003574 <TableSearch_atan2+0xb4>
 800354c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003550:	e005      	b.n	800355e <TableSearch_atan2+0x9e>
 8003552:	edd7 7a03 	vldr	s15, [r7, #12]
 8003556:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003574 <TableSearch_atan2+0xb4>
 800355a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    }
}
 800355e:	eeb0 0a67 	vmov.f32	s0, s15
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	3fc90fdb 	.word	0x3fc90fdb
 800356c:	bfc90fdb 	.word	0xbfc90fdb
 8003570:	00000000 	.word	0x00000000
 8003574:	40490fdb 	.word	0x40490fdb

08003578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003578:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800357a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800357c:	f7fe f9a4 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003580:	480c      	ldr	r0, [pc, #48]	@ (80035b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003582:	490d      	ldr	r1, [pc, #52]	@ (80035b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003584:	4a0d      	ldr	r2, [pc, #52]	@ (80035bc <LoopForever+0xe>)
  movs r3, #0
 8003586:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003588:	e002      	b.n	8003590 <LoopCopyDataInit>

0800358a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800358c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358e:	3304      	adds	r3, #4

08003590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003594:	d3f9      	bcc.n	800358a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003598:	4c0a      	ldr	r4, [pc, #40]	@ (80035c4 <LoopForever+0x16>)
  movs r3, #0
 800359a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800359c:	e001      	b.n	80035a2 <LoopFillZerobss>

0800359e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a0:	3204      	adds	r2, #4

080035a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a4:	d3fb      	bcc.n	800359e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80035a6:	f008 ff2b 	bl	800c400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035aa:	f7fd ffef 	bl	800158c <main>

080035ae <LoopForever>:

LoopForever:
    b LoopForever
 80035ae:	e7fe      	b.n	80035ae <LoopForever>
  ldr   r0, =_estack
 80035b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b8:	200012a4 	.word	0x200012a4
  ldr r2, =_sidata
 80035bc:	0800c998 	.word	0x0800c998
  ldr r2, =_sbss
 80035c0:	200012a4 	.word	0x200012a4
  ldr r4, =_ebss
 80035c4:	20003454 	.word	0x20003454

080035c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035c8:	e7fe      	b.n	80035c8 <ADC1_2_IRQHandler>
	...

080035cc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80035d6:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <BSP_LED_Init+0x64>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <BSP_LED_Init+0x64>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <BSP_LED_Init+0x64>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80035ee:	2320      	movs	r3, #32
 80035f0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80035f2:	2301      	movs	r3, #1
 80035f4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	4a0c      	ldr	r2, [pc, #48]	@ (8003634 <BSP_LED_Init+0x68>)
 8003602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003606:	f107 020c 	add.w	r2, r7, #12
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f002 fc69 	bl	8005ee4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	4a07      	ldr	r2, [pc, #28]	@ (8003634 <BSP_LED_Init+0x68>)
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	2120      	movs	r1, #32
 800361c:	2200      	movs	r2, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f002 fde2 	bl	80061e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	20001234 	.word	0x20001234

08003638 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	460a      	mov	r2, r1
 8003642:	71fb      	strb	r3, [r7, #7]
 8003644:	4613      	mov	r3, r2
 8003646:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003648:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <BSP_PB_Init+0xc4>)
 800364a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364c:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <BSP_PB_Init+0xc4>)
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003654:	4b29      	ldr	r3, [pc, #164]	@ (80036fc <BSP_PB_Init+0xc4>)
 8003656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003664:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003666:	2302      	movs	r3, #2
 8003668:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800366a:	2302      	movs	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800366e:	79bb      	ldrb	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10c      	bne.n	800368e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	4a21      	ldr	r2, [pc, #132]	@ (8003700 <BSP_PB_Init+0xc8>)
 800367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003680:	f107 020c 	add.w	r2, r7, #12
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f002 fc2c 	bl	8005ee4 <HAL_GPIO_Init>
 800368c:	e031      	b.n	80036f2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800368e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003692:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <BSP_PB_Init+0xc8>)
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	f107 020c 	add.w	r2, r7, #12
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f002 fc1e 	bl	8005ee4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <BSP_PB_Init+0xcc>)
 80036ae:	441a      	add	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4915      	ldr	r1, [pc, #84]	@ (8003708 <BSP_PB_Init+0xd0>)
 80036b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f001 ff1d 	bl	80054fa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003704 <BSP_PB_Init+0xcc>)
 80036c6:	1898      	adds	r0, r3, r2
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	4a10      	ldr	r2, [pc, #64]	@ (800370c <BSP_PB_Init+0xd4>)
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	461a      	mov	r2, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	f001 fef4 	bl	80054c0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80036d8:	2028      	movs	r0, #40	@ 0x28
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003710 <BSP_PB_Init+0xd8>)
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	2200      	movs	r2, #0
 80036e4:	4619      	mov	r1, r3
 80036e6:	f001 fc51 	bl	8004f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80036ea:	2328      	movs	r3, #40	@ 0x28
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fc67 	bl	8004fc0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	20001238 	.word	0x20001238
 8003704:	2000188c 	.word	0x2000188c
 8003708:	0800c944 	.word	0x0800c944
 800370c:	20001240 	.word	0x20001240
 8003710:	20001244 	.word	0x20001244

08003714 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <BSP_PB_IRQHandler+0x20>)
 8003724:	4413      	add	r3, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f001 fefc 	bl	8005524 <HAL_EXTI_IRQHandler>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000188c 	.word	0x2000188c

08003738 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d903      	bls.n	800376e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003766:	f06f 0301 	mvn.w	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e018      	b.n	80037a0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	2294      	movs	r2, #148	@ 0x94
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <BSP_COM_Init+0x5c>)
 8003778:	4413      	add	r3, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f852 	bl	8003824 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2294      	movs	r2, #148	@ 0x94
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <BSP_COM_Init+0x5c>)
 800378a:	4413      	add	r3, r2
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f80e 	bl	80037b0 <MX_LPUART1_Init>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800379a:	f06f 0303 	mvn.w	r3, #3
 800379e:	e000      	b.n	80037a2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80037a0:	68fb      	ldr	r3, [r7, #12]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20001894 	.word	0x20001894

080037b0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80037ba:	4b15      	ldr	r3, [pc, #84]	@ (8003810 <MX_LPUART1_Init+0x60>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	220c      	movs	r2, #12
 80037ce:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	895b      	ldrh	r3, [r3, #10]
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	891b      	ldrh	r3, [r3, #8]
 80037e6:	461a      	mov	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	899b      	ldrh	r3, [r3, #12]
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037fc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f005 f959 	bl	8008ab6 <HAL_UART_Init>
 8003804:	4603      	mov	r3, r0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000123c 	.word	0x2000123c

08003814 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003818:	2000      	movs	r0, #0
 800381a:	f7ff ff8d 	bl	8003738 <BSP_PB_Callback>
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	@ 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800382c:	4b22      	ldr	r3, [pc, #136]	@ (80038b8 <COM1_MspInit+0x94>)
 800382e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003830:	4a21      	ldr	r2, [pc, #132]	@ (80038b8 <COM1_MspInit+0x94>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003838:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <COM1_MspInit+0x94>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003844:	4b1c      	ldr	r3, [pc, #112]	@ (80038b8 <COM1_MspInit+0x94>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003848:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <COM1_MspInit+0x94>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <COM1_MspInit+0x94>)
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800385c:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <COM1_MspInit+0x94>)
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	4a15      	ldr	r2, [pc, #84]	@ (80038b8 <COM1_MspInit+0x94>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003868:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <COM1_MspInit+0x94>)
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003874:	2304      	movs	r3, #4
 8003876:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003878:	2302      	movs	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800387c:	2302      	movs	r3, #2
 800387e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003880:	2301      	movs	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003884:	230c      	movs	r3, #12
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003892:	f002 fb27 	bl	8005ee4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003896:	2308      	movs	r3, #8
 8003898:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800389e:	230c      	movs	r3, #12
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	4619      	mov	r1, r3
 80038a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ac:	f002 fb1a 	bl	8005ee4 <HAL_GPIO_Init>
}
 80038b0:	bf00      	nop
 80038b2:	3728      	adds	r7, #40	@ 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c6:	2003      	movs	r0, #3
 80038c8:	f001 fb55 	bl	8004f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038cc:	200f      	movs	r0, #15
 80038ce:	f7fd ff2d 	bl	800172c <HAL_InitTick>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	e001      	b.n	80038e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038de:	f7fd fefb 	bl	80016d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038e2:	79fb      	ldrb	r3, [r7, #7]

}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_IncTick+0x1c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <HAL_IncTick+0x20>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a03      	ldr	r2, [pc, #12]	@ (8003908 <HAL_IncTick+0x1c>)
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	20001928 	.word	0x20001928
 800390c:	2000124c 	.word	0x2000124c

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	@ (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20001928 	.word	0x20001928

08003928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	609a      	str	r2, [r3, #8]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3360      	adds	r3, #96	@ 0x60
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b08      	ldr	r3, [pc, #32]	@ (80039d4 <LL_ADC_SetOffset+0x44>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	4313      	orrs	r3, r2
 80039c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	03fff000 	.word	0x03fff000

080039d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3360      	adds	r3, #96	@ 0x60
 80039e6:	461a      	mov	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3360      	adds	r3, #96	@ 0x60
 8003a14:	461a      	mov	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3360      	adds	r3, #96	@ 0x60
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3360      	adds	r3, #96	@ 0x60
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	615a      	str	r2, [r3, #20]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3330      	adds	r3, #48	@ 0x30
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	4413      	add	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	211f      	movs	r1, #31
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	f003 011f 	and.w	r1, r3, #31
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b087      	sub	sp, #28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	0e5b      	lsrs	r3, r3, #25
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	4413      	add	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0d1b      	lsrs	r3, r3, #20
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2107      	movs	r1, #7
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	0d1b      	lsrs	r3, r3, #20
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	401a      	ands	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0318 	and.w	r3, r3, #24
 8003bc2:	4908      	ldr	r1, [pc, #32]	@ (8003be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bc4:	40d9      	lsrs	r1, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	400b      	ands	r3, r1
 8003bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	0007ffff 	.word	0x0007ffff

08003be8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003c14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6093      	str	r3, [r2, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c3c:	d101      	bne.n	8003c42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c8c:	d101      	bne.n	8003c92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <LL_ADC_IsEnabled+0x18>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LL_ADC_IsEnabled+0x1a>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cfe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d02:	f043 0204 	orr.w	r2, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d101      	bne.n	8003d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d101      	bne.n	8003d54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e167      	b.n	800404e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd f92b 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff3f 	bl	8003c28 <LL_ADC_IsDeepPowerDownEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff25 	bl	8003c04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ff5a 	bl	8003c78 <LL_ADC_IsInternalRegulatorEnabled>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff3e 	bl	8003c50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8004058 <HAL_ADC_Init+0x2f4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	099b      	lsrs	r3, r3, #6
 8003dda:	4aa0      	ldr	r2, [pc, #640]	@ (800405c <HAL_ADC_Init+0x2f8>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003de8:	e002      	b.n	8003df0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f9      	bne.n	8003dea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff3c 	bl	8003c78 <LL_ADC_IsInternalRegulatorEnabled>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff75 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003e2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8100 	bne.w	800403c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f040 80fc 	bne.w	800403c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff35 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d111      	bne.n	8003e88 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e68:	f7ff ff2e 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	487c      	ldr	r0, [pc, #496]	@ (8004060 <HAL_ADC_Init+0x2fc>)
 8003e70:	f7ff ff2a 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4323      	orrs	r3, r4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4619      	mov	r1, r3
 8003e82:	4878      	ldr	r0, [pc, #480]	@ (8004064 <HAL_ADC_Init+0x300>)
 8003e84:	f7ff fd50 	bl	8003928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7f5b      	ldrb	r3, [r3, #29]
 8003e8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ea6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d106      	bne.n	8003ec4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	045b      	lsls	r3, r3, #17
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	4b60      	ldr	r3, [pc, #384]	@ (8004068 <HAL_ADC_Init+0x304>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff14 	bl	8003d3c <LL_ADC_INJ_IsConversionOngoing>
 8003f14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d16d      	bne.n	8003ff8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d16a      	bne.n	8003ff8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f26:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f2e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f3e:	f023 0302 	bic.w	r3, r3, #2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6911      	ldr	r1, [r2, #16]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003f82:	e013      	b.n	8003fac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fa8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d118      	bne.n	8003fe8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fd2:	4311      	orrs	r1, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	611a      	str	r2, [r3, #16]
 8003fe6:	e007      	b.n	8003ff8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10c      	bne.n	800401a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f023 010f 	bic.w	r1, r3, #15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	1e5a      	subs	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
 8004018:	e007      	b.n	800402a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 020f 	bic.w	r2, r2, #15
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	65da      	str	r2, [r3, #92]	@ 0x5c
 800403a:	e007      	b.n	800404c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800404c:	7ffb      	ldrb	r3, [r7, #31]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3724      	adds	r7, #36	@ 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd90      	pop	{r4, r7, pc}
 8004056:	bf00      	nop
 8004058:	20000000 	.word	0x20000000
 800405c:	053e2d63 	.word	0x053e2d63
 8004060:	50000100 	.word	0x50000100
 8004064:	50000300 	.word	0x50000300
 8004068:	fff04007 	.word	0xfff04007

0800406c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004078:	4851      	ldr	r0, [pc, #324]	@ (80041c0 <HAL_ADC_Start_DMA+0x154>)
 800407a:	f7ff fdb5 	bl	8003be8 <LL_ADC_GetMultimode>
 800407e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fe46 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 808f 	bne.w	80041b0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_Start_DMA+0x34>
 800409c:	2302      	movs	r3, #2
 800409e:	e08a      	b.n	80041b6 <HAL_ADC_Start_DMA+0x14a>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d002      	beq.n	80040ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b09      	cmp	r3, #9
 80040b8:	d173      	bne.n	80041a2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fc98 	bl	80049f0 <ADC_Enable>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d166      	bne.n	8004198 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a38      	ldr	r2, [pc, #224]	@ (80041c4 <HAL_ADC_Start_DMA+0x158>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d002      	beq.n	80040ee <HAL_ADC_Start_DMA+0x82>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e001      	b.n	80040f2 <HAL_ADC_Start_DMA+0x86>
 80040ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d002      	beq.n	8004100 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411c:	f023 0206 	bic.w	r2, r3, #6
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	661a      	str	r2, [r3, #96]	@ 0x60
 8004124:	e002      	b.n	800412c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	4a25      	ldr	r2, [pc, #148]	@ (80041c8 <HAL_ADC_Start_DMA+0x15c>)
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004138:	4a24      	ldr	r2, [pc, #144]	@ (80041cc <HAL_ADC_Start_DMA+0x160>)
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	4a23      	ldr	r2, [pc, #140]	@ (80041d0 <HAL_ADC_Start_DMA+0x164>)
 8004142:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	221c      	movs	r2, #28
 800414a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0210 	orr.w	r2, r2, #16
 8004162:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3340      	adds	r3, #64	@ 0x40
 800417e:	4619      	mov	r1, r3
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f000 ffd2 	bl	800512c <HAL_DMA_Start_IT>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fdac 	bl	8003cee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004196:	e00d      	b.n	80041b4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80041a0:	e008      	b.n	80041b4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80041ae:	e001      	b.n	80041b4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
 80041b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	50000300 	.word	0x50000300
 80041c4:	50000100 	.word	0x50000100
 80041c8:	08004afd 	.word	0x08004afd
 80041cc:	08004bd5 	.word	0x08004bd5
 80041d0:	08004bf1 	.word	0x08004bf1

080041d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b0b6      	sub	sp, #216	@ 0xd8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x22>
 800422e:	2302      	movs	r3, #2
 8004230:	e3c8      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x7b4>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fd69 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 83ad 	bne.w	80049a6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	f7ff fc4a 	bl	8003af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fd57 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8004268:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fd63 	bl	8003d3c <LL_ADC_INJ_IsConversionOngoing>
 8004276:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800427a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 81d9 	bne.w	8004636 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 81d4 	bne.w	8004636 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004296:	d10f      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2200      	movs	r2, #0
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7ff fc51 	bl	8003b4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fbf8 	bl	8003aa6 <LL_ADC_SetSamplingTimeCommonConfig>
 80042b6:	e00e      	b.n	80042d6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	461a      	mov	r2, r3
 80042c6:	f7ff fc40 	bl	8003b4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fbe8 	bl	8003aa6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d022      	beq.n	800433e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6919      	ldr	r1, [r3, #16]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004308:	f7ff fb42 	bl	8003990 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6919      	ldr	r1, [r3, #16]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	461a      	mov	r2, r3
 800431a:	f7ff fb8e 	bl	8003a3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x124>
 800432e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004332:	e000      	b.n	8004336 <HAL_ADC_ConfigChannel+0x126>
 8004334:	2300      	movs	r3, #0
 8004336:	461a      	mov	r2, r3
 8004338:	f7ff fb9a 	bl	8003a70 <LL_ADC_SetOffsetSaturation>
 800433c:	e17b      	b.n	8004636 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fb47 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 800434a:	4603      	mov	r3, r0
 800434c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <HAL_ADC_ConfigChannel+0x15a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fb3c 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 8004360:	4603      	mov	r3, r0
 8004362:	0e9b      	lsrs	r3, r3, #26
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	e01e      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x198>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fb31 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 8004376:	4603      	mov	r3, r0
 8004378:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800438c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e004      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800439c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x1b0>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	e018      	b.n	80043f2 <HAL_ADC_ConfigChannel+0x1e2>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80043d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80043dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80043e4:	2320      	movs	r3, #32
 80043e6:	e004      	b.n	80043f2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80043e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043ec:	fab3 f383 	clz	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d106      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fb00 	bl	8003a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fae4 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x220>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fad9 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	f003 021f 	and.w	r2, r3, #31
 800442e:	e01e      	b.n	800446e <HAL_ADC_ConfigChannel+0x25e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff face 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004446:	fa93 f3a3 	rbit	r3, r3
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800444e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004452:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800445e:	2320      	movs	r3, #32
 8004460:	e004      	b.n	800446c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x276>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	e018      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x2a8>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800449a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800449e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80044a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80044aa:	2320      	movs	r3, #32
 80044ac:	e004      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80044ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d106      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fa9d 	bl	8003a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2102      	movs	r1, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fa81 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x2e6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fa76 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 80044ec:	4603      	mov	r3, r0
 80044ee:	0e9b      	lsrs	r3, r3, #26
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	e01e      	b.n	8004534 <HAL_ADC_ConfigChannel+0x324>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2102      	movs	r1, #2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fa6b 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800451c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004524:	2320      	movs	r3, #32
 8004526:	e004      	b.n	8004532 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004528:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453c:	2b00      	cmp	r3, #0
 800453e:	d105      	bne.n	800454c <HAL_ADC_ConfigChannel+0x33c>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0e9b      	lsrs	r3, r3, #26
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	e016      	b.n	800457a <HAL_ADC_ConfigChannel+0x36a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800455e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800456c:	2320      	movs	r3, #32
 800456e:	e004      	b.n	800457a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800457a:	429a      	cmp	r2, r3
 800457c:	d106      	bne.n	800458c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fa3c 	bl	8003a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2103      	movs	r1, #3
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fa20 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x3a8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2103      	movs	r1, #3
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fa15 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	f003 021f 	and.w	r2, r3, #31
 80045b6:	e017      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x3d8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2103      	movs	r1, #3
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fa0a 	bl	80039d8 <LL_ADC_GetOffsetChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045d2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80045d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80045da:	2320      	movs	r3, #32
 80045dc:	e003      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80045de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x3f0>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	e011      	b.n	8004624 <HAL_ADC_ConfigChannel+0x414>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800460e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004610:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800461c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004624:	429a      	cmp	r2, r3
 8004626:	d106      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	2103      	movs	r1, #3
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f9e7 	bl	8003a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fb44 	bl	8003cc8 <LL_ADC_IsEnabled>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8140 	bne.w	80048c8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6819      	ldr	r1, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	461a      	mov	r2, r3
 8004656:	f7ff faa3 	bl	8003ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4a8f      	ldr	r2, [pc, #572]	@ (800489c <HAL_ADC_ConfigChannel+0x68c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	f040 8131 	bne.w	80048c8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_ADC_ConfigChannel+0x47e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	3301      	adds	r3, #1
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2b09      	cmp	r3, #9
 8004684:	bf94      	ite	ls
 8004686:	2301      	movls	r3, #1
 8004688:	2300      	movhi	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e019      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x4b2>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800469c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800469e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80046a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e003      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80046aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d079      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x4d2>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	0e9b      	lsrs	r3, r3, #26
 80046d8:	3301      	adds	r3, #1
 80046da:	069b      	lsls	r3, r3, #26
 80046dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046e0:	e015      	b.n	800470e <HAL_ADC_ConfigChannel+0x4fe>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80046f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80046fa:	2320      	movs	r3, #32
 80046fc:	e003      	b.n	8004706 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80046fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	3301      	adds	r3, #1
 8004708:	069b      	lsls	r3, r3, #26
 800470a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_ADC_ConfigChannel+0x51e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	0e9b      	lsrs	r3, r3, #26
 8004720:	3301      	adds	r3, #1
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	e017      	b.n	800475e <HAL_ADC_ConfigChannel+0x54e>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800473c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800473e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e003      	b.n	8004752 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800474a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800474c:	fab3 f383 	clz	r3, r3
 8004750:	b2db      	uxtb	r3, r3
 8004752:	3301      	adds	r3, #1
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	ea42 0103 	orr.w	r1, r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x574>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	0e9b      	lsrs	r3, r3, #26
 8004774:	3301      	adds	r3, #1
 8004776:	f003 021f 	and.w	r2, r3, #31
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	051b      	lsls	r3, r3, #20
 8004782:	e018      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x5a6>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e003      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80047a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	f003 021f 	and.w	r2, r3, #31
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b6:	430b      	orrs	r3, r1
 80047b8:	e081      	b.n	80048be <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x5c6>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	0e9b      	lsrs	r3, r3, #26
 80047cc:	3301      	adds	r3, #1
 80047ce:	069b      	lsls	r3, r3, #26
 80047d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d4:	e015      	b.n	8004802 <HAL_ADC_ConfigChannel+0x5f2>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80047ee:	2320      	movs	r3, #32
 80047f0:	e003      	b.n	80047fa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	069b      	lsls	r3, r3, #26
 80047fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x612>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	0e9b      	lsrs	r3, r3, #26
 8004814:	3301      	adds	r3, #1
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	e017      	b.n	8004852 <HAL_ADC_ConfigChannel+0x642>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	61fb      	str	r3, [r7, #28]
  return result;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800483a:	2320      	movs	r3, #32
 800483c:	e003      	b.n	8004846 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	ea42 0103 	orr.w	r1, r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10d      	bne.n	800487e <HAL_ADC_ConfigChannel+0x66e>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0e9b      	lsrs	r3, r3, #26
 8004868:	3301      	adds	r3, #1
 800486a:	f003 021f 	and.w	r2, r3, #31
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	3b1e      	subs	r3, #30
 8004876:	051b      	lsls	r3, r3, #20
 8004878:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800487c:	e01e      	b.n	80048bc <HAL_ADC_ConfigChannel+0x6ac>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	613b      	str	r3, [r7, #16]
  return result;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004896:	2320      	movs	r3, #32
 8004898:	e006      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x698>
 800489a:	bf00      	nop
 800489c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	f003 021f 	and.w	r2, r3, #31
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	3b1e      	subs	r3, #30
 80048b6:	051b      	lsls	r3, r3, #20
 80048b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048bc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c2:	4619      	mov	r1, r3
 80048c4:	f7ff f941 	bl	8003b4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b3f      	ldr	r3, [pc, #252]	@ (80049cc <HAL_ADC_ConfigChannel+0x7bc>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d071      	beq.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048d4:	483e      	ldr	r0, [pc, #248]	@ (80049d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80048d6:	f7ff f84d 	bl	8003974 <LL_ADC_GetCommonPathInternalCh>
 80048da:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3c      	ldr	r2, [pc, #240]	@ (80049d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_ADC_ConfigChannel+0x6e2>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3a      	ldr	r2, [pc, #232]	@ (80049d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d127      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d121      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004906:	d157      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800490c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004910:	4619      	mov	r1, r3
 8004912:	482f      	ldr	r0, [pc, #188]	@ (80049d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004914:	f7ff f81b 	bl	800394e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004918:	4b30      	ldr	r3, [pc, #192]	@ (80049dc <HAL_ADC_ConfigChannel+0x7cc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	4a30      	ldr	r2, [pc, #192]	@ (80049e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	4613      	mov	r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004932:	e002      	b.n	800493a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f9      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004940:	e03a      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a27      	ldr	r2, [pc, #156]	@ (80049e4 <HAL_ADC_ConfigChannel+0x7d4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800494c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10d      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <HAL_ADC_ConfigChannel+0x7d8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02a      	beq.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496a:	4619      	mov	r1, r3
 800496c:	4818      	ldr	r0, [pc, #96]	@ (80049d0 <HAL_ADC_ConfigChannel+0x7c0>)
 800496e:	f7fe ffee 	bl	800394e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004972:	e021      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_ADC_ConfigChannel+0x7dc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d11c      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800497e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d011      	beq.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004998:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800499c:	4619      	mov	r1, r3
 800499e:	480c      	ldr	r0, [pc, #48]	@ (80049d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80049a0:	f7fe ffd5 	bl	800394e <LL_ADC_SetCommonPathInternalCh>
 80049a4:	e008      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	37d8      	adds	r7, #216	@ 0xd8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	80080000 	.word	0x80080000
 80049d0:	50000300 	.word	0x50000300
 80049d4:	c3210000 	.word	0xc3210000
 80049d8:	90c00010 	.word	0x90c00010
 80049dc:	20000000 	.word	0x20000000
 80049e0:	053e2d63 	.word	0x053e2d63
 80049e4:	c7520000 	.word	0xc7520000
 80049e8:	50000100 	.word	0x50000100
 80049ec:	cb840000 	.word	0xcb840000

080049f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff f961 	bl	8003cc8 <LL_ADC_IsEnabled>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d169      	bne.n	8004ae0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	4b36      	ldr	r3, [pc, #216]	@ (8004aec <ADC_Enable+0xfc>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1e:	f043 0210 	orr.w	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e055      	b.n	8004ae2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff f930 	bl	8003ca0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a40:	482b      	ldr	r0, [pc, #172]	@ (8004af0 <ADC_Enable+0x100>)
 8004a42:	f7fe ff97 	bl	8003974 <LL_ADC_GetCommonPathInternalCh>
 8004a46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d013      	beq.n	8004a78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a50:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <ADC_Enable+0x104>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	4a28      	ldr	r2, [pc, #160]	@ (8004af8 <ADC_Enable+0x108>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a6a:	e002      	b.n	8004a72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f9      	bne.n	8004a6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a78:	f7fe ff4a 	bl	8003910 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a7e:	e028      	b.n	8004ad2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff f91f 	bl	8003cc8 <LL_ADC_IsEnabled>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff f903 	bl	8003ca0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a9a:	f7fe ff39 	bl	8003910 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d914      	bls.n	8004ad2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d00d      	beq.n	8004ad2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	f043 0210 	orr.w	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e007      	b.n	8004ae2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d1cf      	bne.n	8004a80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	8000003f 	.word	0x8000003f
 8004af0:	50000300 	.word	0x50000300
 8004af4:	20000000 	.word	0x20000000
 8004af8:	053e2d63 	.word	0x053e2d63

08004afc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d14b      	bne.n	8004bae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d021      	beq.n	8004b74 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe ffc9 	bl	8003acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d032      	beq.n	8004ba6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12b      	bne.n	8004ba6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11f      	bne.n	8004ba6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b72:	e018      	b.n	8004ba6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d111      	bne.n	8004ba6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9e:	f043 0201 	orr.w	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff fb14 	bl	80041d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bac:	e00e      	b.n	8004bcc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7ff fb1e 	bl	80041fc <HAL_ADC_ErrorCallback>
}
 8004bc0:	e004      	b.n	8004bcc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fb00 	bl	80041e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0e:	f043 0204 	orr.w	r2, r3, #4
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff faf0 	bl	80041fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <LL_ADC_IsEnabled>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <LL_ADC_IsEnabled+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_ADC_IsEnabled+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <LL_ADC_REG_IsConversionOngoing>:
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d101      	bne.n	8004c62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b0a1      	sub	sp, #132	@ 0x84
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e08b      	b.n	8004da6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c96:	2300      	movs	r3, #0
 8004c98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ca6:	d102      	bne.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ca8:	4b41      	ldr	r3, [pc, #260]	@ (8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	e001      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e06a      	b.n	8004da6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ffb9 	bl	8004c4a <LL_ADC_REG_IsConversionOngoing>
 8004cd8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ffb3 	bl	8004c4a <LL_ADC_REG_IsConversionOngoing>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d14c      	bne.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d149      	bne.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cf0:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004cf2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d028      	beq.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d0e:	035b      	lsls	r3, r3, #13
 8004d10:	430b      	orrs	r3, r1
 8004d12:	431a      	orrs	r2, r3
 8004d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d1c:	f7ff ff82 	bl	8004c24 <LL_ADC_IsEnabled>
 8004d20:	4604      	mov	r4, r0
 8004d22:	4823      	ldr	r0, [pc, #140]	@ (8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d24:	f7ff ff7e 	bl	8004c24 <LL_ADC_IsEnabled>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4323      	orrs	r3, r4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d133      	bne.n	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d38:	f023 030f 	bic.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	6811      	ldr	r1, [r2, #0]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	431a      	orrs	r2, r3
 8004d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d4c:	e024      	b.n	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d58:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d5a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d5e:	f7ff ff61 	bl	8004c24 <LL_ADC_IsEnabled>
 8004d62:	4604      	mov	r4, r0
 8004d64:	4812      	ldr	r0, [pc, #72]	@ (8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d66:	f7ff ff5d 	bl	8004c24 <LL_ADC_IsEnabled>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4323      	orrs	r3, r4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d112      	bne.n	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d7a:	f023 030f 	bic.w	r3, r3, #15
 8004d7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d82:	e009      	b.n	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d96:	e000      	b.n	8004d9a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004da2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3784      	adds	r7, #132	@ 0x84
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	bf00      	nop
 8004db0:	50000100 	.word	0x50000100
 8004db4:	50000300 	.word	0x50000300

08004db8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e023      	b.n	8004e12 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f9ca 	bl	8001178 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e60 <__NVIC_SetPriorityGrouping+0x44>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e4e:	4a04      	ldr	r2, [pc, #16]	@ (8004e60 <__NVIC_SetPriorityGrouping+0x44>)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	60d3      	str	r3, [r2, #12]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	e000ed00 	.word	0xe000ed00

08004e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e68:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <__NVIC_GetPriorityGrouping+0x18>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	0a1b      	lsrs	r3, r3, #8
 8004e6e:	f003 0307 	and.w	r3, r3, #7
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	db0b      	blt.n	8004eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	f003 021f 	and.w	r2, r3, #31
 8004e98:	4907      	ldr	r1, [pc, #28]	@ (8004eb8 <__NVIC_EnableIRQ+0x38>)
 8004e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	e000e100 	.word	0xe000e100

08004ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	db0a      	blt.n	8004ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	490c      	ldr	r1, [pc, #48]	@ (8004f08 <__NVIC_SetPriority+0x4c>)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	0112      	lsls	r2, r2, #4
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	440b      	add	r3, r1
 8004ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee4:	e00a      	b.n	8004efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	4908      	ldr	r1, [pc, #32]	@ (8004f0c <__NVIC_SetPriority+0x50>)
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	3b04      	subs	r3, #4
 8004ef4:	0112      	lsls	r2, r2, #4
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	440b      	add	r3, r1
 8004efa:	761a      	strb	r2, [r3, #24]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	e000e100 	.word	0xe000e100
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	@ 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f1c3 0307 	rsb	r3, r3, #7
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	bf28      	it	cs
 8004f2e:	2304      	movcs	r3, #4
 8004f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d902      	bls.n	8004f40 <NVIC_EncodePriority+0x30>
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	3b03      	subs	r3, #3
 8004f3e:	e000      	b.n	8004f42 <NVIC_EncodePriority+0x32>
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	401a      	ands	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f58:	f04f 31ff 	mov.w	r1, #4294967295
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f62:	43d9      	mvns	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f68:	4313      	orrs	r3, r2
         );
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3724      	adds	r7, #36	@ 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ff4c 	bl	8004e1c <__NVIC_SetPriorityGrouping>
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f9a:	f7ff ff63 	bl	8004e64 <__NVIC_GetPriorityGrouping>
 8004f9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	f7ff ffb3 	bl	8004f10 <NVIC_EncodePriority>
 8004faa:	4602      	mov	r2, r0
 8004fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff82 	bl	8004ebc <__NVIC_SetPriority>
}
 8004fb8:	bf00      	nop
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff ff56 	bl	8004e80 <__NVIC_EnableIRQ>
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e08d      	b.n	800510a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b47      	ldr	r3, [pc, #284]	@ (8005114 <HAL_DMA_Init+0x138>)
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d80f      	bhi.n	800501a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b45      	ldr	r3, [pc, #276]	@ (8005118 <HAL_DMA_Init+0x13c>)
 8005002:	4413      	add	r3, r2
 8005004:	4a45      	ldr	r2, [pc, #276]	@ (800511c <HAL_DMA_Init+0x140>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	009a      	lsls	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a42      	ldr	r2, [pc, #264]	@ (8005120 <HAL_DMA_Init+0x144>)
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
 8005018:	e00e      	b.n	8005038 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <HAL_DMA_Init+0x148>)
 8005022:	4413      	add	r3, r2
 8005024:	4a3d      	ldr	r2, [pc, #244]	@ (800511c <HAL_DMA_Init+0x140>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	009a      	lsls	r2, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a3c      	ldr	r2, [pc, #240]	@ (8005128 <HAL_DMA_Init+0x14c>)
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800504e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005052:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800505c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9b6 	bl	80053fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005098:	d102      	bne.n	80050a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_DMA_Init+0x104>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d80c      	bhi.n	80050e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f9d6 	bl	8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	e008      	b.n	80050f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40020407 	.word	0x40020407
 8005118:	bffdfff8 	.word	0xbffdfff8
 800511c:	cccccccd 	.word	0xcccccccd
 8005120:	40020000 	.word	0x40020000
 8005124:	bffdfbf8 	.word	0xbffdfbf8
 8005128:	40020400 	.word	0x40020400

0800512c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_DMA_Start_IT+0x20>
 8005148:	2302      	movs	r3, #2
 800514a:	e066      	b.n	800521a <HAL_DMA_Start_IT+0xee>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	d155      	bne.n	800520c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f8fb 	bl	8005380 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 020e 	orr.w	r2, r2, #14
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e00f      	b.n	80051c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0204 	bic.w	r2, r2, #4
 80051b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 020a 	orr.w	r2, r2, #10
 80051c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e005      	b.n	8005218 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005214:	2302      	movs	r3, #2
 8005216:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2204      	movs	r2, #4
 8005244:	409a      	lsls	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d026      	beq.n	800529c <HAL_DMA_IRQHandler+0x7a>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d021      	beq.n	800529c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0204 	bic.w	r2, r2, #4
 8005274:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f003 021f 	and.w	r2, r3, #31
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	2104      	movs	r1, #4
 8005284:	fa01 f202 	lsl.w	r2, r1, r2
 8005288:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528e:	2b00      	cmp	r3, #0
 8005290:	d071      	beq.n	8005376 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800529a:	e06c      	b.n	8005376 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2202      	movs	r2, #2
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02e      	beq.n	800530e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d029      	beq.n	800530e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 020a 	bic.w	r2, r2, #10
 80052d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	f003 021f 	and.w	r2, r3, #31
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	2102      	movs	r1, #2
 80052ee:	fa01 f202 	lsl.w	r2, r1, r2
 80052f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d038      	beq.n	8005376 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800530c:	e033      	b.n	8005376 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2208      	movs	r2, #8
 8005318:	409a      	lsls	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02a      	beq.n	8005378 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d025      	beq.n	8005378 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	f003 021f 	and.w	r2, r3, #31
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	2101      	movs	r1, #1
 800534a:	fa01 f202 	lsl.w	r2, r1, r2
 800534e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005376:	bf00      	nop
 8005378:	bf00      	nop
}
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005396:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f003 021f 	and.w	r2, r3, #31
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f202 	lsl.w	r2, r1, r2
 80053bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d108      	bne.n	80053e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053de:	e007      	b.n	80053f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	4b16      	ldr	r3, [pc, #88]	@ (8005464 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d802      	bhi.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005410:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e001      	b.n	800541a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005416:	4b15      	ldr	r3, [pc, #84]	@ (800546c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005418:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	3b08      	subs	r3, #8
 8005426:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005434:	089b      	lsrs	r3, r3, #2
 8005436:	009a      	lsls	r2, r3, #2
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005446:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2201      	movs	r2, #1
 8005450:	409a      	lsls	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40020407 	.word	0x40020407
 8005468:	40020800 	.word	0x40020800
 800546c:	40020820 	.word	0x40020820
 8005470:	cccccccd 	.word	0xcccccccd
 8005474:	40020880 	.word	0x40020880

08005478 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a08      	ldr	r2, [pc, #32]	@ (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800549a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3b01      	subs	r3, #1
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	2201      	movs	r2, #1
 80054a6:	409a      	lsls	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	1000823f 	.word	0x1000823f
 80054bc:	40020940 	.word	0x40020940

080054c0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	460b      	mov	r3, r1
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80054d2:	7afb      	ldrb	r3, [r7, #11]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d103      	bne.n	80054e0 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	605a      	str	r2, [r3, #4]
      break;
 80054de:	e005      	b.n	80054ec <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ea:	bf00      	nop
  }

  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e003      	b.n	8005516 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	2201      	movs	r2, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <HAL_EXTI_IRQHandler+0x5c>)
 800554e:	4413      	add	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4013      	ands	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4798      	blx	r3
    }
  }
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40010414 	.word	0x40010414

08005584 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e147      	b.n	8005826 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fe74 	bl	8001298 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0210 	bic.w	r2, r2, #16
 80055be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055c0:	f7fe f9a6 	bl	8003910 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055c6:	e012      	b.n	80055ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055c8:	f7fe f9a2 	bl	8003910 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b0a      	cmp	r3, #10
 80055d4:	d90b      	bls.n	80055ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055da:	f043 0201 	orr.w	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2203      	movs	r2, #3
 80055e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e11b      	b.n	8005826 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d0e5      	beq.n	80055c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800560c:	f7fe f980 	bl	8003910 <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005612:	e012      	b.n	800563a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005614:	f7fe f97c 	bl	8003910 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b0a      	cmp	r3, #10
 8005620:	d90b      	bls.n	800563a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005626:	f043 0201 	orr.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2203      	movs	r2, #3
 8005632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e0f5      	b.n	8005826 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0e5      	beq.n	8005614 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0202 	orr.w	r2, r2, #2
 8005656:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a74      	ldr	r2, [pc, #464]	@ (8005830 <HAL_FDCAN_Init+0x2ac>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d103      	bne.n	800566a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005662:	4a74      	ldr	r2, [pc, #464]	@ (8005834 <HAL_FDCAN_Init+0x2b0>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7c1b      	ldrb	r3, [r3, #16]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d108      	bne.n	8005684 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	e007      	b.n	8005694 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005692:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	7c5b      	ldrb	r3, [r3, #17]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d108      	bne.n	80056ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056aa:	619a      	str	r2, [r3, #24]
 80056ac:	e007      	b.n	80056be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7c9b      	ldrb	r3, [r3, #18]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d108      	bne.n	80056d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056d4:	619a      	str	r2, [r3, #24]
 80056d6:	e007      	b.n	80056e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800570c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0210 	bic.w	r2, r2, #16
 800571c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d108      	bne.n	8005738 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0204 	orr.w	r2, r2, #4
 8005734:	619a      	str	r2, [r3, #24]
 8005736:	e02c      	b.n	8005792 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d028      	beq.n	8005792 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d01c      	beq.n	8005782 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005756:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0210 	orr.w	r2, r2, #16
 8005766:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d110      	bne.n	8005792 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0220 	orr.w	r2, r2, #32
 800577e:	619a      	str	r2, [r3, #24]
 8005780:	e007      	b.n	8005792 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0220 	orr.w	r2, r2, #32
 8005790:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	3b01      	subs	r3, #1
 8005798:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	3b01      	subs	r3, #1
 80057a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057c6:	d115      	bne.n	80057f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	3b01      	subs	r3, #1
 80057d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	3b01      	subs	r3, #1
 80057de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	3b01      	subs	r3, #1
 80057ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb14 	bl	8005e38 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40006400 	.word	0x40006400
 8005834:	40006500 	.word	0x40006500

08005838 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005838:	b480      	push	{r7}
 800583a:	b08b      	sub	sp, #44	@ 0x2c
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005850:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005852:	7efb      	ldrb	r3, [r7, #27]
 8005854:	2b02      	cmp	r3, #2
 8005856:	f040 80e8 	bne.w	8005a2a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b40      	cmp	r3, #64	@ 0x40
 800585e:	d137      	bne.n	80058d0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005874:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0db      	b.n	8005a38 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800588c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005890:	d10a      	bne.n	80058a8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800589e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a2:	d101      	bne.n	80058a8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80058a4:	2301      	movs	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	4613      	mov	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	440b      	add	r3, r1
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ce:	e036      	b.n	800593e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0a3      	b.n	8005a38 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005900:	d10a      	bne.n	8005918 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800590a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005912:	d101      	bne.n	8005918 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005914:	2301      	movs	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	0c9b      	lsrs	r3, r3, #18
 8005958:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e005      	b.n	800596e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	3304      	adds	r3, #4
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f003 020f 	and.w	r2, r3, #15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	0e1b      	lsrs	r3, r3, #24
 80059c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	0fda      	lsrs	r2, r3, #31
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	3304      	adds	r3, #4
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80059de:	2300      	movs	r3, #0
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	e00a      	b.n	80059fa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	441a      	add	r2, r3
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	440b      	add	r3, r1
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	3301      	adds	r3, #1
 80059f8:	623b      	str	r3, [r7, #32]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	4a11      	ldr	r2, [pc, #68]	@ (8005a44 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005a00:	5cd3      	ldrb	r3, [r2, r3]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d3ec      	bcc.n	80059e4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b40      	cmp	r3, #64	@ 0x40
 8005a0e:	d105      	bne.n	8005a1c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005a1a:	e004      	b.n	8005a26 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e006      	b.n	8005a38 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a2e:	f043 0208 	orr.w	r2, r3, #8
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
  }
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	372c      	adds	r7, #44	@ 0x2c
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	0800c948 	.word	0x0800c948

08005a48 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a58:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d16e      	bne.n	8005b3e <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e065      	b.n	8005b4c <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	0c9b      	lsrs	r3, r3, #18
 8005ab6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e005      	b.n	8005acc <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	f003 020f 	and.w	r2, r3, #15
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	0e1a      	lsrs	r2, r3, #24
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e006      	b.n	8005b4c <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b42:	f043 0208 	orr.w	r2, r3, #8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
  }
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	@ 0x30
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b74:	4013      	ands	r3, r2
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bae:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005bb2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005bca:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	099b      	lsrs	r3, r3, #6
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00c      	beq.n	8005c0e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2240      	movs	r2, #64	@ 0x40
 8005c06:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f901 	bl	8005e10 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01a      	beq.n	8005c50 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d014      	beq.n	8005c50 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c2e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005c48:	6939      	ldr	r1, [r7, #16]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8c1 	bl	8005dd2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c5c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fc f927 	bl	8001eb4 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c72:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc f942 	bl	8001f00 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005c8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fc f9a3 	bl	8001fd8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	0a5b      	lsrs	r3, r3, #9
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	0a5b      	lsrs	r3, r3, #9
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f882 	bl	8005dbe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	09db      	lsrs	r3, r3, #7
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d019      	beq.n	8005cfa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	09db      	lsrs	r3, r3, #7
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d013      	beq.n	8005cfa <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005cda:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2280      	movs	r2, #128	@ 0x80
 8005cf0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fc f8f8 	bl	8001eea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	0b5b      	lsrs	r3, r3, #13
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	0b5b      	lsrs	r3, r3, #13
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f863 	bl	8005de8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	0bdb      	lsrs	r3, r3, #15
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	0bdb      	lsrs	r3, r3, #15
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005d42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f859 	bl	8005dfc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	0b9b      	lsrs	r3, r3, #14
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d010      	beq.n	8005d78 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	0b9b      	lsrs	r3, r3, #14
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005d6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005d86:	69f9      	ldr	r1, [r7, #28]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fc f877 	bl	8001e7c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f837 	bl	8005e24 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005db6:	bf00      	nop
 8005db8:	3730      	adds	r7, #48	@ 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005e40:	4b27      	ldr	r3, [pc, #156]	@ (8005ee0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005e42:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e52:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5a:	041a      	lsls	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e78:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e80:	061a      	lsls	r2, r3, #24
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e005      	b.n	8005ec6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d3f3      	bcc.n	8005eba <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	4000a400 	.word	0x4000a400

08005ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ef2:	e15a      	b.n	80061aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	2101      	movs	r1, #1
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 814c 	beq.w	80061a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d005      	beq.n	8005f24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d130      	bne.n	8005f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	2203      	movs	r2, #3
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4013      	ands	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	091b      	lsrs	r3, r3, #4
 8005f70:	f003 0201 	and.w	r2, r3, #1
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d017      	beq.n	8005fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d123      	bne.n	8006016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	08da      	lsrs	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3208      	adds	r2, #8
 8005fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	220f      	movs	r2, #15
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	08da      	lsrs	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3208      	adds	r2, #8
 8006010:	6939      	ldr	r1, [r7, #16]
 8006012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	2203      	movs	r2, #3
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 0203 	and.w	r2, r3, #3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80a6 	beq.w	80061a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006058:	4b5b      	ldr	r3, [pc, #364]	@ (80061c8 <HAL_GPIO_Init+0x2e4>)
 800605a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605c:	4a5a      	ldr	r2, [pc, #360]	@ (80061c8 <HAL_GPIO_Init+0x2e4>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6613      	str	r3, [r2, #96]	@ 0x60
 8006064:	4b58      	ldr	r3, [pc, #352]	@ (80061c8 <HAL_GPIO_Init+0x2e4>)
 8006066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006070:	4a56      	ldr	r2, [pc, #344]	@ (80061cc <HAL_GPIO_Init+0x2e8>)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	3302      	adds	r3, #2
 8006078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	220f      	movs	r2, #15
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	43db      	mvns	r3, r3
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4013      	ands	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800609a:	d01f      	beq.n	80060dc <HAL_GPIO_Init+0x1f8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a4c      	ldr	r2, [pc, #304]	@ (80061d0 <HAL_GPIO_Init+0x2ec>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d019      	beq.n	80060d8 <HAL_GPIO_Init+0x1f4>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a4b      	ldr	r2, [pc, #300]	@ (80061d4 <HAL_GPIO_Init+0x2f0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_GPIO_Init+0x1f0>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a4a      	ldr	r2, [pc, #296]	@ (80061d8 <HAL_GPIO_Init+0x2f4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00d      	beq.n	80060d0 <HAL_GPIO_Init+0x1ec>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a49      	ldr	r2, [pc, #292]	@ (80061dc <HAL_GPIO_Init+0x2f8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <HAL_GPIO_Init+0x1e8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a48      	ldr	r2, [pc, #288]	@ (80061e0 <HAL_GPIO_Init+0x2fc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d101      	bne.n	80060c8 <HAL_GPIO_Init+0x1e4>
 80060c4:	2305      	movs	r3, #5
 80060c6:	e00a      	b.n	80060de <HAL_GPIO_Init+0x1fa>
 80060c8:	2306      	movs	r3, #6
 80060ca:	e008      	b.n	80060de <HAL_GPIO_Init+0x1fa>
 80060cc:	2304      	movs	r3, #4
 80060ce:	e006      	b.n	80060de <HAL_GPIO_Init+0x1fa>
 80060d0:	2303      	movs	r3, #3
 80060d2:	e004      	b.n	80060de <HAL_GPIO_Init+0x1fa>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e002      	b.n	80060de <HAL_GPIO_Init+0x1fa>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_GPIO_Init+0x1fa>
 80060dc:	2300      	movs	r3, #0
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	f002 0203 	and.w	r2, r2, #3
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	4093      	lsls	r3, r2
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ee:	4937      	ldr	r1, [pc, #220]	@ (80061cc <HAL_GPIO_Init+0x2e8>)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	3302      	adds	r3, #2
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060fc:	4b39      	ldr	r3, [pc, #228]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006120:	4a30      	ldr	r2, [pc, #192]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006126:	4b2f      	ldr	r3, [pc, #188]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43db      	mvns	r3, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800614a:	4a26      	ldr	r2, [pc, #152]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006150:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006174:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800617a:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	43db      	mvns	r3, r3
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4013      	ands	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800619e:	4a11      	ldr	r2, [pc, #68]	@ (80061e4 <HAL_GPIO_Init+0x300>)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3301      	adds	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f47f ae9d 	bne.w	8005ef4 <HAL_GPIO_Init+0x10>
  }
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40010000 	.word	0x40010000
 80061d0:	48000400 	.word	0x48000400
 80061d4:	48000800 	.word	0x48000800
 80061d8:	48000c00 	.word	0x48000c00
 80061dc:	48001000 	.word	0x48001000
 80061e0:	48001400 	.word	0x48001400
 80061e4:	40010400 	.word	0x40010400

080061e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	807b      	strh	r3, [r7, #2]
 80061f4:	4613      	mov	r3, r2
 80061f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061f8:	787b      	ldrb	r3, [r7, #1]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006204:	e002      	b.n	800620c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006206:	887a      	ldrh	r2, [r7, #2]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006222:	4b08      	ldr	r3, [pc, #32]	@ (8006244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d006      	beq.n	800623c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800622e:	4a05      	ldr	r2, [pc, #20]	@ (8006244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	4618      	mov	r0, r3
 8006238:	f7fb ff38 	bl	80020ac <HAL_GPIO_EXTI_Callback>
  }
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40010400 	.word	0x40010400

08006248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e08d      	b.n	8006376 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb f916 	bl	80014a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2224      	movs	r2, #36	@ 0x24
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0201 	bic.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006298:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	e006      	b.n	80062d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80062ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d108      	bne.n	80062ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	e007      	b.n	80062fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800630c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800631c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69d9      	ldr	r1, [r3, #28]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b20      	cmp	r3, #32
 8006392:	d138      	bne.n	8006406 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800639e:	2302      	movs	r3, #2
 80063a0:	e032      	b.n	8006408 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2224      	movs	r2, #36	@ 0x24
 80063ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6819      	ldr	r1, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0201 	orr.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b20      	cmp	r3, #32
 8006428:	d139      	bne.n	800649e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006434:	2302      	movs	r3, #2
 8006436:	e033      	b.n	80064a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2224      	movs	r2, #36	@ 0x24
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006466:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e000      	b.n	80064a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800649e:	2302      	movs	r3, #2
  }
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d141      	bne.n	800653e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064ba:	4b4b      	ldr	r3, [pc, #300]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c6:	d131      	bne.n	800652c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064c8:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ce:	4a46      	ldr	r2, [pc, #280]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064d8:	4b43      	ldr	r3, [pc, #268]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064e0:	4a41      	ldr	r2, [pc, #260]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064e8:	4b40      	ldr	r3, [pc, #256]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2232      	movs	r2, #50	@ 0x32
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	4a3f      	ldr	r2, [pc, #252]	@ (80065f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	0c9b      	lsrs	r3, r3, #18
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064fe:	e002      	b.n	8006506 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b01      	subs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006506:	4b38      	ldr	r3, [pc, #224]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006512:	d102      	bne.n	800651a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f2      	bne.n	8006500 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800651a:	4b33      	ldr	r3, [pc, #204]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006526:	d158      	bne.n	80065da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e057      	b.n	80065dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800652c:	4b2e      	ldr	r3, [pc, #184]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006532:	4a2d      	ldr	r2, [pc, #180]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800653c:	e04d      	b.n	80065da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006544:	d141      	bne.n	80065ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006546:	4b28      	ldr	r3, [pc, #160]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006552:	d131      	bne.n	80065b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006554:	4b24      	ldr	r3, [pc, #144]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655a:	4a23      	ldr	r2, [pc, #140]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006564:	4b20      	ldr	r3, [pc, #128]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800656c:	4a1e      	ldr	r2, [pc, #120]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800656e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006574:	4b1d      	ldr	r3, [pc, #116]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2232      	movs	r2, #50	@ 0x32
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	0c9b      	lsrs	r3, r3, #18
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800658a:	e002      	b.n	8006592 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3b01      	subs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006592:	4b15      	ldr	r3, [pc, #84]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659e:	d102      	bne.n	80065a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f2      	bne.n	800658c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065a6:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b2:	d112      	bne.n	80065da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e011      	b.n	80065dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065b8:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065be:	4a0a      	ldr	r2, [pc, #40]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065c8:	e007      	b.n	80065da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065ca:	4b07      	ldr	r3, [pc, #28]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065d2:	4a05      	ldr	r2, [pc, #20]	@ (80065e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40007000 	.word	0x40007000
 80065ec:	20000000 	.word	0x20000000
 80065f0:	431bde83 	.word	0x431bde83

080065f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80065f8:	4b05      	ldr	r3, [pc, #20]	@ (8006610 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	4a04      	ldr	r2, [pc, #16]	@ (8006610 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006602:	6093      	str	r3, [r2, #8]
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40007000 	.word	0x40007000

08006614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e2fe      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d075      	beq.n	800671e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006632:	4b97      	ldr	r3, [pc, #604]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800663c:	4b94      	ldr	r3, [pc, #592]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d102      	bne.n	8006652 <HAL_RCC_OscConfig+0x3e>
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b03      	cmp	r3, #3
 8006650:	d002      	beq.n	8006658 <HAL_RCC_OscConfig+0x44>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d10b      	bne.n	8006670 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	4b8d      	ldr	r3, [pc, #564]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d05b      	beq.n	800671c <HAL_RCC_OscConfig+0x108>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d157      	bne.n	800671c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e2d9      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006678:	d106      	bne.n	8006688 <HAL_RCC_OscConfig+0x74>
 800667a:	4b85      	ldr	r3, [pc, #532]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a84      	ldr	r2, [pc, #528]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e01d      	b.n	80066c4 <HAL_RCC_OscConfig+0xb0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006690:	d10c      	bne.n	80066ac <HAL_RCC_OscConfig+0x98>
 8006692:	4b7f      	ldr	r3, [pc, #508]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a7e      	ldr	r2, [pc, #504]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4b7c      	ldr	r3, [pc, #496]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a7b      	ldr	r2, [pc, #492]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	e00b      	b.n	80066c4 <HAL_RCC_OscConfig+0xb0>
 80066ac:	4b78      	ldr	r3, [pc, #480]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a77      	ldr	r2, [pc, #476]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4b75      	ldr	r3, [pc, #468]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a74      	ldr	r2, [pc, #464]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fd f920 	bl	8003910 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fd f91c 	bl	8003910 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	@ 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e29e      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0xc0>
 80066f2:	e014      	b.n	800671e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fd f90c 	bl	8003910 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fd f908 	bl	8003910 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	@ 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e28a      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800670e:	4b60      	ldr	r3, [pc, #384]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0xe8>
 800671a:	e000      	b.n	800671e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800671c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d075      	beq.n	8006816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672a:	4b59      	ldr	r3, [pc, #356]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006734:	4b56      	ldr	r3, [pc, #344]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b0c      	cmp	r3, #12
 8006742:	d102      	bne.n	800674a <HAL_RCC_OscConfig+0x136>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d002      	beq.n	8006750 <HAL_RCC_OscConfig+0x13c>
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d11f      	bne.n	8006790 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006750:	4b4f      	ldr	r3, [pc, #316]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_OscConfig+0x154>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e25d      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006768:	4b49      	ldr	r3, [pc, #292]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	4946      	ldr	r1, [pc, #280]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006778:	4313      	orrs	r3, r2
 800677a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800677c:	4b45      	ldr	r3, [pc, #276]	@ (8006894 <HAL_RCC_OscConfig+0x280>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f7fa ffd3 	bl	800172c <HAL_InitTick>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d043      	beq.n	8006814 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e249      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d023      	beq.n	80067e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006798:	4b3d      	ldr	r3, [pc, #244]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a3c      	ldr	r2, [pc, #240]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800679e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fd f8b4 	bl	8003910 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ac:	f7fd f8b0 	bl	8003910 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e232      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067be:	4b34      	ldr	r3, [pc, #208]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ca:	4b31      	ldr	r3, [pc, #196]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	061b      	lsls	r3, r3, #24
 80067d8:	492d      	ldr	r1, [pc, #180]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	604b      	str	r3, [r1, #4]
 80067de:	e01a      	b.n	8006816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 80067e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fd f890 	bl	8003910 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f4:	f7fd f88c 	bl	8003910 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e20e      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006806:	4b22      	ldr	r3, [pc, #136]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0x1e0>
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006814:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d041      	beq.n	80068a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01c      	beq.n	8006864 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800682a:	4b19      	ldr	r3, [pc, #100]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683a:	f7fd f869 	bl	8003910 <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006842:	f7fd f865 	bl	8003910 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e1e7      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006854:	4b0e      	ldr	r3, [pc, #56]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0ef      	beq.n	8006842 <HAL_RCC_OscConfig+0x22e>
 8006862:	e020      	b.n	80068a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006864:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800686a:	4a09      	ldr	r2, [pc, #36]	@ (8006890 <HAL_RCC_OscConfig+0x27c>)
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fd f84c 	bl	8003910 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800687a:	e00d      	b.n	8006898 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687c:	f7fd f848 	bl	8003910 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d906      	bls.n	8006898 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e1ca      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
 800688e:	bf00      	nop
 8006890:	40021000 	.word	0x40021000
 8006894:	20001248 	.word	0x20001248
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006898:	4b8c      	ldr	r3, [pc, #560]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 800689a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1ea      	bne.n	800687c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80a6 	beq.w	8006a00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b4:	2300      	movs	r3, #0
 80068b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068b8:	4b84      	ldr	r3, [pc, #528]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_OscConfig+0x2b4>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_RCC_OscConfig+0x2b6>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80068d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80068d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068da:	4b7c      	ldr	r3, [pc, #496]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80068dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068e6:	2301      	movs	r3, #1
 80068e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ea:	4b79      	ldr	r3, [pc, #484]	@ (8006ad0 <HAL_RCC_OscConfig+0x4bc>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d118      	bne.n	8006928 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068f6:	4b76      	ldr	r3, [pc, #472]	@ (8006ad0 <HAL_RCC_OscConfig+0x4bc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a75      	ldr	r2, [pc, #468]	@ (8006ad0 <HAL_RCC_OscConfig+0x4bc>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006902:	f7fd f805 	bl	8003910 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690a:	f7fd f801 	bl	8003910 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e183      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800691c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad0 <HAL_RCC_OscConfig+0x4bc>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d108      	bne.n	8006942 <HAL_RCC_OscConfig+0x32e>
 8006930:	4b66      	ldr	r3, [pc, #408]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006936:	4a65      	ldr	r2, [pc, #404]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006940:	e024      	b.n	800698c <HAL_RCC_OscConfig+0x378>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b05      	cmp	r3, #5
 8006948:	d110      	bne.n	800696c <HAL_RCC_OscConfig+0x358>
 800694a:	4b60      	ldr	r3, [pc, #384]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006950:	4a5e      	ldr	r2, [pc, #376]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006952:	f043 0304 	orr.w	r3, r3, #4
 8006956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800695a:	4b5c      	ldr	r3, [pc, #368]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006960:	4a5a      	ldr	r2, [pc, #360]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800696a:	e00f      	b.n	800698c <HAL_RCC_OscConfig+0x378>
 800696c:	4b57      	ldr	r3, [pc, #348]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006972:	4a56      	ldr	r2, [pc, #344]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800697c:	4b53      	ldr	r3, [pc, #332]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	4a52      	ldr	r2, [pc, #328]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006984:	f023 0304 	bic.w	r3, r3, #4
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d016      	beq.n	80069c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7fc ffbc 	bl	8003910 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7fc ffb8 	bl	8003910 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e138      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b2:	4b46      	ldr	r3, [pc, #280]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0ed      	beq.n	800699c <HAL_RCC_OscConfig+0x388>
 80069c0:	e015      	b.n	80069ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c2:	f7fc ffa5 	bl	8003910 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069c8:	e00a      	b.n	80069e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fc ffa1 	bl	8003910 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e121      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069e0:	4b3a      	ldr	r3, [pc, #232]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ed      	bne.n	80069ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b35      	ldr	r3, [pc, #212]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80069f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f8:	4a34      	ldr	r2, [pc, #208]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d03c      	beq.n	8006a86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01c      	beq.n	8006a4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a14:	4b2d      	ldr	r3, [pc, #180]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a1c:	f043 0301 	orr.w	r3, r3, #1
 8006a20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a24:	f7fc ff74 	bl	8003910 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a2c:	f7fc ff70 	bl	8003910 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0f2      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a3e:	4b23      	ldr	r3, [pc, #140]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0ef      	beq.n	8006a2c <HAL_RCC_OscConfig+0x418>
 8006a4c:	e01b      	b.n	8006a86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a54:	4a1d      	ldr	r2, [pc, #116]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5e:	f7fc ff57 	bl	8003910 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a66:	f7fc ff53 	bl	8003910 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e0d5      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a78:	4b14      	ldr	r3, [pc, #80]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ef      	bne.n	8006a66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80c9 	beq.w	8006c22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a90:	4b0e      	ldr	r3, [pc, #56]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 030c 	and.w	r3, r3, #12
 8006a98:	2b0c      	cmp	r3, #12
 8006a9a:	f000 8083 	beq.w	8006ba4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d15e      	bne.n	8006b64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa6:	4b09      	ldr	r3, [pc, #36]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a08      	ldr	r2, [pc, #32]	@ (8006acc <HAL_RCC_OscConfig+0x4b8>)
 8006aac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fc ff2d 	bl	8003910 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ab8:	e00c      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aba:	f7fc ff29 	bl	8003910 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d905      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0ab      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad4:	4b55      	ldr	r3, [pc, #340]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1ec      	bne.n	8006aba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ae0:	4b52      	ldr	r3, [pc, #328]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	4b52      	ldr	r3, [pc, #328]	@ (8006c30 <HAL_RCC_OscConfig+0x61c>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6a11      	ldr	r1, [r2, #32]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006af0:	3a01      	subs	r2, #1
 8006af2:	0112      	lsls	r2, r2, #4
 8006af4:	4311      	orrs	r1, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006afa:	0212      	lsls	r2, r2, #8
 8006afc:	4311      	orrs	r1, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b02:	0852      	lsrs	r2, r2, #1
 8006b04:	3a01      	subs	r2, #1
 8006b06:	0552      	lsls	r2, r2, #21
 8006b08:	4311      	orrs	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b0e:	0852      	lsrs	r2, r2, #1
 8006b10:	3a01      	subs	r2, #1
 8006b12:	0652      	lsls	r2, r2, #25
 8006b14:	4311      	orrs	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b1a:	06d2      	lsls	r2, r2, #27
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	4943      	ldr	r1, [pc, #268]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b24:	4b41      	ldr	r3, [pc, #260]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a40      	ldr	r2, [pc, #256]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b30:	4b3e      	ldr	r3, [pc, #248]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a3d      	ldr	r2, [pc, #244]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fc fee8 	bl	8003910 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b44:	f7fc fee4 	bl	8003910 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e066      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b56:	4b35      	ldr	r3, [pc, #212]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x530>
 8006b62:	e05e      	b.n	8006c22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b64:	4b31      	ldr	r3, [pc, #196]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a30      	ldr	r2, [pc, #192]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fc fece 	bl	8003910 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b78:	f7fc feca 	bl	8003910 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e04c      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b8a:	4b28      	ldr	r3, [pc, #160]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b96:	4b25      	ldr	r3, [pc, #148]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	4924      	ldr	r1, [pc, #144]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006b9c:	4b25      	ldr	r3, [pc, #148]	@ (8006c34 <HAL_RCC_OscConfig+0x620>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	60cb      	str	r3, [r1, #12]
 8006ba2:	e03e      	b.n	8006c22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e039      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c2c <HAL_RCC_OscConfig+0x618>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0203 	and.w	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d12c      	bne.n	8006c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d123      	bne.n	8006c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d11b      	bne.n	8006c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d113      	bne.n	8006c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	3b01      	subs	r3, #1
 8006c04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d109      	bne.n	8006c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	3b01      	subs	r3, #1
 8006c18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d001      	beq.n	8006c22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	019f800c 	.word	0x019f800c
 8006c34:	feeefffc 	.word	0xfeeefffc

08006c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e11e      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c50:	4b91      	ldr	r3, [pc, #580]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d910      	bls.n	8006c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5e:	4b8e      	ldr	r3, [pc, #568]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f023 020f 	bic.w	r2, r3, #15
 8006c66:	498c      	ldr	r1, [pc, #560]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6e:	4b8a      	ldr	r3, [pc, #552]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e106      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d073      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d129      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c94:	4b81      	ldr	r3, [pc, #516]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0f4      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ca4:	f000 f9d0 	bl	8007048 <RCC_GetSysClockFreqFromPLLSource>
 8006ca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea0 <HAL_RCC_ClockConfig+0x268>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d93f      	bls.n	8006d32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d033      	beq.n	8006d32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d12f      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cd2:	4b72      	ldr	r3, [pc, #456]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cda:	4a70      	ldr	r2, [pc, #448]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e024      	b.n	8006d32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d107      	bne.n	8006d00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d109      	bne.n	8006d10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0c6      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d00:	4b66      	ldr	r3, [pc, #408]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0be      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d10:	f000 f8ce 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8006d14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4a61      	ldr	r2, [pc, #388]	@ (8006ea0 <HAL_RCC_ClockConfig+0x268>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d909      	bls.n	8006d32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d26:	4a5d      	ldr	r2, [pc, #372]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d2e:	2380      	movs	r3, #128	@ 0x80
 8006d30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d32:	4b5a      	ldr	r3, [pc, #360]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f023 0203 	bic.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4957      	ldr	r1, [pc, #348]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d44:	f7fc fde4 	bl	8003910 <HAL_GetTick>
 8006d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d4c:	f7fc fde0 	bl	8003910 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e095      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d62:	4b4e      	ldr	r3, [pc, #312]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 020c 	and.w	r2, r3, #12
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d1eb      	bne.n	8006d4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d023      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d8c:	4b43      	ldr	r3, [pc, #268]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	4a42      	ldr	r2, [pc, #264]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006d92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006da4:	4b3d      	ldr	r3, [pc, #244]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006dac:	4a3b      	ldr	r2, [pc, #236]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006dae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db4:	4b39      	ldr	r3, [pc, #228]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4936      	ldr	r1, [pc, #216]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	608b      	str	r3, [r1, #8]
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b80      	cmp	r3, #128	@ 0x80
 8006dcc:	d105      	bne.n	8006dda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006dce:	4b33      	ldr	r3, [pc, #204]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	4a32      	ldr	r2, [pc, #200]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dda:	4b2f      	ldr	r3, [pc, #188]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d21d      	bcs.n	8006e24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f023 020f 	bic.w	r2, r3, #15
 8006df0:	4929      	ldr	r1, [pc, #164]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006df8:	f7fc fd8a 	bl	8003910 <HAL_GetTick>
 8006dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	e00a      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e00:	f7fc fd86 	bl	8003910 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e03b      	b.n	8006e8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b20      	ldr	r3, [pc, #128]	@ (8006e98 <HAL_RCC_ClockConfig+0x260>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d1ed      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e30:	4b1a      	ldr	r3, [pc, #104]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4917      	ldr	r1, [pc, #92]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e4e:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	490f      	ldr	r1, [pc, #60]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e62:	f000 f825 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <HAL_RCC_ClockConfig+0x264>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	490c      	ldr	r1, [pc, #48]	@ (8006ea4 <HAL_RCC_ClockConfig+0x26c>)
 8006e74:	5ccb      	ldrb	r3, [r1, r3]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea8 <HAL_RCC_ClockConfig+0x270>)
 8006e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006e82:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <HAL_RCC_ClockConfig+0x274>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fa fc50 	bl	800172c <HAL_InitTick>
 8006e8c:	4603      	mov	r3, r0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40022000 	.word	0x40022000
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	04c4b400 	.word	0x04c4b400
 8006ea4:	0800c91c 	.word	0x0800c91c
 8006ea8:	20000000 	.word	0x20000000
 8006eac:	20001248 	.word	0x20001248

08006eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d102      	bne.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	e047      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ec8:	4b27      	ldr	r3, [pc, #156]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d102      	bne.n	8006eda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ed4:	4b26      	ldr	r3, [pc, #152]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	e03e      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006eda:	4b23      	ldr	r3, [pc, #140]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
 8006ee2:	2b0c      	cmp	r3, #12
 8006ee4:	d136      	bne.n	8006f54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ee6:	4b20      	ldr	r3, [pc, #128]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	091b      	lsrs	r3, r3, #4
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	3301      	adds	r3, #1
 8006efc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f04:	4a1a      	ldr	r2, [pc, #104]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	4a16      	ldr	r2, [pc, #88]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f0e:	68d2      	ldr	r2, [r2, #12]
 8006f10:	0a12      	lsrs	r2, r2, #8
 8006f12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	617b      	str	r3, [r7, #20]
      break;
 8006f1c:	e00c      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f1e:	4a13      	ldr	r2, [pc, #76]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	4a10      	ldr	r2, [pc, #64]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f28:	68d2      	ldr	r2, [r2, #12]
 8006f2a:	0a12      	lsrs	r2, r2, #8
 8006f2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f30:	fb02 f303 	mul.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]
      break;
 8006f36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f38:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	0e5b      	lsrs	r3, r3, #25
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	3301      	adds	r3, #1
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	e001      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f58:	693b      	ldr	r3, [r7, #16]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	00f42400 	.word	0x00f42400
 8006f70:	016e3600 	.word	0x016e3600

08006f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f78:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000000 	.word	0x20000000

08006f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f90:	f7ff fff0 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4904      	ldr	r1, [pc, #16]	@ (8006fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0800c92c 	.word	0x0800c92c

08006fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fbc:	f7ff ffda 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b06      	ldr	r3, [pc, #24]	@ (8006fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	0adb      	lsrs	r3, r3, #11
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	4904      	ldr	r1, [pc, #16]	@ (8006fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fce:	5ccb      	ldrb	r3, [r1, r3]
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	0800c92c 	.word	0x0800c92c

08006fe4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	220f      	movs	r2, #15
 8006ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006ff4:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <HAL_RCC_GetClockConfig+0x5c>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0203 	and.w	r2, r3, #3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007000:	4b0f      	ldr	r3, [pc, #60]	@ (8007040 <HAL_RCC_GetClockConfig+0x5c>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800700c:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <HAL_RCC_GetClockConfig+0x5c>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007018:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <HAL_RCC_GetClockConfig+0x5c>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	08db      	lsrs	r3, r3, #3
 800701e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007026:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <HAL_RCC_GetClockConfig+0x60>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 020f 	and.w	r2, r3, #15
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	601a      	str	r2, [r3, #0]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40021000 	.word	0x40021000
 8007044:	40022000 	.word	0x40022000

08007048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800704e:	4b1e      	ldr	r3, [pc, #120]	@ (80070c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007058:	4b1b      	ldr	r3, [pc, #108]	@ (80070c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d10c      	bne.n	8007086 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800706c:	4a17      	ldr	r2, [pc, #92]	@ (80070cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	4a14      	ldr	r2, [pc, #80]	@ (80070c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007076:	68d2      	ldr	r2, [r2, #12]
 8007078:	0a12      	lsrs	r2, r2, #8
 800707a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800707e:	fb02 f303 	mul.w	r3, r2, r3
 8007082:	617b      	str	r3, [r7, #20]
    break;
 8007084:	e00c      	b.n	80070a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007086:	4a12      	ldr	r2, [pc, #72]	@ (80070d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	4a0e      	ldr	r2, [pc, #56]	@ (80070c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007090:	68d2      	ldr	r2, [r2, #12]
 8007092:	0a12      	lsrs	r2, r2, #8
 8007094:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007098:	fb02 f303 	mul.w	r3, r2, r3
 800709c:	617b      	str	r3, [r7, #20]
    break;
 800709e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070a0:	4b09      	ldr	r3, [pc, #36]	@ (80070c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	0e5b      	lsrs	r3, r3, #25
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	3301      	adds	r3, #1
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80070ba:	687b      	ldr	r3, [r7, #4]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40021000 	.word	0x40021000
 80070cc:	016e3600 	.word	0x016e3600
 80070d0:	00f42400 	.word	0x00f42400

080070d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070dc:	2300      	movs	r3, #0
 80070de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070e0:	2300      	movs	r3, #0
 80070e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8098 	beq.w	8007222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f2:	2300      	movs	r3, #0
 80070f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070f6:	4b43      	ldr	r3, [pc, #268]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007102:	4b40      	ldr	r3, [pc, #256]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007106:	4a3f      	ldr	r2, [pc, #252]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800710c:	6593      	str	r3, [r2, #88]	@ 0x58
 800710e:	4b3d      	ldr	r3, [pc, #244]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711a:	2301      	movs	r3, #1
 800711c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800711e:	4b3a      	ldr	r3, [pc, #232]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a39      	ldr	r2, [pc, #228]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800712a:	f7fc fbf1 	bl	8003910 <HAL_GetTick>
 800712e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007130:	e009      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007132:	f7fc fbed 	bl	8003910 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d902      	bls.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	74fb      	strb	r3, [r7, #19]
        break;
 8007144:	e005      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007146:	4b30      	ldr	r3, [pc, #192]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0ef      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007152:	7cfb      	ldrb	r3, [r7, #19]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d159      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007162:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01e      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	429a      	cmp	r2, r3
 8007172:	d019      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007174:	4b23      	ldr	r3, [pc, #140]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800717e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007180:	4b20      	ldr	r3, [pc, #128]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007186:	4a1f      	ldr	r2, [pc, #124]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800718c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007190:	4b1c      	ldr	r3, [pc, #112]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007196:	4a1b      	ldr	r2, [pc, #108]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800719c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071a0:	4a18      	ldr	r2, [pc, #96]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d016      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b2:	f7fc fbad 	bl	8003910 <HAL_GetTick>
 80071b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b8:	e00b      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ba:	f7fc fba9 	bl	8003910 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d902      	bls.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	74fb      	strb	r3, [r7, #19]
            break;
 80071d0:	e006      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ec      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80071e0:	7cfb      	ldrb	r3, [r7, #19]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e6:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f4:	4903      	ldr	r1, [pc, #12]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071fe:	7cfb      	ldrb	r3, [r7, #19]
 8007200:	74bb      	strb	r3, [r7, #18]
 8007202:	e005      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007204:	40021000 	.word	0x40021000
 8007208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	7cfb      	ldrb	r3, [r7, #19]
 800720e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007210:	7c7b      	ldrb	r3, [r7, #17]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007216:	4ba6      	ldr	r3, [pc, #664]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	4aa5      	ldr	r2, [pc, #660]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800722e:	4ba0      	ldr	r3, [pc, #640]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007234:	f023 0203 	bic.w	r2, r3, #3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	499c      	ldr	r1, [pc, #624]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007250:	4b97      	ldr	r3, [pc, #604]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007256:	f023 020c 	bic.w	r2, r3, #12
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	4994      	ldr	r1, [pc, #592]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007272:	4b8f      	ldr	r3, [pc, #572]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007278:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	498b      	ldr	r1, [pc, #556]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007294:	4b86      	ldr	r3, [pc, #536]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	4983      	ldr	r1, [pc, #524]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072b6:	4b7e      	ldr	r3, [pc, #504]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	497a      	ldr	r1, [pc, #488]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072d8:	4b75      	ldr	r3, [pc, #468]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	4972      	ldr	r1, [pc, #456]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072fa:	4b6d      	ldr	r3, [pc, #436]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007300:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	4969      	ldr	r1, [pc, #420]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800731c:	4b64      	ldr	r3, [pc, #400]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	4961      	ldr	r1, [pc, #388]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800733e:	4b5c      	ldr	r3, [pc, #368]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007344:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	4958      	ldr	r1, [pc, #352]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800735c:	2b00      	cmp	r3, #0
 800735e:	d015      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007360:	4b53      	ldr	r3, [pc, #332]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	4950      	ldr	r1, [pc, #320]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800737e:	d105      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007380:	4b4b      	ldr	r3, [pc, #300]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4a4a      	ldr	r2, [pc, #296]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800738a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007394:	2b00      	cmp	r3, #0
 8007396:	d015      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007398:	4b45      	ldr	r3, [pc, #276]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	4942      	ldr	r1, [pc, #264]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073b6:	d105      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073b8:	4b3d      	ldr	r3, [pc, #244]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4a3c      	ldr	r2, [pc, #240]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073c2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d015      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073d0:	4b37      	ldr	r3, [pc, #220]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073de:	4934      	ldr	r1, [pc, #208]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ee:	d105      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073f0:	4b2f      	ldr	r3, [pc, #188]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d015      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007408:	4b29      	ldr	r3, [pc, #164]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800740a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007416:	4926      	ldr	r1, [pc, #152]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007426:	d105      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007428:	4b21      	ldr	r3, [pc, #132]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	4a20      	ldr	r2, [pc, #128]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800742e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007432:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d015      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007440:	4b1b      	ldr	r3, [pc, #108]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744e:	4918      	ldr	r1, [pc, #96]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800745e:	d105      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007460:	4b13      	ldr	r3, [pc, #76]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	4a12      	ldr	r2, [pc, #72]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800746a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d015      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007478:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007486:	490a      	ldr	r1, [pc, #40]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007496:	d105      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a04      	ldr	r2, [pc, #16]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800749e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80074a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40021000 	.word	0x40021000

080074b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e049      	b.n	800755a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f841 	bl	8007562 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f000 fdc0 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d001      	beq.n	8007590 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e042      	b.n	8007616 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a21      	ldr	r2, [pc, #132]	@ (8007624 <HAL_TIM_Base_Start+0xac>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075aa:	d013      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007628 <HAL_TIM_Base_Start+0xb0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1c      	ldr	r2, [pc, #112]	@ (800762c <HAL_TIM_Base_Start+0xb4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007630 <HAL_TIM_Base_Start+0xb8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <HAL_TIM_Base_Start+0xbc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d115      	bne.n	8007600 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	4b17      	ldr	r3, [pc, #92]	@ (8007638 <HAL_TIM_Base_Start+0xc0>)
 80075dc:	4013      	ands	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d015      	beq.n	8007612 <HAL_TIM_Base_Start+0x9a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ec:	d011      	beq.n	8007612 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0201 	orr.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fe:	e008      	b.n	8007612 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e000      	b.n	8007614 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40000400 	.word	0x40000400
 800762c:	40000800 	.word	0x40000800
 8007630:	40013400 	.word	0x40013400
 8007634:	40014000 	.word	0x40014000
 8007638:	00010007 	.word	0x00010007

0800763c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	d001      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e04a      	b.n	80076ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a21      	ldr	r2, [pc, #132]	@ (80076f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767e:	d013      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1d      	ldr	r2, [pc, #116]	@ (80076fc <HAL_TIM_Base_Start_IT+0xc0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00e      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x6c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1c      	ldr	r2, [pc, #112]	@ (8007700 <HAL_TIM_Base_Start_IT+0xc4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1a      	ldr	r2, [pc, #104]	@ (8007704 <HAL_TIM_Base_Start_IT+0xc8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x6c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a19      	ldr	r2, [pc, #100]	@ (8007708 <HAL_TIM_Base_Start_IT+0xcc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d115      	bne.n	80076d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	4b17      	ldr	r3, [pc, #92]	@ (800770c <HAL_TIM_Base_Start_IT+0xd0>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b06      	cmp	r3, #6
 80076b8:	d015      	beq.n	80076e6 <HAL_TIM_Base_Start_IT+0xaa>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c0:	d011      	beq.n	80076e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d2:	e008      	b.n	80076e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e000      	b.n	80076e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40012c00 	.word	0x40012c00
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40013400 	.word	0x40013400
 8007708:	40014000 	.word	0x40014000
 800770c:	00010007 	.word	0x00010007

08007710 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e049      	b.n	80077b6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa fa04 	bl	8001b44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f000 fc92 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e049      	b.n	8007864 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fa f987 	bl	8001af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f000 fc3b 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d109      	bne.n	8007890 <HAL_TIM_PWM_Start+0x24>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	bf14      	ite	ne
 8007888:	2301      	movne	r3, #1
 800788a:	2300      	moveq	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e03c      	b.n	800790a <HAL_TIM_PWM_Start+0x9e>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b04      	cmp	r3, #4
 8007894:	d109      	bne.n	80078aa <HAL_TIM_PWM_Start+0x3e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b01      	cmp	r3, #1
 80078a0:	bf14      	ite	ne
 80078a2:	2301      	movne	r3, #1
 80078a4:	2300      	moveq	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	e02f      	b.n	800790a <HAL_TIM_PWM_Start+0x9e>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d109      	bne.n	80078c4 <HAL_TIM_PWM_Start+0x58>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	e022      	b.n	800790a <HAL_TIM_PWM_Start+0x9e>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b0c      	cmp	r3, #12
 80078c8:	d109      	bne.n	80078de <HAL_TIM_PWM_Start+0x72>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	bf14      	ite	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	2300      	moveq	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	e015      	b.n	800790a <HAL_TIM_PWM_Start+0x9e>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d109      	bne.n	80078f8 <HAL_TIM_PWM_Start+0x8c>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	e008      	b.n	800790a <HAL_TIM_PWM_Start+0x9e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b01      	cmp	r3, #1
 8007902:	bf14      	ite	ne
 8007904:	2301      	movne	r3, #1
 8007906:	2300      	moveq	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e097      	b.n	8007a42 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <HAL_TIM_PWM_Start+0xb6>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007920:	e023      	b.n	800796a <HAL_TIM_PWM_Start+0xfe>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d104      	bne.n	8007932 <HAL_TIM_PWM_Start+0xc6>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007930:	e01b      	b.n	800796a <HAL_TIM_PWM_Start+0xfe>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d104      	bne.n	8007942 <HAL_TIM_PWM_Start+0xd6>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007940:	e013      	b.n	800796a <HAL_TIM_PWM_Start+0xfe>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start+0xe6>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007950:	e00b      	b.n	800796a <HAL_TIM_PWM_Start+0xfe>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b10      	cmp	r3, #16
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0xf6>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007960:	e003      	b.n	800796a <HAL_TIM_PWM_Start+0xfe>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2201      	movs	r2, #1
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 ff12 	bl	800879c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a33      	ldr	r2, [pc, #204]	@ (8007a4c <HAL_TIM_PWM_Start+0x1e0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_TIM_PWM_Start+0x13e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a32      	ldr	r2, [pc, #200]	@ (8007a50 <HAL_TIM_PWM_Start+0x1e4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_TIM_PWM_Start+0x13e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a30      	ldr	r2, [pc, #192]	@ (8007a54 <HAL_TIM_PWM_Start+0x1e8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_TIM_PWM_Start+0x13e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a58 <HAL_TIM_PWM_Start+0x1ec>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_TIM_PWM_Start+0x13e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a2d      	ldr	r2, [pc, #180]	@ (8007a5c <HAL_TIM_PWM_Start+0x1f0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_PWM_Start+0x142>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <HAL_TIM_PWM_Start+0x144>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a20      	ldr	r2, [pc, #128]	@ (8007a4c <HAL_TIM_PWM_Start+0x1e0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x194>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d6:	d013      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x194>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a20      	ldr	r2, [pc, #128]	@ (8007a60 <HAL_TIM_PWM_Start+0x1f4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x194>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a64 <HAL_TIM_PWM_Start+0x1f8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x194>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a17      	ldr	r2, [pc, #92]	@ (8007a50 <HAL_TIM_PWM_Start+0x1e4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x194>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a16      	ldr	r2, [pc, #88]	@ (8007a54 <HAL_TIM_PWM_Start+0x1e8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d115      	bne.n	8007a2c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	4b18      	ldr	r3, [pc, #96]	@ (8007a68 <HAL_TIM_PWM_Start+0x1fc>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d015      	beq.n	8007a3e <HAL_TIM_PWM_Start+0x1d2>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d011      	beq.n	8007a3e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	e008      	b.n	8007a3e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e000      	b.n	8007a40 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40012c00 	.word	0x40012c00
 8007a50:	40013400 	.word	0x40013400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40014400 	.word	0x40014400
 8007a5c:	40014800 	.word	0x40014800
 8007a60:	40000400 	.word	0x40000400
 8007a64:	40000800 	.word	0x40000800
 8007a68:	00010007 	.word	0x00010007

08007a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d020      	beq.n	8007ad0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01b      	beq.n	8007ad0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f06f 0202 	mvn.w	r2, #2
 8007aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fac0 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007abc:	e005      	b.n	8007aca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fab2 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fac3 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d020      	beq.n	8007b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01b      	beq.n	8007b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0204 	mvn.w	r2, #4
 8007aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa9a 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa8c 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa9d 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d020      	beq.n	8007b68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01b      	beq.n	8007b68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0208 	mvn.w	r2, #8
 8007b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa74 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa66 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa77 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d020      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01b      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f06f 0210 	mvn.w	r2, #16
 8007b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2208      	movs	r2, #8
 8007b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa4e 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007ba0:	e005      	b.n	8007bae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa40 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fa51 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00c      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0201 	mvn.w	r2, #1
 8007bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7f9 fd66 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00c      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 ff1c 	bl	8008a3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00c      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 ff14 	bl	8008a52 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fa0b 	bl	8008064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00c      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f06f 0220 	mvn.w	r2, #32
 8007c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fedc 	bl	8008a2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00c      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fee8 	bl	8008a66 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00c      	beq.n	8007cba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fee0 	bl	8008a7a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00c      	beq.n	8007cde <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fed8 	bl	8008a8e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fed0 	bl	8008aa2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e066      	b.n	8007df8 <HAL_TIM_OC_ConfigChannel+0xec>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b14      	cmp	r3, #20
 8007d36:	d857      	bhi.n	8007de8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007d38:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d95 	.word	0x08007d95
 8007d44:	08007de9 	.word	0x08007de9
 8007d48:	08007de9 	.word	0x08007de9
 8007d4c:	08007de9 	.word	0x08007de9
 8007d50:	08007da3 	.word	0x08007da3
 8007d54:	08007de9 	.word	0x08007de9
 8007d58:	08007de9 	.word	0x08007de9
 8007d5c:	08007de9 	.word	0x08007de9
 8007d60:	08007db1 	.word	0x08007db1
 8007d64:	08007de9 	.word	0x08007de9
 8007d68:	08007de9 	.word	0x08007de9
 8007d6c:	08007de9 	.word	0x08007de9
 8007d70:	08007dbf 	.word	0x08007dbf
 8007d74:	08007de9 	.word	0x08007de9
 8007d78:	08007de9 	.word	0x08007de9
 8007d7c:	08007de9 	.word	0x08007de9
 8007d80:	08007dcd 	.word	0x08007dcd
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007de9 	.word	0x08007de9
 8007d8c:	08007de9 	.word	0x08007de9
 8007d90:	08007ddb 	.word	0x08007ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fa08 	bl	80081b0 <TIM_OC1_SetConfig>
      break;
 8007da0:	e025      	b.n	8007dee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fa91 	bl	80082d0 <TIM_OC2_SetConfig>
      break;
 8007dae:	e01e      	b.n	8007dee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fb14 	bl	80083e4 <TIM_OC3_SetConfig>
      break;
 8007dbc:	e017      	b.n	8007dee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fb95 	bl	80084f4 <TIM_OC4_SetConfig>
      break;
 8007dca:	e010      	b.n	8007dee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fc18 	bl	8008608 <TIM_OC5_SetConfig>
      break;
 8007dd8:	e009      	b.n	8007dee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fc75 	bl	80086d0 <TIM_OC6_SetConfig>
      break;
 8007de6:	e002      	b.n	8007dee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	75fb      	strb	r3, [r7, #23]
      break;
 8007dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e0ff      	b.n	800801e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b14      	cmp	r3, #20
 8007e2a:	f200 80f0 	bhi.w	800800e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	0800800f 	.word	0x0800800f
 8007e3c:	0800800f 	.word	0x0800800f
 8007e40:	0800800f 	.word	0x0800800f
 8007e44:	08007ec9 	.word	0x08007ec9
 8007e48:	0800800f 	.word	0x0800800f
 8007e4c:	0800800f 	.word	0x0800800f
 8007e50:	0800800f 	.word	0x0800800f
 8007e54:	08007f0b 	.word	0x08007f0b
 8007e58:	0800800f 	.word	0x0800800f
 8007e5c:	0800800f 	.word	0x0800800f
 8007e60:	0800800f 	.word	0x0800800f
 8007e64:	08007f4b 	.word	0x08007f4b
 8007e68:	0800800f 	.word	0x0800800f
 8007e6c:	0800800f 	.word	0x0800800f
 8007e70:	0800800f 	.word	0x0800800f
 8007e74:	08007f8d 	.word	0x08007f8d
 8007e78:	0800800f 	.word	0x0800800f
 8007e7c:	0800800f 	.word	0x0800800f
 8007e80:	0800800f 	.word	0x0800800f
 8007e84:	08007fcd 	.word	0x08007fcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f98e 	bl	80081b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0208 	orr.w	r2, r2, #8
 8007ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0204 	bic.w	r2, r2, #4
 8007eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6999      	ldr	r1, [r3, #24]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	619a      	str	r2, [r3, #24]
      break;
 8007ec6:	e0a5      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f9fe 	bl	80082d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6999      	ldr	r1, [r3, #24]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	021a      	lsls	r2, r3, #8
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	619a      	str	r2, [r3, #24]
      break;
 8007f08:	e084      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 fa67 	bl	80083e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69da      	ldr	r2, [r3, #28]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0208 	orr.w	r2, r2, #8
 8007f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0204 	bic.w	r2, r2, #4
 8007f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69d9      	ldr	r1, [r3, #28]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	61da      	str	r2, [r3, #28]
      break;
 8007f48:	e064      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 facf 	bl	80084f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69d9      	ldr	r1, [r3, #28]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	021a      	lsls	r2, r3, #8
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	61da      	str	r2, [r3, #28]
      break;
 8007f8a:	e043      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fb38 	bl	8008608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0204 	bic.w	r2, r2, #4
 8007fb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007fca:	e023      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fb7c 	bl	80086d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fe6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ff6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800800c:	e002      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
      break;
 8008012:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop

08008028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a42      	ldr	r2, [pc, #264]	@ (8008194 <TIM_Base_SetConfig+0x11c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00f      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008096:	d00b      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a3f      	ldr	r2, [pc, #252]	@ (8008198 <TIM_Base_SetConfig+0x120>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d007      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a3e      	ldr	r2, [pc, #248]	@ (800819c <TIM_Base_SetConfig+0x124>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d003      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a3d      	ldr	r2, [pc, #244]	@ (80081a0 <TIM_Base_SetConfig+0x128>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d108      	bne.n	80080c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a33      	ldr	r2, [pc, #204]	@ (8008194 <TIM_Base_SetConfig+0x11c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d01b      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d0:	d017      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a30      	ldr	r2, [pc, #192]	@ (8008198 <TIM_Base_SetConfig+0x120>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d013      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a2f      	ldr	r2, [pc, #188]	@ (800819c <TIM_Base_SetConfig+0x124>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00f      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a2e      	ldr	r2, [pc, #184]	@ (80081a0 <TIM_Base_SetConfig+0x128>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00b      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a2d      	ldr	r2, [pc, #180]	@ (80081a4 <TIM_Base_SetConfig+0x12c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d007      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a2c      	ldr	r2, [pc, #176]	@ (80081a8 <TIM_Base_SetConfig+0x130>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <TIM_Base_SetConfig+0x8a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a2b      	ldr	r2, [pc, #172]	@ (80081ac <TIM_Base_SetConfig+0x134>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d108      	bne.n	8008114 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a16      	ldr	r2, [pc, #88]	@ (8008194 <TIM_Base_SetConfig+0x11c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00f      	beq.n	8008160 <TIM_Base_SetConfig+0xe8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a17      	ldr	r2, [pc, #92]	@ (80081a0 <TIM_Base_SetConfig+0x128>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00b      	beq.n	8008160 <TIM_Base_SetConfig+0xe8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a16      	ldr	r2, [pc, #88]	@ (80081a4 <TIM_Base_SetConfig+0x12c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d007      	beq.n	8008160 <TIM_Base_SetConfig+0xe8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a15      	ldr	r2, [pc, #84]	@ (80081a8 <TIM_Base_SetConfig+0x130>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <TIM_Base_SetConfig+0xe8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a14      	ldr	r2, [pc, #80]	@ (80081ac <TIM_Base_SetConfig+0x134>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d103      	bne.n	8008168 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b01      	cmp	r3, #1
 8008178:	d105      	bne.n	8008186 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f023 0201 	bic.w	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	611a      	str	r2, [r3, #16]
  }
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40012c00 	.word	0x40012c00
 8008198:	40000400 	.word	0x40000400
 800819c:	40000800 	.word	0x40000800
 80081a0:	40013400 	.word	0x40013400
 80081a4:	40014000 	.word	0x40014000
 80081a8:	40014400 	.word	0x40014400
 80081ac:	40014800 	.word	0x40014800

080081b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f023 0201 	bic.w	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f023 0302 	bic.w	r3, r3, #2
 80081fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a2c      	ldr	r2, [pc, #176]	@ (80082bc <TIM_OC1_SetConfig+0x10c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_OC1_SetConfig+0x80>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a2b      	ldr	r2, [pc, #172]	@ (80082c0 <TIM_OC1_SetConfig+0x110>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <TIM_OC1_SetConfig+0x80>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a2a      	ldr	r2, [pc, #168]	@ (80082c4 <TIM_OC1_SetConfig+0x114>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_OC1_SetConfig+0x80>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a29      	ldr	r2, [pc, #164]	@ (80082c8 <TIM_OC1_SetConfig+0x118>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_OC1_SetConfig+0x80>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a28      	ldr	r2, [pc, #160]	@ (80082cc <TIM_OC1_SetConfig+0x11c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10c      	bne.n	800824a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0308 	bic.w	r3, r3, #8
 8008236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f023 0304 	bic.w	r3, r3, #4
 8008248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a1b      	ldr	r2, [pc, #108]	@ (80082bc <TIM_OC1_SetConfig+0x10c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d00f      	beq.n	8008272 <TIM_OC1_SetConfig+0xc2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a1a      	ldr	r2, [pc, #104]	@ (80082c0 <TIM_OC1_SetConfig+0x110>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00b      	beq.n	8008272 <TIM_OC1_SetConfig+0xc2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a19      	ldr	r2, [pc, #100]	@ (80082c4 <TIM_OC1_SetConfig+0x114>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d007      	beq.n	8008272 <TIM_OC1_SetConfig+0xc2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a18      	ldr	r2, [pc, #96]	@ (80082c8 <TIM_OC1_SetConfig+0x118>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d003      	beq.n	8008272 <TIM_OC1_SetConfig+0xc2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a17      	ldr	r2, [pc, #92]	@ (80082cc <TIM_OC1_SetConfig+0x11c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d111      	bne.n	8008296 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	621a      	str	r2, [r3, #32]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	40012c00 	.word	0x40012c00
 80082c0:	40013400 	.word	0x40013400
 80082c4:	40014000 	.word	0x40014000
 80082c8:	40014400 	.word	0x40014400
 80082cc:	40014800 	.word	0x40014800

080082d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f023 0210 	bic.w	r2, r3, #16
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800830a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0320 	bic.w	r3, r3, #32
 800831e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a28      	ldr	r2, [pc, #160]	@ (80083d0 <TIM_OC2_SetConfig+0x100>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d003      	beq.n	800833c <TIM_OC2_SetConfig+0x6c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a27      	ldr	r2, [pc, #156]	@ (80083d4 <TIM_OC2_SetConfig+0x104>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d10d      	bne.n	8008358 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008356:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a1d      	ldr	r2, [pc, #116]	@ (80083d0 <TIM_OC2_SetConfig+0x100>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00f      	beq.n	8008380 <TIM_OC2_SetConfig+0xb0>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a1c      	ldr	r2, [pc, #112]	@ (80083d4 <TIM_OC2_SetConfig+0x104>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00b      	beq.n	8008380 <TIM_OC2_SetConfig+0xb0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1b      	ldr	r2, [pc, #108]	@ (80083d8 <TIM_OC2_SetConfig+0x108>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d007      	beq.n	8008380 <TIM_OC2_SetConfig+0xb0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a1a      	ldr	r2, [pc, #104]	@ (80083dc <TIM_OC2_SetConfig+0x10c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_OC2_SetConfig+0xb0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a19      	ldr	r2, [pc, #100]	@ (80083e0 <TIM_OC2_SetConfig+0x110>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d113      	bne.n	80083a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800838e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	621a      	str	r2, [r3, #32]
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400
 80083d8:	40014000 	.word	0x40014000
 80083dc:	40014400 	.word	0x40014400
 80083e0:	40014800 	.word	0x40014800

080083e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0303 	bic.w	r3, r3, #3
 800841e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a27      	ldr	r2, [pc, #156]	@ (80084e0 <TIM_OC3_SetConfig+0xfc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d003      	beq.n	800844e <TIM_OC3_SetConfig+0x6a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a26      	ldr	r2, [pc, #152]	@ (80084e4 <TIM_OC3_SetConfig+0x100>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d10d      	bne.n	800846a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <TIM_OC3_SetConfig+0xfc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00f      	beq.n	8008492 <TIM_OC3_SetConfig+0xae>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1b      	ldr	r2, [pc, #108]	@ (80084e4 <TIM_OC3_SetConfig+0x100>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00b      	beq.n	8008492 <TIM_OC3_SetConfig+0xae>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a1a      	ldr	r2, [pc, #104]	@ (80084e8 <TIM_OC3_SetConfig+0x104>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d007      	beq.n	8008492 <TIM_OC3_SetConfig+0xae>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a19      	ldr	r2, [pc, #100]	@ (80084ec <TIM_OC3_SetConfig+0x108>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d003      	beq.n	8008492 <TIM_OC3_SetConfig+0xae>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a18      	ldr	r2, [pc, #96]	@ (80084f0 <TIM_OC3_SetConfig+0x10c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d113      	bne.n	80084ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	40012c00 	.word	0x40012c00
 80084e4:	40013400 	.word	0x40013400
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40014400 	.word	0x40014400
 80084f0:	40014800 	.word	0x40014800

080084f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800852e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4313      	orrs	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	031b      	lsls	r3, r3, #12
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a28      	ldr	r2, [pc, #160]	@ (80085f4 <TIM_OC4_SetConfig+0x100>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_OC4_SetConfig+0x6c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a27      	ldr	r2, [pc, #156]	@ (80085f8 <TIM_OC4_SetConfig+0x104>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10d      	bne.n	800857c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	031b      	lsls	r3, r3, #12
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800857a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a1d      	ldr	r2, [pc, #116]	@ (80085f4 <TIM_OC4_SetConfig+0x100>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00f      	beq.n	80085a4 <TIM_OC4_SetConfig+0xb0>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a1c      	ldr	r2, [pc, #112]	@ (80085f8 <TIM_OC4_SetConfig+0x104>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00b      	beq.n	80085a4 <TIM_OC4_SetConfig+0xb0>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <TIM_OC4_SetConfig+0x108>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <TIM_OC4_SetConfig+0xb0>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a1a      	ldr	r2, [pc, #104]	@ (8008600 <TIM_OC4_SetConfig+0x10c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_OC4_SetConfig+0xb0>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a19      	ldr	r2, [pc, #100]	@ (8008604 <TIM_OC4_SetConfig+0x110>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d113      	bne.n	80085cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	019b      	lsls	r3, r3, #6
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40012c00 	.word	0x40012c00
 80085f8:	40013400 	.word	0x40013400
 80085fc:	40014000 	.word	0x40014000
 8008600:	40014400 	.word	0x40014400
 8008604:	40014800 	.word	0x40014800

08008608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800864c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	041b      	lsls	r3, r3, #16
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a17      	ldr	r2, [pc, #92]	@ (80086bc <TIM_OC5_SetConfig+0xb4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00f      	beq.n	8008682 <TIM_OC5_SetConfig+0x7a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a16      	ldr	r2, [pc, #88]	@ (80086c0 <TIM_OC5_SetConfig+0xb8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00b      	beq.n	8008682 <TIM_OC5_SetConfig+0x7a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a15      	ldr	r2, [pc, #84]	@ (80086c4 <TIM_OC5_SetConfig+0xbc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d007      	beq.n	8008682 <TIM_OC5_SetConfig+0x7a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a14      	ldr	r2, [pc, #80]	@ (80086c8 <TIM_OC5_SetConfig+0xc0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d003      	beq.n	8008682 <TIM_OC5_SetConfig+0x7a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a13      	ldr	r2, [pc, #76]	@ (80086cc <TIM_OC5_SetConfig+0xc4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d109      	bne.n	8008696 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	40012c00 	.word	0x40012c00
 80086c0:	40013400 	.word	0x40013400
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40014400 	.word	0x40014400
 80086cc:	40014800 	.word	0x40014800

080086d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	051b      	lsls	r3, r3, #20
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a18      	ldr	r2, [pc, #96]	@ (8008788 <TIM_OC6_SetConfig+0xb8>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00f      	beq.n	800874c <TIM_OC6_SetConfig+0x7c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a17      	ldr	r2, [pc, #92]	@ (800878c <TIM_OC6_SetConfig+0xbc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_OC6_SetConfig+0x7c>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a16      	ldr	r2, [pc, #88]	@ (8008790 <TIM_OC6_SetConfig+0xc0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_OC6_SetConfig+0x7c>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a15      	ldr	r2, [pc, #84]	@ (8008794 <TIM_OC6_SetConfig+0xc4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_OC6_SetConfig+0x7c>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a14      	ldr	r2, [pc, #80]	@ (8008798 <TIM_OC6_SetConfig+0xc8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d109      	bne.n	8008760 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	621a      	str	r2, [r3, #32]
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	40012c00 	.word	0x40012c00
 800878c:	40013400 	.word	0x40013400
 8008790:	40014000 	.word	0x40014000
 8008794:	40014400 	.word	0x40014400
 8008798:	40014800 	.word	0x40014800

0800879c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f003 031f 	and.w	r3, r3, #31
 80087ae:	2201      	movs	r2, #1
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	43db      	mvns	r3, r3
 80087be:	401a      	ands	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a1a      	ldr	r2, [r3, #32]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	fa01 f303 	lsl.w	r3, r1, r3
 80087d4:	431a      	orrs	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	621a      	str	r2, [r3, #32]
}
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e065      	b.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a2c      	ldr	r2, [pc, #176]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d004      	beq.n	8008834 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a2b      	ldr	r2, [pc, #172]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d108      	bne.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800883a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800884c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d018      	beq.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008876:	d013      	beq.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	@ (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00e      	beq.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a17      	ldr	r2, [pc, #92]	@ (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d009      	beq.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a12      	ldr	r2, [pc, #72]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d004      	beq.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a13      	ldr	r2, [pc, #76]	@ (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10c      	bne.n	80088ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	40012c00 	.word	0x40012c00
 80088dc:	40013400 	.word	0x40013400
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40014000 	.word	0x40014000

080088ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008904:	2302      	movs	r3, #2
 8008906:	e073      	b.n	80089f0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	@ (80089fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d11c      	bne.n	80089de <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ae:	051b      	lsls	r3, r3, #20
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	40012c00 	.word	0x40012c00
 8008a00:	40013400 	.word	0x40013400

08008a04 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e042      	b.n	8008b4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f83b 	bl	8008b56 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	@ 0x24
 8008ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0201 	bic.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 faff 	bl	8009104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f830 	bl	8008b6c <UART_SetConfig>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e01b      	b.n	8008b4e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0201 	orr.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fb7e 	bl	8009248 <UART_CheckIdleState>
 8008b4c:	4603      	mov	r3, r0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
	...

08008b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b70:	b08c      	sub	sp, #48	@ 0x30
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4bab      	ldr	r3, [pc, #684]	@ (8008e48 <UART_SetConfig+0x2dc>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	6812      	ldr	r2, [r2, #0]
 8008ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4aa0      	ldr	r2, [pc, #640]	@ (8008e4c <UART_SetConfig+0x2e0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008be2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bec:	430b      	orrs	r3, r1
 8008bee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf6:	f023 010f 	bic.w	r1, r3, #15
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a91      	ldr	r2, [pc, #580]	@ (8008e50 <UART_SetConfig+0x2e4>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d125      	bne.n	8008c5c <UART_SetConfig+0xf0>
 8008c10:	4b90      	ldr	r3, [pc, #576]	@ (8008e54 <UART_SetConfig+0x2e8>)
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c16:	f003 0303 	and.w	r3, r3, #3
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d81a      	bhi.n	8008c54 <UART_SetConfig+0xe8>
 8008c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c24 <UART_SetConfig+0xb8>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c45 	.word	0x08008c45
 8008c2c:	08008c3d 	.word	0x08008c3d
 8008c30:	08008c4d 	.word	0x08008c4d
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c3a:	e0d6      	b.n	8008dea <UART_SetConfig+0x27e>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c42:	e0d2      	b.n	8008dea <UART_SetConfig+0x27e>
 8008c44:	2304      	movs	r3, #4
 8008c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c4a:	e0ce      	b.n	8008dea <UART_SetConfig+0x27e>
 8008c4c:	2308      	movs	r3, #8
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c52:	e0ca      	b.n	8008dea <UART_SetConfig+0x27e>
 8008c54:	2310      	movs	r3, #16
 8008c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c5a:	e0c6      	b.n	8008dea <UART_SetConfig+0x27e>
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a7d      	ldr	r2, [pc, #500]	@ (8008e58 <UART_SetConfig+0x2ec>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d138      	bne.n	8008cd8 <UART_SetConfig+0x16c>
 8008c66:	4b7b      	ldr	r3, [pc, #492]	@ (8008e54 <UART_SetConfig+0x2e8>)
 8008c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6c:	f003 030c 	and.w	r3, r3, #12
 8008c70:	2b0c      	cmp	r3, #12
 8008c72:	d82d      	bhi.n	8008cd0 <UART_SetConfig+0x164>
 8008c74:	a201      	add	r2, pc, #4	@ (adr r2, 8008c7c <UART_SetConfig+0x110>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008cb1 	.word	0x08008cb1
 8008c80:	08008cd1 	.word	0x08008cd1
 8008c84:	08008cd1 	.word	0x08008cd1
 8008c88:	08008cd1 	.word	0x08008cd1
 8008c8c:	08008cc1 	.word	0x08008cc1
 8008c90:	08008cd1 	.word	0x08008cd1
 8008c94:	08008cd1 	.word	0x08008cd1
 8008c98:	08008cd1 	.word	0x08008cd1
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cd1 	.word	0x08008cd1
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	08008cd1 	.word	0x08008cd1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb6:	e098      	b.n	8008dea <UART_SetConfig+0x27e>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cbe:	e094      	b.n	8008dea <UART_SetConfig+0x27e>
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cc6:	e090      	b.n	8008dea <UART_SetConfig+0x27e>
 8008cc8:	2308      	movs	r3, #8
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cce:	e08c      	b.n	8008dea <UART_SetConfig+0x27e>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cd6:	e088      	b.n	8008dea <UART_SetConfig+0x27e>
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8008e5c <UART_SetConfig+0x2f0>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d125      	bne.n	8008d2e <UART_SetConfig+0x1c2>
 8008ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8008e54 <UART_SetConfig+0x2e8>)
 8008ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008cec:	2b30      	cmp	r3, #48	@ 0x30
 8008cee:	d016      	beq.n	8008d1e <UART_SetConfig+0x1b2>
 8008cf0:	2b30      	cmp	r3, #48	@ 0x30
 8008cf2:	d818      	bhi.n	8008d26 <UART_SetConfig+0x1ba>
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d00a      	beq.n	8008d0e <UART_SetConfig+0x1a2>
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d814      	bhi.n	8008d26 <UART_SetConfig+0x1ba>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <UART_SetConfig+0x19a>
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d008      	beq.n	8008d16 <UART_SetConfig+0x1aa>
 8008d04:	e00f      	b.n	8008d26 <UART_SetConfig+0x1ba>
 8008d06:	2300      	movs	r3, #0
 8008d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d0c:	e06d      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d14:	e069      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d16:	2304      	movs	r3, #4
 8008d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d1c:	e065      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d1e:	2308      	movs	r3, #8
 8008d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d24:	e061      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d26:	2310      	movs	r3, #16
 8008d28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d2c:	e05d      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a4b      	ldr	r2, [pc, #300]	@ (8008e60 <UART_SetConfig+0x2f4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d125      	bne.n	8008d84 <UART_SetConfig+0x218>
 8008d38:	4b46      	ldr	r3, [pc, #280]	@ (8008e54 <UART_SetConfig+0x2e8>)
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d44:	d016      	beq.n	8008d74 <UART_SetConfig+0x208>
 8008d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d48:	d818      	bhi.n	8008d7c <UART_SetConfig+0x210>
 8008d4a:	2b80      	cmp	r3, #128	@ 0x80
 8008d4c:	d00a      	beq.n	8008d64 <UART_SetConfig+0x1f8>
 8008d4e:	2b80      	cmp	r3, #128	@ 0x80
 8008d50:	d814      	bhi.n	8008d7c <UART_SetConfig+0x210>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <UART_SetConfig+0x1f0>
 8008d56:	2b40      	cmp	r3, #64	@ 0x40
 8008d58:	d008      	beq.n	8008d6c <UART_SetConfig+0x200>
 8008d5a:	e00f      	b.n	8008d7c <UART_SetConfig+0x210>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d62:	e042      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d64:	2302      	movs	r3, #2
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6a:	e03e      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d6c:	2304      	movs	r3, #4
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d72:	e03a      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d74:	2308      	movs	r3, #8
 8008d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7a:	e036      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d7c:	2310      	movs	r3, #16
 8008d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d82:	e032      	b.n	8008dea <UART_SetConfig+0x27e>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a30      	ldr	r2, [pc, #192]	@ (8008e4c <UART_SetConfig+0x2e0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d12a      	bne.n	8008de4 <UART_SetConfig+0x278>
 8008d8e:	4b31      	ldr	r3, [pc, #196]	@ (8008e54 <UART_SetConfig+0x2e8>)
 8008d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d9c:	d01a      	beq.n	8008dd4 <UART_SetConfig+0x268>
 8008d9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008da2:	d81b      	bhi.n	8008ddc <UART_SetConfig+0x270>
 8008da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008da8:	d00c      	beq.n	8008dc4 <UART_SetConfig+0x258>
 8008daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dae:	d815      	bhi.n	8008ddc <UART_SetConfig+0x270>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <UART_SetConfig+0x250>
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db8:	d008      	beq.n	8008dcc <UART_SetConfig+0x260>
 8008dba:	e00f      	b.n	8008ddc <UART_SetConfig+0x270>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dc2:	e012      	b.n	8008dea <UART_SetConfig+0x27e>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dca:	e00e      	b.n	8008dea <UART_SetConfig+0x27e>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd2:	e00a      	b.n	8008dea <UART_SetConfig+0x27e>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dda:	e006      	b.n	8008dea <UART_SetConfig+0x27e>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de2:	e002      	b.n	8008dea <UART_SetConfig+0x27e>
 8008de4:	2310      	movs	r3, #16
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a17      	ldr	r2, [pc, #92]	@ (8008e4c <UART_SetConfig+0x2e0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	f040 80a8 	bne.w	8008f46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008df6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008dfa:	2b08      	cmp	r3, #8
 8008dfc:	d834      	bhi.n	8008e68 <UART_SetConfig+0x2fc>
 8008dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <UART_SetConfig+0x298>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e29 	.word	0x08008e29
 8008e08:	08008e69 	.word	0x08008e69
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e37 	.word	0x08008e37
 8008e18:	08008e69 	.word	0x08008e69
 8008e1c:	08008e69 	.word	0x08008e69
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008e3f 	.word	0x08008e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e28:	f7fe f8b0 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8008e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e2e:	e021      	b.n	8008e74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e30:	4b0c      	ldr	r3, [pc, #48]	@ (8008e64 <UART_SetConfig+0x2f8>)
 8008e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e34:	e01e      	b.n	8008e74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e36:	f7fe f83b 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8008e3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e3c:	e01a      	b.n	8008e74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e44:	e016      	b.n	8008e74 <UART_SetConfig+0x308>
 8008e46:	bf00      	nop
 8008e48:	cfff69f3 	.word	0xcfff69f3
 8008e4c:	40008000 	.word	0x40008000
 8008e50:	40013800 	.word	0x40013800
 8008e54:	40021000 	.word	0x40021000
 8008e58:	40004400 	.word	0x40004400
 8008e5c:	40004800 	.word	0x40004800
 8008e60:	40004c00 	.word	0x40004c00
 8008e64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 812a 	beq.w	80090d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e80:	4a9e      	ldr	r2, [pc, #632]	@ (80090fc <UART_SetConfig+0x590>)
 8008e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d305      	bcc.n	8008eac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d903      	bls.n	8008eb4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008eb2:	e10d      	b.n	80090d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	60fa      	str	r2, [r7, #12]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec0:	4a8e      	ldr	r2, [pc, #568]	@ (80090fc <UART_SetConfig+0x590>)
 8008ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2200      	movs	r2, #0
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ed6:	f7f7 fe5f 	bl	8000b98 <__aeabi_uldivmod>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	020b      	lsls	r3, r1, #8
 8008eec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ef0:	0202      	lsls	r2, r0, #8
 8008ef2:	6979      	ldr	r1, [r7, #20]
 8008ef4:	6849      	ldr	r1, [r1, #4]
 8008ef6:	0849      	lsrs	r1, r1, #1
 8008ef8:	2000      	movs	r0, #0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4605      	mov	r5, r0
 8008efe:	eb12 0804 	adds.w	r8, r2, r4
 8008f02:	eb43 0905 	adc.w	r9, r3, r5
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	469a      	mov	sl, r3
 8008f0e:	4693      	mov	fp, r2
 8008f10:	4652      	mov	r2, sl
 8008f12:	465b      	mov	r3, fp
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 fe3e 	bl	8000b98 <__aeabi_uldivmod>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4613      	mov	r3, r2
 8008f22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f2a:	d308      	bcc.n	8008f3e <UART_SetConfig+0x3d2>
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f32:	d204      	bcs.n	8008f3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6a3a      	ldr	r2, [r7, #32]
 8008f3a:	60da      	str	r2, [r3, #12]
 8008f3c:	e0c8      	b.n	80090d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f44:	e0c4      	b.n	80090d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f4e:	d167      	bne.n	8009020 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008f50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d828      	bhi.n	8008faa <UART_SetConfig+0x43e>
 8008f58:	a201      	add	r2, pc, #4	@ (adr r2, 8008f60 <UART_SetConfig+0x3f4>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008f8d 	.word	0x08008f8d
 8008f68:	08008f95 	.word	0x08008f95
 8008f6c:	08008fab 	.word	0x08008fab
 8008f70:	08008f9b 	.word	0x08008f9b
 8008f74:	08008fab 	.word	0x08008fab
 8008f78:	08008fab 	.word	0x08008fab
 8008f7c:	08008fab 	.word	0x08008fab
 8008f80:	08008fa3 	.word	0x08008fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f84:	f7fe f802 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8008f88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f8a:	e014      	b.n	8008fb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f8c:	f7fe f814 	bl	8006fb8 <HAL_RCC_GetPCLK2Freq>
 8008f90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f92:	e010      	b.n	8008fb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f94:	4b5a      	ldr	r3, [pc, #360]	@ (8009100 <UART_SetConfig+0x594>)
 8008f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f98:	e00d      	b.n	8008fb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f9a:	f7fd ff89 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8008f9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fa0:	e009      	b.n	8008fb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fa8:	e005      	b.n	8008fb6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8089 	beq.w	80090d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80090fc <UART_SetConfig+0x590>)
 8008fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fd0:	005a      	lsls	r2, r3, #1
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	441a      	add	r2, r3
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	2b0f      	cmp	r3, #15
 8008fe8:	d916      	bls.n	8009018 <UART_SetConfig+0x4ac>
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff0:	d212      	bcs.n	8009018 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f023 030f 	bic.w	r3, r3, #15
 8008ffa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	b29b      	uxth	r3, r3
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	b29a      	uxth	r2, r3
 8009008:	8bfb      	ldrh	r3, [r7, #30]
 800900a:	4313      	orrs	r3, r2
 800900c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	8bfa      	ldrh	r2, [r7, #30]
 8009014:	60da      	str	r2, [r3, #12]
 8009016:	e05b      	b.n	80090d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800901e:	e057      	b.n	80090d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009020:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009024:	2b08      	cmp	r3, #8
 8009026:	d828      	bhi.n	800907a <UART_SetConfig+0x50e>
 8009028:	a201      	add	r2, pc, #4	@ (adr r2, 8009030 <UART_SetConfig+0x4c4>)
 800902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902e:	bf00      	nop
 8009030:	08009055 	.word	0x08009055
 8009034:	0800905d 	.word	0x0800905d
 8009038:	08009065 	.word	0x08009065
 800903c:	0800907b 	.word	0x0800907b
 8009040:	0800906b 	.word	0x0800906b
 8009044:	0800907b 	.word	0x0800907b
 8009048:	0800907b 	.word	0x0800907b
 800904c:	0800907b 	.word	0x0800907b
 8009050:	08009073 	.word	0x08009073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009054:	f7fd ff9a 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8009058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800905a:	e014      	b.n	8009086 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800905c:	f7fd ffac 	bl	8006fb8 <HAL_RCC_GetPCLK2Freq>
 8009060:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009062:	e010      	b.n	8009086 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009064:	4b26      	ldr	r3, [pc, #152]	@ (8009100 <UART_SetConfig+0x594>)
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009068:	e00d      	b.n	8009086 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800906a:	f7fd ff21 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 800906e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009070:	e009      	b.n	8009086 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009078:	e005      	b.n	8009086 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009084:	bf00      	nop
    }

    if (pclk != 0U)
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d021      	beq.n	80090d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009090:	4a1a      	ldr	r2, [pc, #104]	@ (80090fc <UART_SetConfig+0x590>)
 8009092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009096:	461a      	mov	r2, r3
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	fbb3 f2f2 	udiv	r2, r3, r2
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	441a      	add	r2, r3
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	2b0f      	cmp	r3, #15
 80090b4:	d909      	bls.n	80090ca <UART_SetConfig+0x55e>
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090bc:	d205      	bcs.n	80090ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60da      	str	r2, [r3, #12]
 80090c8:	e002      	b.n	80090d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2201      	movs	r2, #1
 80090dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2200      	movs	r2, #0
 80090e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2200      	movs	r2, #0
 80090ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80090ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3730      	adds	r7, #48	@ 0x30
 80090f4:	46bd      	mov	sp, r7
 80090f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090fa:	bf00      	nop
 80090fc:	0800c958 	.word	0x0800c958
 8009100:	00f42400 	.word	0x00f42400

08009104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	f003 0308 	and.w	r3, r3, #8
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01a      	beq.n	800921a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009202:	d10a      	bne.n	800921a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	605a      	str	r2, [r3, #4]
  }
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b098      	sub	sp, #96	@ 0x60
 800924c:	af02      	add	r7, sp, #8
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009258:	f7fa fb5a 	bl	8003910 <HAL_GetTick>
 800925c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b08      	cmp	r3, #8
 800926a:	d12f      	bne.n	80092cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800926c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009274:	2200      	movs	r2, #0
 8009276:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f88e 	bl	800939c <UART_WaitOnFlagUntilTimeout>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d022      	beq.n	80092cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800929a:	653b      	str	r3, [r7, #80]	@ 0x50
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80092a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e6      	bne.n	8009286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e063      	b.n	8009394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0304 	and.w	r3, r3, #4
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d149      	bne.n	800936e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092e2:	2200      	movs	r2, #0
 80092e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f857 	bl	800939c <UART_WaitOnFlagUntilTimeout>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d03c      	beq.n	800936e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	623b      	str	r3, [r7, #32]
   return(result);
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009312:	633b      	str	r3, [r7, #48]	@ 0x30
 8009314:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e6      	bne.n	80092f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	60fb      	str	r3, [r7, #12]
   return(result);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009346:	61fa      	str	r2, [r7, #28]
 8009348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	69b9      	ldr	r1, [r7, #24]
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	617b      	str	r3, [r7, #20]
   return(result);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e5      	bne.n	8009326 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2220      	movs	r2, #32
 800935e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e012      	b.n	8009394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3758      	adds	r7, #88	@ 0x58
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	4613      	mov	r3, r2
 80093aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ac:	e04f      	b.n	800944e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b4:	d04b      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b6:	f7fa faab 	bl	8003910 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <UART_WaitOnFlagUntilTimeout+0x30>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e04e      	b.n	800946e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d037      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0xb2>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b80      	cmp	r3, #128	@ 0x80
 80093e2:	d034      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0xb2>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b40      	cmp	r3, #64	@ 0x40
 80093e8:	d031      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d110      	bne.n	800941a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2208      	movs	r2, #8
 80093fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f838 	bl	8009476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2208      	movs	r2, #8
 800940a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e029      	b.n	800946e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009428:	d111      	bne.n	800944e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f81e 	bl	8009476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e00f      	b.n	800946e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4013      	ands	r3, r2
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	429a      	cmp	r2, r3
 800945c:	bf0c      	ite	eq
 800945e:	2301      	moveq	r3, #1
 8009460:	2300      	movne	r3, #0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	429a      	cmp	r2, r3
 800946a:	d0a0      	beq.n	80093ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009476:	b480      	push	{r7}
 8009478:	b095      	sub	sp, #84	@ 0x54
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800949c:	643b      	str	r3, [r7, #64]	@ 0x40
 800949e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	61fb      	str	r3, [r7, #28]
   return(result);
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094c6:	f023 0301 	bic.w	r3, r3, #1
 80094ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e3      	bne.n	80094b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d118      	bne.n	8009522 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f023 0310 	bic.w	r3, r3, #16
 8009504:	647b      	str	r3, [r7, #68]	@ 0x44
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6979      	ldr	r1, [r7, #20]
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	613b      	str	r3, [r7, #16]
   return(result);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e6      	bne.n	80094f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009536:	bf00      	nop
 8009538:	3754      	adds	r7, #84	@ 0x54
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <__NVIC_SetPriority>:
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009554:	2b00      	cmp	r3, #0
 8009556:	db0a      	blt.n	800956e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	b2da      	uxtb	r2, r3
 800955c:	490c      	ldr	r1, [pc, #48]	@ (8009590 <__NVIC_SetPriority+0x4c>)
 800955e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009562:	0112      	lsls	r2, r2, #4
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	440b      	add	r3, r1
 8009568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800956c:	e00a      	b.n	8009584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	b2da      	uxtb	r2, r3
 8009572:	4908      	ldr	r1, [pc, #32]	@ (8009594 <__NVIC_SetPriority+0x50>)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	3b04      	subs	r3, #4
 800957c:	0112      	lsls	r2, r2, #4
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	440b      	add	r3, r1
 8009582:	761a      	strb	r2, [r3, #24]
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	e000e100 	.word	0xe000e100
 8009594:	e000ed00 	.word	0xe000ed00

08009598 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <SysTick_Handler+0x1c>)
 800959e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80095a0:	f001 fe44 	bl	800b22c <xTaskGetSchedulerState>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d001      	beq.n	80095ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095aa:	f002 fc3d 	bl	800be28 <xPortSysTickHandler>
  }
}
 80095ae:	bf00      	nop
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	e000e010 	.word	0xe000e010

080095b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095bc:	2100      	movs	r1, #0
 80095be:	f06f 0004 	mvn.w	r0, #4
 80095c2:	f7ff ffbf 	bl	8009544 <__NVIC_SetPriority>
#endif
}
 80095c6:	bf00      	nop
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095d2:	f3ef 8305 	mrs	r3, IPSR
 80095d6:	603b      	str	r3, [r7, #0]
  return(result);
 80095d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095de:	f06f 0305 	mvn.w	r3, #5
 80095e2:	607b      	str	r3, [r7, #4]
 80095e4:	e00c      	b.n	8009600 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009610 <osKernelInitialize+0x44>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80095ee:	4b08      	ldr	r3, [pc, #32]	@ (8009610 <osKernelInitialize+0x44>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	e002      	b.n	8009600 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009600:	687b      	ldr	r3, [r7, #4]
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	2000192c 	.word	0x2000192c

08009614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800961a:	f3ef 8305 	mrs	r3, IPSR
 800961e:	603b      	str	r3, [r7, #0]
  return(result);
 8009620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009626:	f06f 0305 	mvn.w	r3, #5
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	e010      	b.n	8009650 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800962e:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <osKernelStart+0x48>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d109      	bne.n	800964a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009636:	f7ff ffbf 	bl	80095b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800963a:	4b08      	ldr	r3, [pc, #32]	@ (800965c <osKernelStart+0x48>)
 800963c:	2202      	movs	r2, #2
 800963e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009640:	f001 f97e 	bl	800a940 <vTaskStartScheduler>
      stat = osOK;
 8009644:	2300      	movs	r3, #0
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	e002      	b.n	8009650 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800964a:	f04f 33ff 	mov.w	r3, #4294967295
 800964e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009650:	687b      	ldr	r3, [r7, #4]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	2000192c 	.word	0x2000192c

08009660 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009666:	f3ef 8305 	mrs	r3, IPSR
 800966a:	603b      	str	r3, [r7, #0]
  return(result);
 800966c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009672:	f001 fa91 	bl	800ab98 <xTaskGetTickCountFromISR>
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	e002      	b.n	8009680 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800967a:	f001 fa7d 	bl	800ab78 <xTaskGetTickCount>
 800967e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009680:	687b      	ldr	r3, [r7, #4]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800968a:	b580      	push	{r7, lr}
 800968c:	b08e      	sub	sp, #56	@ 0x38
 800968e:	af04      	add	r7, sp, #16
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800969a:	f3ef 8305 	mrs	r3, IPSR
 800969e:	617b      	str	r3, [r7, #20]
  return(result);
 80096a0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d17e      	bne.n	80097a4 <osThreadNew+0x11a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d07b      	beq.n	80097a4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096ac:	2380      	movs	r3, #128	@ 0x80
 80096ae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096b0:	2318      	movs	r3, #24
 80096b2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80096b8:	f04f 33ff 	mov.w	r3, #4294967295
 80096bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d045      	beq.n	8009750 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <osThreadNew+0x48>
        name = attr->name;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d008      	beq.n	80096f8 <osThreadNew+0x6e>
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	2b38      	cmp	r3, #56	@ 0x38
 80096ea:	d805      	bhi.n	80096f8 <osThreadNew+0x6e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <osThreadNew+0x72>
        return (NULL);
 80096f8:	2300      	movs	r3, #0
 80096fa:	e054      	b.n	80097a6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	089b      	lsrs	r3, r3, #2
 800970a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00e      	beq.n	8009732 <osThreadNew+0xa8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2ba7      	cmp	r3, #167	@ 0xa7
 800971a:	d90a      	bls.n	8009732 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009720:	2b00      	cmp	r3, #0
 8009722:	d006      	beq.n	8009732 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <osThreadNew+0xa8>
        mem = 1;
 800972c:	2301      	movs	r3, #1
 800972e:	61bb      	str	r3, [r7, #24]
 8009730:	e010      	b.n	8009754 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10c      	bne.n	8009754 <osThreadNew+0xca>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d108      	bne.n	8009754 <osThreadNew+0xca>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d104      	bne.n	8009754 <osThreadNew+0xca>
          mem = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	61bb      	str	r3, [r7, #24]
 800974e:	e001      	b.n	8009754 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d110      	bne.n	800977c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009762:	9202      	str	r2, [sp, #8]
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 fe33 	bl	800a3dc <xTaskCreateStatic>
 8009776:	4603      	mov	r3, r0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	e013      	b.n	80097a4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d110      	bne.n	80097a4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	b29a      	uxth	r2, r3
 8009786:	f107 0310 	add.w	r3, r7, #16
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 fe81 	bl	800a49c <xTaskCreate>
 800979a:	4603      	mov	r3, r0
 800979c:	2b01      	cmp	r3, #1
 800979e:	d001      	beq.n	80097a4 <osThreadNew+0x11a>
            hTask = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097a4:	693b      	ldr	r3, [r7, #16]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3728      	adds	r7, #40	@ 0x28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80097ae:	b580      	push	{r7, lr}
 80097b0:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80097b2:	2000      	movs	r0, #0
 80097b4:	f000 ffd0 	bl	800a758 <vTaskDelete>
#endif
  for (;;);
 80097b8:	bf00      	nop
 80097ba:	e7fd      	b.n	80097b8 <osThreadExit+0xa>

080097bc <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097c4:	f3ef 8305 	mrs	r3, IPSR
 80097c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ca:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80097d0:	f06f 0305 	mvn.w	r3, #5
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e019      	b.n	800980c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80097dc:	f001 f9cc 	bl	800ab78 <xTaskGetTickCount>
 80097e0:	4603      	mov	r3, r0
 80097e2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <osDelayUntil+0x4a>
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	db06      	blt.n	8009806 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80097f8:	f107 0308 	add.w	r3, r7, #8
 80097fc:	6939      	ldr	r1, [r7, #16]
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 f81e 	bl	800a840 <vTaskDelayUntil>
 8009804:	e002      	b.n	800980c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009806:	f06f 0303 	mvn.w	r3, #3
 800980a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800980c:	697b      	ldr	r3, [r7, #20]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4a07      	ldr	r2, [pc, #28]	@ (8009844 <vApplicationGetIdleTaskMemory+0x2c>)
 8009828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	4a06      	ldr	r2, [pc, #24]	@ (8009848 <vApplicationGetIdleTaskMemory+0x30>)
 800982e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2280      	movs	r2, #128	@ 0x80
 8009834:	601a      	str	r2, [r3, #0]
}
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20001930 	.word	0x20001930
 8009848:	200019d8 	.word	0x200019d8

0800984c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4a07      	ldr	r2, [pc, #28]	@ (8009878 <vApplicationGetTimerTaskMemory+0x2c>)
 800985c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	4a06      	ldr	r2, [pc, #24]	@ (800987c <vApplicationGetTimerTaskMemory+0x30>)
 8009862:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800986a:	601a      	str	r2, [r3, #0]
}
 800986c:	bf00      	nop
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	20001bd8 	.word	0x20001bd8
 800987c:	20001c80 	.word	0x20001c80

08009880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f103 0208 	add.w	r2, r3, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f04f 32ff 	mov.w	r2, #4294967295
 8009898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f103 0208 	add.w	r2, r3, #8
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f103 0208 	add.w	r2, r3, #8
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009938:	d103      	bne.n	8009942 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e00c      	b.n	800995c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3308      	adds	r3, #8
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	e002      	b.n	8009950 <vListInsert+0x2e>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	429a      	cmp	r2, r3
 800995a:	d2f6      	bcs.n	800994a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]
}
 8009988:	bf00      	nop
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6892      	ldr	r2, [r2, #8]
 80099aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6852      	ldr	r2, [r2, #4]
 80099b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d103      	bne.n	80099c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10b      	bne.n	8009a14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a14:	f002 f978 	bl	800bd08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a20:	68f9      	ldr	r1, [r7, #12]
 8009a22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a24:	fb01 f303 	mul.w	r3, r1, r3
 8009a28:	441a      	add	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a44:	3b01      	subs	r3, #1
 8009a46:	68f9      	ldr	r1, [r7, #12]
 8009a48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a4a:	fb01 f303 	mul.w	r3, r1, r3
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	22ff      	movs	r2, #255	@ 0xff
 8009a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	22ff      	movs	r2, #255	@ 0xff
 8009a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d114      	bne.n	8009a94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d01a      	beq.n	8009aa8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3310      	adds	r3, #16
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 fa12 	bl	800aea0 <xTaskRemoveFromEventList>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d012      	beq.n	8009aa8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <xQueueGenericReset+0xd0>)
 8009a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	e009      	b.n	8009aa8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3310      	adds	r3, #16
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff fef1 	bl	8009880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3324      	adds	r3, #36	@ 0x24
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff feec 	bl	8009880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009aa8:	f002 f960 	bl	800bd6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009aac:	2301      	movs	r3, #1
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08e      	sub	sp, #56	@ 0x38
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10b      	bne.n	8009b06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	e7fd      	b.n	8009b02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <xQueueGenericCreateStatic+0x56>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <xQueueGenericCreateStatic+0x5a>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <xQueueGenericCreateStatic+0x5c>
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	623b      	str	r3, [r7, #32]
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	e7fd      	b.n	8009b30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d102      	bne.n	8009b40 <xQueueGenericCreateStatic+0x84>
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <xQueueGenericCreateStatic+0x88>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <xQueueGenericCreateStatic+0x8a>
 8009b44:	2300      	movs	r3, #0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10b      	bne.n	8009b62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	61fb      	str	r3, [r7, #28]
}
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	e7fd      	b.n	8009b5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b62:	2350      	movs	r3, #80	@ 0x50
 8009b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b50      	cmp	r3, #80	@ 0x50
 8009b6a:	d00b      	beq.n	8009b84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	61bb      	str	r3, [r7, #24]
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00d      	beq.n	8009bac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f805 	bl	8009bb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3730      	adds	r7, #48	@ 0x30
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	607a      	str	r2, [r7, #4]
 8009bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	e002      	b.n	8009bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009be4:	2101      	movs	r1, #1
 8009be6:	69b8      	ldr	r0, [r7, #24]
 8009be8:	f7ff fefe 	bl	80099e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	78fa      	ldrb	r2, [r7, #3]
 8009bf0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	@ 0x38
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10b      	bne.n	8009c30 <xQueueGenericSend+0x34>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	e7fd      	b.n	8009c2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <xQueueGenericSend+0x42>
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <xQueueGenericSend+0x46>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e000      	b.n	8009c44 <xQueueGenericSend+0x48>
 8009c42:	2300      	movs	r3, #0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10b      	bne.n	8009c60 <xQueueGenericSend+0x64>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	e7fd      	b.n	8009c5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d103      	bne.n	8009c6e <xQueueGenericSend+0x72>
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <xQueueGenericSend+0x76>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <xQueueGenericSend+0x78>
 8009c72:	2300      	movs	r3, #0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10b      	bne.n	8009c90 <xQueueGenericSend+0x94>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	623b      	str	r3, [r7, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	e7fd      	b.n	8009c8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c90:	f001 facc 	bl	800b22c <xTaskGetSchedulerState>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <xQueueGenericSend+0xa4>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <xQueueGenericSend+0xa8>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e000      	b.n	8009ca6 <xQueueGenericSend+0xaa>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10b      	bne.n	8009cc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	61fb      	str	r3, [r7, #28]
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	e7fd      	b.n	8009cbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cc2:	f002 f821 	bl	800bd08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d302      	bcc.n	8009cd8 <xQueueGenericSend+0xdc>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d129      	bne.n	8009d2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	68b9      	ldr	r1, [r7, #8]
 8009cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cde:	f000 fa0f 	bl	800a100 <prvCopyDataToQueue>
 8009ce2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d010      	beq.n	8009d0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cee:	3324      	adds	r3, #36	@ 0x24
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 f8d5 	bl	800aea0 <xTaskRemoveFromEventList>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d013      	beq.n	8009d24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8009dfc <xQueueGenericSend+0x200>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	e00a      	b.n	8009d24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d007      	beq.n	8009d24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d14:	4b39      	ldr	r3, [pc, #228]	@ (8009dfc <xQueueGenericSend+0x200>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d24:	f002 f822 	bl	800bd6c <vPortExitCritical>
				return pdPASS;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e063      	b.n	8009df4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d103      	bne.n	8009d3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d32:	f002 f81b 	bl	800bd6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e05c      	b.n	8009df4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d40:	f107 0314 	add.w	r3, r7, #20
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 f90f 	bl	800af68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d4e:	f002 f80d 	bl	800bd6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d52:	f000 fe65 	bl	800aa20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d56:	f001 ffd7 	bl	800bd08 <vPortEnterCritical>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d103      	bne.n	8009d70 <xQueueGenericSend+0x174>
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7c:	d103      	bne.n	8009d86 <xQueueGenericSend+0x18a>
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d86:	f001 fff1 	bl	800bd6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d8a:	1d3a      	adds	r2, r7, #4
 8009d8c:	f107 0314 	add.w	r3, r7, #20
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 f8fe 	bl	800af94 <xTaskCheckForTimeOut>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d124      	bne.n	8009de8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009da0:	f000 faa6 	bl	800a2f0 <prvIsQueueFull>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d018      	beq.n	8009ddc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	3310      	adds	r3, #16
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	4611      	mov	r1, r2
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 f822 	bl	800adfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dba:	f000 fa31 	bl	800a220 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009dbe:	f000 fe3d 	bl	800aa3c <xTaskResumeAll>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f47f af7c 	bne.w	8009cc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009dca:	4b0c      	ldr	r3, [pc, #48]	@ (8009dfc <xQueueGenericSend+0x200>)
 8009dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	e772      	b.n	8009cc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dde:	f000 fa1f 	bl	800a220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009de2:	f000 fe2b 	bl	800aa3c <xTaskResumeAll>
 8009de6:	e76c      	b.n	8009cc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dea:	f000 fa19 	bl	800a220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dee:	f000 fe25 	bl	800aa3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009df2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3738      	adds	r7, #56	@ 0x38
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	e000ed04 	.word	0xe000ed04

08009e00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b090      	sub	sp, #64	@ 0x40
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10b      	bne.n	8009e30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e2a:	bf00      	nop
 8009e2c:	bf00      	nop
 8009e2e:	e7fd      	b.n	8009e2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d103      	bne.n	8009e3e <xQueueGenericSendFromISR+0x3e>
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <xQueueGenericSendFromISR+0x42>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <xQueueGenericSendFromISR+0x44>
 8009e42:	2300      	movs	r3, #0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10b      	bne.n	8009e60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e5a:	bf00      	nop
 8009e5c:	bf00      	nop
 8009e5e:	e7fd      	b.n	8009e5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d103      	bne.n	8009e6e <xQueueGenericSendFromISR+0x6e>
 8009e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <xQueueGenericSendFromISR+0x72>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <xQueueGenericSendFromISR+0x74>
 8009e72:	2300      	movs	r3, #0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	623b      	str	r3, [r7, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e90:	f002 f81a 	bl	800bec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e94:	f3ef 8211 	mrs	r2, BASEPRI
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	61fa      	str	r2, [r7, #28]
 8009eaa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009eac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d302      	bcc.n	8009ec2 <xQueueGenericSendFromISR+0xc2>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d12f      	bne.n	8009f22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ec8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ed8:	f000 f912 	bl	800a100 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009edc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d112      	bne.n	8009f0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d016      	beq.n	8009f1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef0:	3324      	adds	r3, #36	@ 0x24
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 ffd4 	bl	800aea0 <xTaskRemoveFromEventList>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00e      	beq.n	8009f1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	e007      	b.n	8009f1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f10:	3301      	adds	r3, #1
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	b25a      	sxtb	r2, r3
 8009f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009f20:	e001      	b.n	8009f26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3740      	adds	r7, #64	@ 0x40
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08c      	sub	sp, #48	@ 0x30
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10b      	bne.n	8009f6e <xQueueReceive+0x32>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	623b      	str	r3, [r7, #32]
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	e7fd      	b.n	8009f6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <xQueueReceive+0x40>
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <xQueueReceive+0x44>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <xQueueReceive+0x46>
 8009f80:	2300      	movs	r3, #0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10b      	bne.n	8009f9e <xQueueReceive+0x62>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	61fb      	str	r3, [r7, #28]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f9e:	f001 f945 	bl	800b22c <xTaskGetSchedulerState>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <xQueueReceive+0x72>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <xQueueReceive+0x76>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <xQueueReceive+0x78>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <xQueueReceive+0x94>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	61bb      	str	r3, [r7, #24]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fd0:	f001 fe9a 	bl	800bd08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d01f      	beq.n	800a020 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fe0:	68b9      	ldr	r1, [r7, #8]
 8009fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe4:	f000 f8f6 	bl	800a1d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fea:	1e5a      	subs	r2, r3, #1
 8009fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00f      	beq.n	800a018 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffa:	3310      	adds	r3, #16
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 ff4f 	bl	800aea0 <xTaskRemoveFromEventList>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d007      	beq.n	800a018 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a008:	4b3c      	ldr	r3, [pc, #240]	@ (800a0fc <xQueueReceive+0x1c0>)
 800a00a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a018:	f001 fea8 	bl	800bd6c <vPortExitCritical>
				return pdPASS;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e069      	b.n	800a0f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d103      	bne.n	800a02e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a026:	f001 fea1 	bl	800bd6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a02a:	2300      	movs	r3, #0
 800a02c:	e062      	b.n	800a0f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d106      	bne.n	800a042 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a034:	f107 0310 	add.w	r3, r7, #16
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 ff95 	bl	800af68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a03e:	2301      	movs	r3, #1
 800a040:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a042:	f001 fe93 	bl	800bd6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a046:	f000 fceb 	bl	800aa20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a04a:	f001 fe5d 	bl	800bd08 <vPortEnterCritical>
 800a04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a054:	b25b      	sxtb	r3, r3
 800a056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05a:	d103      	bne.n	800a064 <xQueueReceive+0x128>
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a06a:	b25b      	sxtb	r3, r3
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d103      	bne.n	800a07a <xQueueReceive+0x13e>
 800a072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a07a:	f001 fe77 	bl	800bd6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a07e:	1d3a      	adds	r2, r7, #4
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	4611      	mov	r1, r2
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff84 	bl	800af94 <xTaskCheckForTimeOut>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d123      	bne.n	800a0da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a094:	f000 f916 	bl	800a2c4 <prvIsQueueEmpty>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d017      	beq.n	800a0ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	3324      	adds	r3, #36	@ 0x24
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fea8 	bl	800adfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ae:	f000 f8b7 	bl	800a220 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0b2:	f000 fcc3 	bl	800aa3c <xTaskResumeAll>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d189      	bne.n	8009fd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a0bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a0fc <xQueueReceive+0x1c0>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	e780      	b.n	8009fd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a0ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0d0:	f000 f8a6 	bl	800a220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0d4:	f000 fcb2 	bl	800aa3c <xTaskResumeAll>
 800a0d8:	e77a      	b.n	8009fd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a0da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0dc:	f000 f8a0 	bl	800a220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0e0:	f000 fcac 	bl	800aa3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e6:	f000 f8ed 	bl	800a2c4 <prvIsQueueEmpty>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f43f af6f 	beq.w	8009fd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3730      	adds	r7, #48	@ 0x30
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a114:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10d      	bne.n	800a13a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d14d      	bne.n	800a1c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 f89c 	bl	800b268 <xTaskPriorityDisinherit>
 800a130:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	e043      	b.n	800a1c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d119      	bne.n	800a174 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6858      	ldr	r0, [r3, #4]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a148:	461a      	mov	r2, r3
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	f002 f97e 	bl	800c44c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a158:	441a      	add	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	429a      	cmp	r2, r3
 800a168:	d32b      	bcc.n	800a1c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	e026      	b.n	800a1c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68d8      	ldr	r0, [r3, #12]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17c:	461a      	mov	r2, r3
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	f002 f964 	bl	800c44c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18c:	425b      	negs	r3, r3
 800a18e:	441a      	add	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d207      	bcs.n	800a1b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a8:	425b      	negs	r3, r3
 800a1aa:	441a      	add	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d105      	bne.n	800a1c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a1ca:	697b      	ldr	r3, [r7, #20]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d018      	beq.n	800a218 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ee:	441a      	add	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d303      	bcc.n	800a208 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68d9      	ldr	r1, [r3, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a210:	461a      	mov	r2, r3
 800a212:	6838      	ldr	r0, [r7, #0]
 800a214:	f002 f91a 	bl	800c44c <memcpy>
	}
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a228:	f001 fd6e 	bl	800bd08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a232:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a234:	e011      	b.n	800a25a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d012      	beq.n	800a264 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3324      	adds	r3, #36	@ 0x24
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fe2c 	bl	800aea0 <xTaskRemoveFromEventList>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a24e:	f000 ff05 	bl	800b05c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	3b01      	subs	r3, #1
 800a256:	b2db      	uxtb	r3, r3
 800a258:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dce9      	bgt.n	800a236 <prvUnlockQueue+0x16>
 800a262:	e000      	b.n	800a266 <prvUnlockQueue+0x46>
					break;
 800a264:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	22ff      	movs	r2, #255	@ 0xff
 800a26a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a26e:	f001 fd7d 	bl	800bd6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a272:	f001 fd49 	bl	800bd08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a27c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a27e:	e011      	b.n	800a2a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d012      	beq.n	800a2ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3310      	adds	r3, #16
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 fe07 	bl	800aea0 <xTaskRemoveFromEventList>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a298:	f000 fee0 	bl	800b05c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dce9      	bgt.n	800a280 <prvUnlockQueue+0x60>
 800a2ac:	e000      	b.n	800a2b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	22ff      	movs	r2, #255	@ 0xff
 800a2b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a2b8:	f001 fd58 	bl	800bd6c <vPortExitCritical>
}
 800a2bc:	bf00      	nop
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2cc:	f001 fd1c 	bl	800bd08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	e001      	b.n	800a2e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2e2:	f001 fd43 	bl	800bd6c <vPortExitCritical>

	return xReturn;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2f8:	f001 fd06 	bl	800bd08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a304:	429a      	cmp	r2, r3
 800a306:	d102      	bne.n	800a30e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	e001      	b.n	800a312 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a312:	f001 fd2b 	bl	800bd6c <vPortExitCritical>

	return xReturn;
 800a316:	68fb      	ldr	r3, [r7, #12]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	e014      	b.n	800a35a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a330:	4a0f      	ldr	r2, [pc, #60]	@ (800a370 <vQueueAddToRegistry+0x50>)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10b      	bne.n	800a354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a33c:	490c      	ldr	r1, [pc, #48]	@ (800a370 <vQueueAddToRegistry+0x50>)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a346:	4a0a      	ldr	r2, [pc, #40]	@ (800a370 <vQueueAddToRegistry+0x50>)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	4413      	add	r3, r2
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a352:	e006      	b.n	800a362 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b07      	cmp	r3, #7
 800a35e:	d9e7      	bls.n	800a330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20002080 	.word	0x20002080

0800a374 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a384:	f001 fcc0 	bl	800bd08 <vPortEnterCritical>
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a38e:	b25b      	sxtb	r3, r3
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a394:	d103      	bne.n	800a39e <vQueueWaitForMessageRestricted+0x2a>
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3a4:	b25b      	sxtb	r3, r3
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d103      	bne.n	800a3b4 <vQueueWaitForMessageRestricted+0x40>
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3b4:	f001 fcda 	bl	800bd6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d106      	bne.n	800a3ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	3324      	adds	r3, #36	@ 0x24
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fd3d 	bl	800ae48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3ce:	6978      	ldr	r0, [r7, #20]
 800a3d0:	f7ff ff26 	bl	800a220 <prvUnlockQueue>
	}
 800a3d4:	bf00      	nop
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08e      	sub	sp, #56	@ 0x38
 800a3e0:	af04      	add	r7, sp, #16
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	623b      	str	r3, [r7, #32]
}
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	e7fd      	b.n	800a404 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10b      	bne.n	800a426 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	61fb      	str	r3, [r7, #28]
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	e7fd      	b.n	800a422 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a426:	23a8      	movs	r3, #168	@ 0xa8
 800a428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a42e:	d00b      	beq.n	800a448 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	61bb      	str	r3, [r7, #24]
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	e7fd      	b.n	800a444 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a448:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01e      	beq.n	800a48e <xTaskCreateStatic+0xb2>
 800a450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01b      	beq.n	800a48e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a45e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	2202      	movs	r2, #2
 800a464:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a468:	2300      	movs	r3, #0
 800a46a:	9303      	str	r3, [sp, #12]
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	9302      	str	r3, [sp, #8]
 800a470:	f107 0314 	add.w	r3, r7, #20
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f851 	bl	800a528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a486:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a488:	f000 f8f6 	bl	800a678 <prvAddNewTaskToReadyList>
 800a48c:	e001      	b.n	800a492 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a492:	697b      	ldr	r3, [r7, #20]
	}
 800a494:	4618      	mov	r0, r3
 800a496:	3728      	adds	r7, #40	@ 0x28
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08c      	sub	sp, #48	@ 0x30
 800a4a0:	af04      	add	r7, sp, #16
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f001 fd4b 	bl	800bf4c <pvPortMalloc>
 800a4b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00e      	beq.n	800a4dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4be:	20a8      	movs	r0, #168	@ 0xa8
 800a4c0:	f001 fd44 	bl	800bf4c <pvPortMalloc>
 800a4c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4d2:	e005      	b.n	800a4e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f001 fe07 	bl	800c0e8 <vPortFree>
 800a4da:	e001      	b.n	800a4e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d017      	beq.n	800a516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4ee:	88fa      	ldrh	r2, [r7, #6]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 f80f 	bl	800a528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a50a:	69f8      	ldr	r0, [r7, #28]
 800a50c:	f000 f8b4 	bl	800a678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a510:	2301      	movs	r3, #1
 800a512:	61bb      	str	r3, [r7, #24]
 800a514:	e002      	b.n	800a51c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a516:	f04f 33ff 	mov.w	r3, #4294967295
 800a51a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a51c:	69bb      	ldr	r3, [r7, #24]
	}
 800a51e:	4618      	mov	r0, r3
 800a520:	3720      	adds	r7, #32
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	461a      	mov	r2, r3
 800a540:	21a5      	movs	r1, #165	@ 0xa5
 800a542:	f001 fef1 	bl	800c328 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a550:	3b01      	subs	r3, #1
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	f023 0307 	bic.w	r3, r3, #7
 800a55e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00b      	beq.n	800a582 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	617b      	str	r3, [r7, #20]
}
 800a57c:	bf00      	nop
 800a57e:	bf00      	nop
 800a580:	e7fd      	b.n	800a57e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01f      	beq.n	800a5c8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a588:	2300      	movs	r3, #0
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	e012      	b.n	800a5b4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4413      	add	r3, r2
 800a594:	7819      	ldrb	r1, [r3, #0]
 800a596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	4413      	add	r3, r2
 800a59c:	3334      	adds	r3, #52	@ 0x34
 800a59e:	460a      	mov	r2, r1
 800a5a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d006      	beq.n	800a5bc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	61fb      	str	r3, [r7, #28]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	d9e9      	bls.n	800a58e <prvInitialiseNewTask+0x66>
 800a5ba:	e000      	b.n	800a5be <prvInitialiseNewTask+0x96>
			{
				break;
 800a5bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5c6:	e003      	b.n	800a5d0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	2b37      	cmp	r3, #55	@ 0x37
 800a5d4:	d901      	bls.n	800a5da <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5d6:	2337      	movs	r3, #55	@ 0x37
 800a5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7ff f965 	bl	80098c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	3318      	adds	r3, #24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff f960 	bl	80098c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a604:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a608:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a614:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	2200      	movs	r2, #0
 800a622:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a628:	3354      	adds	r3, #84	@ 0x54
 800a62a:	224c      	movs	r2, #76	@ 0x4c
 800a62c:	2100      	movs	r1, #0
 800a62e:	4618      	mov	r0, r3
 800a630:	f001 fe7a 	bl	800c328 <memset>
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	4a0d      	ldr	r2, [pc, #52]	@ (800a66c <prvInitialiseNewTask+0x144>)
 800a638:	659a      	str	r2, [r3, #88]	@ 0x58
 800a63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63c:	4a0c      	ldr	r2, [pc, #48]	@ (800a670 <prvInitialiseNewTask+0x148>)
 800a63e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	4a0c      	ldr	r2, [pc, #48]	@ (800a674 <prvInitialiseNewTask+0x14c>)
 800a644:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	68f9      	ldr	r1, [r7, #12]
 800a64a:	69b8      	ldr	r0, [r7, #24]
 800a64c:	f001 fa2a 	bl	800baa4 <pxPortInitialiseStack>
 800a650:	4602      	mov	r2, r0
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a662:	bf00      	nop
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20003314 	.word	0x20003314
 800a670:	2000337c 	.word	0x2000337c
 800a674:	200033e4 	.word	0x200033e4

0800a678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a680:	f001 fb42 	bl	800bd08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a684:	4b2d      	ldr	r3, [pc, #180]	@ (800a73c <prvAddNewTaskToReadyList+0xc4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3301      	adds	r3, #1
 800a68a:	4a2c      	ldr	r2, [pc, #176]	@ (800a73c <prvAddNewTaskToReadyList+0xc4>)
 800a68c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a68e:	4b2c      	ldr	r3, [pc, #176]	@ (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d109      	bne.n	800a6aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a696:	4a2a      	ldr	r2, [pc, #168]	@ (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a69c:	4b27      	ldr	r3, [pc, #156]	@ (800a73c <prvAddNewTaskToReadyList+0xc4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d110      	bne.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6a4:	f000 fcfe 	bl	800b0a4 <prvInitialiseTaskLists>
 800a6a8:	e00d      	b.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6aa:	4b26      	ldr	r3, [pc, #152]	@ (800a744 <prvAddNewTaskToReadyList+0xcc>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6b2:	4b23      	ldr	r3, [pc, #140]	@ (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d802      	bhi.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6c0:	4a1f      	ldr	r2, [pc, #124]	@ (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6c6:	4b20      	ldr	r3, [pc, #128]	@ (800a748 <prvAddNewTaskToReadyList+0xd0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a748 <prvAddNewTaskToReadyList+0xd0>)
 800a6ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a748 <prvAddNewTaskToReadyList+0xd0>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a74c <prvAddNewTaskToReadyList+0xd4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d903      	bls.n	800a6ec <prvAddNewTaskToReadyList+0x74>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	4a18      	ldr	r2, [pc, #96]	@ (800a74c <prvAddNewTaskToReadyList+0xd4>)
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4a15      	ldr	r2, [pc, #84]	@ (800a750 <prvAddNewTaskToReadyList+0xd8>)
 800a6fa:	441a      	add	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4610      	mov	r0, r2
 800a704:	f7ff f8e9 	bl	80098da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a708:	f001 fb30 	bl	800bd6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a70c:	4b0d      	ldr	r3, [pc, #52]	@ (800a744 <prvAddNewTaskToReadyList+0xcc>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00e      	beq.n	800a732 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a714:	4b0a      	ldr	r3, [pc, #40]	@ (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71e:	429a      	cmp	r2, r3
 800a720:	d207      	bcs.n	800a732 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a722:	4b0c      	ldr	r3, [pc, #48]	@ (800a754 <prvAddNewTaskToReadyList+0xdc>)
 800a724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20002594 	.word	0x20002594
 800a740:	200020c0 	.word	0x200020c0
 800a744:	200025a0 	.word	0x200025a0
 800a748:	200025b0 	.word	0x200025b0
 800a74c:	2000259c 	.word	0x2000259c
 800a750:	200020c4 	.word	0x200020c4
 800a754:	e000ed04 	.word	0xe000ed04

0800a758 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a760:	f001 fad2 	bl	800bd08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d102      	bne.n	800a770 <vTaskDelete+0x18>
 800a76a:	4b2d      	ldr	r3, [pc, #180]	@ (800a820 <vTaskDelete+0xc8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	e000      	b.n	800a772 <vTaskDelete+0x1a>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	3304      	adds	r3, #4
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff f90b 	bl	8009994 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3318      	adds	r3, #24
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff f902 	bl	8009994 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a790:	4b24      	ldr	r3, [pc, #144]	@ (800a824 <vTaskDelete+0xcc>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3301      	adds	r3, #1
 800a796:	4a23      	ldr	r2, [pc, #140]	@ (800a824 <vTaskDelete+0xcc>)
 800a798:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a79a:	4b21      	ldr	r3, [pc, #132]	@ (800a820 <vTaskDelete+0xc8>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d10b      	bne.n	800a7bc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	481f      	ldr	r0, [pc, #124]	@ (800a828 <vTaskDelete+0xd0>)
 800a7ac:	f7ff f895 	bl	80098da <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a7b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a82c <vTaskDelete+0xd4>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a82c <vTaskDelete+0xd4>)
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e009      	b.n	800a7d0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a830 <vTaskDelete+0xd8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a830 <vTaskDelete+0xd8>)
 800a7c4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fcda 	bl	800b180 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a7cc:	f000 fd0e 	bl	800b1ec <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800a7d0:	f001 facc 	bl	800bd6c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a7d4:	4b17      	ldr	r3, [pc, #92]	@ (800a834 <vTaskDelete+0xdc>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01c      	beq.n	800a816 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800a7dc:	4b10      	ldr	r3, [pc, #64]	@ (800a820 <vTaskDelete+0xc8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d117      	bne.n	800a816 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a7e6:	4b14      	ldr	r3, [pc, #80]	@ (800a838 <vTaskDelete+0xe0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <vTaskDelete+0xae>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60bb      	str	r3, [r7, #8]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800a806:	4b0d      	ldr	r3, [pc, #52]	@ (800a83c <vTaskDelete+0xe4>)
 800a808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	200020c0 	.word	0x200020c0
 800a824:	200025b0 	.word	0x200025b0
 800a828:	20002568 	.word	0x20002568
 800a82c:	2000257c 	.word	0x2000257c
 800a830:	20002594 	.word	0x20002594
 800a834:	200025a0 	.word	0x200025a0
 800a838:	200025bc 	.word	0x200025bc
 800a83c:	e000ed04 	.word	0xe000ed04

0800a840 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	@ 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <vTaskDelayUntil+0x2c>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	617b      	str	r3, [r7, #20]
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10b      	bne.n	800a88a <vTaskDelayUntil+0x4a>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	613b      	str	r3, [r7, #16]
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800a88a:	4b2a      	ldr	r3, [pc, #168]	@ (800a934 <vTaskDelayUntil+0xf4>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00b      	beq.n	800a8aa <vTaskDelayUntil+0x6a>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60fb      	str	r3, [r7, #12]
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop
 800a8a8:	e7fd      	b.n	800a8a6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800a8aa:	f000 f8b9 	bl	800aa20 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a8ae:	4b22      	ldr	r3, [pc, #136]	@ (800a938 <vTaskDelayUntil+0xf8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6a3a      	ldr	r2, [r7, #32]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d20b      	bcs.n	800a8e0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d211      	bcs.n	800a8f6 <vTaskDelayUntil+0xb6>
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d90d      	bls.n	800a8f6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8de:	e00a      	b.n	800a8f6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d303      	bcc.n	800a8f2 <vTaskDelayUntil+0xb2>
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d901      	bls.n	800a8f6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69fa      	ldr	r2, [r7, #28]
 800a8fa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a902:	69fa      	ldr	r2, [r7, #28]
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fd1c 	bl	800b348 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a910:	f000 f894 	bl	800aa3c <xTaskResumeAll>
 800a914:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d107      	bne.n	800a92c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800a91c:	4b07      	ldr	r3, [pc, #28]	@ (800a93c <vTaskDelayUntil+0xfc>)
 800a91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a92c:	bf00      	nop
 800a92e:	3728      	adds	r7, #40	@ 0x28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	200025bc 	.word	0x200025bc
 800a938:	20002598 	.word	0x20002598
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	@ 0x28
 800a944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a94a:	2300      	movs	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a94e:	463a      	mov	r2, r7
 800a950:	1d39      	adds	r1, r7, #4
 800a952:	f107 0308 	add.w	r3, r7, #8
 800a956:	4618      	mov	r0, r3
 800a958:	f7fe ff5e 	bl	8009818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	9202      	str	r2, [sp, #8]
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	2300      	movs	r3, #0
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	2300      	movs	r3, #0
 800a96c:	460a      	mov	r2, r1
 800a96e:	4924      	ldr	r1, [pc, #144]	@ (800aa00 <vTaskStartScheduler+0xc0>)
 800a970:	4824      	ldr	r0, [pc, #144]	@ (800aa04 <vTaskStartScheduler+0xc4>)
 800a972:	f7ff fd33 	bl	800a3dc <xTaskCreateStatic>
 800a976:	4603      	mov	r3, r0
 800a978:	4a23      	ldr	r2, [pc, #140]	@ (800aa08 <vTaskStartScheduler+0xc8>)
 800a97a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a97c:	4b22      	ldr	r3, [pc, #136]	@ (800aa08 <vTaskStartScheduler+0xc8>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a984:	2301      	movs	r3, #1
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	e001      	b.n	800a98e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d102      	bne.n	800a99a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a994:	f000 fd2c 	bl	800b3f0 <xTimerCreateTimerTask>
 800a998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d11b      	bne.n	800a9d8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9b4:	4b15      	ldr	r3, [pc, #84]	@ (800aa0c <vTaskStartScheduler+0xcc>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3354      	adds	r3, #84	@ 0x54
 800a9ba:	4a15      	ldr	r2, [pc, #84]	@ (800aa10 <vTaskStartScheduler+0xd0>)
 800a9bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9be:	4b15      	ldr	r3, [pc, #84]	@ (800aa14 <vTaskStartScheduler+0xd4>)
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9c6:	4b14      	ldr	r3, [pc, #80]	@ (800aa18 <vTaskStartScheduler+0xd8>)
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9cc:	4b13      	ldr	r3, [pc, #76]	@ (800aa1c <vTaskStartScheduler+0xdc>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9d2:	f001 f8f5 	bl	800bbc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9d6:	e00f      	b.n	800a9f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d10b      	bne.n	800a9f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	60fb      	str	r3, [r7, #12]
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	e7fd      	b.n	800a9f4 <vTaskStartScheduler+0xb4>
}
 800a9f8:	bf00      	nop
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	0800c898 	.word	0x0800c898
 800aa04:	0800b075 	.word	0x0800b075
 800aa08:	200025b8 	.word	0x200025b8
 800aa0c:	200020c0 	.word	0x200020c0
 800aa10:	20001254 	.word	0x20001254
 800aa14:	200025b4 	.word	0x200025b4
 800aa18:	200025a0 	.word	0x200025a0
 800aa1c:	20002598 	.word	0x20002598

0800aa20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa24:	4b04      	ldr	r3, [pc, #16]	@ (800aa38 <vTaskSuspendAll+0x18>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	4a03      	ldr	r2, [pc, #12]	@ (800aa38 <vTaskSuspendAll+0x18>)
 800aa2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa2e:	bf00      	nop
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	200025bc 	.word	0x200025bc

0800aa3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa4a:	4b42      	ldr	r3, [pc, #264]	@ (800ab54 <xTaskResumeAll+0x118>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10b      	bne.n	800aa6a <xTaskResumeAll+0x2e>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	603b      	str	r3, [r7, #0]
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	e7fd      	b.n	800aa66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa6a:	f001 f94d 	bl	800bd08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa6e:	4b39      	ldr	r3, [pc, #228]	@ (800ab54 <xTaskResumeAll+0x118>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	4a37      	ldr	r2, [pc, #220]	@ (800ab54 <xTaskResumeAll+0x118>)
 800aa76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa78:	4b36      	ldr	r3, [pc, #216]	@ (800ab54 <xTaskResumeAll+0x118>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d162      	bne.n	800ab46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa80:	4b35      	ldr	r3, [pc, #212]	@ (800ab58 <xTaskResumeAll+0x11c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d05e      	beq.n	800ab46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa88:	e02f      	b.n	800aaea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8a:	4b34      	ldr	r3, [pc, #208]	@ (800ab5c <xTaskResumeAll+0x120>)
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3318      	adds	r3, #24
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe ff7c 	bl	8009994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe ff77 	bl	8009994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaaa:	4b2d      	ldr	r3, [pc, #180]	@ (800ab60 <xTaskResumeAll+0x124>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d903      	bls.n	800aaba <xTaskResumeAll+0x7e>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab60 <xTaskResumeAll+0x124>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4a27      	ldr	r2, [pc, #156]	@ (800ab64 <xTaskResumeAll+0x128>)
 800aac8:	441a      	add	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7fe ff02 	bl	80098da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aada:	4b23      	ldr	r3, [pc, #140]	@ (800ab68 <xTaskResumeAll+0x12c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d302      	bcc.n	800aaea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aae4:	4b21      	ldr	r3, [pc, #132]	@ (800ab6c <xTaskResumeAll+0x130>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaea:	4b1c      	ldr	r3, [pc, #112]	@ (800ab5c <xTaskResumeAll+0x120>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1cb      	bne.n	800aa8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aaf8:	f000 fb78 	bl	800b1ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aafc:	4b1c      	ldr	r3, [pc, #112]	@ (800ab70 <xTaskResumeAll+0x134>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d010      	beq.n	800ab2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab08:	f000 f858 	bl	800abbc <xTaskIncrementTick>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ab12:	4b16      	ldr	r3, [pc, #88]	@ (800ab6c <xTaskResumeAll+0x130>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f1      	bne.n	800ab08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ab24:	4b12      	ldr	r3, [pc, #72]	@ (800ab70 <xTaskResumeAll+0x134>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab2a:	4b10      	ldr	r3, [pc, #64]	@ (800ab6c <xTaskResumeAll+0x130>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab36:	4b0f      	ldr	r3, [pc, #60]	@ (800ab74 <xTaskResumeAll+0x138>)
 800ab38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab46:	f001 f911 	bl	800bd6c <vPortExitCritical>

	return xAlreadyYielded;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	200025bc 	.word	0x200025bc
 800ab58:	20002594 	.word	0x20002594
 800ab5c:	20002554 	.word	0x20002554
 800ab60:	2000259c 	.word	0x2000259c
 800ab64:	200020c4 	.word	0x200020c4
 800ab68:	200020c0 	.word	0x200020c0
 800ab6c:	200025a8 	.word	0x200025a8
 800ab70:	200025a4 	.word	0x200025a4
 800ab74:	e000ed04 	.word	0xe000ed04

0800ab78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab7e:	4b05      	ldr	r3, [pc, #20]	@ (800ab94 <xTaskGetTickCount+0x1c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab84:	687b      	ldr	r3, [r7, #4]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20002598 	.word	0x20002598

0800ab98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab9e:	f001 f993 	bl	800bec8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aba2:	2300      	movs	r3, #0
 800aba4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aba6:	4b04      	ldr	r3, [pc, #16]	@ (800abb8 <xTaskGetTickCountFromISR+0x20>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abac:	683b      	ldr	r3, [r7, #0]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20002598 	.word	0x20002598

0800abbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abc6:	4b4f      	ldr	r3, [pc, #316]	@ (800ad04 <xTaskIncrementTick+0x148>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f040 8090 	bne.w	800acf0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abd0:	4b4d      	ldr	r3, [pc, #308]	@ (800ad08 <xTaskIncrementTick+0x14c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abd8:	4a4b      	ldr	r2, [pc, #300]	@ (800ad08 <xTaskIncrementTick+0x14c>)
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d121      	bne.n	800ac28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800abe4:	4b49      	ldr	r3, [pc, #292]	@ (800ad0c <xTaskIncrementTick+0x150>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <xTaskIncrementTick+0x4a>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	603b      	str	r3, [r7, #0]
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	e7fd      	b.n	800ac02 <xTaskIncrementTick+0x46>
 800ac06:	4b41      	ldr	r3, [pc, #260]	@ (800ad0c <xTaskIncrementTick+0x150>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	4b40      	ldr	r3, [pc, #256]	@ (800ad10 <xTaskIncrementTick+0x154>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a3e      	ldr	r2, [pc, #248]	@ (800ad0c <xTaskIncrementTick+0x150>)
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	4a3e      	ldr	r2, [pc, #248]	@ (800ad10 <xTaskIncrementTick+0x154>)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	4b3e      	ldr	r3, [pc, #248]	@ (800ad14 <xTaskIncrementTick+0x158>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	4a3c      	ldr	r2, [pc, #240]	@ (800ad14 <xTaskIncrementTick+0x158>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	f000 fae2 	bl	800b1ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac28:	4b3b      	ldr	r3, [pc, #236]	@ (800ad18 <xTaskIncrementTick+0x15c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d349      	bcc.n	800acc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac32:	4b36      	ldr	r3, [pc, #216]	@ (800ad0c <xTaskIncrementTick+0x150>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac3c:	4b36      	ldr	r3, [pc, #216]	@ (800ad18 <xTaskIncrementTick+0x15c>)
 800ac3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac42:	601a      	str	r2, [r3, #0]
					break;
 800ac44:	e03f      	b.n	800acc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac46:	4b31      	ldr	r3, [pc, #196]	@ (800ad0c <xTaskIncrementTick+0x150>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d203      	bcs.n	800ac66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac5e:	4a2e      	ldr	r2, [pc, #184]	@ (800ad18 <xTaskIncrementTick+0x15c>)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac64:	e02f      	b.n	800acc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fe92 	bl	8009994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3318      	adds	r3, #24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe fe89 	bl	8009994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac86:	4b25      	ldr	r3, [pc, #148]	@ (800ad1c <xTaskIncrementTick+0x160>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d903      	bls.n	800ac96 <xTaskIncrementTick+0xda>
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac92:	4a22      	ldr	r2, [pc, #136]	@ (800ad1c <xTaskIncrementTick+0x160>)
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4a1f      	ldr	r2, [pc, #124]	@ (800ad20 <xTaskIncrementTick+0x164>)
 800aca4:	441a      	add	r2, r3
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	3304      	adds	r3, #4
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f7fe fe14 	bl	80098da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb6:	4b1b      	ldr	r3, [pc, #108]	@ (800ad24 <xTaskIncrementTick+0x168>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d3b8      	bcc.n	800ac32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800acc0:	2301      	movs	r3, #1
 800acc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acc4:	e7b5      	b.n	800ac32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acc6:	4b17      	ldr	r3, [pc, #92]	@ (800ad24 <xTaskIncrementTick+0x168>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800accc:	4914      	ldr	r1, [pc, #80]	@ (800ad20 <xTaskIncrementTick+0x164>)
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d901      	bls.n	800ace2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800acde:	2301      	movs	r3, #1
 800ace0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ace2:	4b11      	ldr	r3, [pc, #68]	@ (800ad28 <xTaskIncrementTick+0x16c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d007      	beq.n	800acfa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800acea:	2301      	movs	r3, #1
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	e004      	b.n	800acfa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800acf0:	4b0e      	ldr	r3, [pc, #56]	@ (800ad2c <xTaskIncrementTick+0x170>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	4a0d      	ldr	r2, [pc, #52]	@ (800ad2c <xTaskIncrementTick+0x170>)
 800acf8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800acfa:	697b      	ldr	r3, [r7, #20]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	200025bc 	.word	0x200025bc
 800ad08:	20002598 	.word	0x20002598
 800ad0c:	2000254c 	.word	0x2000254c
 800ad10:	20002550 	.word	0x20002550
 800ad14:	200025ac 	.word	0x200025ac
 800ad18:	200025b4 	.word	0x200025b4
 800ad1c:	2000259c 	.word	0x2000259c
 800ad20:	200020c4 	.word	0x200020c4
 800ad24:	200020c0 	.word	0x200020c0
 800ad28:	200025a8 	.word	0x200025a8
 800ad2c:	200025a4 	.word	0x200025a4

0800ad30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad36:	4b2b      	ldr	r3, [pc, #172]	@ (800ade4 <vTaskSwitchContext+0xb4>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad3e:	4b2a      	ldr	r3, [pc, #168]	@ (800ade8 <vTaskSwitchContext+0xb8>)
 800ad40:	2201      	movs	r2, #1
 800ad42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad44:	e047      	b.n	800add6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ad46:	4b28      	ldr	r3, [pc, #160]	@ (800ade8 <vTaskSwitchContext+0xb8>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad4c:	4b27      	ldr	r3, [pc, #156]	@ (800adec <vTaskSwitchContext+0xbc>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	e011      	b.n	800ad78 <vTaskSwitchContext+0x48>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10b      	bne.n	800ad72 <vTaskSwitchContext+0x42>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	607b      	str	r3, [r7, #4]
}
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
 800ad70:	e7fd      	b.n	800ad6e <vTaskSwitchContext+0x3e>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	491d      	ldr	r1, [pc, #116]	@ (800adf0 <vTaskSwitchContext+0xc0>)
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	440b      	add	r3, r1
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d0e3      	beq.n	800ad54 <vTaskSwitchContext+0x24>
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4a16      	ldr	r2, [pc, #88]	@ (800adf0 <vTaskSwitchContext+0xc0>)
 800ad98:	4413      	add	r3, r2
 800ad9a:	60bb      	str	r3, [r7, #8]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	605a      	str	r2, [r3, #4]
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	3308      	adds	r3, #8
 800adae:	429a      	cmp	r2, r3
 800adb0:	d104      	bne.n	800adbc <vTaskSwitchContext+0x8c>
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	605a      	str	r2, [r3, #4]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	4a0c      	ldr	r2, [pc, #48]	@ (800adf4 <vTaskSwitchContext+0xc4>)
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	4a09      	ldr	r2, [pc, #36]	@ (800adec <vTaskSwitchContext+0xbc>)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adcc:	4b09      	ldr	r3, [pc, #36]	@ (800adf4 <vTaskSwitchContext+0xc4>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3354      	adds	r3, #84	@ 0x54
 800add2:	4a09      	ldr	r2, [pc, #36]	@ (800adf8 <vTaskSwitchContext+0xc8>)
 800add4:	6013      	str	r3, [r2, #0]
}
 800add6:	bf00      	nop
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	200025bc 	.word	0x200025bc
 800ade8:	200025a8 	.word	0x200025a8
 800adec:	2000259c 	.word	0x2000259c
 800adf0:	200020c4 	.word	0x200020c4
 800adf4:	200020c0 	.word	0x200020c0
 800adf8:	20001254 	.word	0x20001254

0800adfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	60fb      	str	r3, [r7, #12]
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae24:	4b07      	ldr	r3, [pc, #28]	@ (800ae44 <vTaskPlaceOnEventList+0x48>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3318      	adds	r3, #24
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7fe fd78 	bl	8009922 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae32:	2101      	movs	r1, #1
 800ae34:	6838      	ldr	r0, [r7, #0]
 800ae36:	f000 fa87 	bl	800b348 <prvAddCurrentTaskToDelayedList>
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	200020c0 	.word	0x200020c0

0800ae48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10b      	bne.n	800ae72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	617b      	str	r3, [r7, #20]
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	e7fd      	b.n	800ae6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae72:	4b0a      	ldr	r3, [pc, #40]	@ (800ae9c <vTaskPlaceOnEventListRestricted+0x54>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3318      	adds	r3, #24
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7fe fd2d 	bl	80098da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ae86:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	68b8      	ldr	r0, [r7, #8]
 800ae90:	f000 fa5a 	bl	800b348 <prvAddCurrentTaskToDelayedList>
	}
 800ae94:	bf00      	nop
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200020c0 	.word	0x200020c0

0800aea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10b      	bne.n	800aece <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	60fb      	str	r3, [r7, #12]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	3318      	adds	r3, #24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fd5e 	bl	8009994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aed8:	4b1d      	ldr	r3, [pc, #116]	@ (800af50 <xTaskRemoveFromEventList+0xb0>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d11d      	bne.n	800af1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe fd55 	bl	8009994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeee:	4b19      	ldr	r3, [pc, #100]	@ (800af54 <xTaskRemoveFromEventList+0xb4>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d903      	bls.n	800aefe <xTaskRemoveFromEventList+0x5e>
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefa:	4a16      	ldr	r2, [pc, #88]	@ (800af54 <xTaskRemoveFromEventList+0xb4>)
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4a13      	ldr	r2, [pc, #76]	@ (800af58 <xTaskRemoveFromEventList+0xb8>)
 800af0c:	441a      	add	r2, r3
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	3304      	adds	r3, #4
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f7fe fce0 	bl	80098da <vListInsertEnd>
 800af1a:	e005      	b.n	800af28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	3318      	adds	r3, #24
 800af20:	4619      	mov	r1, r3
 800af22:	480e      	ldr	r0, [pc, #56]	@ (800af5c <xTaskRemoveFromEventList+0xbc>)
 800af24:	f7fe fcd9 	bl	80098da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af2c:	4b0c      	ldr	r3, [pc, #48]	@ (800af60 <xTaskRemoveFromEventList+0xc0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af32:	429a      	cmp	r2, r3
 800af34:	d905      	bls.n	800af42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af36:	2301      	movs	r3, #1
 800af38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af3a:	4b0a      	ldr	r3, [pc, #40]	@ (800af64 <xTaskRemoveFromEventList+0xc4>)
 800af3c:	2201      	movs	r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	e001      	b.n	800af46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af46:	697b      	ldr	r3, [r7, #20]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200025bc 	.word	0x200025bc
 800af54:	2000259c 	.word	0x2000259c
 800af58:	200020c4 	.word	0x200020c4
 800af5c:	20002554 	.word	0x20002554
 800af60:	200020c0 	.word	0x200020c0
 800af64:	200025a8 	.word	0x200025a8

0800af68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af70:	4b06      	ldr	r3, [pc, #24]	@ (800af8c <vTaskInternalSetTimeOutState+0x24>)
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af78:	4b05      	ldr	r3, [pc, #20]	@ (800af90 <vTaskInternalSetTimeOutState+0x28>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	605a      	str	r2, [r3, #4]
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	200025ac 	.word	0x200025ac
 800af90:	20002598 	.word	0x20002598

0800af94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	613b      	str	r3, [r7, #16]
}
 800afb6:	bf00      	nop
 800afb8:	bf00      	nop
 800afba:	e7fd      	b.n	800afb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10b      	bne.n	800afda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	60fb      	str	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	e7fd      	b.n	800afd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800afda:	f000 fe95 	bl	800bd08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afde:	4b1d      	ldr	r3, [pc, #116]	@ (800b054 <xTaskCheckForTimeOut+0xc0>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff6:	d102      	bne.n	800affe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aff8:	2300      	movs	r3, #0
 800affa:	61fb      	str	r3, [r7, #28]
 800affc:	e023      	b.n	800b046 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	4b15      	ldr	r3, [pc, #84]	@ (800b058 <xTaskCheckForTimeOut+0xc4>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d007      	beq.n	800b01a <xTaskCheckForTimeOut+0x86>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	429a      	cmp	r2, r3
 800b012:	d302      	bcc.n	800b01a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b014:	2301      	movs	r3, #1
 800b016:	61fb      	str	r3, [r7, #28]
 800b018:	e015      	b.n	800b046 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	429a      	cmp	r2, r3
 800b022:	d20b      	bcs.n	800b03c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	1ad2      	subs	r2, r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff ff99 	bl	800af68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b036:	2300      	movs	r3, #0
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	e004      	b.n	800b046 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b042:	2301      	movs	r3, #1
 800b044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b046:	f000 fe91 	bl	800bd6c <vPortExitCritical>

	return xReturn;
 800b04a:	69fb      	ldr	r3, [r7, #28]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20002598 	.word	0x20002598
 800b058:	200025ac 	.word	0x200025ac

0800b05c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b060:	4b03      	ldr	r3, [pc, #12]	@ (800b070 <vTaskMissedYield+0x14>)
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
}
 800b066:	bf00      	nop
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	200025a8 	.word	0x200025a8

0800b074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b07c:	f000 f852 	bl	800b124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b080:	4b06      	ldr	r3, [pc, #24]	@ (800b09c <prvIdleTask+0x28>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d9f9      	bls.n	800b07c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b088:	4b05      	ldr	r3, [pc, #20]	@ (800b0a0 <prvIdleTask+0x2c>)
 800b08a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b098:	e7f0      	b.n	800b07c <prvIdleTask+0x8>
 800b09a:	bf00      	nop
 800b09c:	200020c4 	.word	0x200020c4
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	e00c      	b.n	800b0ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4a12      	ldr	r2, [pc, #72]	@ (800b104 <prvInitialiseTaskLists+0x60>)
 800b0bc:	4413      	add	r3, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe fbde 	bl	8009880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	607b      	str	r3, [r7, #4]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b37      	cmp	r3, #55	@ 0x37
 800b0ce:	d9ef      	bls.n	800b0b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0d0:	480d      	ldr	r0, [pc, #52]	@ (800b108 <prvInitialiseTaskLists+0x64>)
 800b0d2:	f7fe fbd5 	bl	8009880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0d6:	480d      	ldr	r0, [pc, #52]	@ (800b10c <prvInitialiseTaskLists+0x68>)
 800b0d8:	f7fe fbd2 	bl	8009880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0dc:	480c      	ldr	r0, [pc, #48]	@ (800b110 <prvInitialiseTaskLists+0x6c>)
 800b0de:	f7fe fbcf 	bl	8009880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0e2:	480c      	ldr	r0, [pc, #48]	@ (800b114 <prvInitialiseTaskLists+0x70>)
 800b0e4:	f7fe fbcc 	bl	8009880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0e8:	480b      	ldr	r0, [pc, #44]	@ (800b118 <prvInitialiseTaskLists+0x74>)
 800b0ea:	f7fe fbc9 	bl	8009880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b11c <prvInitialiseTaskLists+0x78>)
 800b0f0:	4a05      	ldr	r2, [pc, #20]	@ (800b108 <prvInitialiseTaskLists+0x64>)
 800b0f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b120 <prvInitialiseTaskLists+0x7c>)
 800b0f6:	4a05      	ldr	r2, [pc, #20]	@ (800b10c <prvInitialiseTaskLists+0x68>)
 800b0f8:	601a      	str	r2, [r3, #0]
}
 800b0fa:	bf00      	nop
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	200020c4 	.word	0x200020c4
 800b108:	20002524 	.word	0x20002524
 800b10c:	20002538 	.word	0x20002538
 800b110:	20002554 	.word	0x20002554
 800b114:	20002568 	.word	0x20002568
 800b118:	20002580 	.word	0x20002580
 800b11c:	2000254c 	.word	0x2000254c
 800b120:	20002550 	.word	0x20002550

0800b124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b12a:	e019      	b.n	800b160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b12c:	f000 fdec 	bl	800bd08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b130:	4b10      	ldr	r3, [pc, #64]	@ (800b174 <prvCheckTasksWaitingTermination+0x50>)
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3304      	adds	r3, #4
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fe fc29 	bl	8009994 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b142:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <prvCheckTasksWaitingTermination+0x54>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3b01      	subs	r3, #1
 800b148:	4a0b      	ldr	r2, [pc, #44]	@ (800b178 <prvCheckTasksWaitingTermination+0x54>)
 800b14a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b14c:	4b0b      	ldr	r3, [pc, #44]	@ (800b17c <prvCheckTasksWaitingTermination+0x58>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3b01      	subs	r3, #1
 800b152:	4a0a      	ldr	r2, [pc, #40]	@ (800b17c <prvCheckTasksWaitingTermination+0x58>)
 800b154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b156:	f000 fe09 	bl	800bd6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f810 	bl	800b180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b160:	4b06      	ldr	r3, [pc, #24]	@ (800b17c <prvCheckTasksWaitingTermination+0x58>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1e1      	bne.n	800b12c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20002568 	.word	0x20002568
 800b178:	20002594 	.word	0x20002594
 800b17c:	2000257c 	.word	0x2000257c

0800b180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3354      	adds	r3, #84	@ 0x54
 800b18c:	4618      	mov	r0, r3
 800b18e:	f001 f8d3 	bl	800c338 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d108      	bne.n	800b1ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 ffa1 	bl	800c0e8 <vPortFree>
				vPortFree( pxTCB );
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 ff9e 	bl	800c0e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1ac:	e019      	b.n	800b1e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d103      	bne.n	800b1c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 ff95 	bl	800c0e8 <vPortFree>
	}
 800b1be:	e010      	b.n	800b1e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d00b      	beq.n	800b1e2 <prvDeleteTCB+0x62>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	e7fd      	b.n	800b1de <prvDeleteTCB+0x5e>
	}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b224 <prvResetNextTaskUnblockTime+0x38>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b228 <prvResetNextTaskUnblockTime+0x3c>)
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b204:	e008      	b.n	800b218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b206:	4b07      	ldr	r3, [pc, #28]	@ (800b224 <prvResetNextTaskUnblockTime+0x38>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	4a04      	ldr	r2, [pc, #16]	@ (800b228 <prvResetNextTaskUnblockTime+0x3c>)
 800b216:	6013      	str	r3, [r2, #0]
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	2000254c 	.word	0x2000254c
 800b228:	200025b4 	.word	0x200025b4

0800b22c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b232:	4b0b      	ldr	r3, [pc, #44]	@ (800b260 <xTaskGetSchedulerState+0x34>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d102      	bne.n	800b240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b23a:	2301      	movs	r3, #1
 800b23c:	607b      	str	r3, [r7, #4]
 800b23e:	e008      	b.n	800b252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b240:	4b08      	ldr	r3, [pc, #32]	@ (800b264 <xTaskGetSchedulerState+0x38>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d102      	bne.n	800b24e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b248:	2302      	movs	r3, #2
 800b24a:	607b      	str	r3, [r7, #4]
 800b24c:	e001      	b.n	800b252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b252:	687b      	ldr	r3, [r7, #4]
	}
 800b254:	4618      	mov	r0, r3
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	200025a0 	.word	0x200025a0
 800b264:	200025bc 	.word	0x200025bc

0800b268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d058      	beq.n	800b330 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b27e:	4b2f      	ldr	r3, [pc, #188]	@ (800b33c <xTaskPriorityDisinherit+0xd4>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	429a      	cmp	r2, r3
 800b286:	d00b      	beq.n	800b2a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	60fb      	str	r3, [r7, #12]
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	e7fd      	b.n	800b29c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10b      	bne.n	800b2c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	60bb      	str	r3, [r7, #8]
}
 800b2ba:	bf00      	nop
 800b2bc:	bf00      	nop
 800b2be:	e7fd      	b.n	800b2bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2c4:	1e5a      	subs	r2, r3, #1
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d02c      	beq.n	800b330 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d128      	bne.n	800b330 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fb56 	bl	8009994 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b300:	4b0f      	ldr	r3, [pc, #60]	@ (800b340 <xTaskPriorityDisinherit+0xd8>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d903      	bls.n	800b310 <xTaskPriorityDisinherit+0xa8>
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30c:	4a0c      	ldr	r2, [pc, #48]	@ (800b340 <xTaskPriorityDisinherit+0xd8>)
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4a09      	ldr	r2, [pc, #36]	@ (800b344 <xTaskPriorityDisinherit+0xdc>)
 800b31e:	441a      	add	r2, r3
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	3304      	adds	r3, #4
 800b324:	4619      	mov	r1, r3
 800b326:	4610      	mov	r0, r2
 800b328:	f7fe fad7 	bl	80098da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b330:	697b      	ldr	r3, [r7, #20]
	}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	200020c0 	.word	0x200020c0
 800b340:	2000259c 	.word	0x2000259c
 800b344:	200020c4 	.word	0x200020c4

0800b348 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b352:	4b21      	ldr	r3, [pc, #132]	@ (800b3d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b358:	4b20      	ldr	r3, [pc, #128]	@ (800b3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fb18 	bl	8009994 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36a:	d10a      	bne.n	800b382 <prvAddCurrentTaskToDelayedList+0x3a>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d007      	beq.n	800b382 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b372:	4b1a      	ldr	r3, [pc, #104]	@ (800b3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3304      	adds	r3, #4
 800b378:	4619      	mov	r1, r3
 800b37a:	4819      	ldr	r0, [pc, #100]	@ (800b3e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b37c:	f7fe faad 	bl	80098da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b380:	e026      	b.n	800b3d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4413      	add	r3, r2
 800b388:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b38a:	4b14      	ldr	r3, [pc, #80]	@ (800b3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	429a      	cmp	r2, r3
 800b398:	d209      	bcs.n	800b3ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b39a:	4b12      	ldr	r3, [pc, #72]	@ (800b3e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4b0f      	ldr	r3, [pc, #60]	@ (800b3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f7fe fabb 	bl	8009922 <vListInsert>
}
 800b3ac:	e010      	b.n	800b3d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	f7fe fab1 	bl	8009922 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d202      	bcs.n	800b3d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3ca:	4a08      	ldr	r2, [pc, #32]	@ (800b3ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	6013      	str	r3, [r2, #0]
}
 800b3d0:	bf00      	nop
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20002598 	.word	0x20002598
 800b3dc:	200020c0 	.word	0x200020c0
 800b3e0:	20002580 	.word	0x20002580
 800b3e4:	20002550 	.word	0x20002550
 800b3e8:	2000254c 	.word	0x2000254c
 800b3ec:	200025b4 	.word	0x200025b4

0800b3f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08a      	sub	sp, #40	@ 0x28
 800b3f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3fa:	f000 fb13 	bl	800ba24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b474 <xTimerCreateTimerTask+0x84>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d021      	beq.n	800b44a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b40e:	1d3a      	adds	r2, r7, #4
 800b410:	f107 0108 	add.w	r1, r7, #8
 800b414:	f107 030c 	add.w	r3, r7, #12
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fa17 	bl	800984c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	9202      	str	r2, [sp, #8]
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	2302      	movs	r3, #2
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	2300      	movs	r3, #0
 800b42e:	460a      	mov	r2, r1
 800b430:	4911      	ldr	r1, [pc, #68]	@ (800b478 <xTimerCreateTimerTask+0x88>)
 800b432:	4812      	ldr	r0, [pc, #72]	@ (800b47c <xTimerCreateTimerTask+0x8c>)
 800b434:	f7fe ffd2 	bl	800a3dc <xTaskCreateStatic>
 800b438:	4603      	mov	r3, r0
 800b43a:	4a11      	ldr	r2, [pc, #68]	@ (800b480 <xTimerCreateTimerTask+0x90>)
 800b43c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b43e:	4b10      	ldr	r3, [pc, #64]	@ (800b480 <xTimerCreateTimerTask+0x90>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b446:	2301      	movs	r3, #1
 800b448:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10b      	bne.n	800b468 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	613b      	str	r3, [r7, #16]
}
 800b462:	bf00      	nop
 800b464:	bf00      	nop
 800b466:	e7fd      	b.n	800b464 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b468:	697b      	ldr	r3, [r7, #20]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	200025f0 	.word	0x200025f0
 800b478:	0800c8a0 	.word	0x0800c8a0
 800b47c:	0800b5bd 	.word	0x0800b5bd
 800b480:	200025f4 	.word	0x200025f4

0800b484 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08a      	sub	sp, #40	@ 0x28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b492:	2300      	movs	r3, #0
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10b      	bne.n	800b4b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	623b      	str	r3, [r7, #32]
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	e7fd      	b.n	800b4b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4b4:	4b19      	ldr	r3, [pc, #100]	@ (800b51c <xTimerGenericCommand+0x98>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d02a      	beq.n	800b512 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b05      	cmp	r3, #5
 800b4cc:	dc18      	bgt.n	800b500 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4ce:	f7ff fead 	bl	800b22c <xTaskGetSchedulerState>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d109      	bne.n	800b4ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4d8:	4b10      	ldr	r3, [pc, #64]	@ (800b51c <xTimerGenericCommand+0x98>)
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	f107 0110 	add.w	r1, r7, #16
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4e4:	f7fe fb8a 	bl	8009bfc <xQueueGenericSend>
 800b4e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4ea:	e012      	b.n	800b512 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b51c <xTimerGenericCommand+0x98>)
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	f107 0110 	add.w	r1, r7, #16
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f7fe fb80 	bl	8009bfc <xQueueGenericSend>
 800b4fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4fe:	e008      	b.n	800b512 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <xTimerGenericCommand+0x98>)
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	f107 0110 	add.w	r1, r7, #16
 800b508:	2300      	movs	r3, #0
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	f7fe fc78 	bl	8009e00 <xQueueGenericSendFromISR>
 800b510:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b514:	4618      	mov	r0, r3
 800b516:	3728      	adds	r7, #40	@ 0x28
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200025f0 	.word	0x200025f0

0800b520 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52a:	4b23      	ldr	r3, [pc, #140]	@ (800b5b8 <prvProcessExpiredTimer+0x98>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	3304      	adds	r3, #4
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe fa2b 	bl	8009994 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b544:	f003 0304 	and.w	r3, r3, #4
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d023      	beq.n	800b594 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	699a      	ldr	r2, [r3, #24]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	18d1      	adds	r1, r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	6978      	ldr	r0, [r7, #20]
 800b55a:	f000 f8d5 	bl	800b708 <prvInsertTimerInActiveList>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d020      	beq.n	800b5a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b564:	2300      	movs	r3, #0
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	2300      	movs	r3, #0
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	2100      	movs	r1, #0
 800b56e:	6978      	ldr	r0, [r7, #20]
 800b570:	f7ff ff88 	bl	800b484 <xTimerGenericCommand>
 800b574:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d114      	bne.n	800b5a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	60fb      	str	r3, [r7, #12]
}
 800b58e:	bf00      	nop
 800b590:	bf00      	nop
 800b592:	e7fd      	b.n	800b590 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b59a:	f023 0301 	bic.w	r3, r3, #1
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	6978      	ldr	r0, [r7, #20]
 800b5ac:	4798      	blx	r3
}
 800b5ae:	bf00      	nop
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200025e8 	.word	0x200025e8

0800b5bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f859 	bl	800b680 <prvGetNextExpireTime>
 800b5ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f805 	bl	800b5e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5da:	f000 f8d7 	bl	800b78c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5de:	bf00      	nop
 800b5e0:	e7f0      	b.n	800b5c4 <prvTimerTask+0x8>
	...

0800b5e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5ee:	f7ff fa17 	bl	800aa20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5f2:	f107 0308 	add.w	r3, r7, #8
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 f866 	bl	800b6c8 <prvSampleTimeNow>
 800b5fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d130      	bne.n	800b666 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <prvProcessTimerOrBlockTask+0x3c>
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d806      	bhi.n	800b620 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b612:	f7ff fa13 	bl	800aa3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff ff81 	bl	800b520 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b61e:	e024      	b.n	800b66a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d008      	beq.n	800b638 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b626:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <prvProcessTimerOrBlockTask+0x90>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <prvProcessTimerOrBlockTask+0x50>
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <prvProcessTimerOrBlockTask+0x52>
 800b634:	2300      	movs	r3, #0
 800b636:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b638:	4b0f      	ldr	r3, [pc, #60]	@ (800b678 <prvProcessTimerOrBlockTask+0x94>)
 800b63a:	6818      	ldr	r0, [r3, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	4619      	mov	r1, r3
 800b646:	f7fe fe95 	bl	800a374 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b64a:	f7ff f9f7 	bl	800aa3c <xTaskResumeAll>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b654:	4b09      	ldr	r3, [pc, #36]	@ (800b67c <prvProcessTimerOrBlockTask+0x98>)
 800b656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	f3bf 8f6f 	isb	sy
}
 800b664:	e001      	b.n	800b66a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b666:	f7ff f9e9 	bl	800aa3c <xTaskResumeAll>
}
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	200025ec 	.word	0x200025ec
 800b678:	200025f0 	.word	0x200025f0
 800b67c:	e000ed04 	.word	0xe000ed04

0800b680 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b688:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c4 <prvGetNextExpireTime+0x44>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <prvGetNextExpireTime+0x16>
 800b692:	2201      	movs	r2, #1
 800b694:	e000      	b.n	800b698 <prvGetNextExpireTime+0x18>
 800b696:	2200      	movs	r2, #0
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d105      	bne.n	800b6b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6a4:	4b07      	ldr	r3, [pc, #28]	@ (800b6c4 <prvGetNextExpireTime+0x44>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60fb      	str	r3, [r7, #12]
 800b6ae:	e001      	b.n	800b6b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	200025e8 	.word	0x200025e8

0800b6c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6d0:	f7ff fa52 	bl	800ab78 <xTaskGetTickCount>
 800b6d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b704 <prvSampleTimeNow+0x3c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d205      	bcs.n	800b6ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6e0:	f000 f93a 	bl	800b958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	e002      	b.n	800b6f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6f2:	4a04      	ldr	r2, [pc, #16]	@ (800b704 <prvSampleTimeNow+0x3c>)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200025f8 	.word	0x200025f8

0800b708 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d812      	bhi.n	800b754 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	1ad2      	subs	r2, r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d302      	bcc.n	800b742 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	e01b      	b.n	800b77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b742:	4b10      	ldr	r3, [pc, #64]	@ (800b784 <prvInsertTimerInActiveList+0x7c>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3304      	adds	r3, #4
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f7fe f8e8 	bl	8009922 <vListInsert>
 800b752:	e012      	b.n	800b77a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d206      	bcs.n	800b76a <prvInsertTimerInActiveList+0x62>
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d302      	bcc.n	800b76a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b764:	2301      	movs	r3, #1
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	e007      	b.n	800b77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b76a:	4b07      	ldr	r3, [pc, #28]	@ (800b788 <prvInsertTimerInActiveList+0x80>)
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3304      	adds	r3, #4
 800b772:	4619      	mov	r1, r3
 800b774:	4610      	mov	r0, r2
 800b776:	f7fe f8d4 	bl	8009922 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b77a:	697b      	ldr	r3, [r7, #20]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	200025ec 	.word	0x200025ec
 800b788:	200025e8 	.word	0x200025e8

0800b78c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b08e      	sub	sp, #56	@ 0x38
 800b790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b792:	e0ce      	b.n	800b932 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	da19      	bge.n	800b7ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b79a:	1d3b      	adds	r3, r7, #4
 800b79c:	3304      	adds	r3, #4
 800b79e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10b      	bne.n	800b7be <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	61fb      	str	r3, [r7, #28]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7c4:	6850      	ldr	r0, [r2, #4]
 800b7c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7c8:	6892      	ldr	r2, [r2, #8]
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f2c0 80ae 	blt.w	800b932 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d004      	beq.n	800b7ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe f8d4 	bl	8009994 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff ff6a 	bl	800b6c8 <prvSampleTimeNow>
 800b7f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b09      	cmp	r3, #9
 800b7fa:	f200 8097 	bhi.w	800b92c <prvProcessReceivedCommands+0x1a0>
 800b7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b804 <prvProcessReceivedCommands+0x78>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b82d 	.word	0x0800b82d
 800b808:	0800b82d 	.word	0x0800b82d
 800b80c:	0800b82d 	.word	0x0800b82d
 800b810:	0800b8a3 	.word	0x0800b8a3
 800b814:	0800b8b7 	.word	0x0800b8b7
 800b818:	0800b903 	.word	0x0800b903
 800b81c:	0800b82d 	.word	0x0800b82d
 800b820:	0800b82d 	.word	0x0800b82d
 800b824:	0800b8a3 	.word	0x0800b8a3
 800b828:	0800b8b7 	.word	0x0800b8b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b832:	f043 0301 	orr.w	r3, r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	18d1      	adds	r1, r2, r3
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b84c:	f7ff ff5c 	bl	800b708 <prvInsertTimerInActiveList>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d06c      	beq.n	800b930 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b85c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d061      	beq.n	800b930 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	441a      	add	r2, r3
 800b874:	2300      	movs	r3, #0
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	2300      	movs	r3, #0
 800b87a:	2100      	movs	r1, #0
 800b87c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b87e:	f7ff fe01 	bl	800b484 <xTimerGenericCommand>
 800b882:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d152      	bne.n	800b930 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	61bb      	str	r3, [r7, #24]
}
 800b89c:	bf00      	nop
 800b89e:	bf00      	nop
 800b8a0:	e7fd      	b.n	800b89e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8a8:	f023 0301 	bic.w	r3, r3, #1
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b8b4:	e03d      	b.n	800b932 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8bc:	f043 0301 	orr.w	r3, r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10b      	bne.n	800b8ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	617b      	str	r3, [r7, #20]
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	e7fd      	b.n	800b8ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f0:	699a      	ldr	r2, [r3, #24]
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f4:	18d1      	adds	r1, r2, r3
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8fc:	f7ff ff04 	bl	800b708 <prvInsertTimerInActiveList>
					break;
 800b900:	e017      	b.n	800b932 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b912:	f000 fbe9 	bl	800c0e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b916:	e00c      	b.n	800b932 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b91e:	f023 0301 	bic.w	r3, r3, #1
 800b922:	b2da      	uxtb	r2, r3
 800b924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b92a:	e002      	b.n	800b932 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b92c:	bf00      	nop
 800b92e:	e000      	b.n	800b932 <prvProcessReceivedCommands+0x1a6>
					break;
 800b930:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b932:	4b08      	ldr	r3, [pc, #32]	@ (800b954 <prvProcessReceivedCommands+0x1c8>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	1d39      	adds	r1, r7, #4
 800b938:	2200      	movs	r2, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fafe 	bl	8009f3c <xQueueReceive>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	f47f af26 	bne.w	800b794 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	3730      	adds	r7, #48	@ 0x30
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	200025f0 	.word	0x200025f0

0800b958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b95e:	e049      	b.n	800b9f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b960:	4b2e      	ldr	r3, [pc, #184]	@ (800ba1c <prvSwitchTimerLists+0xc4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b96a:	4b2c      	ldr	r3, [pc, #176]	@ (800ba1c <prvSwitchTimerLists+0xc4>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3304      	adds	r3, #4
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe f80b 	bl	8009994 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d02f      	beq.n	800b9f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	4413      	add	r3, r2
 800b99c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d90e      	bls.n	800b9c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	@ (800ba1c <prvSwitchTimerLists+0xc4>)
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4610      	mov	r0, r2
 800b9be:	f7fd ffb0 	bl	8009922 <vListInsert>
 800b9c2:	e017      	b.n	800b9f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7ff fd58 	bl	800b484 <xTimerGenericCommand>
 800b9d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10b      	bne.n	800b9f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	603b      	str	r3, [r7, #0]
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	e7fd      	b.n	800b9f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ba1c <prvSwitchTimerLists+0xc4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1b0      	bne.n	800b960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9fe:	4b07      	ldr	r3, [pc, #28]	@ (800ba1c <prvSwitchTimerLists+0xc4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba04:	4b06      	ldr	r3, [pc, #24]	@ (800ba20 <prvSwitchTimerLists+0xc8>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a04      	ldr	r2, [pc, #16]	@ (800ba1c <prvSwitchTimerLists+0xc4>)
 800ba0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba0c:	4a04      	ldr	r2, [pc, #16]	@ (800ba20 <prvSwitchTimerLists+0xc8>)
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	6013      	str	r3, [r2, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200025e8 	.word	0x200025e8
 800ba20:	200025ec 	.word	0x200025ec

0800ba24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba2a:	f000 f96d 	bl	800bd08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba2e:	4b15      	ldr	r3, [pc, #84]	@ (800ba84 <prvCheckForValidListAndQueue+0x60>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d120      	bne.n	800ba78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba36:	4814      	ldr	r0, [pc, #80]	@ (800ba88 <prvCheckForValidListAndQueue+0x64>)
 800ba38:	f7fd ff22 	bl	8009880 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba3c:	4813      	ldr	r0, [pc, #76]	@ (800ba8c <prvCheckForValidListAndQueue+0x68>)
 800ba3e:	f7fd ff1f 	bl	8009880 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba42:	4b13      	ldr	r3, [pc, #76]	@ (800ba90 <prvCheckForValidListAndQueue+0x6c>)
 800ba44:	4a10      	ldr	r2, [pc, #64]	@ (800ba88 <prvCheckForValidListAndQueue+0x64>)
 800ba46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba48:	4b12      	ldr	r3, [pc, #72]	@ (800ba94 <prvCheckForValidListAndQueue+0x70>)
 800ba4a:	4a10      	ldr	r2, [pc, #64]	@ (800ba8c <prvCheckForValidListAndQueue+0x68>)
 800ba4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba4e:	2300      	movs	r3, #0
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	4b11      	ldr	r3, [pc, #68]	@ (800ba98 <prvCheckForValidListAndQueue+0x74>)
 800ba54:	4a11      	ldr	r2, [pc, #68]	@ (800ba9c <prvCheckForValidListAndQueue+0x78>)
 800ba56:	2110      	movs	r1, #16
 800ba58:	200a      	movs	r0, #10
 800ba5a:	f7fe f82f 	bl	8009abc <xQueueGenericCreateStatic>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	4a08      	ldr	r2, [pc, #32]	@ (800ba84 <prvCheckForValidListAndQueue+0x60>)
 800ba62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba64:	4b07      	ldr	r3, [pc, #28]	@ (800ba84 <prvCheckForValidListAndQueue+0x60>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d005      	beq.n	800ba78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba6c:	4b05      	ldr	r3, [pc, #20]	@ (800ba84 <prvCheckForValidListAndQueue+0x60>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	490b      	ldr	r1, [pc, #44]	@ (800baa0 <prvCheckForValidListAndQueue+0x7c>)
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe fc54 	bl	800a320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba78:	f000 f978 	bl	800bd6c <vPortExitCritical>
}
 800ba7c:	bf00      	nop
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	200025f0 	.word	0x200025f0
 800ba88:	200025c0 	.word	0x200025c0
 800ba8c:	200025d4 	.word	0x200025d4
 800ba90:	200025e8 	.word	0x200025e8
 800ba94:	200025ec 	.word	0x200025ec
 800ba98:	2000269c 	.word	0x2000269c
 800ba9c:	200025fc 	.word	0x200025fc
 800baa0:	0800c8a8 	.word	0x0800c8a8

0800baa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3b04      	subs	r3, #4
 800bab4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800babc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3b04      	subs	r3, #4
 800bac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f023 0201 	bic.w	r2, r3, #1
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3b04      	subs	r3, #4
 800bad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bad4:	4a0c      	ldr	r2, [pc, #48]	@ (800bb08 <pxPortInitialiseStack+0x64>)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3b14      	subs	r3, #20
 800bade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3b04      	subs	r3, #4
 800baea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f06f 0202 	mvn.w	r2, #2
 800baf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3b20      	subs	r3, #32
 800baf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bafa:	68fb      	ldr	r3, [r7, #12]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	0800bb0d 	.word	0x0800bb0d

0800bb0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb16:	4b13      	ldr	r3, [pc, #76]	@ (800bb64 <prvTaskExitError+0x58>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1e:	d00b      	beq.n	800bb38 <prvTaskExitError+0x2c>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	60fb      	str	r3, [r7, #12]
}
 800bb32:	bf00      	nop
 800bb34:	bf00      	nop
 800bb36:	e7fd      	b.n	800bb34 <prvTaskExitError+0x28>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	60bb      	str	r3, [r7, #8]
}
 800bb4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb4c:	bf00      	nop
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0fc      	beq.n	800bb4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20001250 	.word	0x20001250
	...

0800bb70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb70:	4b07      	ldr	r3, [pc, #28]	@ (800bb90 <pxCurrentTCBConst2>)
 800bb72:	6819      	ldr	r1, [r3, #0]
 800bb74:	6808      	ldr	r0, [r1, #0]
 800bb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7a:	f380 8809 	msr	PSP, r0
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f04f 0000 	mov.w	r0, #0
 800bb86:	f380 8811 	msr	BASEPRI, r0
 800bb8a:	4770      	bx	lr
 800bb8c:	f3af 8000 	nop.w

0800bb90 <pxCurrentTCBConst2>:
 800bb90:	200020c0 	.word	0x200020c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop

0800bb98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb98:	4808      	ldr	r0, [pc, #32]	@ (800bbbc <prvPortStartFirstTask+0x24>)
 800bb9a:	6800      	ldr	r0, [r0, #0]
 800bb9c:	6800      	ldr	r0, [r0, #0]
 800bb9e:	f380 8808 	msr	MSP, r0
 800bba2:	f04f 0000 	mov.w	r0, #0
 800bba6:	f380 8814 	msr	CONTROL, r0
 800bbaa:	b662      	cpsie	i
 800bbac:	b661      	cpsie	f
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	df00      	svc	0
 800bbb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbba:	bf00      	nop
 800bbbc:	e000ed08 	.word	0xe000ed08

0800bbc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbc6:	4b47      	ldr	r3, [pc, #284]	@ (800bce4 <xPortStartScheduler+0x124>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a47      	ldr	r2, [pc, #284]	@ (800bce8 <xPortStartScheduler+0x128>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10b      	bne.n	800bbe8 <xPortStartScheduler+0x28>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	60fb      	str	r3, [r7, #12]
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	e7fd      	b.n	800bbe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbe8:	4b3e      	ldr	r3, [pc, #248]	@ (800bce4 <xPortStartScheduler+0x124>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a3f      	ldr	r2, [pc, #252]	@ (800bcec <xPortStartScheduler+0x12c>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d10b      	bne.n	800bc0a <xPortStartScheduler+0x4a>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	613b      	str	r3, [r7, #16]
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	e7fd      	b.n	800bc06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc0a:	4b39      	ldr	r3, [pc, #228]	@ (800bcf0 <xPortStartScheduler+0x130>)
 800bc0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	22ff      	movs	r2, #255	@ 0xff
 800bc1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b31      	ldr	r3, [pc, #196]	@ (800bcf4 <xPortStartScheduler+0x134>)
 800bc30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc32:	4b31      	ldr	r3, [pc, #196]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc34:	2207      	movs	r2, #7
 800bc36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc38:	e009      	b.n	800bc4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bc3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	4a2d      	ldr	r2, [pc, #180]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc44:	78fb      	ldrb	r3, [r7, #3]
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc4e:	78fb      	ldrb	r3, [r7, #3]
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc56:	2b80      	cmp	r3, #128	@ 0x80
 800bc58:	d0ef      	beq.n	800bc3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc5a:	4b27      	ldr	r3, [pc, #156]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f1c3 0307 	rsb	r3, r3, #7
 800bc62:	2b04      	cmp	r3, #4
 800bc64:	d00b      	beq.n	800bc7e <xPortStartScheduler+0xbe>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	60bb      	str	r3, [r7, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	bf00      	nop
 800bc7c:	e7fd      	b.n	800bc7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	021b      	lsls	r3, r3, #8
 800bc84:	4a1c      	ldr	r2, [pc, #112]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc88:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc90:	4a19      	ldr	r2, [pc, #100]	@ (800bcf8 <xPortStartScheduler+0x138>)
 800bc92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc9c:	4b17      	ldr	r3, [pc, #92]	@ (800bcfc <xPortStartScheduler+0x13c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a16      	ldr	r2, [pc, #88]	@ (800bcfc <xPortStartScheduler+0x13c>)
 800bca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bca8:	4b14      	ldr	r3, [pc, #80]	@ (800bcfc <xPortStartScheduler+0x13c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a13      	ldr	r2, [pc, #76]	@ (800bcfc <xPortStartScheduler+0x13c>)
 800bcae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bcb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcb4:	f000 f8da 	bl	800be6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcb8:	4b11      	ldr	r3, [pc, #68]	@ (800bd00 <xPortStartScheduler+0x140>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcbe:	f000 f8f9 	bl	800beb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcc2:	4b10      	ldr	r3, [pc, #64]	@ (800bd04 <xPortStartScheduler+0x144>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a0f      	ldr	r2, [pc, #60]	@ (800bd04 <xPortStartScheduler+0x144>)
 800bcc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bccc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcce:	f7ff ff63 	bl	800bb98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcd2:	f7ff f82d 	bl	800ad30 <vTaskSwitchContext>
	prvTaskExitError();
 800bcd6:	f7ff ff19 	bl	800bb0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	e000ed00 	.word	0xe000ed00
 800bce8:	410fc271 	.word	0x410fc271
 800bcec:	410fc270 	.word	0x410fc270
 800bcf0:	e000e400 	.word	0xe000e400
 800bcf4:	200026ec 	.word	0x200026ec
 800bcf8:	200026f0 	.word	0x200026f0
 800bcfc:	e000ed20 	.word	0xe000ed20
 800bd00:	20001250 	.word	0x20001250
 800bd04:	e000ef34 	.word	0xe000ef34

0800bd08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd22:	4b10      	ldr	r3, [pc, #64]	@ (800bd64 <vPortEnterCritical+0x5c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	4a0e      	ldr	r2, [pc, #56]	@ (800bd64 <vPortEnterCritical+0x5c>)
 800bd2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <vPortEnterCritical+0x5c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d110      	bne.n	800bd56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd34:	4b0c      	ldr	r3, [pc, #48]	@ (800bd68 <vPortEnterCritical+0x60>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00b      	beq.n	800bd56 <vPortEnterCritical+0x4e>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	603b      	str	r3, [r7, #0]
}
 800bd50:	bf00      	nop
 800bd52:	bf00      	nop
 800bd54:	e7fd      	b.n	800bd52 <vPortEnterCritical+0x4a>
	}
}
 800bd56:	bf00      	nop
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	20001250 	.word	0x20001250
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd72:	4b12      	ldr	r3, [pc, #72]	@ (800bdbc <vPortExitCritical+0x50>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10b      	bne.n	800bd92 <vPortExitCritical+0x26>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	607b      	str	r3, [r7, #4]
}
 800bd8c:	bf00      	nop
 800bd8e:	bf00      	nop
 800bd90:	e7fd      	b.n	800bd8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd92:	4b0a      	ldr	r3, [pc, #40]	@ (800bdbc <vPortExitCritical+0x50>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	4a08      	ldr	r2, [pc, #32]	@ (800bdbc <vPortExitCritical+0x50>)
 800bd9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd9c:	4b07      	ldr	r3, [pc, #28]	@ (800bdbc <vPortExitCritical+0x50>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d105      	bne.n	800bdb0 <vPortExitCritical+0x44>
 800bda4:	2300      	movs	r3, #0
 800bda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	f383 8811 	msr	BASEPRI, r3
}
 800bdae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20001250 	.word	0x20001250

0800bdc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdc0:	f3ef 8009 	mrs	r0, PSP
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	4b15      	ldr	r3, [pc, #84]	@ (800be20 <pxCurrentTCBConst>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	f01e 0f10 	tst.w	lr, #16
 800bdd0:	bf08      	it	eq
 800bdd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdda:	6010      	str	r0, [r2, #0]
 800bddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bde0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bde4:	f380 8811 	msr	BASEPRI, r0
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f7fe ff9e 	bl	800ad30 <vTaskSwitchContext>
 800bdf4:	f04f 0000 	mov.w	r0, #0
 800bdf8:	f380 8811 	msr	BASEPRI, r0
 800bdfc:	bc09      	pop	{r0, r3}
 800bdfe:	6819      	ldr	r1, [r3, #0]
 800be00:	6808      	ldr	r0, [r1, #0]
 800be02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be06:	f01e 0f10 	tst.w	lr, #16
 800be0a:	bf08      	it	eq
 800be0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be10:	f380 8809 	msr	PSP, r0
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	f3af 8000 	nop.w

0800be20 <pxCurrentTCBConst>:
 800be20:	200020c0 	.word	0x200020c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop

0800be28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	607b      	str	r3, [r7, #4]
}
 800be40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be42:	f7fe febb 	bl	800abbc <xTaskIncrementTick>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be4c:	4b06      	ldr	r3, [pc, #24]	@ (800be68 <xPortSysTickHandler+0x40>)
 800be4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	2300      	movs	r3, #0
 800be56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f383 8811 	msr	BASEPRI, r3
}
 800be5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be70:	4b0b      	ldr	r3, [pc, #44]	@ (800bea0 <vPortSetupTimerInterrupt+0x34>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be76:	4b0b      	ldr	r3, [pc, #44]	@ (800bea4 <vPortSetupTimerInterrupt+0x38>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bea8 <vPortSetupTimerInterrupt+0x3c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a0a      	ldr	r2, [pc, #40]	@ (800beac <vPortSetupTimerInterrupt+0x40>)
 800be82:	fba2 2303 	umull	r2, r3, r2, r3
 800be86:	099b      	lsrs	r3, r3, #6
 800be88:	4a09      	ldr	r2, [pc, #36]	@ (800beb0 <vPortSetupTimerInterrupt+0x44>)
 800be8a:	3b01      	subs	r3, #1
 800be8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be8e:	4b04      	ldr	r3, [pc, #16]	@ (800bea0 <vPortSetupTimerInterrupt+0x34>)
 800be90:	2207      	movs	r2, #7
 800be92:	601a      	str	r2, [r3, #0]
}
 800be94:	bf00      	nop
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	e000e010 	.word	0xe000e010
 800bea4:	e000e018 	.word	0xe000e018
 800bea8:	20000000 	.word	0x20000000
 800beac:	10624dd3 	.word	0x10624dd3
 800beb0:	e000e014 	.word	0xe000e014

0800beb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800beb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bec4 <vPortEnableVFP+0x10>
 800beb8:	6801      	ldr	r1, [r0, #0]
 800beba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bebe:	6001      	str	r1, [r0, #0]
 800bec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bec2:	bf00      	nop
 800bec4:	e000ed88 	.word	0xe000ed88

0800bec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bece:	f3ef 8305 	mrs	r3, IPSR
 800bed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b0f      	cmp	r3, #15
 800bed8:	d915      	bls.n	800bf06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beda:	4a18      	ldr	r2, [pc, #96]	@ (800bf3c <vPortValidateInterruptPriority+0x74>)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bee4:	4b16      	ldr	r3, [pc, #88]	@ (800bf40 <vPortValidateInterruptPriority+0x78>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	7afa      	ldrb	r2, [r7, #11]
 800beea:	429a      	cmp	r2, r3
 800beec:	d20b      	bcs.n	800bf06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	607b      	str	r3, [r7, #4]
}
 800bf00:	bf00      	nop
 800bf02:	bf00      	nop
 800bf04:	e7fd      	b.n	800bf02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf06:	4b0f      	ldr	r3, [pc, #60]	@ (800bf44 <vPortValidateInterruptPriority+0x7c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bf0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf48 <vPortValidateInterruptPriority+0x80>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d90b      	bls.n	800bf2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	603b      	str	r3, [r7, #0]
}
 800bf28:	bf00      	nop
 800bf2a:	bf00      	nop
 800bf2c:	e7fd      	b.n	800bf2a <vPortValidateInterruptPriority+0x62>
	}
 800bf2e:	bf00      	nop
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	e000e3f0 	.word	0xe000e3f0
 800bf40:	200026ec 	.word	0x200026ec
 800bf44:	e000ed0c 	.word	0xe000ed0c
 800bf48:	200026f0 	.word	0x200026f0

0800bf4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08a      	sub	sp, #40	@ 0x28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf58:	f7fe fd62 	bl	800aa20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf5c:	4b5c      	ldr	r3, [pc, #368]	@ (800c0d0 <pvPortMalloc+0x184>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf64:	f000 f924 	bl	800c1b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf68:	4b5a      	ldr	r3, [pc, #360]	@ (800c0d4 <pvPortMalloc+0x188>)
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f040 8095 	bne.w	800c0a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01e      	beq.n	800bfba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4413      	add	r3, r2
 800bf82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f003 0307 	and.w	r3, r3, #7
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d015      	beq.n	800bfba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f023 0307 	bic.w	r3, r3, #7
 800bf94:	3308      	adds	r3, #8
 800bf96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f003 0307 	and.w	r3, r3, #7
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <pvPortMalloc+0x6e>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	617b      	str	r3, [r7, #20]
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop
 800bfb8:	e7fd      	b.n	800bfb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d06f      	beq.n	800c0a0 <pvPortMalloc+0x154>
 800bfc0:	4b45      	ldr	r3, [pc, #276]	@ (800c0d8 <pvPortMalloc+0x18c>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d86a      	bhi.n	800c0a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfca:	4b44      	ldr	r3, [pc, #272]	@ (800c0dc <pvPortMalloc+0x190>)
 800bfcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfce:	4b43      	ldr	r3, [pc, #268]	@ (800c0dc <pvPortMalloc+0x190>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfd4:	e004      	b.n	800bfe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d903      	bls.n	800bff2 <pvPortMalloc+0xa6>
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f1      	bne.n	800bfd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bff2:	4b37      	ldr	r3, [pc, #220]	@ (800c0d0 <pvPortMalloc+0x184>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d051      	beq.n	800c0a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2208      	movs	r2, #8
 800c002:	4413      	add	r3, r2
 800c004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	1ad2      	subs	r2, r2, r3
 800c016:	2308      	movs	r3, #8
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d920      	bls.n	800c060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c01e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4413      	add	r3, r2
 800c024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	f003 0307 	and.w	r3, r3, #7
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00b      	beq.n	800c048 <pvPortMalloc+0xfc>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	613b      	str	r3, [r7, #16]
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	e7fd      	b.n	800c044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c05a:	69b8      	ldr	r0, [r7, #24]
 800c05c:	f000 f90a 	bl	800c274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c060:	4b1d      	ldr	r3, [pc, #116]	@ (800c0d8 <pvPortMalloc+0x18c>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	4a1b      	ldr	r2, [pc, #108]	@ (800c0d8 <pvPortMalloc+0x18c>)
 800c06c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c06e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d8 <pvPortMalloc+0x18c>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	4b1b      	ldr	r3, [pc, #108]	@ (800c0e0 <pvPortMalloc+0x194>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	429a      	cmp	r2, r3
 800c078:	d203      	bcs.n	800c082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c07a:	4b17      	ldr	r3, [pc, #92]	@ (800c0d8 <pvPortMalloc+0x18c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a18      	ldr	r2, [pc, #96]	@ (800c0e0 <pvPortMalloc+0x194>)
 800c080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	4b13      	ldr	r3, [pc, #76]	@ (800c0d4 <pvPortMalloc+0x188>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	431a      	orrs	r2, r3
 800c08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c096:	4b13      	ldr	r3, [pc, #76]	@ (800c0e4 <pvPortMalloc+0x198>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3301      	adds	r3, #1
 800c09c:	4a11      	ldr	r2, [pc, #68]	@ (800c0e4 <pvPortMalloc+0x198>)
 800c09e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0a0:	f7fe fccc 	bl	800aa3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	60fb      	str	r3, [r7, #12]
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	e7fd      	b.n	800c0c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3728      	adds	r7, #40	@ 0x28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200032fc 	.word	0x200032fc
 800c0d4:	20003310 	.word	0x20003310
 800c0d8:	20003300 	.word	0x20003300
 800c0dc:	200032f4 	.word	0x200032f4
 800c0e0:	20003304 	.word	0x20003304
 800c0e4:	20003308 	.word	0x20003308

0800c0e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b086      	sub	sp, #24
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d04f      	beq.n	800c19a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0fa:	2308      	movs	r3, #8
 800c0fc:	425b      	negs	r3, r3
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	4413      	add	r3, r2
 800c102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	4b25      	ldr	r3, [pc, #148]	@ (800c1a4 <vPortFree+0xbc>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4013      	ands	r3, r2
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <vPortFree+0x46>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60fb      	str	r3, [r7, #12]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00b      	beq.n	800c14e <vPortFree+0x66>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	60bb      	str	r3, [r7, #8]
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	e7fd      	b.n	800c14a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	4b14      	ldr	r3, [pc, #80]	@ (800c1a4 <vPortFree+0xbc>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4013      	ands	r3, r2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d01e      	beq.n	800c19a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11a      	bne.n	800c19a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a4 <vPortFree+0xbc>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	43db      	mvns	r3, r3
 800c16e:	401a      	ands	r2, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c174:	f7fe fc54 	bl	800aa20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a8 <vPortFree+0xc0>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4413      	add	r3, r2
 800c182:	4a09      	ldr	r2, [pc, #36]	@ (800c1a8 <vPortFree+0xc0>)
 800c184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c186:	6938      	ldr	r0, [r7, #16]
 800c188:	f000 f874 	bl	800c274 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c18c:	4b07      	ldr	r3, [pc, #28]	@ (800c1ac <vPortFree+0xc4>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	4a06      	ldr	r2, [pc, #24]	@ (800c1ac <vPortFree+0xc4>)
 800c194:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c196:	f7fe fc51 	bl	800aa3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c19a:	bf00      	nop
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20003310 	.word	0x20003310
 800c1a8:	20003300 	.word	0x20003300
 800c1ac:	2000330c 	.word	0x2000330c

0800c1b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c1ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1bc:	4b27      	ldr	r3, [pc, #156]	@ (800c25c <prvHeapInit+0xac>)
 800c1be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f003 0307 	and.w	r3, r3, #7
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00c      	beq.n	800c1e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3307      	adds	r3, #7
 800c1ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f023 0307 	bic.w	r3, r3, #7
 800c1d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	4a1f      	ldr	r2, [pc, #124]	@ (800c25c <prvHeapInit+0xac>)
 800c1e0:	4413      	add	r3, r2
 800c1e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c260 <prvHeapInit+0xb0>)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c260 <prvHeapInit+0xb0>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	1a9b      	subs	r3, r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f023 0307 	bic.w	r3, r3, #7
 800c20a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4a15      	ldr	r2, [pc, #84]	@ (800c264 <prvHeapInit+0xb4>)
 800c210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c212:	4b14      	ldr	r3, [pc, #80]	@ (800c264 <prvHeapInit+0xb4>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2200      	movs	r2, #0
 800c218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c21a:	4b12      	ldr	r3, [pc, #72]	@ (800c264 <prvHeapInit+0xb4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2200      	movs	r2, #0
 800c220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	1ad2      	subs	r2, r2, r3
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c230:	4b0c      	ldr	r3, [pc, #48]	@ (800c264 <prvHeapInit+0xb4>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	4a0a      	ldr	r2, [pc, #40]	@ (800c268 <prvHeapInit+0xb8>)
 800c23e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	4a09      	ldr	r2, [pc, #36]	@ (800c26c <prvHeapInit+0xbc>)
 800c246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c248:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <prvHeapInit+0xc0>)
 800c24a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c24e:	601a      	str	r2, [r3, #0]
}
 800c250:	bf00      	nop
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	200026f4 	.word	0x200026f4
 800c260:	200032f4 	.word	0x200032f4
 800c264:	200032fc 	.word	0x200032fc
 800c268:	20003304 	.word	0x20003304
 800c26c:	20003300 	.word	0x20003300
 800c270:	20003310 	.word	0x20003310

0800c274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c27c:	4b28      	ldr	r3, [pc, #160]	@ (800c320 <prvInsertBlockIntoFreeList+0xac>)
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	e002      	b.n	800c288 <prvInsertBlockIntoFreeList+0x14>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d8f7      	bhi.n	800c282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	4413      	add	r3, r2
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d108      	bne.n	800c2b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	441a      	add	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	441a      	add	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d118      	bne.n	800c2fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	4b15      	ldr	r3, [pc, #84]	@ (800c324 <prvInsertBlockIntoFreeList+0xb0>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d00d      	beq.n	800c2f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	441a      	add	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	e008      	b.n	800c304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c324 <prvInsertBlockIntoFreeList+0xb0>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	e003      	b.n	800c304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d002      	beq.n	800c312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	200032f4 	.word	0x200032f4
 800c324:	200032fc 	.word	0x200032fc

0800c328 <memset>:
 800c328:	4402      	add	r2, r0
 800c32a:	4603      	mov	r3, r0
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d100      	bne.n	800c332 <memset+0xa>
 800c330:	4770      	bx	lr
 800c332:	f803 1b01 	strb.w	r1, [r3], #1
 800c336:	e7f9      	b.n	800c32c <memset+0x4>

0800c338 <_reclaim_reent>:
 800c338:	4b2d      	ldr	r3, [pc, #180]	@ (800c3f0 <_reclaim_reent+0xb8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4283      	cmp	r3, r0
 800c33e:	b570      	push	{r4, r5, r6, lr}
 800c340:	4604      	mov	r4, r0
 800c342:	d053      	beq.n	800c3ec <_reclaim_reent+0xb4>
 800c344:	69c3      	ldr	r3, [r0, #28]
 800c346:	b31b      	cbz	r3, 800c390 <_reclaim_reent+0x58>
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	b163      	cbz	r3, 800c366 <_reclaim_reent+0x2e>
 800c34c:	2500      	movs	r5, #0
 800c34e:	69e3      	ldr	r3, [r4, #28]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	5959      	ldr	r1, [r3, r5]
 800c354:	b9b1      	cbnz	r1, 800c384 <_reclaim_reent+0x4c>
 800c356:	3504      	adds	r5, #4
 800c358:	2d80      	cmp	r5, #128	@ 0x80
 800c35a:	d1f8      	bne.n	800c34e <_reclaim_reent+0x16>
 800c35c:	69e3      	ldr	r3, [r4, #28]
 800c35e:	4620      	mov	r0, r4
 800c360:	68d9      	ldr	r1, [r3, #12]
 800c362:	f000 f881 	bl	800c468 <_free_r>
 800c366:	69e3      	ldr	r3, [r4, #28]
 800c368:	6819      	ldr	r1, [r3, #0]
 800c36a:	b111      	cbz	r1, 800c372 <_reclaim_reent+0x3a>
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 f87b 	bl	800c468 <_free_r>
 800c372:	69e3      	ldr	r3, [r4, #28]
 800c374:	689d      	ldr	r5, [r3, #8]
 800c376:	b15d      	cbz	r5, 800c390 <_reclaim_reent+0x58>
 800c378:	4629      	mov	r1, r5
 800c37a:	4620      	mov	r0, r4
 800c37c:	682d      	ldr	r5, [r5, #0]
 800c37e:	f000 f873 	bl	800c468 <_free_r>
 800c382:	e7f8      	b.n	800c376 <_reclaim_reent+0x3e>
 800c384:	680e      	ldr	r6, [r1, #0]
 800c386:	4620      	mov	r0, r4
 800c388:	f000 f86e 	bl	800c468 <_free_r>
 800c38c:	4631      	mov	r1, r6
 800c38e:	e7e1      	b.n	800c354 <_reclaim_reent+0x1c>
 800c390:	6961      	ldr	r1, [r4, #20]
 800c392:	b111      	cbz	r1, 800c39a <_reclaim_reent+0x62>
 800c394:	4620      	mov	r0, r4
 800c396:	f000 f867 	bl	800c468 <_free_r>
 800c39a:	69e1      	ldr	r1, [r4, #28]
 800c39c:	b111      	cbz	r1, 800c3a4 <_reclaim_reent+0x6c>
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 f862 	bl	800c468 <_free_r>
 800c3a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c3a6:	b111      	cbz	r1, 800c3ae <_reclaim_reent+0x76>
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 f85d 	bl	800c468 <_free_r>
 800c3ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3b0:	b111      	cbz	r1, 800c3b8 <_reclaim_reent+0x80>
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 f858 	bl	800c468 <_free_r>
 800c3b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c3ba:	b111      	cbz	r1, 800c3c2 <_reclaim_reent+0x8a>
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 f853 	bl	800c468 <_free_r>
 800c3c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c3c4:	b111      	cbz	r1, 800c3cc <_reclaim_reent+0x94>
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 f84e 	bl	800c468 <_free_r>
 800c3cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c3ce:	b111      	cbz	r1, 800c3d6 <_reclaim_reent+0x9e>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 f849 	bl	800c468 <_free_r>
 800c3d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c3d8:	b111      	cbz	r1, 800c3e0 <_reclaim_reent+0xa8>
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 f844 	bl	800c468 <_free_r>
 800c3e0:	6a23      	ldr	r3, [r4, #32]
 800c3e2:	b11b      	cbz	r3, 800c3ec <_reclaim_reent+0xb4>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3ea:	4718      	bx	r3
 800c3ec:	bd70      	pop	{r4, r5, r6, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20001254 	.word	0x20001254

0800c3f4 <__errno>:
 800c3f4:	4b01      	ldr	r3, [pc, #4]	@ (800c3fc <__errno+0x8>)
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	20001254 	.word	0x20001254

0800c400 <__libc_init_array>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	4d0d      	ldr	r5, [pc, #52]	@ (800c438 <__libc_init_array+0x38>)
 800c404:	4c0d      	ldr	r4, [pc, #52]	@ (800c43c <__libc_init_array+0x3c>)
 800c406:	1b64      	subs	r4, r4, r5
 800c408:	10a4      	asrs	r4, r4, #2
 800c40a:	2600      	movs	r6, #0
 800c40c:	42a6      	cmp	r6, r4
 800c40e:	d109      	bne.n	800c424 <__libc_init_array+0x24>
 800c410:	4d0b      	ldr	r5, [pc, #44]	@ (800c440 <__libc_init_array+0x40>)
 800c412:	4c0c      	ldr	r4, [pc, #48]	@ (800c444 <__libc_init_array+0x44>)
 800c414:	f000 fa22 	bl	800c85c <_init>
 800c418:	1b64      	subs	r4, r4, r5
 800c41a:	10a4      	asrs	r4, r4, #2
 800c41c:	2600      	movs	r6, #0
 800c41e:	42a6      	cmp	r6, r4
 800c420:	d105      	bne.n	800c42e <__libc_init_array+0x2e>
 800c422:	bd70      	pop	{r4, r5, r6, pc}
 800c424:	f855 3b04 	ldr.w	r3, [r5], #4
 800c428:	4798      	blx	r3
 800c42a:	3601      	adds	r6, #1
 800c42c:	e7ee      	b.n	800c40c <__libc_init_array+0xc>
 800c42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c432:	4798      	blx	r3
 800c434:	3601      	adds	r6, #1
 800c436:	e7f2      	b.n	800c41e <__libc_init_array+0x1e>
 800c438:	0800c990 	.word	0x0800c990
 800c43c:	0800c990 	.word	0x0800c990
 800c440:	0800c990 	.word	0x0800c990
 800c444:	0800c994 	.word	0x0800c994

0800c448 <__retarget_lock_acquire_recursive>:
 800c448:	4770      	bx	lr

0800c44a <__retarget_lock_release_recursive>:
 800c44a:	4770      	bx	lr

0800c44c <memcpy>:
 800c44c:	440a      	add	r2, r1
 800c44e:	4291      	cmp	r1, r2
 800c450:	f100 33ff 	add.w	r3, r0, #4294967295
 800c454:	d100      	bne.n	800c458 <memcpy+0xc>
 800c456:	4770      	bx	lr
 800c458:	b510      	push	{r4, lr}
 800c45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c45e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c462:	4291      	cmp	r1, r2
 800c464:	d1f9      	bne.n	800c45a <memcpy+0xe>
 800c466:	bd10      	pop	{r4, pc}

0800c468 <_free_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	2900      	cmp	r1, #0
 800c46e:	d041      	beq.n	800c4f4 <_free_r+0x8c>
 800c470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c474:	1f0c      	subs	r4, r1, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	bfb8      	it	lt
 800c47a:	18e4      	addlt	r4, r4, r3
 800c47c:	f000 f83e 	bl	800c4fc <__malloc_lock>
 800c480:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f8 <_free_r+0x90>)
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	b933      	cbnz	r3, 800c494 <_free_r+0x2c>
 800c486:	6063      	str	r3, [r4, #4]
 800c488:	6014      	str	r4, [r2, #0]
 800c48a:	4628      	mov	r0, r5
 800c48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c490:	f000 b83a 	b.w	800c508 <__malloc_unlock>
 800c494:	42a3      	cmp	r3, r4
 800c496:	d908      	bls.n	800c4aa <_free_r+0x42>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	1821      	adds	r1, r4, r0
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf01      	itttt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	1809      	addeq	r1, r1, r0
 800c4a6:	6021      	streq	r1, [r4, #0]
 800c4a8:	e7ed      	b.n	800c486 <_free_r+0x1e>
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	b10b      	cbz	r3, 800c4b4 <_free_r+0x4c>
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d9fa      	bls.n	800c4aa <_free_r+0x42>
 800c4b4:	6811      	ldr	r1, [r2, #0]
 800c4b6:	1850      	adds	r0, r2, r1
 800c4b8:	42a0      	cmp	r0, r4
 800c4ba:	d10b      	bne.n	800c4d4 <_free_r+0x6c>
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	4401      	add	r1, r0
 800c4c0:	1850      	adds	r0, r2, r1
 800c4c2:	4283      	cmp	r3, r0
 800c4c4:	6011      	str	r1, [r2, #0]
 800c4c6:	d1e0      	bne.n	800c48a <_free_r+0x22>
 800c4c8:	6818      	ldr	r0, [r3, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	6053      	str	r3, [r2, #4]
 800c4ce:	4408      	add	r0, r1
 800c4d0:	6010      	str	r0, [r2, #0]
 800c4d2:	e7da      	b.n	800c48a <_free_r+0x22>
 800c4d4:	d902      	bls.n	800c4dc <_free_r+0x74>
 800c4d6:	230c      	movs	r3, #12
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	e7d6      	b.n	800c48a <_free_r+0x22>
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	1821      	adds	r1, r4, r0
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	bf04      	itt	eq
 800c4e4:	6819      	ldreq	r1, [r3, #0]
 800c4e6:	685b      	ldreq	r3, [r3, #4]
 800c4e8:	6063      	str	r3, [r4, #4]
 800c4ea:	bf04      	itt	eq
 800c4ec:	1809      	addeq	r1, r1, r0
 800c4ee:	6021      	streq	r1, [r4, #0]
 800c4f0:	6054      	str	r4, [r2, #4]
 800c4f2:	e7ca      	b.n	800c48a <_free_r+0x22>
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20003450 	.word	0x20003450

0800c4fc <__malloc_lock>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	@ (800c504 <__malloc_lock+0x8>)
 800c4fe:	f7ff bfa3 	b.w	800c448 <__retarget_lock_acquire_recursive>
 800c502:	bf00      	nop
 800c504:	2000344c 	.word	0x2000344c

0800c508 <__malloc_unlock>:
 800c508:	4801      	ldr	r0, [pc, #4]	@ (800c510 <__malloc_unlock+0x8>)
 800c50a:	f7ff bf9e 	b.w	800c44a <__retarget_lock_release_recursive>
 800c50e:	bf00      	nop
 800c510:	2000344c 	.word	0x2000344c

0800c514 <sqrt>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	ed2d 8b02 	vpush	{d8}
 800c51a:	ec55 4b10 	vmov	r4, r5, d0
 800c51e:	f000 f845 	bl	800c5ac <__ieee754_sqrt>
 800c522:	4622      	mov	r2, r4
 800c524:	462b      	mov	r3, r5
 800c526:	4620      	mov	r0, r4
 800c528:	4629      	mov	r1, r5
 800c52a:	eeb0 8a40 	vmov.f32	s16, s0
 800c52e:	eef0 8a60 	vmov.f32	s17, s1
 800c532:	f7f4 facb 	bl	8000acc <__aeabi_dcmpun>
 800c536:	b990      	cbnz	r0, 800c55e <sqrt+0x4a>
 800c538:	2200      	movs	r2, #0
 800c53a:	2300      	movs	r3, #0
 800c53c:	4620      	mov	r0, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	f7f4 fa9c 	bl	8000a7c <__aeabi_dcmplt>
 800c544:	b158      	cbz	r0, 800c55e <sqrt+0x4a>
 800c546:	f7ff ff55 	bl	800c3f4 <__errno>
 800c54a:	2321      	movs	r3, #33	@ 0x21
 800c54c:	6003      	str	r3, [r0, #0]
 800c54e:	2200      	movs	r2, #0
 800c550:	2300      	movs	r3, #0
 800c552:	4610      	mov	r0, r2
 800c554:	4619      	mov	r1, r3
 800c556:	f7f4 f949 	bl	80007ec <__aeabi_ddiv>
 800c55a:	ec41 0b18 	vmov	d8, r0, r1
 800c55e:	eeb0 0a48 	vmov.f32	s0, s16
 800c562:	eef0 0a68 	vmov.f32	s1, s17
 800c566:	ecbd 8b02 	vpop	{d8}
 800c56a:	bd38      	pop	{r3, r4, r5, pc}

0800c56c <fmodf>:
 800c56c:	b508      	push	{r3, lr}
 800c56e:	ed2d 8b02 	vpush	{d8}
 800c572:	eef0 8a40 	vmov.f32	s17, s0
 800c576:	eeb0 8a60 	vmov.f32	s16, s1
 800c57a:	f000 f8ed 	bl	800c758 <__ieee754_fmodf>
 800c57e:	eef4 8a48 	vcmp.f32	s17, s16
 800c582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c586:	d60c      	bvs.n	800c5a2 <fmodf+0x36>
 800c588:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c5a8 <fmodf+0x3c>
 800c58c:	eeb4 8a68 	vcmp.f32	s16, s17
 800c590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c594:	d105      	bne.n	800c5a2 <fmodf+0x36>
 800c596:	f7ff ff2d 	bl	800c3f4 <__errno>
 800c59a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c59e:	2321      	movs	r3, #33	@ 0x21
 800c5a0:	6003      	str	r3, [r0, #0]
 800c5a2:	ecbd 8b02 	vpop	{d8}
 800c5a6:	bd08      	pop	{r3, pc}
 800c5a8:	00000000 	.word	0x00000000

0800c5ac <__ieee754_sqrt>:
 800c5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b0:	4a66      	ldr	r2, [pc, #408]	@ (800c74c <__ieee754_sqrt+0x1a0>)
 800c5b2:	ec55 4b10 	vmov	r4, r5, d0
 800c5b6:	43aa      	bics	r2, r5
 800c5b8:	462b      	mov	r3, r5
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	d110      	bne.n	800c5e0 <__ieee754_sqrt+0x34>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	f7f3 ffe8 	bl	8000598 <__aeabi_dmul>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f3 fe2c 	bl	800022c <__adddf3>
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	ec45 4b10 	vmov	d0, r4, r5
 800c5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	2d00      	cmp	r5, #0
 800c5e2:	dc0e      	bgt.n	800c602 <__ieee754_sqrt+0x56>
 800c5e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c5e8:	4322      	orrs	r2, r4
 800c5ea:	d0f5      	beq.n	800c5d8 <__ieee754_sqrt+0x2c>
 800c5ec:	b19d      	cbz	r5, 800c616 <__ieee754_sqrt+0x6a>
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	f7f3 fe18 	bl	8000228 <__aeabi_dsub>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	f7f4 f8f6 	bl	80007ec <__aeabi_ddiv>
 800c600:	e7e8      	b.n	800c5d4 <__ieee754_sqrt+0x28>
 800c602:	152a      	asrs	r2, r5, #20
 800c604:	d115      	bne.n	800c632 <__ieee754_sqrt+0x86>
 800c606:	2000      	movs	r0, #0
 800c608:	e009      	b.n	800c61e <__ieee754_sqrt+0x72>
 800c60a:	0acb      	lsrs	r3, r1, #11
 800c60c:	3a15      	subs	r2, #21
 800c60e:	0549      	lsls	r1, r1, #21
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0fa      	beq.n	800c60a <__ieee754_sqrt+0x5e>
 800c614:	e7f7      	b.n	800c606 <__ieee754_sqrt+0x5a>
 800c616:	462a      	mov	r2, r5
 800c618:	e7fa      	b.n	800c610 <__ieee754_sqrt+0x64>
 800c61a:	005b      	lsls	r3, r3, #1
 800c61c:	3001      	adds	r0, #1
 800c61e:	02dc      	lsls	r4, r3, #11
 800c620:	d5fb      	bpl.n	800c61a <__ieee754_sqrt+0x6e>
 800c622:	1e44      	subs	r4, r0, #1
 800c624:	1b12      	subs	r2, r2, r4
 800c626:	f1c0 0420 	rsb	r4, r0, #32
 800c62a:	fa21 f404 	lsr.w	r4, r1, r4
 800c62e:	4323      	orrs	r3, r4
 800c630:	4081      	lsls	r1, r0
 800c632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c636:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c63a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c63e:	07d2      	lsls	r2, r2, #31
 800c640:	bf5c      	itt	pl
 800c642:	005b      	lslpl	r3, r3, #1
 800c644:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c648:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c64c:	bf58      	it	pl
 800c64e:	0049      	lslpl	r1, r1, #1
 800c650:	2600      	movs	r6, #0
 800c652:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c656:	107f      	asrs	r7, r7, #1
 800c658:	0049      	lsls	r1, r1, #1
 800c65a:	2016      	movs	r0, #22
 800c65c:	4632      	mov	r2, r6
 800c65e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c662:	1915      	adds	r5, r2, r4
 800c664:	429d      	cmp	r5, r3
 800c666:	bfde      	ittt	le
 800c668:	192a      	addle	r2, r5, r4
 800c66a:	1b5b      	suble	r3, r3, r5
 800c66c:	1936      	addle	r6, r6, r4
 800c66e:	0fcd      	lsrs	r5, r1, #31
 800c670:	3801      	subs	r0, #1
 800c672:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c676:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c67a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c67e:	d1f0      	bne.n	800c662 <__ieee754_sqrt+0xb6>
 800c680:	4605      	mov	r5, r0
 800c682:	2420      	movs	r4, #32
 800c684:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c688:	4293      	cmp	r3, r2
 800c68a:	eb0c 0e00 	add.w	lr, ip, r0
 800c68e:	dc02      	bgt.n	800c696 <__ieee754_sqrt+0xea>
 800c690:	d113      	bne.n	800c6ba <__ieee754_sqrt+0x10e>
 800c692:	458e      	cmp	lr, r1
 800c694:	d811      	bhi.n	800c6ba <__ieee754_sqrt+0x10e>
 800c696:	f1be 0f00 	cmp.w	lr, #0
 800c69a:	eb0e 000c 	add.w	r0, lr, ip
 800c69e:	da3f      	bge.n	800c720 <__ieee754_sqrt+0x174>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	db3d      	blt.n	800c720 <__ieee754_sqrt+0x174>
 800c6a4:	f102 0801 	add.w	r8, r2, #1
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	458e      	cmp	lr, r1
 800c6ac:	bf88      	it	hi
 800c6ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c6b2:	eba1 010e 	sub.w	r1, r1, lr
 800c6b6:	4465      	add	r5, ip
 800c6b8:	4642      	mov	r2, r8
 800c6ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c6be:	3c01      	subs	r4, #1
 800c6c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c6c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c6cc:	d1dc      	bne.n	800c688 <__ieee754_sqrt+0xdc>
 800c6ce:	4319      	orrs	r1, r3
 800c6d0:	d01b      	beq.n	800c70a <__ieee754_sqrt+0x15e>
 800c6d2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800c750 <__ieee754_sqrt+0x1a4>
 800c6d6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800c754 <__ieee754_sqrt+0x1a8>
 800c6da:	e9da 0100 	ldrd	r0, r1, [sl]
 800c6de:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6e2:	f7f3 fda1 	bl	8000228 <__aeabi_dsub>
 800c6e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4640      	mov	r0, r8
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	f7f4 f9cd 	bl	8000a90 <__aeabi_dcmple>
 800c6f6:	b140      	cbz	r0, 800c70a <__ieee754_sqrt+0x15e>
 800c6f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c6fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800c700:	e9db 2300 	ldrd	r2, r3, [fp]
 800c704:	d10e      	bne.n	800c724 <__ieee754_sqrt+0x178>
 800c706:	3601      	adds	r6, #1
 800c708:	4625      	mov	r5, r4
 800c70a:	1073      	asrs	r3, r6, #1
 800c70c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c710:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c714:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800c718:	086b      	lsrs	r3, r5, #1
 800c71a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800c71e:	e759      	b.n	800c5d4 <__ieee754_sqrt+0x28>
 800c720:	4690      	mov	r8, r2
 800c722:	e7c1      	b.n	800c6a8 <__ieee754_sqrt+0xfc>
 800c724:	f7f3 fd82 	bl	800022c <__adddf3>
 800c728:	e9da 8900 	ldrd	r8, r9, [sl]
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	4640      	mov	r0, r8
 800c732:	4649      	mov	r1, r9
 800c734:	f7f4 f9a2 	bl	8000a7c <__aeabi_dcmplt>
 800c738:	b120      	cbz	r0, 800c744 <__ieee754_sqrt+0x198>
 800c73a:	1cab      	adds	r3, r5, #2
 800c73c:	bf08      	it	eq
 800c73e:	3601      	addeq	r6, #1
 800c740:	3502      	adds	r5, #2
 800c742:	e7e2      	b.n	800c70a <__ieee754_sqrt+0x15e>
 800c744:	1c6b      	adds	r3, r5, #1
 800c746:	f023 0501 	bic.w	r5, r3, #1
 800c74a:	e7de      	b.n	800c70a <__ieee754_sqrt+0x15e>
 800c74c:	7ff00000 	.word	0x7ff00000
 800c750:	0800c978 	.word	0x0800c978
 800c754:	0800c970 	.word	0x0800c970

0800c758 <__ieee754_fmodf>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	ee10 6a90 	vmov	r6, s1
 800c75e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c762:	1e5a      	subs	r2, r3, #1
 800c764:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c768:	d206      	bcs.n	800c778 <__ieee754_fmodf+0x20>
 800c76a:	ee10 4a10 	vmov	r4, s0
 800c76e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800c772:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c776:	d304      	bcc.n	800c782 <__ieee754_fmodf+0x2a>
 800c778:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c77c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c780:	bd70      	pop	{r4, r5, r6, pc}
 800c782:	4299      	cmp	r1, r3
 800c784:	dbfc      	blt.n	800c780 <__ieee754_fmodf+0x28>
 800c786:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800c78a:	d105      	bne.n	800c798 <__ieee754_fmodf+0x40>
 800c78c:	4b32      	ldr	r3, [pc, #200]	@ (800c858 <__ieee754_fmodf+0x100>)
 800c78e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800c792:	ed93 0a00 	vldr	s0, [r3]
 800c796:	e7f3      	b.n	800c780 <__ieee754_fmodf+0x28>
 800c798:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c79c:	d146      	bne.n	800c82c <__ieee754_fmodf+0xd4>
 800c79e:	020a      	lsls	r2, r1, #8
 800c7a0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800c7a4:	2a00      	cmp	r2, #0
 800c7a6:	dc3e      	bgt.n	800c826 <__ieee754_fmodf+0xce>
 800c7a8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c7ac:	bf01      	itttt	eq
 800c7ae:	021a      	lsleq	r2, r3, #8
 800c7b0:	fab2 f282 	clzeq	r2, r2
 800c7b4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800c7b8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800c7bc:	bf16      	itet	ne
 800c7be:	15da      	asrne	r2, r3, #23
 800c7c0:	3282      	addeq	r2, #130	@ 0x82
 800c7c2:	3a7f      	subne	r2, #127	@ 0x7f
 800c7c4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800c7c8:	bfbb      	ittet	lt
 800c7ca:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c7ce:	1a24      	sublt	r4, r4, r0
 800c7d0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800c7d4:	40a1      	lsllt	r1, r4
 800c7d6:	bfa8      	it	ge
 800c7d8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800c7dc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c7e0:	bfb5      	itete	lt
 800c7e2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c7e6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800c7ea:	1aa4      	sublt	r4, r4, r2
 800c7ec:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800c7f0:	bfb8      	it	lt
 800c7f2:	fa03 f404 	lsllt.w	r4, r3, r4
 800c7f6:	1a80      	subs	r0, r0, r2
 800c7f8:	1b0b      	subs	r3, r1, r4
 800c7fa:	b9d0      	cbnz	r0, 800c832 <__ieee754_fmodf+0xda>
 800c7fc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800c800:	bf28      	it	cs
 800c802:	460b      	movcs	r3, r1
 800c804:	2b00      	cmp	r3, #0
 800c806:	d0c1      	beq.n	800c78c <__ieee754_fmodf+0x34>
 800c808:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c80c:	db19      	blt.n	800c842 <__ieee754_fmodf+0xea>
 800c80e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c812:	db19      	blt.n	800c848 <__ieee754_fmodf+0xf0>
 800c814:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c818:	327f      	adds	r2, #127	@ 0x7f
 800c81a:	432b      	orrs	r3, r5
 800c81c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c820:	ee00 3a10 	vmov	s0, r3
 800c824:	e7ac      	b.n	800c780 <__ieee754_fmodf+0x28>
 800c826:	3801      	subs	r0, #1
 800c828:	0052      	lsls	r2, r2, #1
 800c82a:	e7bb      	b.n	800c7a4 <__ieee754_fmodf+0x4c>
 800c82c:	15c8      	asrs	r0, r1, #23
 800c82e:	387f      	subs	r0, #127	@ 0x7f
 800c830:	e7ba      	b.n	800c7a8 <__ieee754_fmodf+0x50>
 800c832:	2b00      	cmp	r3, #0
 800c834:	da02      	bge.n	800c83c <__ieee754_fmodf+0xe4>
 800c836:	0049      	lsls	r1, r1, #1
 800c838:	3801      	subs	r0, #1
 800c83a:	e7dd      	b.n	800c7f8 <__ieee754_fmodf+0xa0>
 800c83c:	d0a6      	beq.n	800c78c <__ieee754_fmodf+0x34>
 800c83e:	0059      	lsls	r1, r3, #1
 800c840:	e7fa      	b.n	800c838 <__ieee754_fmodf+0xe0>
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	3a01      	subs	r2, #1
 800c846:	e7df      	b.n	800c808 <__ieee754_fmodf+0xb0>
 800c848:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c84c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c850:	3282      	adds	r2, #130	@ 0x82
 800c852:	4113      	asrs	r3, r2
 800c854:	432b      	orrs	r3, r5
 800c856:	e7e3      	b.n	800c820 <__ieee754_fmodf+0xc8>
 800c858:	0800c980 	.word	0x0800c980

0800c85c <_init>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	bf00      	nop
 800c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c862:	bc08      	pop	{r3}
 800c864:	469e      	mov	lr, r3
 800c866:	4770      	bx	lr

0800c868 <_fini>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	bf00      	nop
 800c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86e:	bc08      	pop	{r3}
 800c870:	469e      	mov	lr, r3
 800c872:	4770      	bx	lr
