
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000ca90  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800cc70  0800cc70  0000dc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd84  0800cd84  0000e254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd84  0800cd84  0000dd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd8c  0800cd8c  0000e254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd8c  0800cd8c  0000dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd90  0800cd90  0000dd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800cd94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d8  20000254  0800cfe8  0000e254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000252c  0800cfe8  0000e52c  2**0
=======
  1 .text         0000ca70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800cc50  0800cc50  0000dc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd64  0800cd64  0000e28c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd64  0800cd64  0000dd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd6c  0800cd6c  0000e28c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd6c  0800cd6c  0000dd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd70  0800cd70  0000dd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  0800cd74  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022dc  2000028c  0800d000  0000e28c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002568  0800d000  0000e568  2**0
>>>>>>> origin/main
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d40  00000000  00000000  0000e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007642  00000000  00000000  00042ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002768  00000000  00000000  0004a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e3d  00000000  00000000  0004cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c130  00000000  00000000  0004ebe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   00039390  00000000  00000000  0007a445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f45c7  00000000  00000000  000b37d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7d9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6e4  00000000  00000000  001a7de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b24c4  2**0
=======
 17 .debug_line   0003a05d  00000000  00000000  0007ad15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f45e6  00000000  00000000  000b4d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6c0  00000000  00000000  001a939c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b3a5c  2**0
>>>>>>> origin/main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000028c 	.word	0x2000028c
 80001fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000200:	0800cc58 	.word	0x0800cc58
=======
 8000200:	0800cc38 	.word	0x0800cc38
>>>>>>> origin/main

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000218:	20000258 	.word	0x20000258
 800021c:	0800cc58 	.word	0x0800cc58
=======
 8000218:	20000290 	.word	0x20000290
 800021c:	0800cc38 	.word	0x0800cc38
>>>>>>> origin/main

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000566:	f00c fa5f 	bl	800ca28 <memset>
=======
 8000566:	f00c fa4f 	bl	800ca08 <memset>
>>>>>>> origin/main

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005b4:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_ADC1_Init+0x11c>)
<<<<<<< HEAD
 80005da:	f003 fc21 	bl	8003e20 <HAL_ADC_Init>
=======
 80005da:	f003 fc0f 	bl	8003dfc <HAL_ADC_Init>
>>>>>>> origin/main
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005e4:	f000 fc6e 	bl	8000ec4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x11c>)
<<<<<<< HEAD
 80005f4:	f004 fb9a 	bl	8004d2c <HAL_ADCEx_MultiModeConfigChannel>
=======
 80005f4:	f004 fb88 	bl	8004d08 <HAL_ADCEx_MultiModeConfigChannel>
>>>>>>> origin/main
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005fe:	f000 fc61 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_ADC1_Init+0x120>)
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2306      	movs	r3, #6
 8000608:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060e:	237f      	movs	r3, #127	@ 0x7f
 8000610:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000612:	2304      	movs	r3, #4
 8000614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x11c>)
<<<<<<< HEAD
 8000620:	f003 fe54 	bl	80042cc <HAL_ADC_ConfigChannel>
=======
 8000620:	f003 fe42 	bl	80042a8 <HAL_ADC_ConfigChannel>
>>>>>>> origin/main
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800062a:	f000 fc4b 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x11c>)
<<<<<<< HEAD
 8000638:	f003 fe48 	bl	80042cc <HAL_ADC_ConfigChannel>
=======
 8000638:	f003 fe36 	bl	80042a8 <HAL_ADC_ConfigChannel>
>>>>>>> origin/main
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fc3f 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000646:	2312      	movs	r3, #18
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x11c>)
<<<<<<< HEAD
 8000650:	f003 fe3c 	bl	80042cc <HAL_ADC_ConfigChannel>
=======
 8000650:	f003 fe2a 	bl	80042a8 <HAL_ADC_ConfigChannel>
>>>>>>> origin/main
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800065a:	f000 fc33 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	@ 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200002a8 	.word	0x200002a8
 800066c:	2e300800 	.word	0x2e300800

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	@ 0x68
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000692:	f00c f9c9 	bl	800ca28 <memset>
=======
 8000692:	f00c f9b9 	bl	800ca08 <memset>
>>>>>>> origin/main
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800069e:	d160      	bne.n	8000762 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
<<<<<<< HEAD
 80006b2:	f006 fe75 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
=======
 80006b2:	f006 fe63 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> origin/main
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006bc:	f000 fc02 	bl	8000ec4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80006f0:	f641 0303 	movw	r3, #6147	@ 0x1803
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	@ (8000770 <HAL_ADC_MspInit+0x100>)
<<<<<<< HEAD
 8000706:	f005 fd53 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000706:	f005 fd41 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <HAL_ADC_MspInit+0x108>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000712:	2205      	movs	r2, #5
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800072a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800073a:	2220      	movs	r2, #32
 800073c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_ADC_MspInit+0x104>)
<<<<<<< HEAD
 8000748:	f004 fdae 	bl	80052a8 <HAL_DMA_Init>
=======
 8000748:	f004 fd9c 	bl	8005284 <HAL_DMA_Init>
>>>>>>> origin/main
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000752:	f000 fbb7 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075a:	655a      	str	r2, [r3, #84]	@ 0x54
 800075c:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3768      	adds	r7, #104	@ 0x68
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	20000314 	.word	0x20000314
 8000778:	40020408 	.word	0x40020408

0800077c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <MX_FREERTOS_Init+0x38>)
 8000782:	2100      	movs	r1, #0
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_FREERTOS_Init+0x3c>)
<<<<<<< HEAD
 8000786:	f009 fab2 	bl	8009cee <osThreadNew>
=======
 8000786:	f009 faa0 	bl	8009cca <osThreadNew>
>>>>>>> origin/main
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <MX_FREERTOS_Init+0x40>)
 800078e:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_FREERTOS_Init+0x44>)
 8000792:	2100      	movs	r1, #0
 8000794:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <MX_FREERTOS_Init+0x48>)
<<<<<<< HEAD
 8000796:	f009 faaa 	bl	8009cee <osThreadNew>
=======
 8000796:	f009 fa98 	bl	8009cca <osThreadNew>
>>>>>>> origin/main
 800079a:	4603      	mov	r3, r0
 800079c:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <MX_FREERTOS_Init+0x4c>)
 800079e:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 80007a0:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <MX_FREERTOS_Init+0x50>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <MX_FREERTOS_Init+0x54>)
<<<<<<< HEAD
 80007a6:	f009 faa2 	bl	8009cee <osThreadNew>
=======
 80007a6:	f009 fa90 	bl	8009cca <osThreadNew>
>>>>>>> origin/main
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <MX_FREERTOS_Init+0x58>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 80007b4:	0800cca8 	.word	0x0800cca8
 80007b8:	080019f9 	.word	0x080019f9
 80007bc:	2000033c 	.word	0x2000033c
 80007c0:	0800cccc 	.word	0x0800cccc
 80007c4:	080030b5 	.word	0x080030b5
 80007c8:	20000340 	.word	0x20000340
 80007cc:	0800ccf0 	.word	0x0800ccf0
 80007d0:	080015c9 	.word	0x080015c9
 80007d4:	20000344 	.word	0x20000344
=======
 80007b4:	0800cc88 	.word	0x0800cc88
 80007b8:	08001a7d 	.word	0x08001a7d
 80007bc:	20000374 	.word	0x20000374
 80007c0:	0800ccac 	.word	0x0800ccac
 80007c4:	08003091 	.word	0x08003091
 80007c8:	20000378 	.word	0x20000378
 80007cc:	0800ccd0 	.word	0x0800ccd0
 80007d0:	08001605 	.word	0x08001605
 80007d4:	2000037c 	.word	0x2000037c
>>>>>>> origin/main

080007d8 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <MX_CORDIC_Init+0x24>)
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_CORDIC_Init+0x20>)
<<<<<<< HEAD
 80007e4:	f004 fb46 	bl	8004e74 <HAL_CORDIC_Init>
=======
 80007e4:	f004 fb34 	bl	8004e50 <HAL_CORDIC_Init>
>>>>>>> origin/main
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80007ee:	f000 fb69 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000380 	.word	0x20000380
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a34      	ldr	r2, [pc, #208]	@ (80008e0 <HAL_CORDIC_MspInit+0xe0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d161      	bne.n	80008d6 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000816:	4a33      	ldr	r2, [pc, #204]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6493      	str	r3, [r2, #72]	@ 0x48
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA2_Channel2;
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800082c:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <HAL_CORDIC_MspInit+0xec>)
 800082e:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 8000830:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000832:	2270      	movs	r2, #112	@ 0x70
 8000834:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000836:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800084a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800084e:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000856:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8000864:	4820      	ldr	r0, [pc, #128]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
<<<<<<< HEAD
 8000866:	f004 fd1f 	bl	80052a8 <HAL_DMA_Init>
=======
 8000866:	f004 fd0d 	bl	8005284 <HAL_DMA_Init>
>>>>>>> origin/main
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 8000870:	f000 fb28 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000878:	61da      	str	r2, [r3, #28]
 800087a:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA2_Channel3;
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <HAL_CORDIC_MspInit+0xf4>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000888:	2271      	movs	r2, #113	@ 0x71
 800088a:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 800088e:	2210      	movs	r2, #16
 8000890:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
<<<<<<< HEAD
 80008bc:	f004 fcf4 	bl	80052a8 <HAL_DMA_Init>
=======
 80008bc:	f004 fce2 	bl	8005284 <HAL_DMA_Init>
>>>>>>> origin/main
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80008c6:	f000 fafd 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008ce:	619a      	str	r2, [r3, #24]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	200003a8 	.word	0x200003a8
 80008ec:	4002041c 	.word	0x4002041c
 80008f0:	20000408 	.word	0x20000408
 80008f4:	40020430 	.word	0x40020430

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_DMA_Init+0x70>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <MX_DMA_Init+0x70>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6493      	str	r3, [r2, #72]	@ 0x48
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_DMA_Init+0x70>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_DMA_Init+0x70>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <MX_DMA_Init+0x70>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6493      	str	r3, [r2, #72]	@ 0x48
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_DMA_Init+0x70>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2038      	movs	r0, #56	@ 0x38
<<<<<<< HEAD
 8000934:	f004 fc90 	bl	8005258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000938:	2038      	movs	r0, #56	@ 0x38
 800093a:	f004 fca7 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000934:	f004 fc7e 	bl	8005234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000938:	2038      	movs	r0, #56	@ 0x38
 800093a:	f004 fc95 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2039      	movs	r0, #57	@ 0x39
<<<<<<< HEAD
 8000944:	f004 fc88 	bl	8005258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000948:	2039      	movs	r0, #57	@ 0x39
 800094a:	f004 fc9f 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000944:	f004 fc76 	bl	8005234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000948:	2039      	movs	r0, #57	@ 0x39
 800094a:	f004 fc8d 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	203a      	movs	r0, #58	@ 0x3a
<<<<<<< HEAD
 8000954:	f004 fc80 	bl	8005258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000958:	203a      	movs	r0, #58	@ 0x3a
 800095a:	f004 fc97 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000954:	f004 fc6e 	bl	8005234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000958:	203a      	movs	r0, #58	@ 0x3a
 800095a:	f004 fc85 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FDCAN1_Init+0x88>)
 8000974:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800098a:	2200      	movs	r2, #0
 800098c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000990:	2200      	movs	r2, #0
 8000992:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000996:	2200      	movs	r2, #0
 8000998:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800099c:	2214      	movs	r2, #20
 800099e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a8:	220e      	movs	r2, #14
 80009aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c0:	220e      	movs	r2, #14
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
<<<<<<< HEAD
 80009de:	f004 ff37 	bl	8005850 <HAL_FDCAN_Init>
=======
 80009de:	f004 ff25 	bl	800582c <HAL_FDCAN_Init>
>>>>>>> origin/main
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80009e8:	f000 fa6c 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000468 	.word	0x20000468
 80009f4:	40006400 	.word	0x40006400

080009f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09a      	sub	sp, #104	@ 0x68
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2244      	movs	r2, #68	@ 0x44
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000a1a:	f00c f805 	bl	800ca28 <memset>
=======
 8000a1a:	f00b fff5 	bl	800ca08 <memset>
>>>>>>> origin/main
  if(fdcanHandle->Instance==FDCAN1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <HAL_FDCAN_MspInit+0xcc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d149      	bne.n	8000abc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000a3a:	f006 fcb1 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
=======
 8000a3a:	f006 fc9f 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> origin/main
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a44:	f000 fa3e 	bl	8000ec4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a78:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a7c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a8a:	2309      	movs	r3, #9
 8000a8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8000a98:	f005 fb8a 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000a98:	f005 fb78 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	2015      	movs	r0, #21
<<<<<<< HEAD
 8000aa2:	f004 fbd9 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aa6:	2015      	movs	r0, #21
 8000aa8:	f004 fbf0 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000aa2:	f004 fbc7 	bl	8005234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aa6:	2015      	movs	r0, #21
 8000aa8:	f004 fbde 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2105      	movs	r1, #5
 8000ab0:	2016      	movs	r0, #22
<<<<<<< HEAD
 8000ab2:	f004 fbd1 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ab6:	2016      	movs	r0, #22
 8000ab8:	f004 fbe8 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000ab2:	f004 fbbf 	bl	8005234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ab6:	2016      	movs	r0, #22
 8000ab8:	f004 fbd6 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3768      	adds	r7, #104	@ 0x68
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40006400 	.word	0x40006400
 8000ac8:	40021000 	.word	0x40021000

08000acc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b49      	ldr	r3, [pc, #292]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a48      	ldr	r2, [pc, #288]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b46      	ldr	r3, [pc, #280]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afa:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a42      	ldr	r2, [pc, #264]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b40      	ldr	r3, [pc, #256]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b3d      	ldr	r3, [pc, #244]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a3c      	ldr	r2, [pc, #240]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b37      	ldr	r3, [pc, #220]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a36      	ldr	r2, [pc, #216]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b34      	ldr	r3, [pc, #208]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8000b4a:	f005 fcb3 	bl	80064b4 <HAL_GPIO_WritePin>
=======
 8000b4a:	f005 fca1 	bl	8006490 <HAL_GPIO_WritePin>
>>>>>>> origin/main

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6186 	mov.w	r1, #1072	@ 0x430
<<<<<<< HEAD
 8000b54:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0x124>)
 8000b56:	f005 fcad 	bl	80064b4 <HAL_GPIO_WritePin>
=======
 8000b54:	482d      	ldr	r0, [pc, #180]	@ (8000c0c <MX_GPIO_Init+0x140>)
 8000b56:	f005 fc9b 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4827      	ldr	r0, [pc, #156]	@ (8000c10 <MX_GPIO_Init+0x144>)
 8000b72:	f005 fb0b 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b76:	230c      	movs	r3, #12
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b86:	230c      	movs	r3, #12
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f005 fb1a 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f005 fafa 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b98:	2320      	movs	r3, #32
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f005 fb0b 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f005 faeb 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000bb6:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <MX_GPIO_Init+0x124>)
 8000bb4:	f005 fafc 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	@ (8000c0c <MX_GPIO_Init+0x140>)
 8000bd0:	f005 fadc 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bd4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bda:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x128>)
 8000bd0:	f005 faee 	bl	80061b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f004 fb3d 	bl	8005258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bde:	2028      	movs	r0, #40	@ 0x28
 8000be0:	f004 fb54 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <MX_GPIO_Init+0x144>)
 8000bec:	f005 face 	bl	800618c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	2028      	movs	r0, #40	@ 0x28
 8000bf6:	f004 fb1d 	bl	8005234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f004 fb34 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	48000800 	.word	0x48000800

08000c14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c34:	f005 fc6e 	bl	8006514 <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x4a>
=======
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c50:	f005 fc4e 	bl	80064f0 <HAL_I2C_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C1_Init+0x4a>
>>>>>>> origin/main
  {
    Error_Handler();
 8000c5a:	f000 f933 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c46:	f005 fd00 	bl	800664a <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x5c>
=======
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c62:	f005 fce0 	bl	8006626 <HAL_I2CEx_ConfigAnalogFilter>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x5c>
>>>>>>> origin/main
  {
    Error_Handler();
 8000c6c:	f000 f92a 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< HEAD
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c58:	f005 fd42 	bl	80066e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x6e>
=======
 8000c70:	2100      	movs	r1, #0
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c74:	f005 fd22 	bl	80066bc <HAL_I2CEx_ConfigDigitalFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x6e>
>>>>>>> origin/main
  {
    Error_Handler();
 8000c7e:	f000 f921 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200004cc 	.word	0x200004cc
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40b285c2 	.word	0x40b285c2

08000c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09c      	sub	sp, #112	@ 0x70
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
<<<<<<< HEAD
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2244      	movs	r2, #68	@ 0x44
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00b fec5 	bl	800ca28 <memset>
=======
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2244      	movs	r2, #68	@ 0x44
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00b fea7 	bl	800ca08 <memset>
>>>>>>> origin/main
  if(i2cHandle->Instance==I2C1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000d74 <HAL_I2C_MspInit+0xe0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d153      	bne.n	8000d6c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cc4:	2340      	movs	r3, #64	@ 0x40
 8000cc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
<<<<<<< HEAD
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fb73 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_MspInit+0x4c>
=======
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fb53 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_I2C_MspInit+0x4c>
>>>>>>> origin/main
    {
      Error_Handler();
 8000cdc:	f000 f8f2 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	4a24      	ldr	r2, [pc, #144]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000d0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d14:	f005 fa4c 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000d26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f005 fa2c 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8000d2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <HAL_I2C_MspInit+0xe8>)
 8000d34:	f005 fa3c 	bl	80061b0 <HAL_GPIO_Init>
=======
 8000d48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000d50:	f005 fa1c 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3770      	adds	r7, #112	@ 0x70
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	48000400 	.word	0x48000400

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000d68:	f002 fe06 	bl	8003978 <HAL_Init>
=======
 8000d84:	f002 fde6 	bl	8003954 <HAL_Init>
>>>>>>> origin/main
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f83c 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f7ff fe9e 	bl	8000acc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d90:	f7ff fdb2 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d94:	f7ff fbda 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000d98:	f7ff fde8 	bl	800096c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000d9c:	f000 f9b6 	bl	800110c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000da0:	f7ff ff38 	bl	8000c14 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000da4:	f000 fa64 	bl	8001270 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000da8:	f7ff fd16 	bl	80007d8 <MX_CORDIC_Init>
  MX_TIM3_Init();
 8000dac:	f000 fab6 	bl	800131c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 8000d94:	f008 ff4c 	bl	8009c30 <osKernelInitialize>
=======
 8000db0:	f008 ff2c 	bl	8009c0c <osKernelInitialize>
>>>>>>> origin/main

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000db4:	f7ff fce2 	bl	800077c <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
<<<<<<< HEAD
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f002 fc73 	bl	8003688 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2000      	movs	r0, #0
 8000da6:	f002 fca5 	bl	80036f4 <BSP_PB_Init>
=======
 8000db8:	2000      	movs	r0, #0
 8000dba:	f002 fc53 	bl	8003664 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f002 fc85 	bl	80036d0 <BSP_PB_Init>
>>>>>>> origin/main

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <main+0x80>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dcc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <main+0x80>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <main+0x80>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <main+0x80>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <main+0x80>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
<<<<<<< HEAD
 8000dca:	4906      	ldr	r1, [pc, #24]	@ (8000de4 <main+0x80>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f002 fd1d 	bl	800380c <BSP_COM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <main+0x78>
=======
 8000de6:	4906      	ldr	r1, [pc, #24]	@ (8000e00 <main+0x80>)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f002 fcfd 	bl	80037e8 <BSP_COM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <main+0x78>
>>>>>>> origin/main
  {
    Error_Handler();
 8000df4:	f000 f866 	bl	8000ec4 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8000ddc:	f008 ff4c 	bl	8009c78 <osKernelStart>
=======
 8000df8:	f008 ff2c 	bl	8009c54 <osKernelStart>
>>>>>>> origin/main

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <main+0x7c>
 8000e00:	20000520 	.word	0x20000520

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	@ 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00b fe16 	bl	800ca28 <memset>
=======
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2238      	movs	r2, #56	@ 0x38
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00b fdf8 	bl	800ca08 <memset>
>>>>>>> origin/main
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
<<<<<<< HEAD
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f005 fcb4 	bl	8006778 <HAL_PWREx_ControlVoltageScaling>
=======
 8000e26:	2000      	movs	r0, #0
 8000e28:	f005 fc94 	bl	8006754 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> origin/main

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e36:	2340      	movs	r3, #64	@ 0x40
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e46:	2355      	movs	r3, #85	@ 0x55
 8000e48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 fd4e 	bl	80068e0 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x66>
=======
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fd2e 	bl	80068bc <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x66>
>>>>>>> origin/main
  {
    Error_Handler();
 8000e66:	f000 f82d 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
<<<<<<< HEAD
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2104      	movs	r1, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 f84c 	bl	8006f04 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x8e>
=======
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2104      	movs	r1, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 f82c 	bl	8006ee0 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x8e>
>>>>>>> origin/main
  {
    Error_Handler();
 8000e8e:	f000 f819 	bl	8000ec4 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	@ 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
<<<<<<< HEAD
 8000e92:	f002 fd89 	bl	80039a8 <HAL_IncTick>
=======
 8000eae:	f002 fd69 	bl	8003984 <HAL_IncTick>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 fdd0 	bl	8001a58 <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_MspInit+0x50>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	4a11      	ldr	r2, [pc, #68]	@ (8000f20 <HAL_MspInit+0x50>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <HAL_MspInit+0x50>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_MspInit+0x50>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <HAL_MspInit+0x50>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_MspInit+0x50>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	f06f 0001 	mvn.w	r0, #1
 8000ef2:	f004 f9b1 	bl	8005258 <HAL_NVIC_SetPriority>
=======
 8000f06:	2200      	movs	r2, #0
 8000f08:	210f      	movs	r1, #15
 8000f0a:	f06f 0001 	mvn.w	r0, #1
 8000f0e:	f004 f991 	bl	8005234 <HAL_NVIC_SetPriority>
>>>>>>> origin/main

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< HEAD
 8000ef6:	f005 fce3 	bl	80068c0 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 8000f12:	f005 fcc3 	bl	800689c <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> origin/main

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	@ 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f34:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <HAL_InitTick+0xc4>)
 8000f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f38:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe8 <HAL_InitTick+0xc4>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f40:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <HAL_InitTick+0xc4>)
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
<<<<<<< HEAD
 8000f30:	f107 020c 	add.w	r2, r7, #12
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 f9b8 	bl	80072b0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f40:	f006 f98a 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8000f44:	62b8      	str	r0, [r7, #40]	@ 0x28
=======
 8000f4c:	f107 020c 	add.w	r2, r7, #12
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 f998 	bl	800728c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f5c:	f006 f96a 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 8000f60:	62b8      	str	r0, [r7, #40]	@ 0x28
>>>>>>> origin/main

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f64:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <HAL_InitTick+0xc8>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000f72:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <HAL_InitTick+0xd0>)
 8000f74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000f78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
<<<<<<< HEAD
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f76:	f006 fc03 	bl	8007780 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
=======
 8000f90:	4817      	ldr	r0, [pc, #92]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000f92:	f006 fbe3 	bl	800775c <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
>>>>>>> origin/main
  if (status == HAL_OK)
 8000f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11b      	bne.n	8000fdc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
<<<<<<< HEAD
 8000f88:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f8a:	f006 fcbd 	bl	8007908 <HAL_TIM_Base_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
=======
 8000fa4:	4812      	ldr	r0, [pc, #72]	@ (8000ff0 <HAL_InitTick+0xcc>)
 8000fa6:	f006 fc9d 	bl	80078e4 <HAL_TIM_Base_Start_IT>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
>>>>>>> origin/main
    if (status == HAL_OK)
 8000fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d111      	bne.n	8000fdc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
<<<<<<< HEAD
 8000f9c:	2036      	movs	r0, #54	@ 0x36
 8000f9e:	f004 f975 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 8000fb8:	2036      	movs	r0, #54	@ 0x36
 8000fba:	f004 f955 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d808      	bhi.n	8000fd6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
<<<<<<< HEAD
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2036      	movs	r0, #54	@ 0x36
 8000fae:	f004 f953 	bl	8005258 <HAL_NVIC_SetPriority>
=======
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	2036      	movs	r0, #54	@ 0x36
 8000fca:	f004 f933 	bl	8005234 <HAL_NVIC_SetPriority>
>>>>>>> origin/main
        uwTickPrio = TickPriority;
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_InitTick+0xd4>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e002      	b.n	8000fdc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3730      	adds	r7, #48	@ 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	431bde83 	.word	0x431bde83
 8000ff0:	20000530 	.word	0x20000530
 8000ff4:	40001000 	.word	0x40001000
 8000ff8:	20000230 	.word	0x20000230

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
<<<<<<< HEAD
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <FDCAN1_IT0_IRQHandler+0x10>)
 800101e:	f004 ff01 	bl	8005e24 <HAL_FDCAN_IRQHandler>
=======
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <FDCAN1_IT0_IRQHandler+0x10>)
 800103a:	f004 fee1 	bl	8005e00 <HAL_FDCAN_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000468 	.word	0x20000468

08001048 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
<<<<<<< HEAD
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <FDCAN1_IT1_IRQHandler+0x10>)
 8001032:	f004 fef7 	bl	8005e24 <HAL_FDCAN_IRQHandler>
=======
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <FDCAN1_IT1_IRQHandler+0x10>)
 800104e:	f004 fed7 	bl	8005e00 <HAL_FDCAN_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000468 	.word	0x20000468

0800105c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001046:	f006 ff0d 	bl	8007e64 <HAL_TIM_IRQHandler>
=======
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001062:	f006 feed 	bl	8007e40 <HAL_TIM_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000057c 	.word	0x2000057c

08001070 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
<<<<<<< HEAD
 8001058:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800105c:	f005 fa42 	bl	80064e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001060:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001064:	f005 fa3e 	bl	80064e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001068:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800106c:	f005 fa3a 	bl	80064e4 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f002 fbad 	bl	80037d0 <BSP_PB_IRQHandler>
=======
 8001074:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001078:	f005 fa22 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800107c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001080:	f005 fa1e 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001084:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001088:	f005 fa1a 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 800108c:	2000      	movs	r0, #0
 800108e:	f002 fb8d 	bl	80037ac <BSP_PB_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <TIM6_DAC_IRQHandler+0x10>)
 8001082:	f006 feef 	bl	8007e64 <HAL_TIM_IRQHandler>
=======
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <TIM6_DAC_IRQHandler+0x10>)
 800109e:	f006 fecf 	bl	8007e40 <HAL_TIM_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000530 	.word	0x20000530

080010ac <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DMA2_Channel1_IRQHandler+0x10>)
 8001096:	f004 fa2a 	bl	80054ee <HAL_DMA_IRQHandler>
=======
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <DMA2_Channel1_IRQHandler+0x10>)
 80010b2:	f004 fa0a 	bl	80054ca <HAL_DMA_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000314 	.word	0x20000314

080010c0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
<<<<<<< HEAD
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA2_Channel2_IRQHandler+0x10>)
 80010aa:	f004 fa20 	bl	80054ee <HAL_DMA_IRQHandler>
=======
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <DMA2_Channel2_IRQHandler+0x10>)
 80010c6:	f004 fa00 	bl	80054ca <HAL_DMA_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003a8 	.word	0x200003a8

080010d4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
<<<<<<< HEAD
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <DMA2_Channel3_IRQHandler+0x10>)
 80010be:	f004 fa16 	bl	80054ee <HAL_DMA_IRQHandler>
=======
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <DMA2_Channel3_IRQHandler+0x10>)
 80010da:	f004 f9f6 	bl	80054ca <HAL_DMA_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000408 	.word	0x20000408

080010e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b098      	sub	sp, #96	@ 0x60
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001112:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
<<<<<<< HEAD
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2234      	movs	r2, #52	@ 0x34
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00b fc83 	bl	800ca28 <memset>
=======
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2234      	movs	r2, #52	@ 0x34
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00b fc65 	bl	800ca08 <memset>
>>>>>>> origin/main

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800113e:	4b4a      	ldr	r3, [pc, #296]	@ (8001268 <MX_TIM1_Init+0x15c>)
 8001140:	4a4a      	ldr	r2, [pc, #296]	@ (800126c <MX_TIM1_Init+0x160>)
 8001142:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001144:	4b48      	ldr	r3, [pc, #288]	@ (8001268 <MX_TIM1_Init+0x15c>)
 8001146:	2210      	movs	r2, #16
 8001148:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800114a:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <MX_TIM1_Init+0x15c>)
 800114c:	2220      	movs	r2, #32
 800114e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8001150:	4b45      	ldr	r3, [pc, #276]	@ (8001268 <MX_TIM1_Init+0x15c>)
 8001152:	22fa      	movs	r2, #250	@ 0xfa
 8001154:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b44      	ldr	r3, [pc, #272]	@ (8001268 <MX_TIM1_Init+0x15c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115c:	4b42      	ldr	r3, [pc, #264]	@ (8001268 <MX_TIM1_Init+0x15c>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b41      	ldr	r3, [pc, #260]	@ (8001268 <MX_TIM1_Init+0x15c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
<<<<<<< HEAD
 800114c:	483f      	ldr	r0, [pc, #252]	@ (800124c <MX_TIM1_Init+0x15c>)
 800114e:	f006 fc9c 	bl	8007a8a <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x6c>
=======
 8001168:	483f      	ldr	r0, [pc, #252]	@ (8001268 <MX_TIM1_Init+0x15c>)
 800116a:	f006 fc7c 	bl	8007a66 <HAL_TIM_PWM_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x6c>
>>>>>>> origin/main
  {
    Error_Handler();
 8001174:	f7ff fea6 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 800117c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001180:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 800116a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800116e:	4619      	mov	r1, r3
 8001170:	4836      	ldr	r0, [pc, #216]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001172:	f007 fe47 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x90>
=======
 8001186:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800118a:	4619      	mov	r1, r3
 800118c:	4836      	ldr	r0, [pc, #216]	@ (8001268 <MX_TIM1_Init+0x15c>)
 800118e:	f007 fe27 	bl	8008de0 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x90>
>>>>>>> origin/main
  {
    Error_Handler();
 8001198:	f7ff fe94 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119c:	2360      	movs	r3, #96	@ 0x60
 800119e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80011a4:	2302      	movs	r3, #2
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80011b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 800119e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4829      	ldr	r0, [pc, #164]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011a8:	f007 f826 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0xc6>
=======
 80011ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4829      	ldr	r0, [pc, #164]	@ (8001268 <MX_TIM1_Init+0x15c>)
 80011c4:	f007 f806 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xc6>
>>>>>>> origin/main
  {
    Error_Handler();
 80011ce:	f7ff fe79 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
<<<<<<< HEAD
 80011b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ba:	2204      	movs	r2, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011c0:	f007 f81a 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xde>
=======
 80011d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d6:	2204      	movs	r2, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4823      	ldr	r0, [pc, #140]	@ (8001268 <MX_TIM1_Init+0x15c>)
 80011dc:	f006 fffa 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0xde>
>>>>>>> origin/main
  {
    Error_Handler();
 80011e6:	f7ff fe6d 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
<<<<<<< HEAD
 80011ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	481d      	ldr	r0, [pc, #116]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011d8:	f007 f80e 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xf6>
=======
 80011ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ee:	2208      	movs	r2, #8
 80011f0:	4619      	mov	r1, r3
 80011f2:	481d      	ldr	r0, [pc, #116]	@ (8001268 <MX_TIM1_Init+0x15c>)
 80011f4:	f006 ffee 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0xf6>
>>>>>>> origin/main
  {
    Error_Handler();
 80011fe:	f7ff fe61 	bl	8000ec4 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
<<<<<<< HEAD
 80011e6:	4819      	ldr	r0, [pc, #100]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011e8:	f007 ff1a 	bl	8009020 <HAL_TIMEx_EnableDeadTimePreload>
=======
 8001202:	4819      	ldr	r0, [pc, #100]	@ (8001268 <MX_TIM1_Init+0x15c>)
 8001204:	f007 fefa 	bl	8008ffc <HAL_TIMEx_EnableDeadTimePreload>
>>>>>>> origin/main
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800120e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001212:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 8001218:	2322      	movs	r3, #34	@ 0x22
 800121a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001224:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
<<<<<<< HEAD
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM1_Init+0x15c>)
 800122e:	f007 fe6b 	bl	8008f08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x14c>
=======
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	@ (8001268 <MX_TIM1_Init+0x15c>)
 800124a:	f007 fe4b 	bl	8008ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0x14c>
>>>>>>> origin/main
  {
    Error_Handler();
 8001254:	f7ff fe36 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_TIM1_Init+0x15c>)
 800125a:	f000 f90f 	bl	800147c <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3760      	adds	r7, #96	@ 0x60
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000057c 	.word	0x2000057c
 800126c:	40012c00 	.word	0x40012c00

08001270 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_TIM2_Init+0xa8>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_TIM2_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_TIM2_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_TIM2_Init+0xa8>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_TIM2_Init+0xa8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_TIM2_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
<<<<<<< HEAD
 80012a0:	4816      	ldr	r0, [pc, #88]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012a2:	f006 fb9b 	bl	80079dc <HAL_TIM_OC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x5c>
=======
 80012bc:	4816      	ldr	r0, [pc, #88]	@ (8001318 <MX_TIM2_Init+0xa8>)
 80012be:	f006 fb7b 	bl	80079b8 <HAL_TIM_OC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x5c>
>>>>>>> origin/main
  {
    Error_Handler();
 80012c8:	f7ff fdfc 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012c0:	f007 fda0 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x7a>
=======
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	480f      	ldr	r0, [pc, #60]	@ (8001318 <MX_TIM2_Init+0xa8>)
 80012dc:	f007 fd80 	bl	8008de0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x7a>
>>>>>>> origin/main
  {
    Error_Handler();
 80012e6:	f7ff fded 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012e6:	f006 ff0d 	bl	8008104 <HAL_TIM_OC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xa0>
=======
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_TIM2_Init+0xa8>)
 8001302:	f006 feed 	bl	80080e0 <HAL_TIM_OC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0xa0>
>>>>>>> origin/main
  {
    Error_Handler();
 800130c:	f7ff fdda 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200005c8 	.word	0x200005c8

0800131c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 8001342:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <MX_TIM3_Init+0xac>)
 8001344:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PSC;
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 8001348:	2210      	movs	r2, #16
 800134a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 8001354:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001358:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
<<<<<<< HEAD
 800134a:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800134c:	f006 fb46 	bl	80079dc <HAL_TIM_OC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x5a>
=======
 8001366:	4817      	ldr	r0, [pc, #92]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 8001368:	f006 fb26 	bl	80079b8 <HAL_TIM_OC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x5a>
>>>>>>> origin/main
  {
    Error_Handler();
 8001372:	f7ff fda7 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800136a:	f007 fd4b 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x78>
=======
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 8001386:	f007 fd2b 	bl	8008de0 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x78>
>>>>>>> origin/main
  {
    Error_Handler();
 8001390:	f7ff fd98 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001390:	f006 feb8 	bl	8008104 <HAL_TIM_OC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x9e>
=======
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <MX_TIM3_Init+0xa8>)
 80013ac:	f006 fe98 	bl	80080e0 <HAL_TIM_OC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x9e>
>>>>>>> origin/main
  {
    Error_Handler();
 80013b6:	f7ff fd85 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000614 	.word	0x20000614
 80013c8:	40000400 	.word	0x40000400

080013cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_TIM_PWM_MspInit+0x44>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_TIM_PWM_MspInit+0x48>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <HAL_TIM_PWM_MspInit+0x48>)
 80013e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_TIM_PWM_MspInit+0x48>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
<<<<<<< HEAD
 80013da:	2200      	movs	r2, #0
 80013dc:	2105      	movs	r1, #5
 80013de:	2019      	movs	r0, #25
 80013e0:	f003 ff3a 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f003 ff51 	bl	800528c <HAL_NVIC_EnableIRQ>
=======
 80013f6:	2200      	movs	r2, #0
 80013f8:	2105      	movs	r1, #5
 80013fa:	2019      	movs	r0, #25
 80013fc:	f003 ff1a 	bl	8005234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001400:	2019      	movs	r0, #25
 8001402:	f003 ff31 	bl	8005268 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40012c00 	.word	0x40012c00
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001428:	d10c      	bne.n	8001444 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <HAL_TIM_OC_MspInit+0x5c>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142e:	4a11      	ldr	r2, [pc, #68]	@ (8001474 <HAL_TIM_OC_MspInit+0x5c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6593      	str	r3, [r2, #88]	@ 0x58
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_TIM_OC_MspInit+0x5c>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001442:	e010      	b.n	8001466 <HAL_TIM_OC_MspInit+0x4e>
  else if(tim_ocHandle->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_TIM_OC_MspInit+0x60>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10b      	bne.n	8001466 <HAL_TIM_OC_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_TIM_OC_MspInit+0x5c>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_TIM_OC_MspInit+0x5c>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6593      	str	r3, [r2, #88]	@ 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_TIM_OC_MspInit+0x5c>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40000400 	.word	0x40000400

0800147c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a28      	ldr	r2, [pc, #160]	@ (800153c <HAL_TIM_MspPostInit+0xc0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d149      	bne.n	8001532 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <HAL_TIM_MspPostInit+0xc4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a27      	ldr	r2, [pc, #156]	@ (8001540 <HAL_TIM_MspPostInit+0xc4>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <HAL_TIM_MspPostInit+0xc4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <HAL_TIM_MspPostInit+0xc4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a21      	ldr	r2, [pc, #132]	@ (8001540 <HAL_TIM_MspPostInit+0xc4>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_TIM_MspPostInit+0xc4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014ce:	2307      	movs	r3, #7
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014de:	2302      	movs	r3, #2
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4816      	ldr	r0, [pc, #88]	@ (8001528 <HAL_TIM_MspPostInit+0xc8>)
 80014ce:	f004 fe6f 	bl	80061b0 <HAL_GPIO_Init>
=======
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4816      	ldr	r0, [pc, #88]	@ (8001544 <HAL_TIM_MspPostInit+0xc8>)
 80014ea:	f004 fe4f 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014ee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001500:	2306      	movs	r3, #6
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	@ (800152c <HAL_TIM_MspPostInit+0xcc>)
 80014f0:	f004 fe5e 	bl	80061b0 <HAL_GPIO_Init>
=======
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	480f      	ldr	r0, [pc, #60]	@ (8001548 <HAL_TIM_MspPostInit+0xcc>)
 800150c:	f004 fe3e 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001522:	2304      	movs	r3, #4
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <HAL_TIM_MspPostInit+0xcc>)
 8001512:	f004 fe4d 	bl	80061b0 <HAL_GPIO_Init>
=======
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4806      	ldr	r0, [pc, #24]	@ (8001548 <HAL_TIM_MspPostInit+0xcc>)
 800152e:	f004 fe2d 	bl	800618c <HAL_GPIO_Init>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012c00 	.word	0x40012c00
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800
 8001548:	48000400 	.word	0x48000400

0800154c <average>:
//     }
//     return RESULT_OK(NULL);
// }

static void average(uint8_t adc_id, float32_t *adc_store)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
    uint16_t i;
    float32_t total = 0;
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	81fb      	strh	r3, [r7, #14]
 8001562:	e013      	b.n	800158c <average+0x40>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	009a      	lsls	r2, r3, #2
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4413      	add	r3, r2
 800156c:	4a10      	ldr	r2, [pc, #64]	@ (80015b0 <average+0x64>)
 800156e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	ed97 7a02 	vldr	s14, [r7, #8]
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	edc7 7a02 	vstr	s15, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	3301      	adds	r3, #1
 800158a:	81fb      	strh	r3, [r7, #14]
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d9e8      	bls.n	8001564 <average+0x18>
    }
    *adc_store = total / (float32_t)ADC_NEED_LEN;
 8001592:	ed97 7a02 	vldr	s14, [r7, #8]
 8001596:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	edc3 7a00 	vstr	s15, [r3]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20000660 	.word	0x20000660

080015b4 <renew_adc>:
{
    *adc_store += ALPHA * ((float32_t)ADC_Values[adc_id] - *adc_store);
}

Result renew_adc(ADC_OWN *adc, float32_t *current)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
    average(adc->const_h.id, &adc->value);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3310      	adds	r3, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f7ff ffbe 	bl	800154c <average>
    *current = (adc->value - adc->zero) * adc->sensitive_rcp;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80015dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
}
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <StartAdcTask>:

void StartAdcTask(void *argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
<<<<<<< HEAD
 80015d0:	2209      	movs	r2, #9
 80015d2:	4903      	ldr	r1, [pc, #12]	@ (80015e0 <StartAdcTask+0x18>)
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <StartAdcTask+0x1c>)
 80015d6:	f002 fda7 	bl	8004128 <HAL_ADC_Start_DMA>
    StopTask();
 80015da:	f008 fc1a 	bl	8009e12 <osThreadExit>
 80015de:	bf00      	nop
 80015e0:	20000628 	.word	0x20000628
 80015e4:	20000270 	.word	0x20000270
=======
 800160c:	220c      	movs	r2, #12
 800160e:	4912      	ldr	r1, [pc, #72]	@ (8001658 <StartAdcTask+0x54>)
 8001610:	4812      	ldr	r0, [pc, #72]	@ (800165c <StartAdcTask+0x58>)
 8001612:	f002 fd77 	bl	8004104 <HAL_ADC_Start_DMA>
    adc_u.sensitive_rcp = 1 / adc_u.const_h.sensitive;
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <StartAdcTask+0x5c>)
 8001618:	ed93 7a01 	vldr	s14, [r3, #4]
 800161c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <StartAdcTask+0x5c>)
 8001626:	edc3 7a02 	vstr	s15, [r3, #8]
    adc_v.sensitive_rcp = 1 / adc_v.const_h.sensitive;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <StartAdcTask+0x60>)
 800162c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <StartAdcTask+0x60>)
 800163a:	edc3 7a02 	vstr	s15, [r3, #8]
    adc_w.sensitive_rcp = 1 / adc_w.const_h.sensitive;
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <StartAdcTask+0x64>)
 8001640:	ed93 7a01 	vldr	s14, [r3, #4]
 8001644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <StartAdcTask+0x64>)
 800164e:	edc3 7a02 	vstr	s15, [r3, #8]
    StopTask();
 8001652:	f008 fbcc 	bl	8009dee <osThreadExit>
 8001656:	bf00      	nop
 8001658:	20000660 	.word	0x20000660
 800165c:	200002a8 	.word	0x200002a8
 8001660:	20000004 	.word	0x20000004
 8001664:	20000018 	.word	0x20000018
 8001668:	2000002c 	.word	0x2000002c
>>>>>>> origin/main

0800166c <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	429a      	cmp	r2, r3
 8001684:	d308      	bcc.n	8001698 <fdcan_pkt_get_byte+0x2c>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	461a      	mov	r2, r3
 800168a:	2300      	movs	r3, #0
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	6053      	str	r3, [r2, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2208      	movs	r2, #8
 8001694:	711a      	strb	r2, [r3, #4]
 8001696:	e00b      	b.n	80016b0 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	4413      	add	r3, r2
 800169e:	791a      	ldrb	r2, [r3, #4]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	605a      	str	r2, [r3, #4]
}
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	3724      	adds	r7, #36	@ 0x24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 80016c4:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <fdcan_pkt_pool_alloc+0x64>)
 80016c6:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	461a      	mov	r2, r3
 80016d2:	2300      	movs	r3, #0
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	6053      	str	r3, [r2, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 80016de:	e019      	b.n	8001714 <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <fdcan_pkt_pool_alloc+0x64>)
 80016e2:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80016e6:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <fdcan_pkt_pool_alloc+0x64>)
 80016ee:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <fdcan_pkt_pool_alloc+0x64>)
 80016fa:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <fdcan_pkt_pool_alloc+0x64>)
 8001704:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	605a      	str	r2, [r3, #4]
}
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	3724      	adds	r7, #36	@ 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000678 	.word	0x20000678

08001724 <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
<<<<<<< HEAD
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3304      	adds	r3, #4
 80016ac:	2208      	movs	r2, #8
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b f9b9 	bl	800ca28 <memset>
=======
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	2208      	movs	r2, #8
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00b f967 	bl	800ca08 <memset>
>>>>>>> origin/main
    pkt->len = 0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <fdcan_pkt_pool_free+0x48>)
 8001742:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <fdcan_pkt_pool_free+0x48>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <fdcan_pkt_pool_free+0x48>)
 8001754:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001758:	3301      	adds	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <fdcan_pkt_pool_free+0x48>)
 800175e:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000678 	.word	0x20000678

08001770 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	@ 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d308      	bcc.n	800179a <fdcan_pkt_buf_push+0x2a>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	6053      	str	r3, [r2, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2207      	movs	r2, #7
 8001796:	711a      	strb	r2, [r3, #4]
 8001798:	e01e      	b.n	80017d8 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	68d2      	ldr	r2, [r2, #12]
 80017a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80017ac:	fb01 f202 	mul.w	r2, r1, r2
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
    self->len++;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	605a      	str	r2, [r3, #4]
}
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	372c      	adds	r7, #44	@ 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_FDCAN_ErrorStatusCallback+0x30>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d107      	bne.n	8001806 <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000468 	.word	0x20000468
 8001818:	20000900 	.word	0x20000900

0800181c <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
<<<<<<< HEAD
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f004 faae 	bl	8005d14 <HAL_FDCAN_GetTxEvent>
=======
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f004 fa5a 	bl	8005cf0 <HAL_FDCAN_GetTxEvent>
>>>>>>> origin/main
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 8001846:	f7ff fb3d 	bl	8000ec4 <Error_Handler>
    }
}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	@ 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d05b      	beq.n	8001934 <HAL_FDCAN_RxFifo0Callback+0xcc>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff1b 	bl	80016bc <fdcan_pkt_pool_alloc>
 8001886:	7e3b      	ldrb	r3, [r7, #24]
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_FDCAN_RxFifo0Callback+0x36>
 8001892:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001896:	4b29      	ldr	r3, [pc, #164]	@ (800193c <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	f7ff fb13 	bl	8000ec4 <Error_Handler>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
<<<<<<< HEAD
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	3304      	adds	r3, #4
 8001822:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001824:	2140      	movs	r1, #64	@ 0x40
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f004 f96c 	bl	8005b04 <HAL_FDCAN_GetRxMessage>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001832:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_FDCAN_RxFifo0Callback+0x62>
 800183a:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	f7ff fb31 	bl	8000ea8 <Error_Handler>
=======
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	3304      	adds	r3, #4
 80018a6:	4a26      	ldr	r2, [pc, #152]	@ (8001940 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80018a8:	2140      	movs	r1, #64	@ 0x40
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f004 f918 	bl	8005ae0 <HAL_FDCAN_GetRxMessage>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_FDCAN_RxFifo0Callback+0x62>
 80018be:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	f7ff fafd 	bl	8000ec4 <Error_Handler>
>>>>>>> origin/main
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b1f      	cmp	r3, #31
 80018e2:	d90c      	bls.n	80018fe <HAL_FDCAN_RxFifo0Callback+0x96>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b21      	cmp	r3, #33	@ 0x21
 80018ea:	d808      	bhi.n	80018fe <HAL_FDCAN_RxFifo0Callback+0x96>
        {
            instant_recv_proc(pkt);
 80018ec:	463b      	mov	r3, r7
 80018ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f849 	bl	8001988 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 80018f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018f8:	f7ff ff14 	bl	8001724 <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 80018fc:	e01a      	b.n	8001934 <HAL_FDCAN_RxFifo0Callback+0xcc>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b21      	cmp	r3, #33	@ 0x21
 8001904:	d916      	bls.n	8001934 <HAL_FDCAN_RxFifo0Callback+0xcc>
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b23      	cmp	r3, #35	@ 0x23
 800190c:	d812      	bhi.n	8001934 <HAL_FDCAN_RxFifo0Callback+0xcc>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001914:	490b      	ldr	r1, [pc, #44]	@ (8001944 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff2a 	bl	8001770 <fdcan_pkt_buf_push>
 800191c:	7c3b      	ldrb	r3, [r7, #16]
 800191e:	f083 0301 	eor.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_FDCAN_RxFifo0Callback+0xcc>
 8001928:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	f7ff fac8 	bl	8000ec4 <Error_Handler>
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	@ 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000954 	.word	0x20000954
 8001940:	2000092c 	.word	0x2000092c
 8001944:	20000040 	.word	0x20000040

08001948 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 800195e:	b480      	push	{r7}
 8001960:	b087      	sub	sp, #28
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	4613      	mov	r3, r2
 800196a:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	6053      	str	r3, [r2, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2208      	movs	r2, #8
 800197a:	711a      	strb	r2, [r3, #4]
}
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 8001992:	f107 001c 	add.w	r0, r7, #28
 8001996:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800199a:	2200      	movs	r2, #0
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	f7ff fe65 	bl	800166c <fdcan_pkt_get_byte>
 80019a2:	7f3b      	ldrb	r3, [r7, #28]
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <instant_recv_proc+0x40>
 80019ae:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <instant_recv_proc+0x8c>)
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019c2:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 80019c6:	e021      	b.n	8001a0c <instant_recv_proc+0x84>
    switch (code)
 80019c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	d002      	beq.n	80019d6 <instant_recv_proc+0x4e>
 80019d0:	2b12      	cmp	r3, #18
 80019d2:	d00a      	beq.n	80019ea <instant_recv_proc+0x62>
 80019d4:	e013      	b.n	80019fe <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <instant_recv_proc+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
}
 80019e8:	e010      	b.n	8001a0c <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <instant_recv_proc+0x90>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
}
 80019fc:	e006      	b.n	8001a0c <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 80019fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffa9 	bl	800195e <instant_recv_proc_inner>
}
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	3728      	adds	r7, #40	@ 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000954 	.word	0x20000954
 8001a18:	20000901 	.word	0x20000901

08001a1c <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/main.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
    if (
           (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[0])
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a28:	899b      	ldrh	r3, [r3, #12]
    if (
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d009      	beq.n	8001a44 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[1])
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a32:	89db      	ldrh	r3, [r3, #14]
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d004      	beq.n	8001a44 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[2])
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a3c:	8a1b      	ldrh	r3, [r3, #16]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d102      	bne.n	8001a4a <HAL_GPIO_EXTI_Callback+0x2e>
    ) {
        motor_hall_exti(&motor_h);
<<<<<<< HEAD
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80019c2:	f001 fac1 	bl	8002f48 <motor_hall_exti>
=======
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a46:	f001 fa6f 	bl	8002f28 <motor_hall_exti>
>>>>>>> origin/main
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000050 	.word	0x20000050

08001a58 <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    if (htim == motor_h.const_h.htimx)
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d102      	bne.n	8001a70 <HAL_TIM_PeriodElapsedCallback_OWN+0x18>
    {
        motor_pwm_pulse(&motor_h);
<<<<<<< HEAD
 80019e6:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 80019e8:	f001 fb4c 	bl	8003084 <motor_pwm_pulse>
=======
 8001a6a:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001a6c:	f001 faf8 	bl	8003060 <motor_pwm_pulse>
>>>>>>> origin/main
    }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000050 	.word	0x20000050

08001a7c <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8001a84:	2332      	movs	r3, #50	@ 0x32
 8001a86:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
<<<<<<< HEAD
 8001a04:	f008 f95e 	bl	8009cc4 <osKernelGetTickCount>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001a10:	f001 ffdc 	bl	80039cc <HAL_GetTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <StartDefaultTask+0x34>)
 8001a18:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f008 fa1b 	bl	8009e56 <osDelayUntil>
=======
 8001a88:	f008 f90a 	bl	8009ca0 <osKernelGetTickCount>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4413      	add	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001a94:	f001 ff88 	bl	80039a8 <HAL_GetTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <StartDefaultTask+0x34>)
 8001a9c:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f008 f9c7 	bl	8009e32 <osDelayUntil>
>>>>>>> origin/main
        next_wake += osPeriod;
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8001aac:	bf00      	nop
 8001aae:	e7f1      	b.n	8001a94 <StartDefaultTask+0x18>
 8001ab0:	20000958 	.word	0x20000958

08001ab4 <motor_hall_to_angle>:
    },
    .pwm_it_angle_acc = 0.0f,
};

inline Result motor_hall_to_angle(uint8_t hall, volatile float32_t *angle)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	460b      	mov	r3, r1
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d827      	bhi.n	8001b1a <motor_hall_to_angle+0x66>
 8001aca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <motor_hall_to_angle+0x1c>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b03 	.word	0x08001b03
 8001ad4:	08001af3 	.word	0x08001af3
 8001ad8:	08001afb 	.word	0x08001afb
 8001adc:	08001b13 	.word	0x08001b13
 8001ae0:	08001b0b 	.word	0x08001b0b
 8001ae4:	08001ae9 	.word	0x08001ae9
    {
        case 6:
        {
            *angle = 0.0f * DEG_TO_RAD;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
            break;
 8001af0:	e01c      	b.n	8001b2c <motor_hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 60.0f * DEG_TO_RAD;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a13      	ldr	r2, [pc, #76]	@ (8001b44 <motor_hall_to_angle+0x90>)
 8001af6:	601a      	str	r2, [r3, #0]
            break;
 8001af8:	e018      	b.n	8001b2c <motor_hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 120.0f * DEG_TO_RAD;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <motor_hall_to_angle+0x94>)
 8001afe:	601a      	str	r2, [r3, #0]
            break;
 8001b00:	e014      	b.n	8001b2c <motor_hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 180.0f * DEG_TO_RAD;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <motor_hall_to_angle+0x98>)
 8001b06:	601a      	str	r2, [r3, #0]
            break;
 8001b08:	e010      	b.n	8001b2c <motor_hall_to_angle+0x78>
        }
        case 5:
        {
            *angle = 240.0f * DEG_TO_RAD;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a10      	ldr	r2, [pc, #64]	@ (8001b50 <motor_hall_to_angle+0x9c>)
 8001b0e:	601a      	str	r2, [r3, #0]
            break;
 8001b10:	e00c      	b.n	8001b2c <motor_hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 300.0f * DEG_TO_RAD;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a0f      	ldr	r2, [pc, #60]	@ (8001b54 <motor_hall_to_angle+0xa0>)
 8001b16:	601a      	str	r2, [r3, #0]
            break;
 8001b18:	e008      	b.n	8001b2c <motor_hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	6053      	str	r3, [r2, #4]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2208      	movs	r2, #8
 8001b28:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 8001b2a:	e005      	b.n	8001b38 <motor_hall_to_angle+0x84>
    return RESULT_OK(NULL);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
}
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	3724      	adds	r7, #36	@ 0x24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	3f860a92 	.word	0x3f860a92
 8001b48:	40060a92 	.word	0x40060a92
 8001b4c:	40490fdb 	.word	0x40490fdb
 8001b50:	40860a92 	.word	0x40860a92
 8001b54:	40a78d36 	.word	0x40a78d36

08001b58 <clampf>:

inline float32_t clampf(float32_t val, float32_t min, float32_t max)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b62:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b66:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val > max) return max;
 8001b6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dd01      	ble.n	8001b80 <clampf+0x28>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	e00b      	b.n	8001b98 <clampf+0x40>
    if (val < min) return min;
 8001b80:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	d501      	bpl.n	8001b96 <clampf+0x3e>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	e000      	b.n	8001b98 <clampf+0x40>
    return val;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <wrap_0_2pi>:

inline float32_t wrap_0_2pi(float32_t x)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001bb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bba:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001c1c <wrap_0_2pi+0x70>
 8001bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	ee17 3a90 	vmov	r3, s15
 8001bca:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001c1c <wrap_0_2pi+0x70>
 8001bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bde:	ed97 7a01 	vldr	s14, [r7, #4]
 8001be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be6:	edc7 7a01 	vstr	s15, [r7, #4]
    if (x < 0) x += MUL_2_PI;
 8001bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	d507      	bpl.n	8001c08 <wrap_0_2pi+0x5c>
 8001bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001c1c <wrap_0_2pi+0x70>
 8001c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c04:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	ee07 3a90 	vmov	s15, r3
}
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40c90fdb 	.word	0x40c90fdb

08001c20 <wrap_m1_1pi>:

inline float32_t wrap_m1_1pi(float32_t x)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001c2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c2e:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001cb8 <wrap_m1_1pi+0x98>
 8001c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3a:	ee17 3a90 	vmov	r3, s15
 8001c3e:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001cb8 <wrap_m1_1pi+0x98>
 8001c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5a:	edc7 7a01 	vstr	s15, [r7, #4]
    if      (x < -PI) x += MUL_2_PI;
 8001c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c62:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001cbc <wrap_m1_1pi+0x9c>
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d508      	bpl.n	8001c82 <wrap_m1_1pi+0x62>
 8001c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c74:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001cb8 <wrap_m1_1pi+0x98>
 8001c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c80:	e010      	b.n	8001ca4 <wrap_m1_1pi+0x84>
    else if (x >= PI) x -= MUL_2_PI;
 8001c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c86:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001cc0 <wrap_m1_1pi+0xa0>
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	db07      	blt.n	8001ca4 <wrap_m1_1pi+0x84>
 8001c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c98:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001cb8 <wrap_m1_1pi+0x98>
 8001c9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ca0:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	ee07 3a90 	vmov	s15, r3
}
 8001caa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40c90fdb 	.word	0x40c90fdb
 8001cbc:	c0490fdb 	.word	0xc0490fdb
 8001cc0:	40490fdb 	.word	0x40490fdb

08001cc4 <fast_fabsf>:

inline float32_t fast_fabsf(float32_t x)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	ed87 0a01 	vstr	s0, [r7, #4]
    union {
        float32_t f;
        uint32_t u;
    } v = { x };
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
    v.u &= 0x7FFFFFFF;  // 清除最高位 sign bit
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cd8:	60fb      	str	r3, [r7, #12]
    return v.f;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	ee07 3a90 	vmov	s15, r3
}
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <CLARKE_run_ideal>:
#include "motor/clarke.h"
#include "motor/basic.h"

inline void CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    clarke->Alpha = clarke->As;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	ed93 7a00 	vldr	s14, [r3]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001d30 <CLARKE_run_ideal+0x40>
 8001d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	3f13cd3a 	.word	0x3f13cd3a

08001d34 <motor_120_hall_update>:
};
static const uint8_t motor_seq_index[] = {0xFF, 5, 3, 4, 1, 0, 2, 0xFF};

// 120 deg cntrol
void motor_120_hall_update(const MotorParameter *motor)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    uint8_t idx = motor_seq_index[motor->exti_hall_curt];
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b86      	ldr	r3, [pc, #536]	@ (8001f60 <motor_120_hall_update+0x22c>)
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	73fb      	strb	r3, [r7, #15]
    if (motor->reverse) idx = (idx + 3) % 6; // CCW
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00d      	beq.n	8001d72 <motor_120_hall_update+0x3e>
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	1cda      	adds	r2, r3, #3
 8001d5a:	4b82      	ldr	r3, [pc, #520]	@ (8001f64 <motor_120_hall_update+0x230>)
 8001d5c:	fb83 3102 	smull	r3, r1, r3, r2
 8001d60:	17d3      	asrs	r3, r2, #31
 8001d62:	1ac9      	subs	r1, r1, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	1ad1      	subs	r1, r2, r3
 8001d6e:	460b      	mov	r3, r1
 8001d70:	73fb      	strb	r3, [r7, #15]
    // idx = 5;
    uint8_t i;
    uint32_t compare = (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8001d78:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001f68 <motor_120_hall_update+0x234>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d84:	ee17 3a90 	vmov	r3, s15
 8001d88:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73bb      	strb	r3, [r7, #14]
 8001d8e:	e0dd      	b.n	8001f4c <motor_120_hall_update+0x218>
    {
        switch (motor_seq_map[idx][i])
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	7bb9      	ldrb	r1, [r7, #14]
 8001d94:	4875      	ldr	r0, [pc, #468]	@ (8001f6c <motor_120_hall_update+0x238>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4403      	add	r3, r0
 8001d9e:	440b      	add	r3, r1
 8001da0:	f993 3000 	ldrsb.w	r3, [r3]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d05d      	beq.n	8001e66 <motor_120_hall_update+0x132>
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 80b6 	bne.w	8001f1c <motor_120_hall_update+0x1e8>
        {
            case HIGH_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], compare);
<<<<<<< HEAD
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	3306      	adds	r3, #6
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <motor_120_hall_update+0x98>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d46:	e03c      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	3306      	adds	r3, #6
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d105      	bne.n	8001d64 <motor_120_hall_update+0xb4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d62:	e02e      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	3306      	adds	r3, #6
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d105      	bne.n	8001d80 <motor_120_hall_update+0xd0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d7e:	e020      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	3306      	adds	r3, #6
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d105      	bne.n	8001d9c <motor_120_hall_update+0xec>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	e012      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	3306      	adds	r3, #6
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d105      	bne.n	8001db8 <motor_120_hall_update+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001db6:	e004      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6998      	ldr	r0, [r3, #24]
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	3306      	adds	r3, #6
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f005 feb0 	bl	8007b38 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6998      	ldr	r0, [r3, #24]
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	3306      	adds	r3, #6
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f006 ffad 	bl	8008d48 <HAL_TIMEx_PWMN_Stop>
=======
 8001db0:	7bba      	ldrb	r2, [r7, #14]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3206      	adds	r2, #6
 8001db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <motor_120_hall_update+0x96>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc8:	e038      	b.n	8001e3c <motor_120_hall_update+0x108>
 8001dca:	7bba      	ldrb	r2, [r7, #14]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3206      	adds	r2, #6
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d105      	bne.n	8001de4 <motor_120_hall_update+0xb0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001de2:	e02b      	b.n	8001e3c <motor_120_hall_update+0x108>
 8001de4:	7bba      	ldrb	r2, [r7, #14]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3206      	adds	r2, #6
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d105      	bne.n	8001dfe <motor_120_hall_update+0xca>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dfc:	e01e      	b.n	8001e3c <motor_120_hall_update+0x108>
 8001dfe:	7bba      	ldrb	r2, [r7, #14]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3206      	adds	r2, #6
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d105      	bne.n	8001e18 <motor_120_hall_update+0xe4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	e011      	b.n	8001e3c <motor_120_hall_update+0x108>
 8001e18:	7bba      	ldrb	r2, [r7, #14]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3206      	adds	r2, #6
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d105      	bne.n	8001e32 <motor_120_hall_update+0xfe>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e30:	e004      	b.n	8001e3c <motor_120_hall_update+0x108>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6958      	ldr	r0, [r3, #20]
 8001e40:	7bba      	ldrb	r2, [r7, #14]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3206      	adds	r2, #6
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f005 fe62 	bl	8007b14 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6958      	ldr	r0, [r3, #20]
 8001e54:	7bba      	ldrb	r2, [r7, #14]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3206      	adds	r2, #6
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f006 ff60 	bl	8008d24 <HAL_TIMEx_PWMN_Stop>
>>>>>>> origin/main
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001e64:	e06f      	b.n	8001f46 <motor_120_hall_update+0x212>
            }
            case LOW_PASS:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
<<<<<<< HEAD
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6998      	ldr	r0, [r3, #24]
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	3306      	adds	r3, #6
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f005 ff99 	bl	8007d38 <HAL_TIM_PWM_Stop>
=======
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6958      	ldr	r0, [r3, #20]
 8001e6a:	7bba      	ldrb	r2, [r7, #14]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3206      	adds	r2, #6
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f005 ff4d 	bl	8007d14 <HAL_TIM_PWM_Stop>
>>>>>>> origin/main
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], TIM1_ARR);
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3206      	adds	r2, #6
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <motor_120_hall_update+0x160>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	22fa      	movs	r2, #250	@ 0xfa
 8001e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e92:	e038      	b.n	8001f06 <motor_120_hall_update+0x1d2>
 8001e94:	7bba      	ldrb	r2, [r7, #14]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3206      	adds	r2, #6
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d105      	bne.n	8001eae <motor_120_hall_update+0x17a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	23fa      	movs	r3, #250	@ 0xfa
 8001eaa:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eac:	e02b      	b.n	8001f06 <motor_120_hall_update+0x1d2>
 8001eae:	7bba      	ldrb	r2, [r7, #14]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3206      	adds	r2, #6
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d105      	bne.n	8001ec8 <motor_120_hall_update+0x194>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	23fa      	movs	r3, #250	@ 0xfa
 8001ec4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ec6:	e01e      	b.n	8001f06 <motor_120_hall_update+0x1d2>
 8001ec8:	7bba      	ldrb	r2, [r7, #14]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3206      	adds	r2, #6
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d105      	bne.n	8001ee2 <motor_120_hall_update+0x1ae>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	23fa      	movs	r3, #250	@ 0xfa
 8001ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee0:	e011      	b.n	8001f06 <motor_120_hall_update+0x1d2>
 8001ee2:	7bba      	ldrb	r2, [r7, #14]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3206      	adds	r2, #6
 8001ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d105      	bne.n	8001efc <motor_120_hall_update+0x1c8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	23fa      	movs	r3, #250	@ 0xfa
 8001ef8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001efa:	e004      	b.n	8001f06 <motor_120_hall_update+0x1d2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	23fa      	movs	r3, #250	@ 0xfa
 8001f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
<<<<<<< HEAD
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6998      	ldr	r0, [r3, #24]
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f006 fe97 	bl	8008be0 <HAL_TIMEx_PWMN_Start>
=======
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6958      	ldr	r0, [r3, #20]
 8001f0a:	7bba      	ldrb	r2, [r7, #14]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3206      	adds	r2, #6
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f006 fe51 	bl	8008bbc <HAL_TIMEx_PWMN_Start>
>>>>>>> origin/main
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_SET);
                break;
 8001f1a:	e014      	b.n	8001f46 <motor_120_hall_update+0x212>
            }
            default:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
<<<<<<< HEAD
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6998      	ldr	r0, [r3, #24]
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f005 ff37 	bl	8007d38 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6998      	ldr	r0, [r3, #24]
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f006 ff34 	bl	8008d48 <HAL_TIMEx_PWMN_Stop>
=======
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6958      	ldr	r0, [r3, #20]
 8001f20:	7bba      	ldrb	r2, [r7, #14]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3206      	adds	r2, #6
 8001f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f005 fef2 	bl	8007d14 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6958      	ldr	r0, [r3, #20]
 8001f34:	7bba      	ldrb	r2, [r7, #14]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3206      	adds	r2, #6
 8001f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f006 fef0 	bl	8008d24 <HAL_TIMEx_PWMN_Stop>
>>>>>>> origin/main
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001f44:	bf00      	nop
    for (i = 0; i < 3; i++)
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73bb      	strb	r3, [r7, #14]
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	f67f af1e 	bls.w	8001d90 <motor_120_hall_update+0x5c>
            }
        }
    }
}
<<<<<<< HEAD
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800cd50 	.word	0x0800cd50
 8001f00:	2aaaaaab 	.word	0x2aaaaaab
 8001f04:	437a0000 	.word	0x437a0000
 8001f08:	0800cd3c 	.word	0x0800cd3c
=======
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800cd30 	.word	0x0800cd30
 8001f64:	2aaaaaab 	.word	0x2aaaaaab
 8001f68:	437a0000 	.word	0x437a0000
 8001f6c:	0800cd1c 	.word	0x0800cd1c
>>>>>>> origin/main

08001f70 <motor_120_ctrl_stop>:

void motor_120_ctrl_stop(const MotorParameter *motor)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for (i = 0; i < 3; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e016      	b.n	8001fac <motor_120_ctrl_stop+0x3c>
    {
        HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
<<<<<<< HEAD
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6998      	ldr	r0, [r3, #24]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	3306      	adds	r3, #6
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f005 ff04 	bl	8007d38 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6998      	ldr	r0, [r3, #24]
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	3306      	adds	r3, #6
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f006 ff01 	bl	8008d48 <HAL_TIMEx_PWMN_Stop>
=======
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6958      	ldr	r0, [r3, #20]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3206      	adds	r2, #6
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f005 fec1 	bl	8007d14 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6958      	ldr	r0, [r3, #20]
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3206      	adds	r2, #6
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f006 febf 	bl	8008d24 <HAL_TIMEx_PWMN_Stop>
>>>>>>> origin/main
    for (i = 0; i < 3; i++)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d9e5      	bls.n	8001f7e <motor_120_ctrl_stop+0xe>
        // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
    }
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <motor_foc_tim_setup>:
#include "analog/adc1/main.h"

uint32_t cycle[16] = {0};

Result motor_foc_tim_setup(const MotorParameter *motor)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
<<<<<<< HEAD
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f005 fde1 	bl	8007b38 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f005 fdd9 	bl	8007b38 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f005 fdd1 	bl	8007b38 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f006 fe1d 	bl	8008be0 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f006 fe15 	bl	8008be0 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f006 fe0d 	bl	8008be0 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start(motor->const_h.ELE_htimx);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 fc3a 	bl	8007844 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 8001fd0:	4806      	ldr	r0, [pc, #24]	@ (8001fec <motor_foc_tim_setup+0x90>)
 8001fd2:	f005 fc37 	bl	8007844 <HAL_TIM_Base_Start>
=======
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f005 fd9f 	bl	8007b14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f005 fd97 	bl	8007b14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f005 fd8f 	bl	8007b14 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f006 fddb 	bl	8008bbc <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f006 fdd3 	bl	8008bbc <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f006 fdcb 	bl	8008bbc <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start(motor->const_h.ELE_htimx);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	4618      	mov	r0, r3
 800202c:	f005 fbf8 	bl	8007820 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 8002030:	4806      	ldr	r0, [pc, #24]	@ (800204c <motor_foc_tim_setup+0x90>)
 8002032:	f005 fbf5 	bl	8007820 <HAL_TIM_Base_Start>
>>>>>>> origin/main
    return RESULT_OK(NULL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
}
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200005c8 	.word	0x200005c8

08002050 <motor_foc_hall_update>:

// Thread - hallExti - 0
Result motor_foc_hall_update(MotorParameter *motor)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    float32_t htim_cnt = (float32_t)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->rpm_fbk_hall = 100000000.0f / htim_cnt;
 8002078:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800212c <motor_foc_hall_update+0xdc>
 800207c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    uint16_t expected = (!motor->reverse)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <motor_foc_hall_update+0x58>
        ? hall_seq_clw[motor->exti_hall_last]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <motor_foc_hall_update+0xe0>)
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	e005      	b.n	80020b4 <motor_foc_hall_update+0x64>
        : hall_seq_ccw[motor->exti_hall_last];
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <motor_foc_hall_update+0xe4>)
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
    uint16_t expected = (!motor->reverse)
 80020b4:	827b      	strh	r3, [r7, #18]
    // if (hall_last == 0) // ? CHECK
    // {
    //     hall_last = expected;
    // }
    if (motor->exti_hall_curt == expected)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	8a7b      	ldrh	r3, [r7, #18]
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d107      	bne.n	80020d6 <motor_foc_hall_update+0x86>
    {
        // rotated
        motor->hall_angle_acc = 0;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
        motor->pwm_it_angle_acc = 0;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	661a      	str	r2, [r3, #96]	@ 0x60

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_42BLF01_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (htim_cnt * (MOTOR_42BLF01_POLE / 2))) / 6 / MOTOR_42BLF01_GEAR;
 80020d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80020de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002138 <motor_foc_hall_update+0xe8>
 80020e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ea:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80020ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020f2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800213c <motor_foc_hall_update+0xec>
 80020f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
    // 單次PWM中斷時的角度變化 50us*60/(0.1us*CNT)
    motor->pwm_per_it_angle_itpl = 30000.0f * DEG_TO_RAD / htim_cnt;
 8002100:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002140 <motor_foc_hall_update+0xf0>
 8002104:	ed97 7a05 	vldr	s14, [r7, #20]
 8002108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

    return RESULT_OK(NULL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
}
<<<<<<< HEAD
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	4cbebc20 	.word	0x4cbebc20
 80020d0:	0800cd2c 	.word	0x0800cd2c
 80020d4:	0800cd34 	.word	0x0800cd34
 80020d8:	4ab71b00 	.word	0x4ab71b00
 80020dc:	408ccccd 	.word	0x408ccccd
 80020e0:	4402e652 	.word	0x4402e652
=======
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	4cbebc20 	.word	0x4cbebc20
 8002130:	0800cd0c 	.word	0x0800cd0c
 8002134:	0800cd14 	.word	0x0800cd14
 8002138:	4ab71b00 	.word	0x4ab71b00
 800213c:	408ccccd 	.word	0x408ccccd
 8002140:	4402e652 	.word	0x4402e652
>>>>>>> origin/main

08002144 <stop_check>:

static inline void stop_check(MotorParameter *motor)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002152:	73fb      	strb	r3, [r7, #15]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800215a:	461a      	mov	r2, r3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4413      	add	r3, r2
 800216a:	81bb      	strh	r3, [r7, #12]
    if(hall_total == motor->pwm_hall_acc)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002172:	b29b      	uxth	r3, r3
 8002174:	89ba      	ldrh	r2, [r7, #12]
 8002176:	429a      	cmp	r2, r3
 8002178:	d123      	bne.n	80021c2 <stop_check+0x7e>
    {
        motor->spin_stop_acc++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002180:	3301      	adds	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        if (motor->spin_stop_acc >= 50)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002190:	2b31      	cmp	r3, #49	@ 0x31
 8002192:	d91a      	bls.n	80021ca <stop_check+0x86>
        {
            motor->spin_stop_acc = 0;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	679a      	str	r2, [r3, #120]	@ 0x78
            motor->pi_Iq.Out=0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
            motor->pwm_it_angle_acc = 0.0f;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	661a      	str	r2, [r3, #96]	@ 0x60
 80021c0:	e003      	b.n	80021ca <stop_check+0x86>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    }
    motor->pwm_hall_acc = hall_total;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	89ba      	ldrh	r2, [r7, #12]
 80021ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    motor->pwm_hall_last = hall_current;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <pi_speed>:

static inline void pi_speed(MotorParameter *motor)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    // 計算 速度PI (每100個PWM中斷)
    // if(Speed.Fbk>0 && stop_flag==0)
    PI_run(&motor->pi_speed);
<<<<<<< HEAD
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3378      	adds	r3, #120	@ 0x78
 8002194:	4618      	mov	r0, r3
 8002196:	f001 f827 	bl	80031e8 <PI_run>
=======
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3374      	adds	r3, #116	@ 0x74
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 ffe5 	bl	80031c4 <PI_run>
>>>>>>> origin/main
    motor->pi_speed_cmd = clampf((motor->pi_speed_cmd + motor->pi_speed.Out), 0.15f, 0.2f);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800222c <pi_speed+0x44>
 800220e:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8002230 <pi_speed+0x48>
 8002212:	eeb0 0a67 	vmov.f32	s0, s15
 8002216:	f7ff fc9f 	bl	8001b58 <clampf>
 800221a:	eef0 7a40 	vmov.f32	s15, s0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
    // else if(Speed.Fbk==0 | stop_flag==1)
    //     motor->pi_speed_cmd=0.18;
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	3e4ccccd 	.word	0x3e4ccccd
 8002230:	3e19999a 	.word	0x3e19999a

08002234 <angal_cal>:

static inline void angal_cal(MotorParameter *motor)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    // ?
    if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80022b0 <angal_cal+0x7c>
 8002250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	d51a      	bpl.n	8002290 <angal_cal+0x5c>
    {
        motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        motor->hall_angle_acc = clampf(motor->hall_angle_acc, 0.0f, 60.0f);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002276:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80022b0 <angal_cal+0x7c>
 800227a:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80022b4 <angal_cal+0x80>
 800227e:	eeb0 0a67 	vmov.f32	s0, s15
 8002282:	f7ff fc69 	bl	8001b58 <clampf>
 8002286:	eef0 7a40 	vmov.f32	s15, s0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    }
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	42700000 	.word	0x42700000
 80022b4:	00000000 	.word	0x00000000

080022b8 <vec_ctrl_clarke>:

#define ADC_TO_CURRENT (3.3f / 4095.0f / 0.185f ) // ~ 0.004356 A/LSB
static inline Result vec_ctrl_clarke(MotorParameter *motor)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    // RESULT_CHECK_RET_RES(renew_adc(&adc_test));
    RESULT_CHECK_RET_RES(renew_adc(motor->adc_u, &motor->clarke.As));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f96f 	bl	80015b4 <renew_adc>
 80022d6:	7e3b      	ldrb	r3, [r7, #24]
 80022d8:	f083 0301 	eor.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <vec_ctrl_clarke+0x44>
 80022e2:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <vec_ctrl_clarke+0xd8>)
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f107 0318 	add.w	r3, r7, #24
 80022f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022f6:	e882 0003 	stmia.w	r2, {r0, r1}
    // PeriodFilter_w = (float32_t)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;

    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
    return RESULT_OK(NULL);
}
 80022fa:	e045      	b.n	8002388 <vec_ctrl_clarke+0xd0>
    RESULT_CHECK_RET_RES(renew_adc(motor->adc_v, &motor->clarke.Bs));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f952 	bl	80015b4 <renew_adc>
 8002310:	7c3b      	ldrb	r3, [r7, #16]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <vec_ctrl_clarke+0x7e>
 800231c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002320:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <vec_ctrl_clarke+0xd8>)
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	461a      	mov	r2, r3
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002330:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002334:	e028      	b.n	8002388 <vec_ctrl_clarke+0xd0>
    RESULT_CHECK_RET_RES(renew_adc(motor->adc_w, &motor->clarke.Cs));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f935 	bl	80015b4 <renew_adc>
 800234a:	7a3b      	ldrb	r3, [r7, #8]
 800234c:	f083 0301 	eor.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <vec_ctrl_clarke+0xb8>
 8002356:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <vec_ctrl_clarke+0xd8>)
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	461a      	mov	r2, r3
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	e893 0003 	ldmia.w	r3, {r0, r1}
 800236a:	e882 0003 	stmia.w	r2, {r0, r1}
 800236e:	e00b      	b.n	8002388 <vec_ctrl_clarke+0xd0>
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fcba 	bl	8001cf0 <CLARKE_run_ideal>
    return RESULT_OK(NULL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
}
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000954 	.word	0x20000954

08002394 <vec_ctrl_park>:

static inline Result vec_ctrl_park(MotorParameter *motor)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    motor->park.Beta = motor->clarke.Beta;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    RESULT_CHECK_RET_RES(trigo_sin_cosf(
<<<<<<< HEAD
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80023e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002450 <vec_ctrl_park+0x9c>
 80023ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f503 71a0 	add.w	r1, r3, #320	@ 0x140
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002402:	4618      	mov	r0, r3
 8002404:	f000 ffc8 	bl	8003398 <trigo_sin_cosf>
 8002408:	7a3b      	ldrb	r3, [r7, #8]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <vec_ctrl_park+0x7a>
 8002414:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <vec_ctrl_park+0xa0>)
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	f107 0308 	add.w	r3, r7, #8
 8002424:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002428:	e882 0003 	stmia.w	r2, {r0, r1}
 800242c:	e00b      	b.n	8002446 <vec_ctrl_park+0x92>
=======
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80023c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002430 <vec_ctrl_park+0x9c>
 80023ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 ffc6 	bl	8003374 <trigo_sin_cosf>
 80023e8:	7a3b      	ldrb	r3, [r7, #8]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00c      	beq.n	800240e <vec_ctrl_park+0x7a>
 80023f4:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <vec_ctrl_park+0xa0>)
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	461a      	mov	r2, r3
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002408:	e882 0003 	stmia.w	r2, {r0, r1}
 800240c:	e00b      	b.n	8002426 <vec_ctrl_park+0x92>
>>>>>>> origin/main
        motor->exti_hall_angal + motor->pwm_it_angle_acc + DIV_PI_2 * 3.0f,
        &motor->park.Sine, &motor->park.Cosine
    ));
    PARK_run(&motor->park);
<<<<<<< HEAD
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fe6f 	bl	8003118 <PARK_run>
=======
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fe6d 	bl	80030f4 <PARK_run>
>>>>>>> origin/main
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float32_t)motor->park.Qs - (float32_t)PeriodFilter_iq)*(float32_t)PeriodKFilter );
    // PeriodFilter_iq = (float32_t)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
}
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	4096cbe4 	.word	0x4096cbe4
 8002434:	20000954 	.word	0x20000954

08002438 <vec_ctrl_pi_id_iq>:

#define IQ_REF_ADD 0.0f
static inline void vec_ctrl_pi_id_iq(MotorParameter *motor)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	dd3f      	ble.n	80024d0 <vec_ctrl_pi_id_iq+0x98>
    {
        motor->pi_Id.Ref = 0;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        motor->pi_Id.Fbk = motor->park.Ds;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
<<<<<<< HEAD
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	33e4      	adds	r3, #228	@ 0xe4
 800248a:	4618      	mov	r0, r3
 800248c:	f000 feac 	bl	80031e8 <PI_run>
=======
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	33e0      	adds	r3, #224	@ 0xe0
 800246a:	4618      	mov	r0, r3
 800246c:	f000 feaa 	bl	80031c4 <PI_run>
>>>>>>> origin/main
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = clampf(motor->pi_Id.Out, -0.01f, 0.01f);//限制最大與最小參數
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8002476:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 80024e0 <vec_ctrl_pi_id_iq+0xa8>
 800247a:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80024e4 <vec_ctrl_pi_id_iq+0xac>
 800247e:	eeb0 0a67 	vmov.f32	s0, s15
 8002482:	f7ff fb69 	bl	8001b58 <clampf>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        // motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
        motor->pi_Iq.Ref = 0.3f;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a15      	ldr	r2, [pc, #84]	@ (80024e8 <vec_ctrl_pi_id_iq+0xb0>)
 8002494:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
<<<<<<< HEAD
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	33b0      	adds	r3, #176	@ 0xb0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fe8d 	bl	80031e8 <PI_run>
=======
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	33ac      	adds	r3, #172	@ 0xac
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fe8b 	bl	80031c4 <PI_run>
>>>>>>> origin/main
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = clampf(motor->pi_Iq.Out, 0.0f, 0.75f);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80024b4:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 80024b8:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80024ec <vec_ctrl_pi_id_iq+0xb4>
 80024bc:	eeb0 0a67 	vmov.f32	s0, s15
 80024c0:	f7ff fb4a 	bl	8001b58 <clampf>
 80024c4:	eef0 7a40 	vmov.f32	s15, s0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
    }
    else
    {
        motor->pi_Iq.Out = 0.18;
    }
}
 80024ce:	e003      	b.n	80024d8 <vec_ctrl_pi_id_iq+0xa0>
        motor->pi_Iq.Out = 0.18;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <vec_ctrl_pi_id_iq+0xb8>)
 80024d4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	3c23d70a 	.word	0x3c23d70a
 80024e4:	bc23d70a 	.word	0xbc23d70a
 80024e8:	3e99999a 	.word	0x3e99999a
 80024ec:	00000000 	.word	0x00000000
 80024f0:	3e3851ec 	.word	0x3e3851ec

080024f4 <vec_ctrl_ipark>:

static inline Result vec_ctrl_ipark(MotorParameter *motor)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
    // ipark
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)
    // ?
    motor->ipark.Vdref = clampf(motor->ipark.Vdref + motor->pi_Id.Out, -0.06f, 0.06f);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800250a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250e:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 80025e4 <vec_ctrl_ipark+0xf0>
 8002512:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80025e8 <vec_ctrl_ipark+0xf4>
 8002516:	eeb0 0a67 	vmov.f32	s0, s15
 800251a:	f7ff fb1d 	bl	8001b58 <clampf>
 800251e:	eef0 7a40 	vmov.f32	s15, s0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    motor->ipark.Vqref = motor->pi_Iq.Out;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    motor->ipark.Sine = motor->park.Sine;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    motor->ipark.Cosine = motor->park.Cosine;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    IPARK_run(&motor->ipark);
<<<<<<< HEAD
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fe04 	bl	8003180 <IPARK_run>
    RESULT_CHECK_RET_RES(trigo_atan(motor->ipark.Alpha, motor->ipark.Beta, &motor->elec_theta_rad));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	ed93 7a53 	vldr	s14, [r3, #332]	@ 0x14c
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f503 72be 	add.w	r2, r3, #380	@ 0x17c
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	4611      	mov	r1, r2
 8002590:	eef0 0a47 	vmov.f32	s1, s14
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	4618      	mov	r0, r3
 800259a:	f000 ff85 	bl	80034a8 <trigo_atan>
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <vec_ctrl_ipark+0xb0>
 80025aa:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <vec_ctrl_ipark+0xf8>)
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025be:	e882 0003 	stmia.w	r2, {r0, r1}
 80025c2:	e01b      	b.n	80025fc <vec_ctrl_ipark+0xe8>
=======
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fe02 	bl	800315c <IPARK_run>
    RESULT_CHECK_RET_RES(trigo_atan(motor->ipark.Alpha, motor->ipark.Beta, &motor->elec_theta_rad));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	edd3 7a51 	vldr	s15, [r3, #324]	@ 0x144
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	ed93 7a52 	vldr	s14, [r3, #328]	@ 0x148
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4611      	mov	r1, r2
 8002570:	eef0 0a47 	vmov.f32	s1, s14
 8002574:	eeb0 0a67 	vmov.f32	s0, s15
 8002578:	4618      	mov	r0, r3
 800257a:	f000 ff83 	bl	8003484 <trigo_atan>
 800257e:	7a3b      	ldrb	r3, [r7, #8]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <vec_ctrl_ipark+0xb0>
 800258a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <vec_ctrl_ipark+0xf8>)
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	461a      	mov	r2, r3
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800259e:	e882 0003 	stmia.w	r2, {r0, r1}
 80025a2:	e01b      	b.n	80025dc <vec_ctrl_ipark+0xe8>
>>>>>>> origin/main
    motor->elec_theta_rad = wrap_0_2pi(motor->elec_theta_rad);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 80025aa:	eeb0 0a67 	vmov.f32	s0, s15
 80025ae:	f7ff fafd 	bl	8001bac <wrap_0_2pi>
 80025b2:	eef0 7a40 	vmov.f32	s15, s0
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    motor->elec_theta_deg = motor->elec_theta_rad * RAD_TO_DEG;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 80025c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80025f0 <vec_ctrl_ipark+0xfc>
 80025c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
    return RESULT_OK(NULL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
}
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	3d75c28f 	.word	0x3d75c28f
 80025e8:	bd75c28f 	.word	0xbd75c28f
 80025ec:	20000954 	.word	0x20000954
 80025f0:	42652ee1 	.word	0x42652ee1

080025f4 <vec_ctrl_svgen>:

static inline void vec_ctrl_svgen(MotorParameter *motor)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    motor->svgendq.Ubeta = motor->ipark.Beta;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    SVGEN_run(&motor->svgendq);
<<<<<<< HEAD
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fe44 	bl	80032c8 <SVGEN_run>
=======
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fe42 	bl	80032a4 <SVGEN_run>
>>>>>>> origin/main
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <vec_ctrl_vref>:

static inline Result vec_ctrl_vref(MotorParameter *motor)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    //     else
    //         motor->svpwm_Vref=0;
    //     }
    // else
    arm_status status = arm_sqrt_f32(
        motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 800263e:	ee27 7a27 	vmul.f32	s14, s14, s15
            + motor->svgendq.Ubeta * motor->svgendq.Ubeta,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	edd3 6a59 	vldr	s13, [r3, #356]	@ 0x164
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 800264e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_status status = arm_sqrt_f32(
 8002652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800265c:	edc7 7a08 	vstr	s15, [r7, #32]
 8002660:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002662:	edd7 7a08 	vldr	s15, [r7, #32]
 8002666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	db0a      	blt.n	8002686 <vec_ctrl_vref+0x5e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
<<<<<<< HEAD
 8002690:	ed97 0a08 	vldr	s0, [r7, #32]
 8002694:	f00a fabe 	bl	800cc14 <sqrtf>
 8002698:	eef0 7a40 	vmov.f32	s15, s0
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	edc3 7a00 	vstr	s15, [r3]
=======
 8002670:	ed97 0a08 	vldr	s0, [r7, #32]
 8002674:	f00a fabe 	bl	800cbf4 <sqrtf>
 8002678:	eef0 7a40 	vmov.f32	s15, s0
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> origin/main
#endif

      return (ARM_MATH_SUCCESS);
 8002682:	2300      	movs	r3, #0
 8002684:	e005      	b.n	8002692 <vec_ctrl_vref+0x6a>
    }
    else
    {
      *pOut = 0.0f;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        &motor->svpwm_Vref
    );
    if (status != ARM_MATH_SUCCESS) return RESULT_ERROR(RES_ERR_FAIL);
 8002696:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <vec_ctrl_vref+0x88>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	2300      	movs	r3, #0
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	6053      	str	r3, [r2, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	711a      	strb	r2, [r3, #4]
 80026ae:	e005      	b.n	80026bc <vec_ctrl_vref+0x94>
    //		motor->elec_theta_deg      =  (int)motor_angle % 60;
    
    /*
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->elec_theta_deg      =  (int)cmd_deg % 60;*/
    return RESULT_OK(NULL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
}
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	3728      	adds	r7, #40	@ 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <vec_ctrl_svpwm>:

float32_t thete_t[6];
static inline Result vec_ctrl_svpwm(MotorParameter *motor)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b092      	sub	sp, #72	@ 0x48
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
    float32_t theta = motor->elec_theta_rad;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80026d4:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t n = (int32_t)(theta / DIV_PI_3);
 80026d6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80026da:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002a1c <vec_ctrl_svpwm+0x358>
 80026de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e6:	ee17 3a90 	vmov	r3, s15
 80026ea:	643b      	str	r3, [r7, #64]	@ 0x40
    theta -= (float32_t)n * DIV_PI_3;
 80026ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f6:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 8002a1c <vec_ctrl_svpwm+0x358>
 80026fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fe:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002706:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (theta < 0) theta += DIV_PI_3;
 800270a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800270e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002716:	d507      	bpl.n	8002728 <vec_ctrl_svpwm+0x64>
 8002718:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800271c:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8002a1c <vec_ctrl_svpwm+0x358>
 8002720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002724:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // ? CHECK
    float32_t T1, T2;
    if(!motor->reverse)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d040      	beq.n	80027ba <vec_ctrl_svpwm+0xf6>
    {
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T1, NULL));
<<<<<<< HEAD
 8002758:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 800275c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002768:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800276c:	2200      	movs	r2, #0
 800276e:	eeb0 0a67 	vmov.f32	s0, s15
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fe10 	bl	8003398 <trigo_sin_cosf>
 8002778:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <vec_ctrl_svpwm+0xbc>
 8002786:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800278a:	4bad      	ldr	r3, [pc, #692]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	461a      	mov	r2, r3
 8002792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002796:	e893 0003 	ldmia.w	r3, {r0, r1}
 800279a:	e882 0003 	stmia.w	r2, {r0, r1}
=======
 8002738:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002a1c <vec_ctrl_svpwm+0x358>
 800273c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002748:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800274c:	2200      	movs	r2, #0
 800274e:	eeb0 0a67 	vmov.f32	s0, s15
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fe0e 	bl	8003374 <trigo_sin_cosf>
 8002758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800275c:	f083 0301 	eor.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00c      	beq.n	8002780 <vec_ctrl_svpwm+0xbc>
 8002766:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800276a:	4bad      	ldr	r3, [pc, #692]	@ (8002a20 <vec_ctrl_svpwm+0x35c>)
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	461a      	mov	r2, r3
 8002772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002776:	e893 0003 	ldmia.w	r3, {r0, r1}
 800277a:	e882 0003 	stmia.w	r2, {r0, r1}
>>>>>>> origin/main
    }
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
    return RESULT_OK(NULL);
}
 800277e:	e28a      	b.n	8002c96 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T2, NULL));
<<<<<<< HEAD
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80027a8:	2200      	movs	r2, #0
 80027aa:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fdf2 	bl	8003398 <trigo_sin_cosf>
 80027b4:	7f3b      	ldrb	r3, [r7, #28]
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d04c      	beq.n	800285a <vec_ctrl_svpwm+0x176>
 80027c0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80027c4:	4b9e      	ldr	r3, [pc, #632]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80027d8:	e26d      	b.n	8002cb6 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T1, NULL));
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80027e2:	2200      	movs	r2, #0
 80027e4:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fdd5 	bl	8003398 <trigo_sin_cosf>
 80027ee:	7d3b      	ldrb	r3, [r7, #20]
 80027f0:	f083 0301 	eor.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <vec_ctrl_svpwm+0x130>
 80027fa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80027fe:	4b90      	ldr	r3, [pc, #576]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	461a      	mov	r2, r3
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800280e:	e882 0003 	stmia.w	r2, {r0, r1}
=======
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002788:	2200      	movs	r2, #0
 800278a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fdf0 	bl	8003374 <trigo_sin_cosf>
 8002794:	7f3b      	ldrb	r3, [r7, #28]
 8002796:	f083 0301 	eor.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d04c      	beq.n	800283a <vec_ctrl_svpwm+0x176>
 80027a0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80027a4:	4b9e      	ldr	r3, [pc, #632]	@ (8002a20 <vec_ctrl_svpwm+0x35c>)
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80027b8:	e26d      	b.n	8002c96 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T1, NULL));
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80027c2:	2200      	movs	r2, #0
 80027c4:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fdd3 	bl	8003374 <trigo_sin_cosf>
 80027ce:	7d3b      	ldrb	r3, [r7, #20]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <vec_ctrl_svpwm+0x130>
 80027da:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80027de:	4b90      	ldr	r3, [pc, #576]	@ (8002a20 <vec_ctrl_svpwm+0x35c>)
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	461a      	mov	r2, r3
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027ee:	e882 0003 	stmia.w	r2, {r0, r1}
>>>>>>> origin/main
}
 80027f2:	e250      	b.n	8002c96 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T2, NULL));
<<<<<<< HEAD
 8002814:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 8002818:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800281c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fdb2 	bl	8003398 <trigo_sin_cosf>
 8002834:	7b3b      	ldrb	r3, [r7, #12]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <vec_ctrl_svpwm+0x176>
 8002840:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002844:	4b7e      	ldr	r3, [pc, #504]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002854:	e882 0003 	stmia.w	r2, {r0, r1}
 8002858:	e22d      	b.n	8002cb6 <vec_ctrl_svpwm+0x5d2>
=======
 80027f4:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002a1c <vec_ctrl_svpwm+0x358>
 80027f8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002808:	2200      	movs	r2, #0
 800280a:	eeb0 0a67 	vmov.f32	s0, s15
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fdb0 	bl	8003374 <trigo_sin_cosf>
 8002814:	7b3b      	ldrb	r3, [r7, #12]
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <vec_ctrl_svpwm+0x176>
 8002820:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002824:	4b7e      	ldr	r3, [pc, #504]	@ (8002a20 <vec_ctrl_svpwm+0x35c>)
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	461a      	mov	r2, r3
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002834:	e882 0003 	stmia.w	r2, {r0, r1}
 8002838:	e22d      	b.n	8002c96 <vec_ctrl_svpwm+0x5d2>
>>>>>>> origin/main
    float32_t T0div2 = (1 - (T1 + T2)) / 2;
 800283a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800283e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800284a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800284e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002856:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    switch(motor->svgendq.Sector)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f8b3 3174 	ldrh.w	r3, [r3, #372]	@ 0x174
 8002860:	3b01      	subs	r3, #1
 8002862:	2b05      	cmp	r3, #5
 8002864:	f200 80b2 	bhi.w	80029cc <vec_ctrl_svpwm+0x308>
 8002868:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <vec_ctrl_svpwm+0x1ac>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	0800292b 	.word	0x0800292b
 8002874:	080028bf 	.word	0x080028bf
 8002878:	080028f5 	.word	0x080028f5
 800287c:	08002997 	.word	0x08002997
 8002880:	08002961 	.word	0x08002961
 8002884:	08002889 	.word	0x08002889
            motor->pwm_duty_u = T0div2;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800288c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1;
 8002890:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002894:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80028a2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 80028bc:	e086      	b.n	80029cc <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T2;
 80028be:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80028c2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028d4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80028d8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 80028f2:	e06b      	b.n	80029cc <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 80028f4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028f8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002900:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002912:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T1;
 8002916:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800291a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800291e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 8002928:	e050      	b.n	80029cc <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 800292a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800292e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002936:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T2;
 8002944:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002948:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800295a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            break;
 800295e:	e035      	b.n	80029cc <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1;
 8002960:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002964:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002972:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002976:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800297a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002990:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            break;
 8002994:	e01a      	b.n	80029cc <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800299a:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            motor->pwm_duty_v = T0div2 + T1 + T2;
 800299e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80029a2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_w = T0div2 + T2;
 80029b8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80029bc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80029c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            break;
 80029ca:	bf00      	nop
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10f      	bne.n	80029f4 <vec_ctrl_svpwm+0x330>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 80029da:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ec:	ee17 2a90 	vmov	r2, s15
 80029f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029f2:	e064      	b.n	8002abe <vec_ctrl_svpwm+0x3fa>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d115      	bne.n	8002a28 <vec_ctrl_svpwm+0x364>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002a02:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a14:	ee17 3a90 	vmov	r3, s15
 8002a18:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a1a:	e050      	b.n	8002abe <vec_ctrl_svpwm+0x3fa>
 8002a1c:	3f860a92 	.word	0x3f860a92
 8002a20:	20000954 	.word	0x20000954
 8002a24:	437a0000 	.word	0x437a0000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d10f      	bne.n	8002a50 <vec_ctrl_svpwm+0x38c>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002a36:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a4e:	e036      	b.n	8002abe <vec_ctrl_svpwm+0x3fa>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d10f      	bne.n	8002a78 <vec_ctrl_svpwm+0x3b4>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002a5e:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a70:	ee17 3a90 	vmov	r3, s15
 8002a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a76:	e022      	b.n	8002abe <vec_ctrl_svpwm+0x3fa>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d10f      	bne.n	8002aa0 <vec_ctrl_svpwm+0x3dc>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002a86:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a98:	ee17 3a90 	vmov	r3, s15
 8002a9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a9e:	e00e      	b.n	8002abe <vec_ctrl_svpwm+0x3fa>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8002aa6:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <vec_ctrl_svpwm+0x422>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002acc:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ade:	ee17 2a90 	vmov	r2, s15
 8002ae2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ae4:	e05e      	b.n	8002ba4 <vec_ctrl_svpwm+0x4e0>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d10f      	bne.n	8002b0e <vec_ctrl_svpwm+0x44a>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002af4:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b06:	ee17 3a90 	vmov	r3, s15
 8002b0a:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b0c:	e04a      	b.n	8002ba4 <vec_ctrl_svpwm+0x4e0>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d10f      	bne.n	8002b36 <vec_ctrl_svpwm+0x472>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002b1c:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2e:	ee17 3a90 	vmov	r3, s15
 8002b32:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b34:	e036      	b.n	8002ba4 <vec_ctrl_svpwm+0x4e0>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d10f      	bne.n	8002b5e <vec_ctrl_svpwm+0x49a>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002b44:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b56:	ee17 3a90 	vmov	r3, s15
 8002b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5c:	e022      	b.n	8002ba4 <vec_ctrl_svpwm+0x4e0>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d10f      	bne.n	8002b86 <vec_ctrl_svpwm+0x4c2>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002b6c:	ed1f 7a53 	vldr	s14, [pc, #-332]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7e:	ee17 3a90 	vmov	r3, s15
 8002b82:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b84:	e00e      	b.n	8002ba4 <vec_ctrl_svpwm+0x4e0>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002b8c:	ed1f 7a5b 	vldr	s14, [pc, #-364]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9e:	ee17 3a90 	vmov	r3, s15
 8002ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <vec_ctrl_svpwm+0x508>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002bb2:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 2a90 	vmov	r2, s15
 8002bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bca:	e05e      	b.n	8002c8a <vec_ctrl_svpwm+0x5c6>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d10f      	bne.n	8002bf4 <vec_ctrl_svpwm+0x530>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002bda:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bec:	ee17 3a90 	vmov	r3, s15
 8002bf0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bf2:	e04a      	b.n	8002c8a <vec_ctrl_svpwm+0x5c6>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d10f      	bne.n	8002c1c <vec_ctrl_svpwm+0x558>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002c02:	ed1f 7a78 	vldr	s14, [pc, #-480]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c14:	ee17 3a90 	vmov	r3, s15
 8002c18:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002c1a:	e036      	b.n	8002c8a <vec_ctrl_svpwm+0x5c6>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d10f      	bne.n	8002c44 <vec_ctrl_svpwm+0x580>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002c2a:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3c:	ee17 3a90 	vmov	r3, s15
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	e022      	b.n	8002c8a <vec_ctrl_svpwm+0x5c6>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d10f      	bne.n	8002c6c <vec_ctrl_svpwm+0x5a8>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002c52:	ed1f 7a8c 	vldr	s14, [pc, #-560]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c64:	ee17 3a90 	vmov	r3, s15
 8002c68:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c6a:	e00e      	b.n	8002c8a <vec_ctrl_svpwm+0x5c6>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002c72:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8002a24 <vec_ctrl_svpwm+0x360>
 8002c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c84:	ee17 3a90 	vmov	r3, s15
 8002c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
}
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	3748      	adds	r7, #72	@ 0x48
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <motor_foc_pwm_pulse>:

#define CYCLE_CNT(id) ({cycle[id] = __HAL_TIM_GET_COUNTER(&htim2) - cycle[id-1];})
// FOC 20kHz
// Thread - pwmIt - 0
Result motor_foc_pwm_pulse(MotorParameter *motor)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	@ 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
<<<<<<< HEAD
 8002cca:	4b9a      	ldr	r3, [pc, #616]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (motor->pwm_count % 100 == 0)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002cd8:	4a97      	ldr	r2, [pc, #604]	@ (8002f38 <motor_foc_pwm_pulse+0x278>)
 8002cda:	fba2 1203 	umull	r1, r2, r2, r3
 8002cde:	0952      	lsrs	r2, r2, #5
 8002ce0:	2164      	movs	r1, #100	@ 0x64
 8002ce2:	fb01 f202 	mul.w	r2, r1, r2
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11a      	bne.n	8002d24 <motor_foc_pwm_pulse+0x64>
    {
        cycle[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002cee:	4b91      	ldr	r3, [pc, #580]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	4a91      	ldr	r2, [pc, #580]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002cf6:	6013      	str	r3, [r2, #0]
        // Thread - pwmIt(100) - 1
        stop_check(motor);
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f7ff f9f3 	bl	80020e4 <stop_check>
        CYCLE_CNT(1);
 8002cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d04:	4b8d      	ldr	r3, [pc, #564]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	4a8c      	ldr	r2, [pc, #560]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d0c:	6053      	str	r3, [r2, #4]
        // Thread - pwmIt(100) - 2
        pi_speed(motor); // !
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f7ff fa3a 	bl	8002188 <pi_speed>
        CYCLE_CNT(2);
 8002d14:	4b87      	ldr	r3, [pc, #540]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1a:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	4a86      	ldr	r2, [pc, #536]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d22:	6093      	str	r3, [r2, #8]
=======
 8002caa:	4b9a      	ldr	r3, [pc, #616]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (motor->pwm_count % 100 == 0)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002cb8:	4a97      	ldr	r2, [pc, #604]	@ (8002f18 <motor_foc_pwm_pulse+0x278>)
 8002cba:	fba2 1203 	umull	r1, r2, r2, r3
 8002cbe:	0952      	lsrs	r2, r2, #5
 8002cc0:	2164      	movs	r1, #100	@ 0x64
 8002cc2:	fb01 f202 	mul.w	r2, r1, r2
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11a      	bne.n	8002d04 <motor_foc_pwm_pulse+0x64>
    {
        cycle[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002cce:	4b91      	ldr	r3, [pc, #580]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	4a91      	ldr	r2, [pc, #580]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002cd6:	6013      	str	r3, [r2, #0]
        // Thread - pwmIt(100) - 1
        stop_check(motor);
 8002cd8:	6838      	ldr	r0, [r7, #0]
 8002cda:	f7ff fa33 	bl	8002144 <stop_check>
        CYCLE_CNT(1);
 8002cde:	4b8d      	ldr	r3, [pc, #564]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	4a8c      	ldr	r2, [pc, #560]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002cec:	6053      	str	r3, [r2, #4]
        // Thread - pwmIt(100) - 2
        pi_speed(motor); // !
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f7ff fa7a 	bl	80021e8 <pi_speed>
        CYCLE_CNT(2);
 8002cf4:	4b87      	ldr	r3, [pc, #540]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfa:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	4a86      	ldr	r2, [pc, #536]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d02:	6093      	str	r3, [r2, #8]
>>>>>>> origin/main
    }
    // motor->pwm_count % 2 == 0
    if (motor->pwm_count % 2 == 0)
<<<<<<< HEAD
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 80d0 	bne.w	8002ed6 <motor_foc_pwm_pulse+0x216>
    {
        CYCLE_CNT(3);
 8002d36:	4b7f      	ldr	r3, [pc, #508]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	4a7e      	ldr	r2, [pc, #504]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d44:	60d3      	str	r3, [r2, #12]
        // Thread - pwmIt - 1
        angal_cal(motor);
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	f7ff fa44 	bl	80021d4 <angal_cal>
        CYCLE_CNT(4);
 8002d4c:	4b79      	ldr	r3, [pc, #484]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d52:	4b7a      	ldr	r3, [pc, #488]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	4a78      	ldr	r2, [pc, #480]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d5a:	6113      	str	r3, [r2, #16]
        // Thread - pwmIt - 2
        RESULT_CHECK_RET_RES(vec_ctrl_clarke(motor));
 8002d5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fa78 	bl	8002258 <vec_ctrl_clarke>
 8002d68:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d6c:	f083 0301 	eor.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <motor_foc_pwm_pulse+0xd0>
 8002d76:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8002d7a:	4b71      	ldr	r3, [pc, #452]	@ (8002f40 <motor_foc_pwm_pulse+0x280>)
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d8a:	e882 0003 	stmia.w	r2, {r0, r1}
=======
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f040 80d0 	bne.w	8002eb6 <motor_foc_pwm_pulse+0x216>
    {
        CYCLE_CNT(3);
 8002d16:	4b7f      	ldr	r3, [pc, #508]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	4a7e      	ldr	r2, [pc, #504]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d24:	60d3      	str	r3, [r2, #12]
        // Thread - pwmIt - 1
        angal_cal(motor);
 8002d26:	6838      	ldr	r0, [r7, #0]
 8002d28:	f7ff fa84 	bl	8002234 <angal_cal>
        CYCLE_CNT(4);
 8002d2c:	4b79      	ldr	r3, [pc, #484]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d32:	4b7a      	ldr	r3, [pc, #488]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	4a78      	ldr	r2, [pc, #480]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d3a:	6113      	str	r3, [r2, #16]
        // Thread - pwmIt - 2
        RESULT_CHECK_RET_RES(vec_ctrl_clarke(motor));
 8002d3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d40:	6839      	ldr	r1, [r7, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fab8 	bl	80022b8 <vec_ctrl_clarke>
 8002d48:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <motor_foc_pwm_pulse+0xd0>
 8002d56:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8002d5a:	4b71      	ldr	r3, [pc, #452]	@ (8002f20 <motor_foc_pwm_pulse+0x280>)
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d6a:	e882 0003 	stmia.w	r2, {r0, r1}
>>>>>>> origin/main
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
        motor->exti_hall_cnt = 0;
    }
    motor->pwm_count++;
    return RESULT_OK(NULL);
}
<<<<<<< HEAD
 8002d8e:	e0cd      	b.n	8002f2c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(5);
 8002d90:	4b68      	ldr	r3, [pc, #416]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d96:	4b69      	ldr	r3, [pc, #420]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	4a67      	ldr	r2, [pc, #412]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d9e:	6153      	str	r3, [r2, #20]
        RESULT_CHECK_RET_RES(vec_ctrl_park(motor));
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	6839      	ldr	r1, [r7, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb04 	bl	80023b4 <vec_ctrl_park>
 8002dac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <motor_foc_pwm_pulse+0x114>
 8002dba:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 8002dbe:	4b60      	ldr	r3, [pc, #384]	@ (8002f40 <motor_foc_pwm_pulse+0x280>)
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f107 0320 	add.w	r3, r7, #32
 8002dca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dce:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002dd2:	e0ab      	b.n	8002f2c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(6);
 8002dd4:	4b57      	ldr	r3, [pc, #348]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dda:	4b58      	ldr	r3, [pc, #352]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	4a56      	ldr	r2, [pc, #344]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002de2:	6193      	str	r3, [r2, #24]
        vec_ctrl_pi_id_iq(motor);
 8002de4:	6838      	ldr	r0, [r7, #0]
 8002de6:	f7ff fb37 	bl	8002458 <vec_ctrl_pi_id_iq>
        CYCLE_CNT(7);
 8002dea:	4b52      	ldr	r3, [pc, #328]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df0:	4b52      	ldr	r3, [pc, #328]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	4a51      	ldr	r2, [pc, #324]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002df8:	61d3      	str	r3, [r2, #28]
        RESULT_CHECK_RET_RES(vec_ctrl_ipark(motor)); // !
 8002dfa:	f107 0318 	add.w	r3, r7, #24
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fb87 	bl	8002514 <vec_ctrl_ipark>
 8002e06:	7e3b      	ldrb	r3, [r7, #24]
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <motor_foc_pwm_pulse+0x16c>
 8002e12:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002e16:	4b4a      	ldr	r3, [pc, #296]	@ (8002f40 <motor_foc_pwm_pulse+0x280>)
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f107 0318 	add.w	r3, r7, #24
 8002e22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e26:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e2a:	e07f      	b.n	8002f2c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(8);
 8002e2c:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e32:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4a40      	ldr	r2, [pc, #256]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e3a:	6213      	str	r3, [r2, #32]
        vec_ctrl_svgen(motor);
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	f7ff fbe9 	bl	8002614 <vec_ctrl_svgen>
        CYCLE_CNT(9);
 8002e42:	4b3c      	ldr	r3, [pc, #240]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e48:	4b3c      	ldr	r3, [pc, #240]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e50:	6253      	str	r3, [r2, #36]	@ 0x24
        RESULT_CHECK_RET_RES(vec_ctrl_vref(motor));  // !
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fbf5 	bl	8002648 <vec_ctrl_vref>
 8002e5e:	7c3b      	ldrb	r3, [r7, #16]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <motor_foc_pwm_pulse+0x1c4>
 8002e6a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002e6e:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <motor_foc_pwm_pulse+0x280>)
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e7e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e82:	e053      	b.n	8002f2c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(10);
 8002e84:	4b2b      	ldr	r3, [pc, #172]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e92:	6293      	str	r3, [r2, #40]	@ 0x28
        RESULT_CHECK_RET_RES(vec_ctrl_svpwm(motor));
 8002e94:	f107 0308 	add.w	r3, r7, #8
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fc22 	bl	80026e4 <vec_ctrl_svpwm>
 8002ea0:	7a3b      	ldrb	r3, [r7, #8]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <motor_foc_pwm_pulse+0x206>
 8002eac:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002eb0:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <motor_foc_pwm_pulse+0x280>)
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ec0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002ec4:	e032      	b.n	8002f2c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(11);
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f34 <motor_foc_pwm_pulse+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (motor->pwm_count >= 1000)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002edc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ee0:	d316      	bcc.n	8002f10 <motor_foc_pwm_pulse+0x250>
        motor->pwm_count = 0;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efa:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002f44 <motor_foc_pwm_pulse+0x284>
 8002efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        motor->exti_hall_cnt = 0;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    motor->pwm_count++;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    return RESULT_OK(NULL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
}
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	3738      	adds	r7, #56	@ 0x38
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000590 	.word	0x20000590
 8002f38:	51eb851f 	.word	0x51eb851f
 8002f3c:	20000920 	.word	0x20000920
 8002f40:	20000918 	.word	0x20000918
 8002f44:	43480000 	.word	0x43480000

08002f48 <motor_hall_exti>:
=======
 8002d6e:	e0cd      	b.n	8002f0c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(5);
 8002d70:	4b68      	ldr	r3, [pc, #416]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d76:	4b69      	ldr	r3, [pc, #420]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4a67      	ldr	r2, [pc, #412]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002d7e:	6153      	str	r3, [r2, #20]
        RESULT_CHECK_RET_RES(vec_ctrl_park(motor));
 8002d80:	f107 0320 	add.w	r3, r7, #32
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fb04 	bl	8002394 <vec_ctrl_park>
 8002d8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d90:	f083 0301 	eor.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <motor_foc_pwm_pulse+0x114>
 8002d9a:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 8002d9e:	4b60      	ldr	r3, [pc, #384]	@ (8002f20 <motor_foc_pwm_pulse+0x280>)
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	f107 0320 	add.w	r3, r7, #32
 8002daa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002db2:	e0ab      	b.n	8002f0c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(6);
 8002db4:	4b57      	ldr	r3, [pc, #348]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dba:	4b58      	ldr	r3, [pc, #352]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	4a56      	ldr	r2, [pc, #344]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002dc2:	6193      	str	r3, [r2, #24]
        vec_ctrl_pi_id_iq(motor);
 8002dc4:	6838      	ldr	r0, [r7, #0]
 8002dc6:	f7ff fb37 	bl	8002438 <vec_ctrl_pi_id_iq>
        CYCLE_CNT(7);
 8002dca:	4b52      	ldr	r3, [pc, #328]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd0:	4b52      	ldr	r3, [pc, #328]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	4a51      	ldr	r2, [pc, #324]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002dd8:	61d3      	str	r3, [r2, #28]
        RESULT_CHECK_RET_RES(vec_ctrl_ipark(motor)); // !
 8002dda:	f107 0318 	add.w	r3, r7, #24
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fb87 	bl	80024f4 <vec_ctrl_ipark>
 8002de6:	7e3b      	ldrb	r3, [r7, #24]
 8002de8:	f083 0301 	eor.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <motor_foc_pwm_pulse+0x16c>
 8002df2:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002df6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <motor_foc_pwm_pulse+0x280>)
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f107 0318 	add.w	r3, r7, #24
 8002e02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e06:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e0a:	e07f      	b.n	8002f0c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(8);
 8002e0c:	4b41      	ldr	r3, [pc, #260]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e12:	4b42      	ldr	r3, [pc, #264]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	4a40      	ldr	r2, [pc, #256]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002e1a:	6213      	str	r3, [r2, #32]
        vec_ctrl_svgen(motor);
 8002e1c:	6838      	ldr	r0, [r7, #0]
 8002e1e:	f7ff fbe9 	bl	80025f4 <vec_ctrl_svgen>
        CYCLE_CNT(9);
 8002e22:	4b3c      	ldr	r3, [pc, #240]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e28:	4b3c      	ldr	r3, [pc, #240]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002e30:	6253      	str	r3, [r2, #36]	@ 0x24
        RESULT_CHECK_RET_RES(vec_ctrl_vref(motor));  // !
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	6839      	ldr	r1, [r7, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fbf5 	bl	8002628 <vec_ctrl_vref>
 8002e3e:	7c3b      	ldrb	r3, [r7, #16]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <motor_foc_pwm_pulse+0x1c4>
 8002e4a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002e4e:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <motor_foc_pwm_pulse+0x280>)
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	461a      	mov	r2, r3
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e62:	e053      	b.n	8002f0c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(10);
 8002e64:	4b2b      	ldr	r3, [pc, #172]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	4a2a      	ldr	r2, [pc, #168]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002e72:	6293      	str	r3, [r2, #40]	@ 0x28
        RESULT_CHECK_RET_RES(vec_ctrl_svpwm(motor));
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fc22 	bl	80026c4 <vec_ctrl_svpwm>
 8002e80:	7a3b      	ldrb	r3, [r7, #8]
 8002e82:	f083 0301 	eor.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <motor_foc_pwm_pulse+0x206>
 8002e8c:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002e90:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <motor_foc_pwm_pulse+0x280>)
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ea0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002ea4:	e032      	b.n	8002f0c <motor_foc_pwm_pulse+0x26c>
        CYCLE_CNT(11);
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <motor_foc_pwm_pulse+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f1c <motor_foc_pwm_pulse+0x27c>)
 8002eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (motor->pwm_count >= 1000)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ec0:	d316      	bcc.n	8002ef0 <motor_foc_pwm_pulse+0x250>
        motor->pwm_count = 0;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eda:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002f24 <motor_foc_pwm_pulse+0x284>
 8002ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
        motor->exti_hall_cnt = 0;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    motor->pwm_count++;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    return RESULT_OK(NULL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	605a      	str	r2, [r3, #4]
}
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	3738      	adds	r7, #56	@ 0x38
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200005c8 	.word	0x200005c8
 8002f18:	51eb851f 	.word	0x51eb851f
 8002f1c:	2000095c 	.word	0x2000095c
 8002f20:	20000954 	.word	0x20000954
 8002f24:	43480000 	.word	0x43480000

08002f28 <motor_hall_exti>:
>>>>>>> origin/main
#include "motor/ctrl_foc.h"
#include "analog/adc1/main.h"
#include "motor/trigonometric.h"

void motor_hall_exti(MotorParameter *motor)
{
<<<<<<< HEAD
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
    motor->exti_hall_cnt++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    uint8_t hall_last = motor->exti_hall_curt;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002f68:	77bb      	strb	r3, [r7, #30]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	8a12      	ldrh	r2, [r2, #16]
 8002f74:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <motor_hall_exti+0x36>
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	e000      	b.n	8002f80 <motor_hall_exti+0x38>
 8002f7e:	2200      	movs	r2, #0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	8a49      	ldrh	r1, [r1, #18]
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <motor_hall_exti+0x4c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e000      	b.n	8002f96 <motor_hall_exti+0x4e>
 8002f94:	2300      	movs	r3, #0
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	6912      	ldr	r2, [r2, #16]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	8a89      	ldrh	r1, [r1, #20]
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	d001      	beq.n	8002fae <motor_hall_exti+0x66>
 8002faa:	2201      	movs	r2, #1
 8002fac:	e000      	b.n	8002fb0 <motor_hall_exti+0x68>
 8002fae:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	777b      	strb	r3, [r7, #29]
    motor->exti_hall_last = hall_last;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	7fba      	ldrb	r2, [r7, #30]
 8002fb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    motor->exti_hall_curt = hall_current;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7f7a      	ldrb	r2, [r7, #29]
 8002fc0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hall_current == 0 || hall_current == 7) 
 8002fc4:	7f7b      	ldrb	r3, [r7, #29]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <motor_hall_exti+0x88>
 8002fca:	7f7b      	ldrb	r3, [r7, #29]
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	d12e      	bne.n	800302e <motor_hall_exti+0xe6>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e027      	b.n	8003026 <motor_hall_exti+0xde>
        {
            HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6998      	ldr	r0, [r3, #24]
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	3306      	adds	r3, #6
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f004 fea6 	bl	8007d38 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6998      	ldr	r0, [r3, #24]
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	3306      	adds	r3, #6
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f005 fea3 	bl	8008d48 <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8003002:	7ffa      	ldrb	r2, [r7, #31]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	320a      	adds	r2, #10
 8003008:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800300c:	7ffb      	ldrb	r3, [r7, #31]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	3318      	adds	r3, #24
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	889b      	ldrh	r3, [r3, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	4619      	mov	r1, r3
 800301c:	f003 fa4a 	bl	80064b4 <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	3301      	adds	r3, #1
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d9d4      	bls.n	8002fd6 <motor_hall_exti+0x8e>
        }
        return;
 800302c:	e025      	b.n	800307a <motor_hall_exti+0x132>
    }
    RESULT_CHECK_RET_VOID(motor_hall_to_angle(hall_current, &motor->exti_hall_angal));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	7f79      	ldrb	r1, [r7, #29]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fcf8 	bl	8001a30 <motor_hall_to_angle>
 8003040:	7d3b      	ldrb	r3, [r7, #20]
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <motor_hall_exti+0x10e>
 800304c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <motor_hall_exti+0x138>)
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e011      	b.n	800307a <motor_hall_exti+0x132>
    switch (motor->mode)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <motor_hall_exti+0x11e>
 8003060:	2b01      	cmp	r3, #1
 8003062:	d004      	beq.n	800306e <motor_hall_exti+0x126>
 8003064:	e009      	b.n	800307a <motor_hall_exti+0x132>
=======
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
    motor->exti_hall_cnt++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    uint8_t hall_last = motor->exti_hall_curt;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002f48:	77bb      	strb	r3, [r7, #30]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	8992      	ldrh	r2, [r2, #12]
 8002f54:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <motor_hall_exti+0x36>
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	e000      	b.n	8002f60 <motor_hall_exti+0x38>
 8002f5e:	2200      	movs	r2, #0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	89c9      	ldrh	r1, [r1, #14]
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <motor_hall_exti+0x4c>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e000      	b.n	8002f76 <motor_hall_exti+0x4e>
 8002f74:	2300      	movs	r3, #0
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6892      	ldr	r2, [r2, #8]
 8002f7e:	6912      	ldr	r2, [r2, #16]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	8a09      	ldrh	r1, [r1, #16]
 8002f84:	400a      	ands	r2, r1
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	d001      	beq.n	8002f8e <motor_hall_exti+0x66>
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	e000      	b.n	8002f90 <motor_hall_exti+0x68>
 8002f8e:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002f90:	4313      	orrs	r3, r2
 8002f92:	777b      	strb	r3, [r7, #29]
    motor->exti_hall_last = hall_last;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	7fba      	ldrb	r2, [r7, #30]
 8002f98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    motor->exti_hall_curt = hall_current;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	7f7a      	ldrb	r2, [r7, #29]
 8002fa0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    if (hall_current == 0 || hall_current == 7) 
 8002fa4:	7f7b      	ldrb	r3, [r7, #29]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <motor_hall_exti+0x88>
 8002faa:	7f7b      	ldrb	r3, [r7, #29]
 8002fac:	2b07      	cmp	r3, #7
 8002fae:	d12c      	bne.n	800300a <motor_hall_exti+0xe2>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e025      	b.n	8003002 <motor_hall_exti+0xda>
        {
            HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6958      	ldr	r0, [r3, #20]
 8002fba:	7ffa      	ldrb	r2, [r7, #31]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3206      	adds	r2, #6
 8002fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f004 fea5 	bl	8007d14 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6958      	ldr	r0, [r3, #20]
 8002fce:	7ffa      	ldrb	r2, [r7, #31]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3206      	adds	r2, #6
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f005 fea3 	bl	8008d24 <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	6858      	ldr	r0, [r3, #4]
 8002fea:	7ffa      	ldrb	r2, [r7, #31]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3218      	adds	r2, #24
 8002ff0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f003 fa4a 	bl	8006490 <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
 8002ffe:	3301      	adds	r3, #1
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	7ffb      	ldrb	r3, [r7, #31]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d9d6      	bls.n	8002fb6 <motor_hall_exti+0x8e>
        }
        return;
 8003008:	e025      	b.n	8003056 <motor_hall_exti+0x12e>
    }
    RESULT_CHECK_RET_VOID(motor_hall_to_angle(hall_current, &motor->exti_hall_angal));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	7f79      	ldrb	r1, [r7, #29]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fd4c 	bl	8001ab4 <motor_hall_to_angle>
 800301c:	7d3b      	ldrb	r3, [r7, #20]
 800301e:	f083 0301 	eor.w	r3, r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <motor_hall_exti+0x10a>
 8003028:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <motor_hall_exti+0x134>)
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e011      	b.n	8003056 <motor_hall_exti+0x12e>
    switch (motor->mode)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <motor_hall_exti+0x11a>
 800303c:	2b01      	cmp	r3, #1
 800303e:	d004      	beq.n	800304a <motor_hall_exti+0x122>
 8003040:	e009      	b.n	8003056 <motor_hall_exti+0x12e>
>>>>>>> origin/main
    {
        case MOTOR_CTRL_120:
        {
            motor_120_hall_update(motor);
<<<<<<< HEAD
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7fe fe22 	bl	8001cb0 <motor_120_hall_update>
            break;
 800306c:	e005      	b.n	800307a <motor_hall_exti+0x132>
=======
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7fe fe76 	bl	8001d34 <motor_120_hall_update>
            break;
 8003048:	e005      	b.n	8003056 <motor_hall_exti+0x12e>
>>>>>>> origin/main
        }
        case MOTOR_CTRL_FOC:
        {
            motor_foc_hall_update(motor);
<<<<<<< HEAD
 800306e:	463b      	mov	r3, r7
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe ffbc 	bl	8001ff0 <motor_foc_hall_update>
            break;
 8003078:	bf00      	nop
        }
    }
}
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000918 	.word	0x20000918

08003084 <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
    switch (motor->mode)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <motor_pwm_pulse+0x24>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d000      	beq.n	800309c <motor_pwm_pulse+0x18>
=======
 800304a:	463b      	mov	r3, r7
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fffe 	bl	8002050 <motor_foc_hall_update>
            break;
 8003054:	bf00      	nop
        }
    }
}
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000954 	.word	0x20000954

08003060 <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
    switch (motor->mode)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <motor_pwm_pulse+0x24>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d000      	beq.n	8003078 <motor_pwm_pulse+0x18>
>>>>>>> origin/main
        {
            motor_foc_pwm_pulse(motor);
            break;
        }
    }
}
<<<<<<< HEAD
 800309a:	e006      	b.n	80030aa <motor_pwm_pulse+0x26>
            motor_foc_pwm_pulse(motor);
 800309c:	463b      	mov	r3, r7
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fe0d 	bl	8002cc0 <motor_foc_pwm_pulse>
            break;
 80030a6:	e000      	b.n	80030aa <motor_pwm_pulse+0x26>
            break;
 80030a8:	bf00      	nop
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <StartMotorTask>:

void StartMotorTask(void *argument)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
    motor_h.pi_speed.Ref = 80.0f;
 80030bc:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <StartMotorTask+0x5c>)
 80030be:	4a15      	ldr	r2, [pc, #84]	@ (8003114 <StartMotorTask+0x60>)
 80030c0:	679a      	str	r2, [r3, #120]	@ 0x78
    motor_h.pwm_duty_u = 1.0f;
 80030c2:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <StartMotorTask+0x5c>)
 80030c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80030c8:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    // motor_h.reverse = true;
    HAL_TIM_Base_Start_IT(motor_h.const_h.htimx);
 80030cc:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <StartMotorTask+0x5c>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 fc19 	bl	8007908 <HAL_TIM_Base_Start_IT>
    
    motor_h.mode = MOTOR_CTRL_120;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <StartMotorTask+0x5c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    motor_hall_exti(&motor_h);
 80030de:	480c      	ldr	r0, [pc, #48]	@ (8003110 <StartMotorTask+0x5c>)
 80030e0:	f7ff ff32 	bl	8002f48 <motor_hall_exti>
    osDelay(3000);
 80030e4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030e8:	f006 fe9a 	bl	8009e20 <osDelay>
    motor_120_ctrl_stop(&motor_h);
 80030ec:	4808      	ldr	r0, [pc, #32]	@ (8003110 <StartMotorTask+0x5c>)
 80030ee:	f7fe ff0d 	bl	8001f0c <motor_120_ctrl_stop>

    motor_h.mode = MOTOR_CTRL_FOC;
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <StartMotorTask+0x5c>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    motor_foc_tim_setup(&motor_h);
 80030fa:	463b      	mov	r3, r7
 80030fc:	4904      	ldr	r1, [pc, #16]	@ (8003110 <StartMotorTask+0x5c>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ff2c 	bl	8001f5c <motor_foc_tim_setup>
    motor_hall_exti(&motor_h);
 8003104:	4802      	ldr	r0, [pc, #8]	@ (8003110 <StartMotorTask+0x5c>)
 8003106:	f7ff ff1f 	bl	8002f48 <motor_hall_exti>

    StopTask();
 800310a:	f006 fe82 	bl	8009e12 <osThreadExit>
 800310e:	bf00      	nop
 8003110:	20000014 	.word	0x20000014
 8003114:	42a00000 	.word	0x42a00000

08003118 <PARK_run>:
=======
 8003076:	e006      	b.n	8003086 <motor_pwm_pulse+0x26>
            motor_foc_pwm_pulse(motor);
 8003078:	463b      	mov	r3, r7
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fe0f 	bl	8002ca0 <motor_foc_pwm_pulse>
            break;
 8003082:	e000      	b.n	8003086 <motor_pwm_pulse+0x26>
            break;
 8003084:	bf00      	nop
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <StartMotorTask>:

void StartMotorTask(void *argument)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
    motor_h.pi_speed.Ref = 80.0f;
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <StartMotorTask+0x5c>)
 800309a:	4a15      	ldr	r2, [pc, #84]	@ (80030f0 <StartMotorTask+0x60>)
 800309c:	675a      	str	r2, [r3, #116]	@ 0x74
    motor_h.pwm_duty_u = 1.0f;
 800309e:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <StartMotorTask+0x5c>)
 80030a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80030a4:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    // motor_h.reverse = true;
    HAL_TIM_Base_Start_IT(motor_h.const_h.htimx);
 80030a8:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <StartMotorTask+0x5c>)
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 fc19 	bl	80078e4 <HAL_TIM_Base_Start_IT>
    
    motor_h.mode = MOTOR_CTRL_120;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <StartMotorTask+0x5c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    motor_hall_exti(&motor_h);
 80030ba:	480c      	ldr	r0, [pc, #48]	@ (80030ec <StartMotorTask+0x5c>)
 80030bc:	f7ff ff34 	bl	8002f28 <motor_hall_exti>
    osDelay(3000);
 80030c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030c4:	f006 fe9a 	bl	8009dfc <osDelay>
    motor_120_ctrl_stop(&motor_h);
 80030c8:	4808      	ldr	r0, [pc, #32]	@ (80030ec <StartMotorTask+0x5c>)
 80030ca:	f7fe ff51 	bl	8001f70 <motor_120_ctrl_stop>

    motor_h.mode = MOTOR_CTRL_FOC;
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <StartMotorTask+0x5c>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    motor_foc_tim_setup(&motor_h);
 80030d6:	463b      	mov	r3, r7
 80030d8:	4904      	ldr	r1, [pc, #16]	@ (80030ec <StartMotorTask+0x5c>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe ff6e 	bl	8001fbc <motor_foc_tim_setup>
    motor_hall_exti(&motor_h);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <StartMotorTask+0x5c>)
 80030e2:	f7ff ff21 	bl	8002f28 <motor_hall_exti>

    StopTask();
 80030e6:	f006 fe82 	bl	8009dee <osThreadExit>
 80030ea:	bf00      	nop
 80030ec:	20000050 	.word	0x20000050
 80030f0:	42a00000 	.word	0x42a00000

080030f4 <PARK_run>:
>>>>>>> origin/main
#include "motor/park.h"

inline void PARK_run(volatile PARK *park)
{
<<<<<<< HEAD
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed93 7a00 	vldr	s14, [r3]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edd3 7a06 	vldr	s15, [r3, #24]
 800312c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edd3 6a01 	vldr	s13, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	edd3 7a05 	vldr	s15, [r3, #20]
 800313c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 7a06 	vldr	s15, [r3, #24]
 8003156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	edd3 6a00 	vldr	s13, [r3]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	edd3 7a05 	vldr	s15, [r3, #20]
 8003166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800316a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <IPARK_run>:

inline void IPARK_run(volatile IPARK *ipark)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	ed93 7a03 	vldr	s14, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 7a06 	vldr	s15, [r3, #24]
 8003194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edd3 6a04 	vldr	s13, [r3, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80031a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80031be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80031ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <PI_run>:
=======
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	edd3 7a06 	vldr	s15, [r3, #24]
 8003108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	edd3 7a05 	vldr	s15, [r3, #20]
 8003118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	ed93 7a01 	vldr	s14, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	edd3 6a00 	vldr	s13, [r3]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <IPARK_run>:

inline void IPARK_run(volatile IPARK *ipark)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	ed93 7a03 	vldr	s14, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edd3 6a04 	vldr	s13, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	ed93 7a04 	vldr	s14, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	edd3 7a06 	vldr	s15, [r3, #24]
 800319a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80031aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <PI_run>:
>>>>>>> origin/main
#include "motor/pi.h"
#include "motor/basic.h"

void PI_run(volatile PI_CTRL *pi)
{
<<<<<<< HEAD
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	edd3 6a00 	vldr	s13, [r3]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003202:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	ed93 7a02 	vldr	s14, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800321c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d110      	bne.n	8003248 <PI_run+0x60>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	ed93 7a04 	vldr	s14, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800323c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	edc3 7a08 	vstr	s15, [r3, #32]
 8003246:	e003      	b.n	8003250 <PI_run+0x68>
=======
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 6a00 	vldr	s13, [r3]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 7a01 	vldr	s15, [r3, #4]
 80031de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80031f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d110      	bne.n	8003224 <PI_run+0x60>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	ed93 7a04 	vldr	s14, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	edd3 7a07 	vldr	s15, [r3, #28]
 800320e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edc3 7a08 	vstr	s15, [r3, #32]
 8003222:	e003      	b.n	800322c <PI_run+0x68>
>>>>>>> origin/main
    }
    else
    {
        pi->ui = pi->i1;
<<<<<<< HEAD
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1a      	ldr	r2, [r3, #32]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28
    pi->v1 = pi->up + pi->ui;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	ed93 7a07 	vldr	s14, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	edd3 7a08 	vldr	s15, [r3, #32]
 8003264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = clampf(pi->v1, pi->Umin, pi->Umax);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	ed93 7a06 	vldr	s14, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003280:	eeb0 1a66 	vmov.f32	s2, s13
 8003284:	eef0 0a47 	vmov.f32	s1, s14
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	f7fe fc22 	bl	8001ad4 <clampf>
 8003290:	eef0 7a40 	vmov.f32	s15, s0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	edc3 7a02 	vstr	s15, [r3, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	ed93 7a02 	vldr	s14, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80032a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d102      	bne.n	80032b6 <PI_run+0xce>
 80032b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032b4:	e001      	b.n	80032ba <PI_run+0xd2>
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <SVGEN_run>:
=======
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
    pi->v1 = pi->up + pi->ui;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	ed93 7a07 	vldr	s14, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = clampf(pi->v1, pi->Umin, pi->Umax);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	ed93 7a06 	vldr	s14, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	edd3 6a05 	vldr	s13, [r3, #20]
 800325c:	eeb0 1a66 	vmov.f32	s2, s13
 8003260:	eef0 0a47 	vmov.f32	s1, s14
 8003264:	eeb0 0a67 	vmov.f32	s0, s15
 8003268:	f7fe fc76 	bl	8001b58 <clampf>
 800326c:	eef0 7a40 	vmov.f32	s15, s0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edc3 7a02 	vstr	s15, [r3, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	ed93 7a02 	vldr	s14, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003282:	eeb4 7a67 	vcmp.f32	s14, s15
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	d102      	bne.n	8003292 <PI_run+0xce>
 800328c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003290:	e001      	b.n	8003296 <PI_run+0xd2>
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <SVGEN_run>:
>>>>>>> origin/main
#include "motor/svgendq.h"

inline void SVGEN_run(volatile SVGENDQ *svgq)
{
<<<<<<< HEAD
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    float32_t t1 = svgq->Ubeta * 0.5f;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032de:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003394 <SVGEN_run+0xcc>
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	edc7 7a02 	vstr	s15, [r7, #8]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 80032fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003300:	edd7 7a03 	vldr	s15, [r7, #12]
 8003304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 800330e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003312:	eeb1 7a67 	vneg.f32	s14, s15
 8003316:	edd7 7a02 	vldr	s15, [r7, #8]
 800331a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003338:	dd06      	ble.n	8003348 <SVGEN_run+0x80>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8a9b      	ldrh	r3, [r3, #20]
 800333e:	b29b      	uxth	r3, r3
 8003340:	3302      	adds	r3, #2
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edd3 7a03 	vldr	s15, [r3, #12]
 800334e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	dd06      	ble.n	8003366 <SVGEN_run+0x9e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8a9b      	ldrh	r3, [r3, #20]
 800335c:	b29b      	uxth	r3, r3
 800335e:	3304      	adds	r3, #4
 8003360:	b29a      	uxth	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	edd3 7a04 	vldr	s15, [r3, #16]
 800336c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dc00      	bgt.n	8003378 <SVGEN_run+0xb0>
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
}
 8003376:	e006      	b.n	8003386 <SVGEN_run+0xbe>
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8a9b      	ldrh	r3, [r3, #20]
 800337c:	b29b      	uxth	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	829a      	strh	r2, [r3, #20]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	3f5db3d7 	.word	0x3f5db3d7

08003398 <trigo_sin_cosf>:
=======
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    float32_t t1 = svgq->Ubeta * 0.5f;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ba:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003370 <SVGEN_run+0xcc>
 80032c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032cc:	edc7 7a02 	vstr	s15, [r7, #8]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 80032d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80032dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 80032ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ee:	eeb1 7a67 	vneg.f32	s14, s15
 80032f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edd3 7a02 	vldr	s15, [r3, #8]
 800330c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	dd06      	ble.n	8003324 <SVGEN_run+0x80>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8a9b      	ldrh	r3, [r3, #20]
 800331a:	b29b      	uxth	r3, r3
 800331c:	3302      	adds	r3, #2
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	edd3 7a03 	vldr	s15, [r3, #12]
 800332a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003332:	dd06      	ble.n	8003342 <SVGEN_run+0x9e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8a9b      	ldrh	r3, [r3, #20]
 8003338:	b29b      	uxth	r3, r3
 800333a:	3304      	adds	r3, #4
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edd3 7a04 	vldr	s15, [r3, #16]
 8003348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	dc00      	bgt.n	8003354 <SVGEN_run+0xb0>
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
}
 8003352:	e006      	b.n	8003362 <SVGEN_run+0xbe>
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8a9b      	ldrh	r3, [r3, #20]
 8003358:	b29b      	uxth	r3, r3
 800335a:	3301      	adds	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	829a      	strh	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	3f5db3d7 	.word	0x3f5db3d7

08003374 <trigo_sin_cosf>:
>>>>>>> origin/main
    .OutSize    = CORDIC_OUTSIZE_32BITS,
};
static CORDIC_ConfigTypeDef *cordic_currunt;

Result trigo_sin_cosf(float32_t theta, float32_t *sin, float32_t *cos)
{
<<<<<<< HEAD
 8003398:	b580      	push	{r7, lr}
 800339a:	b092      	sub	sp, #72	@ 0x48
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80033a4:	6079      	str	r1, [r7, #4]
 80033a6:	603a      	str	r2, [r7, #0]
    if (cordic_currunt != &cordic_cfg_sin_cos)
 80033a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003494 <trigo_sin_cosf+0xfc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003498 <trigo_sin_cosf+0x100>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01a      	beq.n	80033e8 <trigo_sin_cosf+0x50>
    {
        cordic_currunt = &cordic_cfg_sin_cos;
 80033b2:	4b38      	ldr	r3, [pc, #224]	@ (8003494 <trigo_sin_cosf+0xfc>)
 80033b4:	4a38      	ldr	r2, [pc, #224]	@ (8003498 <trigo_sin_cosf+0x100>)
 80033b6:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80033b8:	4b36      	ldr	r3, [pc, #216]	@ (8003494 <trigo_sin_cosf+0xfc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4619      	mov	r1, r3
 80033be:	4837      	ldr	r0, [pc, #220]	@ (800349c <trigo_sin_cosf+0x104>)
 80033c0:	f001 fd8a 	bl	8004ed8 <HAL_CORDIC_Configure>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80033ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <trigo_sin_cosf+0x50>
 80033d2:	f997 103f 	ldrsb.w	r1, [r7, #63]	@ 0x3f
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	461a      	mov	r2, r3
 80033da:	2300      	movs	r3, #0
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	6053      	str	r3, [r2, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	460a      	mov	r2, r1
 80033e4:	711a      	strb	r2, [r3, #4]
 80033e6:	e050      	b.n	800348a <trigo_sin_cosf+0xf2>
    }
    int32_t in[2];
    in[0] = (int32_t)((wrap_m1_1pi(theta) / PI) * 2147483648.0f);
 80033e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80033ec:	f7fe fbd6 	bl	8001b9c <wrap_m1_1pi>
 80033f0:	eeb0 7a40 	vmov.f32	s14, s0
 80033f4:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80034a0 <trigo_sin_cosf+0x108>
 80033f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033fc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80034a4 <trigo_sin_cosf+0x10c>
 8003400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003408:	ee17 3a90 	vmov	r3, s15
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
    in[1] = 0x7FFFFFFF;
 800340e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003412:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t out[2];
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, out, 1, HAL_MAX_DELAY));
 8003414:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003418:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2301      	movs	r3, #1
 8003424:	481d      	ldr	r0, [pc, #116]	@ (800349c <trigo_sin_cosf+0x104>)
 8003426:	f001 fd93 	bl	8004f50 <HAL_CORDIC_Calculate>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003430:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <trigo_sin_cosf+0xb6>
 8003438:	f997 103e 	ldrsb.w	r1, [r7, #62]	@ 0x3e
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	6053      	str	r3, [r2, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	460a      	mov	r2, r1
 800344a:	711a      	strb	r2, [r3, #4]
 800344c:	e01d      	b.n	800348a <trigo_sin_cosf+0xf2>
    *sin = (float32_t)out[0] / 2147483648.0f;
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003458:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80034a4 <trigo_sin_cosf+0x10c>
 800345c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	edc3 7a00 	vstr	s15, [r3]
    *cos = (float32_t)out[1] / 2147483648.0f;
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003470:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80034a4 <trigo_sin_cosf+0x10c>
 8003474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
}
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	3740      	adds	r7, #64	@ 0x40
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000960 	.word	0x20000960
 8003498:	200001ac 	.word	0x200001ac
 800349c:	20000348 	.word	0x20000348
 80034a0:	40490fdb 	.word	0x40490fdb
 80034a4:	4f000000 	.word	0x4f000000

080034a8 <trigo_atan>:

Result trigo_atan(float32_t x, float32_t y, float32_t *theta)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b098      	sub	sp, #96	@ 0x60
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80034b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
    if (cordic_currunt != &cordic_cfg_atan)
 80034ba:	4b59      	ldr	r3, [pc, #356]	@ (8003620 <trigo_atan+0x178>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a59      	ldr	r2, [pc, #356]	@ (8003624 <trigo_atan+0x17c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01a      	beq.n	80034fa <trigo_atan+0x52>
    {
        cordic_currunt = &cordic_cfg_atan;
 80034c4:	4b56      	ldr	r3, [pc, #344]	@ (8003620 <trigo_atan+0x178>)
 80034c6:	4a57      	ldr	r2, [pc, #348]	@ (8003624 <trigo_atan+0x17c>)
 80034c8:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80034ca:	4b55      	ldr	r3, [pc, #340]	@ (8003620 <trigo_atan+0x178>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4855      	ldr	r0, [pc, #340]	@ (8003628 <trigo_atan+0x180>)
 80034d2:	f001 fd01 	bl	8004ed8 <HAL_CORDIC_Configure>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80034dc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <trigo_atan+0x52>
 80034e4:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	6053      	str	r3, [r2, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	460a      	mov	r2, r1
 80034f6:	711a      	strb	r2, [r3, #4]
 80034f8:	e08e      	b.n	8003618 <trigo_atan+0x170>
    }
    float32_t ax = fast_fabsf(x);
 80034fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80034fe:	f7fe fb9f 	bl	8001c40 <fast_fabsf>
 8003502:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float32_t ay = fast_fabsf(y);
 8003506:	ed97 0a01 	vldr	s0, [r7, #4]
 800350a:	f7fe fb99 	bl	8001c40 <fast_fabsf>
 800350e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float32_t norm = (ax > ay) ? ax : ay;
 8003512:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003516:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800351a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	dd01      	ble.n	8003528 <trigo_atan+0x80>
 8003524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003526:	e000      	b.n	800352a <trigo_atan+0x82>
 8003528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (norm == 0.0f) return RESULT_ERROR(RES_ERR_DIV_0);
 800352c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	d108      	bne.n	800354c <trigo_atan+0xa4>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	461a      	mov	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	6053      	str	r3, [r2, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	220b      	movs	r2, #11
 8003548:	711a      	strb	r2, [r3, #4]
 800354a:	e065      	b.n	8003618 <trigo_atan+0x170>
    x /= norm;
 800354c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003550:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003558:	edc7 7a02 	vstr	s15, [r7, #8]
    y /= norm;
 800355c:	edd7 6a01 	vldr	s13, [r7, #4]
 8003560:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003568:	edc7 7a01 	vstr	s15, [r7, #4]
    int32_t in[2], out;
    in[0] = (int32_t)(x * 2147483648.0f);  
 800356c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003570:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800362c <trigo_atan+0x184>
 8003574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800357c:	ee17 3a90 	vmov	r3, s15
 8003580:	63bb      	str	r3, [r7, #56]	@ 0x38
    in[1] = (int32_t)(y * 2147483648.0f);
 8003582:	edd7 7a01 	vldr	s15, [r7, #4]
 8003586:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800362c <trigo_atan+0x184>
 800358a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800358e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003592:	ee17 3a90 	vmov	r3, s15
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, &out, 1, HAL_MAX_DELAY));
 8003598:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800359c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2301      	movs	r3, #1
 80035a8:	481f      	ldr	r0, [pc, #124]	@ (8003628 <trigo_atan+0x180>)
 80035aa:	f001 fcd1 	bl	8004f50 <HAL_CORDIC_Calculate>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <trigo_atan+0x12a>
 80035bc:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	461a      	mov	r2, r3
 80035c4:	2300      	movs	r3, #0
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	6053      	str	r3, [r2, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	460a      	mov	r2, r1
 80035ce:	711a      	strb	r2, [r3, #4]
 80035d0:	e022      	b.n	8003618 <trigo_atan+0x170>
    float32_t angle = (float32_t)out / 2147483648.0f; // [-π, π)
 80035d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035dc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800362c <trigo_atan+0x184>
 80035e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035e4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (angle < 0) angle += MUL_2_PI;
 80035e8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80035ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f4:	d507      	bpl.n	8003606 <trigo_atan+0x15e>
 80035f6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80035fa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003630 <trigo_atan+0x188>
 80035fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003602:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    *theta = angle;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800360a:	601a      	str	r2, [r3, #0]
    return RESULT_OK(NULL);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
}
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	3758      	adds	r7, #88	@ 0x58
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000960 	.word	0x20000960
 8003624:	200001c8 	.word	0x200001c8
 8003628:	20000348 	.word	0x20000348
 800362c:	4f000000 	.word	0x4f000000
 8003630:	40c90fdb 	.word	0x40c90fdb

08003634 <Reset_Handler>:
=======
 8003374:	b580      	push	{r7, lr}
 8003376:	b092      	sub	sp, #72	@ 0x48
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003380:	6079      	str	r1, [r7, #4]
 8003382:	603a      	str	r2, [r7, #0]
    if (cordic_currunt != &cordic_cfg_sin_cos)
 8003384:	4b3a      	ldr	r3, [pc, #232]	@ (8003470 <trigo_sin_cosf+0xfc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3a      	ldr	r2, [pc, #232]	@ (8003474 <trigo_sin_cosf+0x100>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01a      	beq.n	80033c4 <trigo_sin_cosf+0x50>
    {
        cordic_currunt = &cordic_cfg_sin_cos;
 800338e:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <trigo_sin_cosf+0xfc>)
 8003390:	4a38      	ldr	r2, [pc, #224]	@ (8003474 <trigo_sin_cosf+0x100>)
 8003392:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 8003394:	4b36      	ldr	r3, [pc, #216]	@ (8003470 <trigo_sin_cosf+0xfc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	4837      	ldr	r0, [pc, #220]	@ (8003478 <trigo_sin_cosf+0x104>)
 800339c:	f001 fd8a 	bl	8004eb4 <HAL_CORDIC_Configure>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80033a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <trigo_sin_cosf+0x50>
 80033ae:	f997 103f 	ldrsb.w	r1, [r7, #63]	@ 0x3f
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	461a      	mov	r2, r3
 80033b6:	2300      	movs	r3, #0
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	6053      	str	r3, [r2, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	460a      	mov	r2, r1
 80033c0:	711a      	strb	r2, [r3, #4]
 80033c2:	e050      	b.n	8003466 <trigo_sin_cosf+0xf2>
    }
    int32_t in[2];
    in[0] = (int32_t)((wrap_m1_1pi(theta) / PI) * 2147483648.0f);
 80033c4:	ed97 0a02 	vldr	s0, [r7, #8]
 80033c8:	f7fe fc2a 	bl	8001c20 <wrap_m1_1pi>
 80033cc:	eeb0 7a40 	vmov.f32	s14, s0
 80033d0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800347c <trigo_sin_cosf+0x108>
 80033d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003480 <trigo_sin_cosf+0x10c>
 80033dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e4:	ee17 3a90 	vmov	r3, s15
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
    in[1] = 0x7FFFFFFF;
 80033ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t out[2];
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, out, 1, HAL_MAX_DELAY));
 80033f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80033f4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2301      	movs	r3, #1
 8003400:	481d      	ldr	r0, [pc, #116]	@ (8003478 <trigo_sin_cosf+0x104>)
 8003402:	f001 fd93 	bl	8004f2c <HAL_CORDIC_Calculate>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800340c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <trigo_sin_cosf+0xb6>
 8003414:	f997 103e 	ldrsb.w	r1, [r7, #62]	@ 0x3e
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	2300      	movs	r3, #0
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	6053      	str	r3, [r2, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	460a      	mov	r2, r1
 8003426:	711a      	strb	r2, [r3, #4]
 8003428:	e01d      	b.n	8003466 <trigo_sin_cosf+0xf2>
    *sin = (float32_t)out[0] / 2147483648.0f;
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003434:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003480 <trigo_sin_cosf+0x10c>
 8003438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	edc3 7a00 	vstr	s15, [r3]
    *cos = (float32_t)out[1] / 2147483648.0f;
 8003442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800344c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003480 <trigo_sin_cosf+0x10c>
 8003450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	605a      	str	r2, [r3, #4]
}
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	3740      	adds	r7, #64	@ 0x40
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000099c 	.word	0x2000099c
 8003474:	200001e4 	.word	0x200001e4
 8003478:	20000380 	.word	0x20000380
 800347c:	40490fdb 	.word	0x40490fdb
 8003480:	4f000000 	.word	0x4f000000

08003484 <trigo_atan>:

Result trigo_atan(float32_t x, float32_t y, float32_t *theta)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b098      	sub	sp, #96	@ 0x60
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003490:	edc7 0a01 	vstr	s1, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
    if (cordic_currunt != &cordic_cfg_atan)
 8003496:	4b59      	ldr	r3, [pc, #356]	@ (80035fc <trigo_atan+0x178>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a59      	ldr	r2, [pc, #356]	@ (8003600 <trigo_atan+0x17c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d01a      	beq.n	80034d6 <trigo_atan+0x52>
    {
        cordic_currunt = &cordic_cfg_atan;
 80034a0:	4b56      	ldr	r3, [pc, #344]	@ (80035fc <trigo_atan+0x178>)
 80034a2:	4a57      	ldr	r2, [pc, #348]	@ (8003600 <trigo_atan+0x17c>)
 80034a4:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80034a6:	4b55      	ldr	r3, [pc, #340]	@ (80035fc <trigo_atan+0x178>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4855      	ldr	r0, [pc, #340]	@ (8003604 <trigo_atan+0x180>)
 80034ae:	f001 fd01 	bl	8004eb4 <HAL_CORDIC_Configure>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80034b8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <trigo_atan+0x52>
 80034c0:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	2300      	movs	r3, #0
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	6053      	str	r3, [r2, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	460a      	mov	r2, r1
 80034d2:	711a      	strb	r2, [r3, #4]
 80034d4:	e08e      	b.n	80035f4 <trigo_atan+0x170>
    }
    float32_t ax = fast_fabsf(x);
 80034d6:	ed97 0a02 	vldr	s0, [r7, #8]
 80034da:	f7fe fbf3 	bl	8001cc4 <fast_fabsf>
 80034de:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float32_t ay = fast_fabsf(y);
 80034e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80034e6:	f7fe fbed 	bl	8001cc4 <fast_fabsf>
 80034ea:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float32_t norm = (ax > ay) ? ax : ay;
 80034ee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80034f2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80034f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	dd01      	ble.n	8003504 <trigo_atan+0x80>
 8003500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003502:	e000      	b.n	8003506 <trigo_atan+0x82>
 8003504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003506:	647b      	str	r3, [r7, #68]	@ 0x44
    if (norm == 0.0f) return RESULT_ERROR(RES_ERR_DIV_0);
 8003508:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800350c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d108      	bne.n	8003528 <trigo_atan+0xa4>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	2300      	movs	r3, #0
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	6053      	str	r3, [r2, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	220b      	movs	r2, #11
 8003524:	711a      	strb	r2, [r3, #4]
 8003526:	e065      	b.n	80035f4 <trigo_atan+0x170>
    x /= norm;
 8003528:	edd7 6a02 	vldr	s13, [r7, #8]
 800352c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003534:	edc7 7a02 	vstr	s15, [r7, #8]
    y /= norm;
 8003538:	edd7 6a01 	vldr	s13, [r7, #4]
 800353c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003544:	edc7 7a01 	vstr	s15, [r7, #4]
    int32_t in[2], out;
    in[0] = (int32_t)(x * 2147483648.0f);  
 8003548:	edd7 7a02 	vldr	s15, [r7, #8]
 800354c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003608 <trigo_atan+0x184>
 8003550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003558:	ee17 3a90 	vmov	r3, s15
 800355c:	63bb      	str	r3, [r7, #56]	@ 0x38
    in[1] = (int32_t)(y * 2147483648.0f);
 800355e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003562:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003608 <trigo_atan+0x184>
 8003566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800356a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800356e:	ee17 3a90 	vmov	r3, s15
 8003572:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, &out, 1, HAL_MAX_DELAY));
 8003574:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003578:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	481f      	ldr	r0, [pc, #124]	@ (8003604 <trigo_atan+0x180>)
 8003586:	f001 fcd1 	bl	8004f2c <HAL_CORDIC_Calculate>
 800358a:	4603      	mov	r3, r0
 800358c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003590:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <trigo_atan+0x12a>
 8003598:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	461a      	mov	r2, r3
 80035a0:	2300      	movs	r3, #0
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	6053      	str	r3, [r2, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	460a      	mov	r2, r1
 80035aa:	711a      	strb	r2, [r3, #4]
 80035ac:	e022      	b.n	80035f4 <trigo_atan+0x170>
    float32_t angle = (float32_t)out / 2147483648.0f; // [-π, π)
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035b8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003608 <trigo_atan+0x184>
 80035bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (angle < 0) angle += MUL_2_PI;
 80035c4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80035c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d0:	d507      	bpl.n	80035e2 <trigo_atan+0x15e>
 80035d2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80035d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800360c <trigo_atan+0x188>
 80035da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035de:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    *theta = angle;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035e6:	601a      	str	r2, [r3, #0]
    return RESULT_OK(NULL);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
}
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	3758      	adds	r7, #88	@ 0x58
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000099c 	.word	0x2000099c
 8003600:	20000200 	.word	0x20000200
 8003604:	20000380 	.word	0x20000380
 8003608:	4f000000 	.word	0x4f000000
 800360c:	40c90fdb 	.word	0x40c90fdb

08003610 <Reset_Handler>:
>>>>>>> origin/main

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< HEAD
 8003634:	480d      	ldr	r0, [pc, #52]	@ (800366c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003636:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003638:	f7fd fd48 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800363c:	480c      	ldr	r0, [pc, #48]	@ (8003670 <LoopForever+0x6>)
  ldr r1, =_edata
 800363e:	490d      	ldr	r1, [pc, #52]	@ (8003674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003640:	4a0d      	ldr	r2, [pc, #52]	@ (8003678 <LoopForever+0xe>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003644:	e002      	b.n	800364c <LoopCopyDataInit>

08003646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364a:	3304      	adds	r3, #4

0800364c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800364c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003650:	d3f9      	bcc.n	8003646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003652:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003654:	4c0a      	ldr	r4, [pc, #40]	@ (8003680 <LoopForever+0x16>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003658:	e001      	b.n	800365e <LoopFillZerobss>

0800365a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800365c:	3204      	adds	r2, #4

0800365e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003660:	d3fb      	bcc.n	800365a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003662:	f009 fa4d 	bl	800cb00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003666:	f7fd fb7d 	bl	8000d64 <main>

0800366a <LoopForever>:

LoopForever:
    b LoopForever
 800366a:	e7fe      	b.n	800366a <LoopForever>
  ldr   r0, =_estack
 800366c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003678:	0800cd94 	.word	0x0800cd94
  ldr r2, =_sbss
 800367c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003680:	2000252c 	.word	0x2000252c

08003684 <ADC1_2_IRQHandler>:
=======
 8003610:	480d      	ldr	r0, [pc, #52]	@ (8003648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003612:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003614:	f7fd fd68 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003618:	480c      	ldr	r0, [pc, #48]	@ (800364c <LoopForever+0x6>)
  ldr r1, =_edata
 800361a:	490d      	ldr	r1, [pc, #52]	@ (8003650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800361c:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <LoopForever+0xe>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003620:	e002      	b.n	8003628 <LoopCopyDataInit>

08003622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003626:	3304      	adds	r3, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800362c:	d3f9      	bcc.n	8003622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362e:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003630:	4c0a      	ldr	r4, [pc, #40]	@ (800365c <LoopForever+0x16>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003634:	e001      	b.n	800363a <LoopFillZerobss>

08003636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003638:	3204      	adds	r2, #4

0800363a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800363c:	d3fb      	bcc.n	8003636 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f009 fa4f 	bl	800cae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003642:	f7fd fb9d 	bl	8000d80 <main>

08003646 <LoopForever>:

LoopForever:
    b LoopForever
 8003646:	e7fe      	b.n	8003646 <LoopForever>
  ldr   r0, =_estack
 8003648:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800364c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003650:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8003654:	0800cd74 	.word	0x0800cd74
  ldr r2, =_sbss
 8003658:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 800365c:	20002568 	.word	0x20002568

08003660 <ADC1_2_IRQHandler>:
>>>>>>> origin/main
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 8003684:	e7fe      	b.n	8003684 <ADC1_2_IRQHandler>
	...

08003688 <BSP_LED_Init>:
=======
 8003660:	e7fe      	b.n	8003660 <ADC1_2_IRQHandler>
	...

08003664 <BSP_LED_Init>:
>>>>>>> origin/main
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
<<<<<<< HEAD
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
=======
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
<<<<<<< HEAD
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <BSP_LED_Init+0x64>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003696:	4a15      	ldr	r2, [pc, #84]	@ (80036ec <BSP_LED_Init+0x64>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800369e:	4b13      	ldr	r3, [pc, #76]	@ (80036ec <BSP_LED_Init+0x64>)
 80036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80036aa:	2320      	movs	r3, #32
 80036ac:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80036ae:	2301      	movs	r3, #1
 80036b0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b6:	2303      	movs	r3, #3
 80036b8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <BSP_LED_Init+0x68>)
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	f107 020c 	add.w	r2, r7, #12
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 fd71 	bl	80061b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	4a07      	ldr	r2, [pc, #28]	@ (80036f0 <BSP_LED_Init+0x68>)
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	2120      	movs	r1, #32
 80036d8:	2200      	movs	r2, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 feea 	bl	80064b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	200001e4 	.word	0x200001e4

080036f4 <BSP_PB_Init>:
=======
 800366e:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <BSP_LED_Init+0x64>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <BSP_LED_Init+0x64>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800367a:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <BSP_LED_Init+0x64>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8003686:	2320      	movs	r3, #32
 8003688:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800368a:	2301      	movs	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	4a0c      	ldr	r2, [pc, #48]	@ (80036cc <BSP_LED_Init+0x68>)
 800369a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369e:	f107 020c 	add.w	r2, r7, #12
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fd71 	bl	800618c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <BSP_LED_Init+0x68>)
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	2120      	movs	r1, #32
 80036b4:	2200      	movs	r2, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f002 feea 	bl	8006490 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	2000021c 	.word	0x2000021c

080036d0 <BSP_PB_Init>:
>>>>>>> origin/main
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
<<<<<<< HEAD
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	460a      	mov	r2, r1
 80036fe:	71fb      	strb	r3, [r7, #7]
 8003700:	4613      	mov	r3, r2
 8003702:	71bb      	strb	r3, [r7, #6]
=======
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	460a      	mov	r2, r1
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	4613      	mov	r3, r2
 80036de:	71bb      	strb	r3, [r7, #6]
>>>>>>> origin/main
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
<<<<<<< HEAD
 8003704:	4b2c      	ldr	r3, [pc, #176]	@ (80037b8 <BSP_PB_Init+0xc4>)
 8003706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003708:	4a2b      	ldr	r2, [pc, #172]	@ (80037b8 <BSP_PB_Init+0xc4>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003710:	4b29      	ldr	r3, [pc, #164]	@ (80037b8 <BSP_PB_Init+0xc4>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800371c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003720:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003722:	2302      	movs	r3, #2
 8003724:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003726:	2302      	movs	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10c      	bne.n	800374a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	4a21      	ldr	r2, [pc, #132]	@ (80037bc <BSP_PB_Init+0xc8>)
 8003738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373c:	f107 020c 	add.w	r2, r7, #12
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f002 fd34 	bl	80061b0 <HAL_GPIO_Init>
 8003748:	e031      	b.n	80037ae <BSP_PB_Init+0xba>
=======
 80036e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003794 <BSP_PB_Init+0xc4>)
 80036e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <BSP_PB_Init+0xc4>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <BSP_PB_Init+0xc4>)
 80036ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80036f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036fc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80036fe:	2302      	movs	r3, #2
 8003700:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003702:	2302      	movs	r3, #2
 8003704:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003706:	79bb      	ldrb	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10c      	bne.n	8003726 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	4a21      	ldr	r2, [pc, #132]	@ (8003798 <BSP_PB_Init+0xc8>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	f107 020c 	add.w	r2, r7, #12
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f002 fd34 	bl	800618c <HAL_GPIO_Init>
 8003724:	e031      	b.n	800378a <BSP_PB_Init+0xba>
>>>>>>> origin/main
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
<<<<<<< HEAD
 800374a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800374e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	4a1a      	ldr	r2, [pc, #104]	@ (80037bc <BSP_PB_Init+0xc8>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	f107 020c 	add.w	r2, r7, #12
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fd26 	bl	80061b0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <BSP_PB_Init+0xcc>)
 800376a:	441a      	add	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	4915      	ldr	r1, [pc, #84]	@ (80037c4 <BSP_PB_Init+0xd0>)
 8003770:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f002 f825 	bl	80057c6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4a0f      	ldr	r2, [pc, #60]	@ (80037c0 <BSP_PB_Init+0xcc>)
 8003782:	1898      	adds	r0, r3, r2
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	4a10      	ldr	r2, [pc, #64]	@ (80037c8 <BSP_PB_Init+0xd4>)
 8003788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378c:	461a      	mov	r2, r3
 800378e:	2100      	movs	r1, #0
 8003790:	f001 fffc 	bl	800578c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003794:	2028      	movs	r0, #40	@ 0x28
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <BSP_PB_Init+0xd8>)
 800379a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379e:	2200      	movs	r2, #0
 80037a0:	4619      	mov	r1, r3
 80037a2:	f001 fd59 	bl	8005258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80037a6:	2328      	movs	r3, #40	@ 0x28
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fd6f 	bl	800528c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	200001e8 	.word	0x200001e8
 80037c0:	20000964 	.word	0x20000964
 80037c4:	0800cd58 	.word	0x0800cd58
 80037c8:	200001f0 	.word	0x200001f0
 80037cc:	200001f4 	.word	0x200001f4

080037d0 <BSP_PB_IRQHandler>:
=======
 8003726:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800372a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	4a1a      	ldr	r2, [pc, #104]	@ (8003798 <BSP_PB_Init+0xc8>)
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	f107 020c 	add.w	r2, r7, #12
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f002 fd26 	bl	800618c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <BSP_PB_Init+0xcc>)
 8003746:	441a      	add	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	4915      	ldr	r1, [pc, #84]	@ (80037a0 <BSP_PB_Init+0xd0>)
 800374c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f002 f825 	bl	80057a2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4a0f      	ldr	r2, [pc, #60]	@ (800379c <BSP_PB_Init+0xcc>)
 800375e:	1898      	adds	r0, r3, r2
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	4a10      	ldr	r2, [pc, #64]	@ (80037a4 <BSP_PB_Init+0xd4>)
 8003764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003768:	461a      	mov	r2, r3
 800376a:	2100      	movs	r1, #0
 800376c:	f001 fffc 	bl	8005768 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003770:	2028      	movs	r0, #40	@ 0x28
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	4a0c      	ldr	r2, [pc, #48]	@ (80037a8 <BSP_PB_Init+0xd8>)
 8003776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377a:	2200      	movs	r2, #0
 800377c:	4619      	mov	r1, r3
 800377e:	f001 fd59 	bl	8005234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003782:	2328      	movs	r3, #40	@ 0x28
 8003784:	4618      	mov	r0, r3
 8003786:	f001 fd6f 	bl	8005268 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	20000220 	.word	0x20000220
 800379c:	200009a0 	.word	0x200009a0
 80037a0:	0800cd38 	.word	0x0800cd38
 80037a4:	20000228 	.word	0x20000228
 80037a8:	2000022c 	.word	0x2000022c

080037ac <BSP_PB_IRQHandler>:
>>>>>>> origin/main
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
<<<<<<< HEAD
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <BSP_PB_IRQHandler+0x20>)
 80037e0:	4413      	add	r3, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 f804 	bl	80057f0 <HAL_EXTI_IRQHandler>
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000964 	.word	0x20000964

080037f4 <BSP_PB_Callback>:
=======
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <BSP_PB_IRQHandler+0x20>)
 80037bc:	4413      	add	r3, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 f804 	bl	80057cc <HAL_EXTI_IRQHandler>
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	200009a0 	.word	0x200009a0

080037d0 <BSP_PB_Callback>:
>>>>>>> origin/main
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
<<<<<<< HEAD
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
=======
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
<<<<<<< HEAD
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <BSP_COM_Init>:
=======
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <BSP_COM_Init>:
>>>>>>> origin/main
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
<<<<<<< HEAD
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d903      	bls.n	800382a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003822:	f06f 0301 	mvn.w	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e018      	b.n	800385c <BSP_COM_Init+0x50>
=======
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d903      	bls.n	8003806 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80037fe:	f06f 0301 	mvn.w	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e018      	b.n	8003838 <BSP_COM_Init+0x50>
>>>>>>> origin/main
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
<<<<<<< HEAD
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	2294      	movs	r2, #148	@ 0x94
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <BSP_COM_Init+0x5c>)
 8003834:	4413      	add	r3, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f852 	bl	80038e0 <COM1_MspInit>
=======
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2294      	movs	r2, #148	@ 0x94
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <BSP_COM_Init+0x5c>)
 8003810:	4413      	add	r3, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f852 	bl	80038bc <COM1_MspInit>
>>>>>>> origin/main
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
<<<<<<< HEAD
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	2294      	movs	r2, #148	@ 0x94
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <BSP_COM_Init+0x5c>)
 8003846:	4413      	add	r3, r2
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f80e 	bl	800386c <MX_LPUART1_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8003856:	f06f 0303 	mvn.w	r3, #3
 800385a:	e000      	b.n	800385e <BSP_COM_Init+0x52>
=======
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	2294      	movs	r2, #148	@ 0x94
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	4a08      	ldr	r2, [pc, #32]	@ (8003844 <BSP_COM_Init+0x5c>)
 8003822:	4413      	add	r3, r2
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f80e 	bl	8003848 <MX_LPUART1_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8003832:	f06f 0303 	mvn.w	r3, #3
 8003836:	e000      	b.n	800383a <BSP_COM_Init+0x52>
>>>>>>> origin/main
    }
  }

  return ret;
<<<<<<< HEAD
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000096c 	.word	0x2000096c

0800386c <MX_LPUART1_Init>:
=======
 8003838:	68fb      	ldr	r3, [r7, #12]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200009a8 	.word	0x200009a8

08003848 <MX_LPUART1_Init>:
>>>>>>> origin/main
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
<<<<<<< HEAD
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <MX_LPUART1_Init+0x60>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	220c      	movs	r2, #12
 800388a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	895b      	ldrh	r3, [r3, #10]
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	891b      	ldrh	r3, [r3, #8]
 80038a2:	461a      	mov	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	899b      	ldrh	r3, [r3, #12]
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80038b8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f005 fc2e 	bl	800911c <HAL_UART_Init>
 80038c0:	4603      	mov	r3, r0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200001ec 	.word	0x200001ec

080038d0 <BUTTON_USER_EXTI_Callback>:
=======
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <MX_LPUART1_Init+0x60>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	220c      	movs	r2, #12
 8003866:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	895b      	ldrh	r3, [r3, #10]
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	891b      	ldrh	r3, [r3, #8]
 800387e:	461a      	mov	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	899b      	ldrh	r3, [r3, #12]
 8003888:	461a      	mov	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003894:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f005 fc2e 	bl	80090f8 <HAL_UART_Init>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000224 	.word	0x20000224

080038ac <BUTTON_USER_EXTI_Callback>:
>>>>>>> origin/main
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
<<<<<<< HEAD
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7ff ff8d 	bl	80037f4 <BSP_PB_Callback>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <COM1_MspInit>:
=======
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7ff ff8d 	bl	80037d0 <BSP_PB_Callback>
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <COM1_MspInit>:
>>>>>>> origin/main
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
=======
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	@ 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
<<<<<<< HEAD
 80038e8:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <COM1_MspInit+0x94>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	4a21      	ldr	r2, [pc, #132]	@ (8003974 <COM1_MspInit+0x94>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <COM1_MspInit+0x94>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003900:	4b1c      	ldr	r3, [pc, #112]	@ (8003974 <COM1_MspInit+0x94>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <COM1_MspInit+0x94>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <COM1_MspInit+0x94>)
 800390e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003918:	4b16      	ldr	r3, [pc, #88]	@ (8003974 <COM1_MspInit+0x94>)
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	4a15      	ldr	r2, [pc, #84]	@ (8003974 <COM1_MspInit+0x94>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003924:	4b13      	ldr	r3, [pc, #76]	@ (8003974 <COM1_MspInit+0x94>)
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003930:	2304      	movs	r3, #4
 8003932:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003934:	2302      	movs	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003938:	2302      	movs	r3, #2
 800393a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800393c:	2301      	movs	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003940:	230c      	movs	r3, #12
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4619      	mov	r1, r3
 800394a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800394e:	f002 fc2f 	bl	80061b0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003952:	2308      	movs	r3, #8
 8003954:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800395a:	230c      	movs	r3, #12
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	4619      	mov	r1, r3
 8003964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003968:	f002 fc22 	bl	80061b0 <HAL_GPIO_Init>
}
 800396c:	bf00      	nop
 800396e:	3728      	adds	r7, #40	@ 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_Init>:
=======
 80038c4:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <COM1_MspInit+0x94>)
 80038c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c8:	4a21      	ldr	r2, [pc, #132]	@ (8003950 <COM1_MspInit+0x94>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <COM1_MspInit+0x94>)
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80038dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003950 <COM1_MspInit+0x94>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <COM1_MspInit+0x94>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <COM1_MspInit+0x94>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80038f4:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <COM1_MspInit+0x94>)
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <COM1_MspInit+0x94>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003900:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <COM1_MspInit+0x94>)
 8003902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800390c:	2304      	movs	r3, #4
 800390e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003914:	2302      	movs	r3, #2
 8003916:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003918:	2301      	movs	r3, #1
 800391a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800391c:	230c      	movs	r3, #12
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800392a:	f002 fc2f 	bl	800618c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800392e:	2308      	movs	r3, #8
 8003930:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8003936:	230c      	movs	r3, #12
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4619      	mov	r1, r3
 8003940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003944:	f002 fc22 	bl	800618c <HAL_GPIO_Init>
}
 8003948:	bf00      	nop
 800394a:	3728      	adds	r7, #40	@ 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_Init>:
>>>>>>> origin/main
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	71fb      	strb	r3, [r7, #7]
=======
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8003982:	2003      	movs	r0, #3
 8003984:	f001 fc5d 	bl	8005242 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003988:	200f      	movs	r0, #15
 800398a:	f7fd fabd 	bl	8000f08 <HAL_InitTick>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	71fb      	strb	r3, [r7, #7]
 8003998:	e001      	b.n	800399e <HAL_Init+0x26>
=======
 800395e:	2003      	movs	r0, #3
 8003960:	f001 fc5d 	bl	800521e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003964:	200f      	movs	r0, #15
 8003966:	f7fd fadd 	bl	8000f24 <HAL_InitTick>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	e001      	b.n	800397a <HAL_Init+0x26>
>>>>>>> origin/main
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 800399a:	f7fd fa8b 	bl	8000eb4 <HAL_MspInit>
=======
 8003976:	f7fd faab 	bl	8000ed0 <HAL_MspInit>
>>>>>>> origin/main
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 800399e:	79fb      	ldrb	r3, [r7, #7]

}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_IncTick>:
=======
 800397a:	79fb      	ldrb	r3, [r7, #7]

}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_IncTick>:
>>>>>>> origin/main
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_IncTick+0x1c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_IncTick+0x20>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	4a03      	ldr	r2, [pc, #12]	@ (80039c4 <HAL_IncTick+0x1c>)
 80039b8:	6013      	str	r3, [r2, #0]
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20000a00 	.word	0x20000a00
 80039c8:	200001fc 	.word	0x200001fc

080039cc <HAL_GetTick>:
=======
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_IncTick+0x1c>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_IncTick+0x20>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4413      	add	r3, r2
 8003992:	4a03      	ldr	r2, [pc, #12]	@ (80039a0 <HAL_IncTick+0x1c>)
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	20000a3c 	.word	0x20000a3c
 80039a4:	20000234 	.word	0x20000234

080039a8 <HAL_GetTick>:
>>>>>>> origin/main
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return uwTick;
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_GetTick+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000a00 	.word	0x20000a00

080039e4 <LL_ADC_SetCommonClock>:
=======
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return uwTick;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_GetTick+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000a3c 	.word	0x20000a3c

080039c0 <LL_ADC_SetCommonClock>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_ADC_SetCommonPathInternalCh>:
=======
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_GetCommonPathInternalCh>:
=======
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_ADC_SetOffset>:
=======
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_SetOffset>:
>>>>>>> origin/main
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3360      	adds	r3, #96	@ 0x60
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <LL_ADC_SetOffset+0x44>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	03fff000 	.word	0x03fff000

08003a94 <LL_ADC_GetOffsetChannel>:
=======
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3360      	adds	r3, #96	@ 0x60
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <LL_ADC_SetOffset+0x44>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	03fff000 	.word	0x03fff000

08003a70 <LL_ADC_GetOffsetChannel>:
>>>>>>> origin/main
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3360      	adds	r3, #96	@ 0x60
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_ADC_SetOffsetState>:
=======
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3360      	adds	r3, #96	@ 0x60
 8003a7e:	461a      	mov	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_SetOffsetState>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3360      	adds	r3, #96	@ 0x60
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_ADC_SetOffsetSign>:
=======
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3360      	adds	r3, #96	@ 0x60
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <LL_ADC_SetOffsetSign>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
<<<<<<< HEAD
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3360      	adds	r3, #96	@ 0x60
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_SetOffsetSaturation>:
=======
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3360      	adds	r3, #96	@ 0x60
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003afc:	bf00      	nop
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_ADC_SetOffsetSaturation>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
<<<<<<< HEAD
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3360      	adds	r3, #96	@ 0x60
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_SetSamplingTimeCommonConfig>:
=======
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3360      	adds	r3, #96	@ 0x60
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_ADC_SetSamplingTimeCommonConfig>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
<<<<<<< HEAD
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	615a      	str	r2, [r3, #20]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	615a      	str	r2, [r3, #20]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> origin/main
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_REG_SetSequencerRanks>:
=======
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> origin/main
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8003bae:	b480      	push	{r7}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
=======
 8003b8a:	b480      	push	{r7}
 8003b8c:	b087      	sub	sp, #28
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
<<<<<<< HEAD
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3330      	adds	r3, #48	@ 0x30
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	4413      	add	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	211f      	movs	r1, #31
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	401a      	ands	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0e9b      	lsrs	r3, r3, #26
 8003be6:	f003 011f 	and.w	r1, r3, #31
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	601a      	str	r2, [r3, #0]
=======
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3330      	adds	r3, #48	@ 0x30
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	211f      	movs	r1, #31
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	f003 011f 	and.w	r1, r3, #31
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
<<<<<<< HEAD
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_ADC_SetChannelSamplingTime>:
=======
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_ADC_SetChannelSamplingTime>:
>>>>>>> origin/main
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
=======
 8003be2:	b480      	push	{r7}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
<<<<<<< HEAD
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3314      	adds	r3, #20
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0e5b      	lsrs	r3, r3, #25
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	4413      	add	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	0d1b      	lsrs	r3, r3, #20
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2107      	movs	r1, #7
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	0d1b      	lsrs	r3, r3, #20
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_ADC_SetChannelSingleDiff>:
=======
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	0e5b      	lsrs	r3, r3, #25
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	4413      	add	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0d1b      	lsrs	r3, r3, #20
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2107      	movs	r1, #7
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0d1b      	lsrs	r3, r3, #20
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	431a      	orrs	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< HEAD
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
=======
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
<<<<<<< HEAD
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	43db      	mvns	r3, r3
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0318 	and.w	r3, r3, #24
 8003c7e:	4908      	ldr	r1, [pc, #32]	@ (8003ca0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c80:	40d9      	lsrs	r1, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	400b      	ands	r3, r1
 8003c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
=======
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0318 	and.w	r3, r3, #24
 8003c5a:	4908      	ldr	r1, [pc, #32]	@ (8003c7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c5c:	40d9      	lsrs	r1, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	400b      	ands	r3, r1
 8003c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c66:	431a      	orrs	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
>>>>>>> origin/main
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
<<<<<<< HEAD
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	0007ffff 	.word	0x0007ffff

08003ca4 <LL_ADC_GetMultimode>:
=======
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	0007ffff 	.word	0x0007ffff

08003c80 <LL_ADC_GetMultimode>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_DisableDeepPowerDown>:
=======
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_DisableDeepPowerDown>:
>>>>>>> origin/main
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
=======
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< HEAD
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003cd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6093      	str	r3, [r2, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_IsDeepPowerDownEnabled>:
=======
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6093      	str	r3, [r2, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> origin/main
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_EnableInternalRegulator>:
=======
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cd4:	d101      	bne.n	8003cda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_ADC_EnableInternalRegulator>:
>>>>>>> origin/main
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
=======
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_IsInternalRegulatorEnabled>:
=======
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cfc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> origin/main
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d48:	d101      	bne.n	8003d4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_Enable>:
=======
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d24:	d101      	bne.n	8003d2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_Enable>:
>>>>>>> origin/main
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
=======
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_IsEnabled>:
=======
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_ADC_IsEnabled>:
>>>>>>> origin/main
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <LL_ADC_IsEnabled+0x18>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <LL_ADC_IsEnabled+0x1a>
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_ADC_REG_StartConversion>:
=======
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <LL_ADC_IsEnabled+0x18>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <LL_ADC_IsEnabled+0x1a>
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_ADC_REG_StartConversion>:
>>>>>>> origin/main
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
=======
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_ADC_REG_IsConversionOngoing>:
=======
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_ADC_REG_IsConversionOngoing>:
>>>>>>> origin/main
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d101      	bne.n	8003dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_INJ_IsConversionOngoing>:
=======
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> origin/main
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_ADC_Init>:
=======
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d101      	bne.n	8003dec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_ADC_Init>:
>>>>>>> origin/main
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
=======
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b089      	sub	sp, #36	@ 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< HEAD
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e167      	b.n	800410a <HAL_ADC_Init+0x2ea>
=======
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e167      	b.n	80040e6 <HAL_ADC_Init+0x2ea>
>>>>>>> origin/main
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
=======
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
>>>>>>> origin/main
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_ADC_Init+0x3c>
=======
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_ADC_Init+0x3c>
>>>>>>> origin/main

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fc fc11 	bl	8000670 <HAL_ADC_MspInit>
=======
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fc fc23 	bl	8000670 <HAL_ADC_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> origin/main
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff3f 	bl	8003ce4 <LL_ADC_IsDeepPowerDownEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff25 	bl	8003cc0 <LL_ADC_DisableDeepPowerDown>
=======
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff3f 	bl	8003cc0 <LL_ADC_IsDeepPowerDownEnabled>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff25 	bl	8003c9c <LL_ADC_DisableDeepPowerDown>
>>>>>>> origin/main
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff5a 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff3e 	bl	8003d0c <LL_ADC_EnableInternalRegulator>
=======
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff5a 	bl	8003d10 <LL_ADC_IsInternalRegulatorEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d115      	bne.n	8003e8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ff3e 	bl	8003ce8 <LL_ADC_EnableInternalRegulator>
>>>>>>> origin/main

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8003e90:	4ba0      	ldr	r3, [pc, #640]	@ (8004114 <HAL_ADC_Init+0x2f4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	4aa0      	ldr	r2, [pc, #640]	@ (8004118 <HAL_ADC_Init+0x2f8>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ea4:	e002      	b.n	8003eac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f9      	bne.n	8003ea6 <HAL_ADC_Init+0x86>
=======
 8003e6c:	4ba0      	ldr	r3, [pc, #640]	@ (80040f0 <HAL_ADC_Init+0x2f4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	4aa0      	ldr	r2, [pc, #640]	@ (80040f4 <HAL_ADC_Init+0x2f8>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e80:	e002      	b.n	8003e88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f9      	bne.n	8003e82 <HAL_ADC_Init+0x86>
>>>>>>> origin/main
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff3c 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	77fb      	strb	r3, [r7, #31]
=======
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff3c 	bl	8003d10 <LL_ADC_IsInternalRegulatorEnabled>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10d      	bne.n	8003eba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea2:	f043 0210 	orr.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff75 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8100 	bne.w	80040f8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 80fc 	bne.w	80040f8 <HAL_ADC_Init+0x2d8>
=======
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff75 	bl	8003dae <LL_ADC_REG_IsConversionOngoing>
 8003ec4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 8100 	bne.w	80040d4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 80fc 	bne.w	80040d4 <HAL_ADC_Init+0x2d8>
>>>>>>> origin/main
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003f08:	f043 0202 	orr.w	r2, r3, #2
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ee4:	f043 0202 	orr.w	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> origin/main
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff35 	bl	8003d84 <LL_ADC_IsEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f24:	f7ff ff2e 	bl	8003d84 <LL_ADC_IsEnabled>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	487c      	ldr	r0, [pc, #496]	@ (800411c <HAL_ADC_Init+0x2fc>)
 8003f2c:	f7ff ff2a 	bl	8003d84 <LL_ADC_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4323      	orrs	r3, r4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_ADC_Init+0x124>
=======
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff35 	bl	8003d60 <LL_ADC_IsEnabled>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003efc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f00:	f7ff ff2e 	bl	8003d60 <LL_ADC_IsEnabled>
 8003f04:	4604      	mov	r4, r0
 8003f06:	487c      	ldr	r0, [pc, #496]	@ (80040f8 <HAL_ADC_Init+0x2fc>)
 8003f08:	f7ff ff2a 	bl	8003d60 <LL_ADC_IsEnabled>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4323      	orrs	r3, r4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <HAL_ADC_Init+0x124>
>>>>>>> origin/main
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4878      	ldr	r0, [pc, #480]	@ (8004120 <HAL_ADC_Init+0x300>)
 8003f40:	f7ff fd50 	bl	80039e4 <LL_ADC_SetCommonClock>
=======
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4878      	ldr	r0, [pc, #480]	@ (80040fc <HAL_ADC_Init+0x300>)
 8003f1c:	f7ff fd50 	bl	80039c0 <LL_ADC_SetCommonClock>
>>>>>>> origin/main
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7f5b      	ldrb	r3, [r3, #29]
 8003f48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d106      	bne.n	8003f80 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	045b      	lsls	r3, r3, #17
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
=======
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7f5b      	ldrb	r3, [r3, #29]
 8003f24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d106      	bne.n	8003f5c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	045b      	lsls	r3, r3, #17
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
=======
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
<<<<<<< HEAD
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b60      	ldr	r3, [pc, #384]	@ (8004124 <HAL_ADC_Init+0x304>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	611a      	str	r2, [r3, #16]
=======
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	4b60      	ldr	r3, [pc, #384]	@ (8004100 <HAL_ADC_Init+0x304>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	69b9      	ldr	r1, [r7, #24]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff14 	bl	8003df8 <LL_ADC_INJ_IsConversionOngoing>
 8003fd0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d16d      	bne.n	80040b4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d16a      	bne.n	80040b4 <HAL_ADC_Init+0x294>
=======
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff ff14 	bl	8003dd4 <LL_ADC_INJ_IsConversionOngoing>
 8003fac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d16d      	bne.n	8004090 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d16a      	bne.n	8004090 <HAL_ADC_Init+0x294>
>>>>>>> origin/main
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fe2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ffa:	f023 0302 	bic.w	r3, r3, #2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	69b9      	ldr	r1, [r7, #24]
 8004004:	430b      	orrs	r3, r1
 8004006:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d017      	beq.n	8004040 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800401e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004028:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800402c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6911      	ldr	r1, [r2, #16]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	430b      	orrs	r3, r1
 800403a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800403e:	e013      	b.n	8004068 <HAL_ADC_Init+0x248>
=======
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fbe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fc6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd6:	f023 0302 	bic.w	r3, r3, #2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d017      	beq.n	800401c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ffa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004004:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004008:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6911      	ldr	r1, [r2, #16]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	430b      	orrs	r3, r1
 8004016:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800401a:	e013      	b.n	8004044 <HAL_ADC_Init+0x248>
>>>>>>> origin/main
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
<<<<<<< HEAD
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800404e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004060:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004064:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800406e:	2b01      	cmp	r3, #1
 8004070:	d118      	bne.n	80040a4 <HAL_ADC_Init+0x284>
=======
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800402a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800403c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004040:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d118      	bne.n	8004080 <HAL_ADC_Init+0x284>
>>>>>>> origin/main
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800407c:	f023 0304 	bic.w	r3, r3, #4
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800408e:	4311      	orrs	r1, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004094:	430a      	orrs	r2, r1
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	e007      	b.n	80040b4 <HAL_ADC_Init+0x294>
=======
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800406a:	4311      	orrs	r1, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004070:	430a      	orrs	r2, r1
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	611a      	str	r2, [r3, #16]
 800407e:	e007      	b.n	8004090 <HAL_ADC_Init+0x294>
>>>>>>> origin/main
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	611a      	str	r2, [r3, #16]
=======
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10c      	bne.n	80040d6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	f023 010f 	bic.w	r1, r3, #15
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80040d4:	e007      	b.n	80040e6 <HAL_ADC_Init+0x2c6>
=======
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10c      	bne.n	80040b2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f023 010f 	bic.w	r1, r3, #15
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80040b0:	e007      	b.n	80040c2 <HAL_ADC_Init+0x2c6>
>>>>>>> origin/main
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 020f 	bic.w	r2, r2, #15
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 020f 	bic.w	r2, r2, #15
 80040c0:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> origin/main
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040f6:	e007      	b.n	8004108 <HAL_ADC_Init+0x2e8>
=======
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040d2:	e007      	b.n	80040e4 <HAL_ADC_Init+0x2e8>
>>>>>>> origin/main
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f043 0210 	orr.w	r2, r3, #16
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	77fb      	strb	r3, [r7, #31]
=======
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	f043 0210 	orr.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8004108:	7ffb      	ldrb	r3, [r7, #31]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	@ 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd90      	pop	{r4, r7, pc}
 8004112:	bf00      	nop
 8004114:	20000000 	.word	0x20000000
 8004118:	053e2d63 	.word	0x053e2d63
 800411c:	50000100 	.word	0x50000100
 8004120:	50000300 	.word	0x50000300
 8004124:	fff04007 	.word	0xfff04007

08004128 <HAL_ADC_Start_DMA>:
=======
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	@ 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000000 	.word	0x20000000
 80040f4:	053e2d63 	.word	0x053e2d63
 80040f8:	50000100 	.word	0x50000100
 80040fc:	50000300 	.word	0x50000300
 8004100:	fff04007 	.word	0xfff04007

08004104 <HAL_ADC_Start_DMA>:
>>>>>>> origin/main
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< HEAD
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004134:	4851      	ldr	r0, [pc, #324]	@ (800427c <HAL_ADC_Start_DMA+0x154>)
 8004136:	f7ff fdb5 	bl	8003ca4 <LL_ADC_GetMultimode>
 800413a:	6138      	str	r0, [r7, #16]
=======
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004110:	4851      	ldr	r0, [pc, #324]	@ (8004258 <HAL_ADC_Start_DMA+0x154>)
 8004112:	f7ff fdb5 	bl	8003c80 <LL_ADC_GetMultimode>
 8004116:	6138      	str	r0, [r7, #16]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fe46 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 808f 	bne.w	800426c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_ADC_Start_DMA+0x34>
 8004158:	2302      	movs	r3, #2
 800415a:	e08a      	b.n	8004272 <HAL_ADC_Start_DMA+0x14a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fe46 	bl	8003dae <LL_ADC_REG_IsConversionOngoing>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 808f 	bne.w	8004248 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_ADC_Start_DMA+0x34>
 8004134:	2302      	movs	r3, #2
 8004136:	e08a      	b.n	800424e <HAL_ADC_Start_DMA+0x14a>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> origin/main

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
<<<<<<< HEAD
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d002      	beq.n	8004176 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b09      	cmp	r3, #9
 8004174:	d173      	bne.n	800425e <HAL_ADC_Start_DMA+0x136>
=======
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b05      	cmp	r3, #5
 800414a:	d002      	beq.n	8004152 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b09      	cmp	r3, #9
 8004150:	d173      	bne.n	800423a <HAL_ADC_Start_DMA+0x136>
>>>>>>> origin/main
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
<<<<<<< HEAD
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fc98 	bl	8004aac <ADC_Enable>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d166      	bne.n	8004254 <HAL_ADC_Start_DMA+0x12c>
=======
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fc98 	bl	8004a88 <ADC_Enable>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d166      	bne.n	8004230 <HAL_ADC_Start_DMA+0x12c>
>>>>>>> origin/main
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> origin/main

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
<<<<<<< HEAD
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a38      	ldr	r2, [pc, #224]	@ (8004280 <HAL_ADC_Start_DMA+0x158>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d002      	beq.n	80041aa <HAL_ADC_Start_DMA+0x82>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	e001      	b.n	80041ae <HAL_ADC_Start_DMA+0x86>
 80041aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d002      	beq.n	80041bc <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a38      	ldr	r2, [pc, #224]	@ (800425c <HAL_ADC_Start_DMA+0x158>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d002      	beq.n	8004186 <HAL_ADC_Start_DMA+0x82>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	e001      	b.n	800418a <HAL_ADC_Start_DMA+0x86>
 8004186:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	4293      	cmp	r3, r2
 8004190:	d002      	beq.n	8004198 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> origin/main
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< HEAD
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d8:	f023 0206 	bic.w	r2, r3, #6
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	661a      	str	r2, [r3, #96]	@ 0x60
 80041e0:	e002      	b.n	80041e8 <HAL_ADC_Start_DMA+0xc0>
=======
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b4:	f023 0206 	bic.w	r2, r3, #6
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80041bc:	e002      	b.n	80041c4 <HAL_ADC_Start_DMA+0xc0>
>>>>>>> origin/main
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> origin/main
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< HEAD
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	4a25      	ldr	r2, [pc, #148]	@ (8004284 <HAL_ADC_Start_DMA+0x15c>)
 80041ee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	4a24      	ldr	r2, [pc, #144]	@ (8004288 <HAL_ADC_Start_DMA+0x160>)
 80041f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	4a23      	ldr	r2, [pc, #140]	@ (800428c <HAL_ADC_Start_DMA+0x164>)
 80041fe:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	4a25      	ldr	r2, [pc, #148]	@ (8004260 <HAL_ADC_Start_DMA+0x15c>)
 80041ca:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <HAL_ADC_Start_DMA+0x160>)
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	4a23      	ldr	r2, [pc, #140]	@ (8004268 <HAL_ADC_Start_DMA+0x164>)
 80041da:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> origin/main
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< HEAD
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	221c      	movs	r2, #28
 8004206:	601a      	str	r2, [r3, #0]
=======
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	221c      	movs	r2, #28
 80041e2:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> origin/main

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0210 	orr.w	r2, r2, #16
 800421e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3340      	adds	r3, #64	@ 0x40
 800423a:	4619      	mov	r1, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f001 f8da 	bl	80053f8 <HAL_DMA_Start_IT>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]
=======
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0210 	orr.w	r2, r2, #16
 80041fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3340      	adds	r3, #64	@ 0x40
 8004216:	4619      	mov	r1, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f001 f8da 	bl	80053d4 <HAL_DMA_Start_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< HEAD
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fdac 	bl	8003daa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004252:	e00d      	b.n	8004270 <HAL_ADC_Start_DMA+0x148>
=======
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fdac 	bl	8003d86 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800422e:	e00d      	b.n	800424c <HAL_ADC_Start_DMA+0x148>
>>>>>>> origin/main
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800425c:	e008      	b.n	8004270 <HAL_ADC_Start_DMA+0x148>
=======
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004238:	e008      	b.n	800424c <HAL_ADC_Start_DMA+0x148>
>>>>>>> origin/main

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800426a:	e001      	b.n	8004270 <HAL_ADC_Start_DMA+0x148>
=======
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004246:	e001      	b.n	800424c <HAL_ADC_Start_DMA+0x148>
>>>>>>> origin/main
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< HEAD
 800426c:	2302      	movs	r3, #2
 800426e:	75fb      	strb	r3, [r7, #23]
=======
 8004248:	2302      	movs	r3, #2
 800424a:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8004270:	7dfb      	ldrb	r3, [r7, #23]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	50000300 	.word	0x50000300
 8004280:	50000100 	.word	0x50000100
 8004284:	08004bb9 	.word	0x08004bb9
 8004288:	08004c91 	.word	0x08004c91
 800428c:	08004cad 	.word	0x08004cad

08004290 <HAL_ADC_ConvCpltCallback>:
=======
 800424c:	7dfb      	ldrb	r3, [r7, #23]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	50000300 	.word	0x50000300
 800425c:	50000100 	.word	0x50000100
 8004260:	08004b95 	.word	0x08004b95
 8004264:	08004c6d 	.word	0x08004c6d
 8004268:	08004c89 	.word	0x08004c89

0800426c <HAL_ADC_ConvCpltCallback>:
>>>>>>> origin/main
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
=======
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_ADC_ConvHalfCpltCallback>:
=======
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> origin/main
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
=======
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_ADC_ErrorCallback>:
=======
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_ADC_ErrorCallback>:
>>>>>>> origin/main
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
=======
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ADC_ConfigChannel>:
=======
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADC_ConfigChannel>:
>>>>>>> origin/main
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
<<<<<<< HEAD
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b0b6      	sub	sp, #216	@ 0xd8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
=======
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b0b6      	sub	sp, #216	@ 0xd8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x22>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e3c8      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x7b4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x22>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e3c8      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x7b4>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> origin/main
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fd69 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 83ad 	bne.w	8004a62 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	f7ff fc4a 	bl	8003bae <LL_ADC_REG_SetSequencerRanks>
=======
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fd69 	bl	8003dae <LL_ADC_REG_IsConversionOngoing>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 83ad 	bne.w	8004a3e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f7ff fc4a 	bl	8003b8a <LL_ADC_REG_SetSequencerRanks>
>>>>>>> origin/main
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fd57 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8004324:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fd63 	bl	8003df8 <LL_ADC_INJ_IsConversionOngoing>
 8004332:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 81d9 	bne.w	80046f2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 81d4 	bne.w	80046f2 <HAL_ADC_ConfigChannel+0x426>
=======
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fd57 	bl	8003dae <LL_ADC_REG_IsConversionOngoing>
 8004300:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fd63 	bl	8003dd4 <LL_ADC_INJ_IsConversionOngoing>
 800430e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004312:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 81d9 	bne.w	80046ce <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800431c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 81d4 	bne.w	80046ce <HAL_ADC_ConfigChannel+0x426>
>>>>>>> origin/main
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
<<<<<<< HEAD
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004352:	d10f      	bne.n	8004374 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	4619      	mov	r1, r3
 8004360:	f7ff fc51 	bl	8003c06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fbf8 	bl	8003b62 <LL_ADC_SetSamplingTimeCommonConfig>
 8004372:	e00e      	b.n	8004392 <HAL_ADC_ConfigChannel+0xc6>
=======
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800432e:	d10f      	bne.n	8004350 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	4619      	mov	r1, r3
 800433c:	f7ff fc51 	bl	8003be2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fbf8 	bl	8003b3e <LL_ADC_SetSamplingTimeCommonConfig>
 800434e:	e00e      	b.n	800436e <HAL_ADC_ConfigChannel+0xc6>
>>>>>>> origin/main
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
<<<<<<< HEAD
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	461a      	mov	r2, r3
 8004382:	f7ff fc40 	bl	8003c06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fbe8 	bl	8003b62 <LL_ADC_SetSamplingTimeCommonConfig>
=======
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	461a      	mov	r2, r3
 800435e:	f7ff fc40 	bl	8003be2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fbe8 	bl	8003b3e <LL_ADC_SetSamplingTimeCommonConfig>
>>>>>>> origin/main

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
<<<<<<< HEAD
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	08db      	lsrs	r3, r3, #3
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d022      	beq.n	80043fa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6919      	ldr	r1, [r3, #16]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043c4:	f7ff fb42 	bl	8003a4c <LL_ADC_SetOffset>
=======
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d022      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6919      	ldr	r1, [r3, #16]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043a0:	f7ff fb42 	bl	8003a28 <LL_ADC_SetOffset>
>>>>>>> origin/main

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
<<<<<<< HEAD
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6919      	ldr	r1, [r3, #16]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	461a      	mov	r2, r3
 80043d6:	f7ff fb8e 	bl	8003af6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d102      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x124>
 80043ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ee:	e000      	b.n	80043f2 <HAL_ADC_ConfigChannel+0x126>
 80043f0:	2300      	movs	r3, #0
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7ff fb9a 	bl	8003b2c <LL_ADC_SetOffsetSaturation>
 80043f8:	e17b      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x426>
=======
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6919      	ldr	r1, [r3, #16]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	461a      	mov	r2, r3
 80043b2:	f7ff fb8e 	bl	8003ad2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x124>
 80043c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ca:	e000      	b.n	80043ce <HAL_ADC_ConfigChannel+0x126>
 80043cc:	2300      	movs	r3, #0
 80043ce:	461a      	mov	r2, r3
 80043d0:	f7ff fb9a 	bl	8003b08 <LL_ADC_SetOffsetSaturation>
 80043d4:	e17b      	b.n	80046ce <HAL_ADC_ConfigChannel+0x426>
>>>>>>> origin/main
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< HEAD
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fb47 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x15a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fb3c 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 800441c:	4603      	mov	r3, r0
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	e01e      	b.n	8004464 <HAL_ADC_ConfigChannel+0x198>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fb31 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
=======
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fb47 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x15a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fb3c 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80043f8:	4603      	mov	r3, r0
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	f003 021f 	and.w	r2, r3, #31
 8004400:	e01e      	b.n	8004440 <HAL_ADC_ConfigChannel+0x198>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fb31 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800440e:	4603      	mov	r3, r0
 8004410:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
>>>>>>> origin/main
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 8004438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
=======
 8004414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
>>>>>>> origin/main
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 8004444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
=======
 8004420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
>>>>>>> origin/main
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 800444c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e004      	b.n	8004462 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_ADC_ConfigChannel+0x1b0>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	e018      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1e2>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004488:	fa93 f3a3 	rbit	r3, r3
 800448c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80044a0:	2320      	movs	r3, #32
 80044a2:	e004      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80044a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044a8:	fab3 f383 	clz	r3, r3
 80044ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d106      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fb00 	bl	8003ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fae4 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x220>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fad9 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	0e9b      	lsrs	r3, r3, #26
 80044e6:	f003 021f 	and.w	r2, r3, #31
 80044ea:	e01e      	b.n	800452a <HAL_ADC_ConfigChannel+0x25e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff face 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800450a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800450e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e004      	b.n	8004528 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800451e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x276>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	e018      	b.n	8004574 <HAL_ADC_ConfigChannel+0x2a8>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004556:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800455a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800455e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e004      	b.n	8004574 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800456a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2200      	movs	r2, #0
 800457e:	2101      	movs	r1, #1
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fa9d 	bl	8003ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fa81 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x2e6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fa76 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	0e9b      	lsrs	r3, r3, #26
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	e01e      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x324>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fa6b 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80045d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80045d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e004      	b.n	80045ee <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80045e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x33c>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	e016      	b.n	8004636 <HAL_ADC_ConfigChannel+0x36a>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800461a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800461c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004628:	2320      	movs	r3, #32
 800462a:	e004      	b.n	8004636 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800462c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004636:	429a      	cmp	r2, r3
 8004638:	d106      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fa3c 	bl	8003ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2103      	movs	r1, #3
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fa20 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 8004654:	4603      	mov	r3, r0
 8004656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x3a8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2103      	movs	r1, #3
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fa15 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 800466a:	4603      	mov	r3, r0
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	f003 021f 	and.w	r2, r3, #31
 8004672:	e017      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x3d8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2103      	movs	r1, #3
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fa0a 	bl	8003a94 <LL_ADC_GetOffsetChannel>
 8004680:	4603      	mov	r3, r0
 8004682:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800468c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800468e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004696:	2320      	movs	r3, #32
 8004698:	e003      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800469a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x3f0>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	e011      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x414>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80046ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80046ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80046d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d106      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2103      	movs	r1, #3
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff f9e7 	bl	8003ac0 <LL_ADC_SetOffsetState>
=======
 8004428:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004430:	2320      	movs	r3, #32
 8004432:	e004      	b.n	800443e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x1b0>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0e9b      	lsrs	r3, r3, #26
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	e018      	b.n	800448a <HAL_ADC_ConfigChannel+0x1e2>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800446c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800447c:	2320      	movs	r3, #32
 800447e:	e004      	b.n	800448a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004480:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004484:	fab3 f383 	clz	r3, r3
 8004488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800448a:	429a      	cmp	r2, r3
 800448c:	d106      	bne.n	800449c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fb00 	bl	8003a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fae4 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x220>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2101      	movs	r1, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fad9 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80044be:	4603      	mov	r3, r0
 80044c0:	0e9b      	lsrs	r3, r3, #26
 80044c2:	f003 021f 	and.w	r2, r3, #31
 80044c6:	e01e      	b.n	8004506 <HAL_ADC_ConfigChannel+0x25e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff face 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80044e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80044ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80044f6:	2320      	movs	r3, #32
 80044f8:	e004      	b.n	8004504 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80044fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_ADC_ConfigChannel+0x276>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0e9b      	lsrs	r3, r3, #26
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	e018      	b.n	8004550 <HAL_ADC_ConfigChannel+0x2a8>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004532:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800453a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004542:	2320      	movs	r3, #32
 8004544:	e004      	b.n	8004550 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004546:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004550:	429a      	cmp	r2, r3
 8004552:	d106      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	2101      	movs	r1, #1
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fa9d 	bl	8003a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fa81 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <HAL_ADC_ConfigChannel+0x2e6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2102      	movs	r1, #2
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fa76 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004584:	4603      	mov	r3, r0
 8004586:	0e9b      	lsrs	r3, r3, #26
 8004588:	f003 021f 	and.w	r2, r3, #31
 800458c:	e01e      	b.n	80045cc <HAL_ADC_ConfigChannel+0x324>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2102      	movs	r1, #2
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fa6b 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80045ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80045b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e004      	b.n	80045ca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80045c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045c4:	fab3 f383 	clz	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x33c>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	e016      	b.n	8004612 <HAL_ADC_ConfigChannel+0x36a>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80045f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80045fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004604:	2320      	movs	r3, #32
 8004606:	e004      	b.n	8004612 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004612:	429a      	cmp	r2, r3
 8004614:	d106      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fa3c 	bl	8003a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2103      	movs	r1, #3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fa20 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004630:	4603      	mov	r3, r0
 8004632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x3a8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2103      	movs	r1, #3
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fa15 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004646:	4603      	mov	r3, r0
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	f003 021f 	and.w	r2, r3, #31
 800464e:	e017      	b.n	8004680 <HAL_ADC_ConfigChannel+0x3d8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2103      	movs	r1, #3
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fa0a 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800465c:	4603      	mov	r3, r0
 800465e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800466a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800466c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004672:	2320      	movs	r3, #32
 8004674:	e003      	b.n	800467e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x3f0>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	e011      	b.n	80046bc <HAL_ADC_ConfigChannel+0x414>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80046a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80046aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80046b0:	2320      	movs	r3, #32
 80046b2:	e003      	b.n	80046bc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80046b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046bc:	429a      	cmp	r2, r3
 80046be:	d106      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	2103      	movs	r1, #3
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff f9e7 	bl	8003a9c <LL_ADC_SetOffsetState>
>>>>>>> origin/main
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fb44 	bl	8003d84 <LL_ADC_IsEnabled>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8140 	bne.w	8004984 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6819      	ldr	r1, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	461a      	mov	r2, r3
 8004712:	f7ff faa3 	bl	8003c5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a8f      	ldr	r2, [pc, #572]	@ (8004958 <HAL_ADC_ConfigChannel+0x68c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	f040 8131 	bne.w	8004984 <HAL_ADC_ConfigChannel+0x6b8>
=======
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb44 	bl	8003d60 <LL_ADC_IsEnabled>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f040 8140 	bne.w	8004960 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	461a      	mov	r2, r3
 80046ee:	f7ff faa3 	bl	8003c38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4a8f      	ldr	r2, [pc, #572]	@ (8004934 <HAL_ADC_ConfigChannel+0x68c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	f040 8131 	bne.w	8004960 <HAL_ADC_ConfigChannel+0x6b8>
>>>>>>> origin/main
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_ADC_ConfigChannel+0x47e>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	0e9b      	lsrs	r3, r3, #26
 8004738:	3301      	adds	r3, #1
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2b09      	cmp	r3, #9
 8004740:	bf94      	ite	ls
 8004742:	2301      	movls	r3, #1
 8004744:	2300      	movhi	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e019      	b.n	800477e <HAL_ADC_ConfigChannel+0x4b2>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800475a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800475c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004762:	2320      	movs	r3, #32
 8004764:	e003      	b.n	800476e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2b09      	cmp	r3, #9
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800477e:	2b00      	cmp	r3, #0
 8004780:	d079      	beq.n	8004876 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478a:	2b00      	cmp	r3, #0
 800478c:	d107      	bne.n	800479e <HAL_ADC_ConfigChannel+0x4d2>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	0e9b      	lsrs	r3, r3, #26
 8004794:	3301      	adds	r3, #1
 8004796:	069b      	lsls	r3, r3, #26
 8004798:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800479c:	e015      	b.n	80047ca <HAL_ADC_ConfigChannel+0x4fe>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80047b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80047b6:	2320      	movs	r3, #32
 80047b8:	e003      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	069b      	lsls	r3, r3, #26
 80047c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x51e>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	0e9b      	lsrs	r3, r3, #26
 80047dc:	3301      	adds	r3, #1
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2101      	movs	r1, #1
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	e017      	b.n	800481a <HAL_ADC_ConfigChannel+0x54e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80047f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80047fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004802:	2320      	movs	r3, #32
 8004804:	e003      	b.n	800480e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	3301      	adds	r3, #1
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	ea42 0103 	orr.w	r1, r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x574>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	0e9b      	lsrs	r3, r3, #26
 8004830:	3301      	adds	r3, #1
 8004832:	f003 021f 	and.w	r2, r3, #31
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	051b      	lsls	r3, r3, #20
 800483e:	e018      	b.n	8004872 <HAL_ADC_ConfigChannel+0x5a6>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800484e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004858:	2320      	movs	r3, #32
 800485a:	e003      	b.n	8004864 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800485c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f003 021f 	and.w	r2, r3, #31
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004872:	430b      	orrs	r3, r1
 8004874:	e081      	b.n	800497a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x5c6>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	0e9b      	lsrs	r3, r3, #26
 8004888:	3301      	adds	r3, #1
 800488a:	069b      	lsls	r3, r3, #26
 800488c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004890:	e015      	b.n	80048be <HAL_ADC_ConfigChannel+0x5f2>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80048aa:	2320      	movs	r3, #32
 80048ac:	e003      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80048ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	069b      	lsls	r3, r3, #26
 80048ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_ADC_ConfigChannel+0x612>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	0e9b      	lsrs	r3, r3, #26
 80048d0:	3301      	adds	r3, #1
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	e017      	b.n	800490e <HAL_ADC_ConfigChannel+0x642>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	61fb      	str	r3, [r7, #28]
  return result;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80048f6:	2320      	movs	r3, #32
 80048f8:	e003      	b.n	8004902 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	3301      	adds	r3, #1
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <HAL_ADC_ConfigChannel+0x66e>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0e9b      	lsrs	r3, r3, #26
 8004924:	3301      	adds	r3, #1
 8004926:	f003 021f 	and.w	r2, r3, #31
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	3b1e      	subs	r3, #30
 8004932:	051b      	lsls	r3, r3, #20
 8004934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004938:	e01e      	b.n	8004978 <HAL_ADC_ConfigChannel+0x6ac>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	613b      	str	r3, [r7, #16]
  return result;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004952:	2320      	movs	r3, #32
 8004954:	e006      	b.n	8004964 <HAL_ADC_ConfigChannel+0x698>
 8004956:	bf00      	nop
 8004958:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f003 021f 	and.w	r2, r3, #31
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	3b1e      	subs	r3, #30
 8004972:	051b      	lsls	r3, r3, #20
 8004974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004978:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800497e:	4619      	mov	r1, r3
 8004980:	f7ff f941 	bl	8003c06 <LL_ADC_SetChannelSamplingTime>
=======
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x47e>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	0e9b      	lsrs	r3, r3, #26
 8004714:	3301      	adds	r3, #1
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b09      	cmp	r3, #9
 800471c:	bf94      	ite	ls
 800471e:	2301      	movls	r3, #1
 8004720:	2300      	movhi	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e019      	b.n	800475a <HAL_ADC_ConfigChannel+0x4b2>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004736:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800473e:	2320      	movs	r3, #32
 8004740:	e003      	b.n	800474a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004744:	fab3 f383 	clz	r3, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	3301      	adds	r3, #1
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2b09      	cmp	r3, #9
 8004752:	bf94      	ite	ls
 8004754:	2301      	movls	r3, #1
 8004756:	2300      	movhi	r3, #0
 8004758:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800475a:	2b00      	cmp	r3, #0
 800475c:	d079      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <HAL_ADC_ConfigChannel+0x4d2>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	0e9b      	lsrs	r3, r3, #26
 8004770:	3301      	adds	r3, #1
 8004772:	069b      	lsls	r3, r3, #26
 8004774:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004778:	e015      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x4fe>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800478c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e003      	b.n	800479e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	069b      	lsls	r3, r3, #26
 80047a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x51e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0e9b      	lsrs	r3, r3, #26
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	e017      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x54e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80047d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80047d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e003      	b.n	80047ea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80047e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	ea42 0103 	orr.w	r1, r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <HAL_ADC_ConfigChannel+0x574>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	3301      	adds	r3, #1
 800480e:	f003 021f 	and.w	r2, r3, #31
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	051b      	lsls	r3, r3, #20
 800481a:	e018      	b.n	800484e <HAL_ADC_ConfigChannel+0x5a6>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800482e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004834:	2320      	movs	r3, #32
 8004836:	e003      	b.n	8004840 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	f003 021f 	and.w	r2, r3, #31
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800484e:	430b      	orrs	r3, r1
 8004850:	e081      	b.n	8004956 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <HAL_ADC_ConfigChannel+0x5c6>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	0e9b      	lsrs	r3, r3, #26
 8004864:	3301      	adds	r3, #1
 8004866:	069b      	lsls	r3, r3, #26
 8004868:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800486c:	e015      	b.n	800489a <HAL_ADC_ConfigChannel+0x5f2>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004886:	2320      	movs	r3, #32
 8004888:	e003      	b.n	8004892 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3301      	adds	r3, #1
 8004894:	069b      	lsls	r3, r3, #26
 8004896:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x612>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	0e9b      	lsrs	r3, r3, #26
 80048ac:	3301      	adds	r3, #1
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	e017      	b.n	80048ea <HAL_ADC_ConfigChannel+0x642>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	61fb      	str	r3, [r7, #28]
  return result;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80048d2:	2320      	movs	r3, #32
 80048d4:	e003      	b.n	80048de <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	3301      	adds	r3, #1
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	ea42 0103 	orr.w	r1, r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x66e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	0e9b      	lsrs	r3, r3, #26
 8004900:	3301      	adds	r3, #1
 8004902:	f003 021f 	and.w	r2, r3, #31
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	3b1e      	subs	r3, #30
 800490e:	051b      	lsls	r3, r3, #20
 8004910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004914:	e01e      	b.n	8004954 <HAL_ADC_ConfigChannel+0x6ac>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	613b      	str	r3, [r7, #16]
  return result;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800492e:	2320      	movs	r3, #32
 8004930:	e006      	b.n	8004940 <HAL_ADC_ConfigChannel+0x698>
 8004932:	bf00      	nop
 8004934:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f003 021f 	and.w	r2, r3, #31
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	3b1e      	subs	r3, #30
 800494e:	051b      	lsls	r3, r3, #20
 8004950:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004954:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800495a:	4619      	mov	r1, r3
 800495c:	f7ff f941 	bl	8003be2 <LL_ADC_SetChannelSamplingTime>
>>>>>>> origin/main
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
<<<<<<< HEAD
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b3f      	ldr	r3, [pc, #252]	@ (8004a88 <HAL_ADC_ConfigChannel+0x7bc>)
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d071      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004990:	483e      	ldr	r0, [pc, #248]	@ (8004a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8004992:	f7ff f84d 	bl	8003a30 <LL_ADC_GetCommonPathInternalCh>
 8004996:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
=======
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_ADC_ConfigChannel+0x7bc>)
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d071      	beq.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800496c:	483e      	ldr	r0, [pc, #248]	@ (8004a68 <HAL_ADC_ConfigChannel+0x7c0>)
 800496e:	f7ff f84d 	bl	8003a0c <LL_ADC_GetCommonPathInternalCh>
 8004972:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
>>>>>>> origin/main

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
<<<<<<< HEAD
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a90 <HAL_ADC_ConfigChannel+0x7c4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_ADC_ConfigChannel+0x6e2>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004a94 <HAL_ADC_ConfigChannel+0x7c8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d127      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049c2:	d157      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049cc:	4619      	mov	r1, r3
 80049ce:	482f      	ldr	r0, [pc, #188]	@ (8004a8c <HAL_ADC_ConfigChannel+0x7c0>)
 80049d0:	f7ff f81b 	bl	8003a0a <LL_ADC_SetCommonPathInternalCh>
=======
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a6c <HAL_ADC_ConfigChannel+0x7c4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_ADC_ConfigChannel+0x6e2>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3a      	ldr	r2, [pc, #232]	@ (8004a70 <HAL_ADC_ConfigChannel+0x7c8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d127      	bne.n	80049da <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800498a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800498e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d121      	bne.n	80049da <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800499e:	d157      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049a8:	4619      	mov	r1, r3
 80049aa:	482f      	ldr	r0, [pc, #188]	@ (8004a68 <HAL_ADC_ConfigChannel+0x7c0>)
 80049ac:	f7ff f81b 	bl	80039e6 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> origin/main
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80049d4:	4b30      	ldr	r3, [pc, #192]	@ (8004a98 <HAL_ADC_ConfigChannel+0x7cc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	099b      	lsrs	r3, r3, #6
 80049da:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <HAL_ADC_ConfigChannel+0x7d0>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	4613      	mov	r3, r2
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049ee:	e002      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f9      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049fc:	e03a      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
=======
 80049b0:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <HAL_ADC_ConfigChannel+0x7cc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	099b      	lsrs	r3, r3, #6
 80049b6:	4a30      	ldr	r2, [pc, #192]	@ (8004a78 <HAL_ADC_ConfigChannel+0x7d0>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049ca:	e002      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f9      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049d8:	e03a      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
>>>>>>> origin/main
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
<<<<<<< HEAD
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a27      	ldr	r2, [pc, #156]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x7d4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d113      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10d      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02a      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	4619      	mov	r1, r3
 8004a28:	4818      	ldr	r0, [pc, #96]	@ (8004a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8004a2a:	f7fe ffee 	bl	8003a0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a2e:	e021      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
=======
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a27      	ldr	r2, [pc, #156]	@ (8004a7c <HAL_ADC_ConfigChannel+0x7d4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d113      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10d      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a22      	ldr	r2, [pc, #136]	@ (8004a80 <HAL_ADC_ConfigChannel+0x7d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02a      	beq.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	4619      	mov	r1, r3
 8004a04:	4818      	ldr	r0, [pc, #96]	@ (8004a68 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a06:	f7fe ffee 	bl	80039e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a0a:	e021      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
>>>>>>> origin/main
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< HEAD
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d11c      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d011      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a58:	4619      	mov	r1, r3
 8004a5a:	480c      	ldr	r0, [pc, #48]	@ (8004a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8004a5c:	f7fe ffd5 	bl	8003a0a <LL_ADC_SetCommonPathInternalCh>
 8004a60:	e008      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x7a8>
=======
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1c      	ldr	r2, [pc, #112]	@ (8004a84 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d11c      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d116      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a16      	ldr	r2, [pc, #88]	@ (8004a80 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d011      	beq.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a34:	4619      	mov	r1, r3
 8004a36:	480c      	ldr	r0, [pc, #48]	@ (8004a68 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a38:	f7fe ffd5 	bl	80039e6 <LL_ADC_SetCommonPathInternalCh>
 8004a3c:	e008      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x7a8>
>>>>>>> origin/main
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
=======
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
>>>>>>> origin/main
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	37d8      	adds	r7, #216	@ 0xd8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	80080000 	.word	0x80080000
 8004a8c:	50000300 	.word	0x50000300
 8004a90:	c3210000 	.word	0xc3210000
 8004a94:	90c00010 	.word	0x90c00010
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	053e2d63 	.word	0x053e2d63
 8004aa0:	c7520000 	.word	0xc7520000
 8004aa4:	50000100 	.word	0x50000100
 8004aa8:	cb840000 	.word	0xcb840000

08004aac <ADC_Enable>:
=======
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a58:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	37d8      	adds	r7, #216	@ 0xd8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	80080000 	.word	0x80080000
 8004a68:	50000300 	.word	0x50000300
 8004a6c:	c3210000 	.word	0xc3210000
 8004a70:	90c00010 	.word	0x90c00010
 8004a74:	20000000 	.word	0x20000000
 8004a78:	053e2d63 	.word	0x053e2d63
 8004a7c:	c7520000 	.word	0xc7520000
 8004a80:	50000100 	.word	0x50000100
 8004a84:	cb840000 	.word	0xcb840000

08004a88 <ADC_Enable>:
>>>>>>> origin/main
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]
=======
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f961 	bl	8003d84 <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d169      	bne.n	8004b9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <ADC_Enable+0xfc>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <ADC_Enable+0x46>
=======
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f961 	bl	8003d60 <LL_ADC_IsEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d169      	bne.n	8004b78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b36      	ldr	r3, [pc, #216]	@ (8004b84 <ADC_Enable+0xfc>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <ADC_Enable+0x46>
>>>>>>> origin/main
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	f043 0210 	orr.w	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e055      	b.n	8004b9e <ADC_Enable+0xf2>
=======
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	f043 0210 	orr.w	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e055      	b.n	8004b7a <ADC_Enable+0xf2>
>>>>>>> origin/main
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< HEAD
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f930 	bl	8003d5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004afc:	482b      	ldr	r0, [pc, #172]	@ (8004bac <ADC_Enable+0x100>)
 8004afe:	f7fe ff97 	bl	8003a30 <LL_ADC_GetCommonPathInternalCh>
 8004b02:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <ADC_Enable+0x88>
=======
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f930 	bl	8003d38 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ad8:	482b      	ldr	r0, [pc, #172]	@ (8004b88 <ADC_Enable+0x100>)
 8004ada:	f7fe ff97 	bl	8003a0c <LL_ADC_GetCommonPathInternalCh>
 8004ade:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <ADC_Enable+0x88>
>>>>>>> origin/main

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8004b0c:	4b28      	ldr	r3, [pc, #160]	@ (8004bb0 <ADC_Enable+0x104>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	4a28      	ldr	r2, [pc, #160]	@ (8004bb4 <ADC_Enable+0x108>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b26:	e002      	b.n	8004b2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f9      	bne.n	8004b28 <ADC_Enable+0x7c>
=======
 8004ae8:	4b28      	ldr	r3, [pc, #160]	@ (8004b8c <ADC_Enable+0x104>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	099b      	lsrs	r3, r3, #6
 8004aee:	4a28      	ldr	r2, [pc, #160]	@ (8004b90 <ADC_Enable+0x108>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b02:	e002      	b.n	8004b0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f9      	bne.n	8004b04 <ADC_Enable+0x7c>
>>>>>>> origin/main
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004b34:	f7fe ff4a 	bl	80039cc <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b3a:	e028      	b.n	8004b8e <ADC_Enable+0xe2>
=======
 8004b10:	f7fe ff4a 	bl	80039a8 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b16:	e028      	b.n	8004b6a <ADC_Enable+0xe2>
>>>>>>> origin/main
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f91f 	bl	8003d84 <LL_ADC_IsEnabled>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff f903 	bl	8003d5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b56:	f7fe ff39 	bl	80039cc <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d914      	bls.n	8004b8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d00d      	beq.n	8004b8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e007      	b.n	8004b9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d1cf      	bne.n	8004b3c <ADC_Enable+0x90>
=======
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff f91f 	bl	8003d60 <LL_ADC_IsEnabled>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f903 	bl	8003d38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b32:	f7fe ff39 	bl	80039a8 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d914      	bls.n	8004b6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d00d      	beq.n	8004b6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	f043 0210 	orr.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e007      	b.n	8004b7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d1cf      	bne.n	8004b18 <ADC_Enable+0x90>
>>>>>>> origin/main
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	8000003f 	.word	0x8000003f
 8004bac:	50000300 	.word	0x50000300
 8004bb0:	20000000 	.word	0x20000000
 8004bb4:	053e2d63 	.word	0x053e2d63

08004bb8 <ADC_DMAConvCplt>:
=======
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	8000003f 	.word	0x8000003f
 8004b88:	50000300 	.word	0x50000300
 8004b8c:	20000000 	.word	0x20000000
 8004b90:	053e2d63 	.word	0x053e2d63

08004b94 <ADC_DMAConvCplt>:
>>>>>>> origin/main
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d14b      	bne.n	8004c6a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d14b      	bne.n	8004c46 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> origin/main

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< HEAD
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d021      	beq.n	8004c30 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe ffc9 	bl	8003b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d032      	beq.n	8004c62 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d12b      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11f      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c2e:	e018      	b.n	8004c62 <ADC_DMAConvCplt+0xaa>
=======
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d021      	beq.n	8004c0c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe ffc9 	bl	8003b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d032      	beq.n	8004c3e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d12b      	bne.n	8004c3e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11f      	bne.n	8004c3e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c0a:	e018      	b.n	8004c3e <ADC_DMAConvCplt+0xaa>
>>>>>>> origin/main
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< HEAD
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d111      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5a:	f043 0201 	orr.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d111      	bne.n	8004c3e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> origin/main

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fb14 	bl	8004290 <HAL_ADC_ConvCpltCallback>
=======
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff fb14 	bl	800426c <HAL_ADC_ConvCpltCallback>
>>>>>>> origin/main
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8004c68:	e00e      	b.n	8004c88 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fb1e 	bl	80042b8 <HAL_ADC_ErrorCallback>
}
 8004c7c:	e004      	b.n	8004c88 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <ADC_DMAHalfConvCplt>:
=======
 8004c44:	e00e      	b.n	8004c64 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fb1e 	bl	8004294 <HAL_ADC_ErrorCallback>
}
 8004c58:	e004      	b.n	8004c64 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <ADC_DMAHalfConvCplt>:
>>>>>>> origin/main
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	60fb      	str	r3, [r7, #12]
=======
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fb00 	bl	80042a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <ADC_DMAError>:
=======
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff fb00 	bl	8004280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <ADC_DMAError>:
>>>>>>> origin/main
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> origin/main

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff faf0 	bl	80042b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <LL_ADC_IsEnabled>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <LL_ADC_IsEnabled+0x18>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_ADC_IsEnabled+0x1a>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d101      	bne.n	8004d1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_ADCEx_MultiModeConfigChannel>:
=======
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff faf0 	bl	8004294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <LL_ADC_IsEnabled>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <LL_ADC_IsEnabled+0x18>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <LL_ADC_IsEnabled+0x1a>
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d101      	bne.n	8004cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> origin/main
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
<<<<<<< HEAD
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b0a1      	sub	sp, #132	@ 0x84
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
=======
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b0a1      	sub	sp, #132	@ 0x84
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
>>>>>>> origin/main
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e08b      	b.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d52:	2300      	movs	r3, #0
 8004d54:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d56:	2300      	movs	r3, #0
 8004d58:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d62:	d102      	bne.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d64:	4b41      	ldr	r3, [pc, #260]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	e001      	b.n	8004d6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e06a      	b.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x136>
=======
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e08b      	b.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d32:	2300      	movs	r3, #0
 8004d34:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d3e:	d102      	bne.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d40:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	e001      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e06a      	b.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x136>
>>>>>>> origin/main
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
<<<<<<< HEAD
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ffb9 	bl	8004d06 <LL_ADC_REG_IsConversionOngoing>
 8004d94:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ffb3 	bl	8004d06 <LL_ADC_REG_IsConversionOngoing>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d14c      	bne.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d149      	bne.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004dac:	4b30      	ldr	r3, [pc, #192]	@ (8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004dae:	677b      	str	r3, [r7, #116]	@ 0x74
=======
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ffb9 	bl	8004ce2 <LL_ADC_REG_IsConversionOngoing>
 8004d70:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ffb3 	bl	8004ce2 <LL_ADC_REG_IsConversionOngoing>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d14c      	bne.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d149      	bne.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d88:	4b30      	ldr	r3, [pc, #192]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004d8a:	677b      	str	r3, [r7, #116]	@ 0x74
>>>>>>> origin/main

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< HEAD
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d028      	beq.n	8004e0a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004dca:	035b      	lsls	r3, r3, #13
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd2:	609a      	str	r2, [r3, #8]
=======
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d028      	beq.n	8004de6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004da6:	035b      	lsls	r3, r3, #13
 8004da8:	430b      	orrs	r3, r1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dae:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8004dd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dd8:	f7ff ff82 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004ddc:	4604      	mov	r4, r0
 8004dde:	4823      	ldr	r0, [pc, #140]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004de0:	f7ff ff7e 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4323      	orrs	r3, r4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d133      	bne.n	8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004df4:	f023 030f 	bic.w	r3, r3, #15
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	6811      	ldr	r1, [r2, #0]
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	431a      	orrs	r2, r3
 8004e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e06:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e08:	e024      	b.n	8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x128>
=======
 8004db0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004db4:	f7ff ff82 	bl	8004cbc <LL_ADC_IsEnabled>
 8004db8:	4604      	mov	r4, r0
 8004dba:	4823      	ldr	r0, [pc, #140]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004dbc:	f7ff ff7e 	bl	8004cbc <LL_ADC_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4323      	orrs	r3, r4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d133      	bne.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	6811      	ldr	r1, [r2, #0]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	431a      	orrs	r2, r3
 8004de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004de4:	e024      	b.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
>>>>>>> origin/main
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< HEAD
 8004e0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e14:	609a      	str	r2, [r3, #8]
=======
 8004de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df0:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8004e16:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e1a:	f7ff ff61 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4812      	ldr	r0, [pc, #72]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e22:	f7ff ff5d 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4323      	orrs	r3, r4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d112      	bne.n	8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e36:	f023 030f 	bic.w	r3, r3, #15
 8004e3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e3e:	e009      	b.n	8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x128>
=======
 8004df2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004df6:	f7ff ff61 	bl	8004cbc <LL_ADC_IsEnabled>
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4812      	ldr	r0, [pc, #72]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004dfe:	f7ff ff5d 	bl	8004cbc <LL_ADC_IsEnabled>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4323      	orrs	r3, r4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d112      	bne.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e12:	f023 030f 	bic.w	r3, r3, #15
 8004e16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1a:	e009      	b.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
>>>>>>> origin/main
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e52:	e000      	b.n	8004e56 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e54:	bf00      	nop
=======
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e2e:	e000      	b.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e30:	bf00      	nop
>>>>>>> origin/main
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3784      	adds	r7, #132	@ 0x84
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000300 	.word	0x50000300

08004e74 <HAL_CORDIC_Init>:
=======
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3784      	adds	r7, #132	@ 0x84
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd90      	pop	{r4, r7, pc}
 8004e46:	bf00      	nop
 8004e48:	50000100 	.word	0x50000100
 8004e4c:	50000300 	.word	0x50000300

08004e50 <HAL_CORDIC_Init>:
>>>>>>> origin/main
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
<<<<<<< HEAD
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e023      	b.n	8004ece <HAL_CORDIC_Init+0x5a>
=======
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e023      	b.n	8004eaa <HAL_CORDIC_Init+0x5a>
>>>>>>> origin/main

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
<<<<<<< HEAD
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb fcb0 	bl	8000800 <HAL_CORDIC_MspInit>
=======
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fb fcc2 	bl	8000800 <HAL_CORDIC_MspInit>
>>>>>>> origin/main
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
<<<<<<< HEAD
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <HAL_CORDIC_Configure>:
=======
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_CORDIC_Configure>:
>>>>>>> origin/main
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
<<<<<<< HEAD
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
=======
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
>>>>>>> origin/main
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
<<<<<<< HEAD
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d11d      	bne.n	8004f2e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <HAL_CORDIC_Configure+0x74>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	6811      	ldr	r1, [r2, #0]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	6992      	ldr	r2, [r2, #24]
 8004f04:	4311      	orrs	r1, r2
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	6852      	ldr	r2, [r2, #4]
 8004f0a:	4311      	orrs	r1, r2
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	6912      	ldr	r2, [r2, #16]
 8004f10:	4311      	orrs	r1, r2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	6952      	ldr	r2, [r2, #20]
 8004f16:	4311      	orrs	r1, r2
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	4311      	orrs	r1, r2
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	68d2      	ldr	r2, [r2, #12]
 8004f22:	4311      	orrs	r1, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e007      	b.n	8004f3e <HAL_CORDIC_Configure+0x66>
=======
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d11d      	bne.n	8004f0a <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <HAL_CORDIC_Configure+0x74>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	6811      	ldr	r1, [r2, #0]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	6992      	ldr	r2, [r2, #24]
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	6852      	ldr	r2, [r2, #4]
 8004ee6:	4311      	orrs	r1, r2
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	6912      	ldr	r2, [r2, #16]
 8004eec:	4311      	orrs	r1, r2
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	6952      	ldr	r2, [r2, #20]
 8004ef2:	4311      	orrs	r1, r2
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	4311      	orrs	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e007      	b.n	8004f1a <HAL_CORDIC_Configure+0x66>
>>>>>>> origin/main
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
<<<<<<< HEAD
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
=======
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	f043 0202 	orr.w	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
>>>>>>> origin/main
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	ff87f800 	.word	0xff87f800

08004f50 <HAL_CORDIC_Calculate>:
=======
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	ff87f800 	.word	0xff87f800

08004f2c <HAL_CORDIC_Calculate>:
>>>>>>> origin/main
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
<<<<<<< HEAD
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_CORDIC_Calculate+0x28>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_CORDIC_Calculate+0x28>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e058      	b.n	800503a <HAL_CORDIC_Calculate+0xea>
=======
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_CORDIC_Calculate+0x28>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_CORDIC_Calculate+0x28>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e058      	b.n	8005016 <HAL_CORDIC_Calculate+0xea>
>>>>>>> origin/main
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
<<<<<<< HEAD
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d14b      	bne.n	800502c <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa2:	f7fe fd13 	bl	80039cc <HAL_GetTick>
 8004fa6:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4619      	mov	r1, r3
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f847 	bl	8005042 <CORDIC_WriteInDataIncrementPtr>
=======
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d14b      	bne.n	8005008 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7e:	f7fe fd13 	bl	80039a8 <HAL_GetTick>
 8004f82:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f847 	bl	800501e <CORDIC_WriteInDataIncrementPtr>
>>>>>>> origin/main

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
<<<<<<< HEAD
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e028      	b.n	800500e <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f83d 	bl	8005042 <CORDIC_WriteInDataIncrementPtr>
=======
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e028      	b.n	8004fea <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f83d 	bl	800501e <CORDIC_WriteInDataIncrementPtr>
>>>>>>> origin/main

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d010      	beq.n	8004ff2 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8004fd0:	f7fe fcfc 	bl	80039cc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d208      	bcs.n	8004ff2 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e023      	b.n	800503a <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dae5      	bge.n	8004fc8 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	4619      	mov	r1, r3
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f846 	bl	8005094 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3b01      	subs	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1d3      	bne.n	8004fbc <HAL_CORDIC_Calculate+0x6c>
=======
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d010      	beq.n	8004fce <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8004fac:	f7fe fcfc 	bl	80039a8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d208      	bcs.n	8004fce <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e023      	b.n	8005016 <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dae5      	bge.n	8004fa4 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004fd8:	f107 0310 	add.w	r3, r7, #16
 8004fdc:	4619      	mov	r1, r3
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f846 	bl	8005070 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1d3      	bne.n	8004f98 <HAL_CORDIC_Calculate+0x6c>
>>>>>>> origin/main
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
<<<<<<< HEAD
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4619      	mov	r1, r3
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f83a 	bl	8005094 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e006      	b.n	800503a <HAL_CORDIC_Calculate+0xea>
=======
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f83a 	bl	8005070 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e006      	b.n	8005016 <HAL_CORDIC_Calculate+0xea>
>>>>>>> origin/main
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
<<<<<<< HEAD
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	f043 0202 	orr.w	r2, r3, #2
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <CORDIC_WriteInDataIncrementPtr>:
=======
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f043 0202 	orr.w	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <CORDIC_WriteInDataIncrementPtr>:
>>>>>>> origin/main
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
<<<<<<< HEAD
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	1d1a      	adds	r2, r3, #4
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800506c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005070:	d10a      	bne.n	8005088 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	601a      	str	r2, [r3, #0]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <CORDIC_ReadOutDataIncrementPtr>:
=======
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800504c:	d10a      	bne.n	8005064 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	601a      	str	r2, [r3, #0]
  }
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <CORDIC_ReadOutDataIncrementPtr>:
>>>>>>> origin/main
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
<<<<<<< HEAD
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1d1a      	adds	r2, r3, #4
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050c2:	d10a      	bne.n	80050da <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	601a      	str	r2, [r3, #0]
  }
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <__NVIC_SetPriorityGrouping>:
=======
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800509a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800509e:	d10a      	bne.n	80050b6 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	601a      	str	r2, [r3, #0]
  }
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <__NVIC_SetPriorityGrouping>:
>>>>>>> origin/main
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f8:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <__NVIC_SetPriorityGrouping+0x44>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005104:	4013      	ands	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800511a:	4a04      	ldr	r2, [pc, #16]	@ (800512c <__NVIC_SetPriorityGrouping+0x44>)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	60d3      	str	r3, [r2, #12]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <__NVIC_GetPriorityGrouping>:
=======
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <__NVIC_SetPriorityGrouping+0x44>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050e0:	4013      	ands	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050f6:	4a04      	ldr	r2, [pc, #16]	@ (8005108 <__NVIC_SetPriorityGrouping+0x44>)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	60d3      	str	r3, [r2, #12]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <__NVIC_GetPriorityGrouping>:
>>>>>>> origin/main
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <__NVIC_GetPriorityGrouping+0x18>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 0307 	and.w	r3, r3, #7
}
 800513e:	4618      	mov	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <__NVIC_EnableIRQ>:
=======
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <__NVIC_GetPriorityGrouping+0x18>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	f003 0307 	and.w	r3, r3, #7
}
 800511a:	4618      	mov	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <__NVIC_EnableIRQ>:
>>>>>>> origin/main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	2b00      	cmp	r3, #0
 800515c:	db0b      	blt.n	8005176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 021f 	and.w	r2, r3, #31
 8005164:	4907      	ldr	r1, [pc, #28]	@ (8005184 <__NVIC_EnableIRQ+0x38>)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2001      	movs	r0, #1
 800516e:	fa00 f202 	lsl.w	r2, r0, r2
 8005172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	e000e100 	.word	0xe000e100

08005188 <__NVIC_SetPriority>:
=======
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	2b00      	cmp	r3, #0
 8005138:	db0b      	blt.n	8005152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	f003 021f 	and.w	r2, r3, #31
 8005140:	4907      	ldr	r1, [pc, #28]	@ (8005160 <__NVIC_EnableIRQ+0x38>)
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	2001      	movs	r0, #1
 800514a:	fa00 f202 	lsl.w	r2, r0, r2
 800514e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	e000e100 	.word	0xe000e100

08005164 <__NVIC_SetPriority>:
>>>>>>> origin/main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005198:	2b00      	cmp	r3, #0
 800519a:	db0a      	blt.n	80051b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	490c      	ldr	r1, [pc, #48]	@ (80051d4 <__NVIC_SetPriority+0x4c>)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	0112      	lsls	r2, r2, #4
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	440b      	add	r3, r1
 80051ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005174:	2b00      	cmp	r3, #0
 8005176:	db0a      	blt.n	800518e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	490c      	ldr	r1, [pc, #48]	@ (80051b0 <__NVIC_SetPriority+0x4c>)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	440b      	add	r3, r1
 8005188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> origin/main
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80051b0:	e00a      	b.n	80051c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4908      	ldr	r1, [pc, #32]	@ (80051d8 <__NVIC_SetPriority+0x50>)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	3b04      	subs	r3, #4
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	440b      	add	r3, r1
 80051c6:	761a      	strb	r2, [r3, #24]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000e100 	.word	0xe000e100
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <NVIC_EncodePriority>:
=======
 800518c:	e00a      	b.n	80051a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	4908      	ldr	r1, [pc, #32]	@ (80051b4 <__NVIC_SetPriority+0x50>)
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	3b04      	subs	r3, #4
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	440b      	add	r3, r1
 80051a2:	761a      	strb	r2, [r3, #24]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000e100 	.word	0xe000e100
 80051b4:	e000ed00 	.word	0xe000ed00

080051b8 <NVIC_EncodePriority>:
>>>>>>> origin/main
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	@ 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	61fb      	str	r3, [r7, #28]
=======
 80051b8:	b480      	push	{r7}
 80051ba:	b089      	sub	sp, #36	@ 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	61fb      	str	r3, [r7, #28]
>>>>>>> origin/main
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f1c3 0307 	rsb	r3, r3, #7
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	bf28      	it	cs
 80051fa:	2304      	movcs	r3, #4
 80051fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3304      	adds	r3, #4
 8005202:	2b06      	cmp	r3, #6
 8005204:	d902      	bls.n	800520c <NVIC_EncodePriority+0x30>
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3b03      	subs	r3, #3
 800520a:	e000      	b.n	800520e <NVIC_EncodePriority+0x32>
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005210:	f04f 32ff 	mov.w	r2, #4294967295
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43da      	mvns	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	401a      	ands	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005224:	f04f 31ff 	mov.w	r1, #4294967295
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	43d9      	mvns	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	4313      	orrs	r3, r2
         );
}
 8005236:	4618      	mov	r0, r3
 8005238:	3724      	adds	r7, #36	@ 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_NVIC_SetPriorityGrouping>:
=======
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f1c3 0307 	rsb	r3, r3, #7
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	bf28      	it	cs
 80051d6:	2304      	movcs	r3, #4
 80051d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3304      	adds	r3, #4
 80051de:	2b06      	cmp	r3, #6
 80051e0:	d902      	bls.n	80051e8 <NVIC_EncodePriority+0x30>
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3b03      	subs	r3, #3
 80051e6:	e000      	b.n	80051ea <NVIC_EncodePriority+0x32>
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43da      	mvns	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	401a      	ands	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005200:	f04f 31ff 	mov.w	r1, #4294967295
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	43d9      	mvns	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005210:	4313      	orrs	r3, r2
         );
}
 8005212:	4618      	mov	r0, r3
 8005214:	3724      	adds	r7, #36	@ 0x24
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> origin/main
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
=======
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ff4c 	bl	80050e8 <__NVIC_SetPriorityGrouping>
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_NVIC_SetPriority>:
=======
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff ff4c 	bl	80050c4 <__NVIC_SetPriorityGrouping>
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_NVIC_SetPriority>:
>>>>>>> origin/main
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	73fb      	strb	r3, [r7, #15]
=======
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	73fb      	strb	r3, [r7, #15]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8005266:	f7ff ff63 	bl	8005130 <__NVIC_GetPriorityGrouping>
 800526a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	6978      	ldr	r0, [r7, #20]
 8005272:	f7ff ffb3 	bl	80051dc <NVIC_EncodePriority>
 8005276:	4602      	mov	r2, r0
 8005278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ff82 	bl	8005188 <__NVIC_SetPriority>
}
 8005284:	bf00      	nop
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_NVIC_EnableIRQ>:
=======
 8005242:	f7ff ff63 	bl	800510c <__NVIC_GetPriorityGrouping>
 8005246:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	f7ff ffb3 	bl	80051b8 <NVIC_EncodePriority>
 8005252:	4602      	mov	r2, r0
 8005254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ff82 	bl	8005164 <__NVIC_SetPriority>
}
 8005260:	bf00      	nop
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_NVIC_EnableIRQ>:
>>>>>>> origin/main
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
=======
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ff56 	bl	800514c <__NVIC_EnableIRQ>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_DMA_Init>:
=======
 8005272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff56 	bl	8005128 <__NVIC_EnableIRQ>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_DMA_Init>:
>>>>>>> origin/main
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
=======
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
<<<<<<< HEAD
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e08d      	b.n	80053d6 <HAL_DMA_Init+0x12e>
=======
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e08d      	b.n	80053b2 <HAL_DMA_Init+0x12e>
>>>>>>> origin/main
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	4b47      	ldr	r3, [pc, #284]	@ (80053e0 <HAL_DMA_Init+0x138>)
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d80f      	bhi.n	80052e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	4b45      	ldr	r3, [pc, #276]	@ (80053e4 <HAL_DMA_Init+0x13c>)
 80052ce:	4413      	add	r3, r2
 80052d0:	4a45      	ldr	r2, [pc, #276]	@ (80053e8 <HAL_DMA_Init+0x140>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	009a      	lsls	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a42      	ldr	r2, [pc, #264]	@ (80053ec <HAL_DMA_Init+0x144>)
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80052e4:	e00e      	b.n	8005304 <HAL_DMA_Init+0x5c>
=======
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b47      	ldr	r3, [pc, #284]	@ (80053bc <HAL_DMA_Init+0x138>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d80f      	bhi.n	80052c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b45      	ldr	r3, [pc, #276]	@ (80053c0 <HAL_DMA_Init+0x13c>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a45      	ldr	r2, [pc, #276]	@ (80053c4 <HAL_DMA_Init+0x140>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a42      	ldr	r2, [pc, #264]	@ (80053c8 <HAL_DMA_Init+0x144>)
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40
 80052c0:	e00e      	b.n	80052e0 <HAL_DMA_Init+0x5c>
>>>>>>> origin/main
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
<<<<<<< HEAD
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <HAL_DMA_Init+0x148>)
 80052ee:	4413      	add	r3, r2
 80052f0:	4a3d      	ldr	r2, [pc, #244]	@ (80053e8 <HAL_DMA_Init+0x140>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	009a      	lsls	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a3c      	ldr	r2, [pc, #240]	@ (80053f4 <HAL_DMA_Init+0x14c>)
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b40      	ldr	r3, [pc, #256]	@ (80053cc <HAL_DMA_Init+0x148>)
 80052ca:	4413      	add	r3, r2
 80052cc:	4a3d      	ldr	r2, [pc, #244]	@ (80053c4 <HAL_DMA_Init+0x140>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a3c      	ldr	r2, [pc, #240]	@ (80053d0 <HAL_DMA_Init+0x14c>)
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> origin/main
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800531a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531e:	60fb      	str	r3, [r7, #12]
=======
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]
=======
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
<<<<<<< HEAD
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9b6 	bl	80056c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005364:	d102      	bne.n	800536c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	605a      	str	r2, [r3, #4]
=======
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9b6 	bl	80056a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005340:	d102      	bne.n	8005348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
<<<<<<< HEAD
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005380:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <HAL_DMA_Init+0x104>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d80c      	bhi.n	80053ac <HAL_DMA_Init+0x104>
=======
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800535c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_DMA_Init+0x104>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d80c      	bhi.n	8005388 <HAL_DMA_Init+0x104>
>>>>>>> origin/main
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
<<<<<<< HEAD
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9d6 	bl	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	e008      	b.n	80053be <HAL_DMA_Init+0x116>
=======
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9d6 	bl	8005720 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e008      	b.n	800539a <HAL_DMA_Init+0x116>
>>>>>>> origin/main
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
<<<<<<< HEAD
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> origin/main
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40020407 	.word	0x40020407
 80053e4:	bffdfff8 	.word	0xbffdfff8
 80053e8:	cccccccd 	.word	0xcccccccd
 80053ec:	40020000 	.word	0x40020000
 80053f0:	bffdfbf8 	.word	0xbffdfbf8
 80053f4:	40020400 	.word	0x40020400

080053f8 <HAL_DMA_Start_IT>:
=======
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40020407 	.word	0x40020407
 80053c0:	bffdfff8 	.word	0xbffdfff8
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	40020000 	.word	0x40020000
 80053cc:	bffdfbf8 	.word	0xbffdfbf8
 80053d0:	40020400 	.word	0x40020400

080053d4 <HAL_DMA_Start_IT>:
>>>>>>> origin/main
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
<<<<<<< HEAD
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]
=======
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_DMA_Start_IT+0x20>
 8005414:	2302      	movs	r3, #2
 8005416:	e066      	b.n	80054e6 <HAL_DMA_Start_IT+0xee>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d155      	bne.n	80054d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f8fb 	bl	800564c <DMA_SetConfig>
=======
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Start_IT+0x20>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e066      	b.n	80054c2 <HAL_DMA_Start_IT+0xee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d155      	bne.n	80054b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f8fb 	bl	8005628 <DMA_SetConfig>
>>>>>>> origin/main

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 020e 	orr.w	r2, r2, #14
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e00f      	b.n	8005490 <HAL_DMA_Start_IT+0x98>
=======
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 020e 	orr.w	r2, r2, #14
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e00f      	b.n	800546c <HAL_DMA_Start_IT+0x98>
>>>>>>> origin/main
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 020a 	orr.w	r2, r2, #10
 800548e:	601a      	str	r2, [r3, #0]
=======
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 020a 	orr.w	r2, r2, #10
 800546a:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
<<<<<<< HEAD
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_DMA_Start_IT+0xce>
=======
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_DMA_Start_IT+0xce>
>>>>>>> origin/main
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c4:	601a      	str	r2, [r3, #0]
=======
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a0:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e005      	b.n	80054e4 <HAL_DMA_Start_IT+0xec>
=======
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e005      	b.n	80054c0 <HAL_DMA_Start_IT+0xec>
>>>>>>> origin/main
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
 80054e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_DMA_IRQHandler>:
=======
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
 80054be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_DMA_IRQHandler>:
>>>>>>> origin/main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	2204      	movs	r2, #4
 8005510:	409a      	lsls	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4013      	ands	r3, r2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d026      	beq.n	8005568 <HAL_DMA_IRQHandler+0x7a>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d021      	beq.n	8005568 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0204 	bic.w	r2, r2, #4
 8005540:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f003 021f 	and.w	r2, r3, #31
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	2104      	movs	r1, #4
 8005550:	fa01 f202 	lsl.w	r2, r1, r2
 8005554:	605a      	str	r2, [r3, #4]
=======
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2204      	movs	r2, #4
 80054ec:	409a      	lsls	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d026      	beq.n	8005544 <HAL_DMA_IRQHandler+0x7a>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d021      	beq.n	8005544 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0204 	bic.w	r2, r2, #4
 800551c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	f003 021f 	and.w	r2, r3, #31
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2104      	movs	r1, #4
 800552c:	fa01 f202 	lsl.w	r2, r1, r2
 8005530:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555a:	2b00      	cmp	r3, #0
 800555c:	d071      	beq.n	8005642 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005566:	e06c      	b.n	8005642 <HAL_DMA_IRQHandler+0x154>
=======
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	2b00      	cmp	r3, #0
 8005538:	d071      	beq.n	800561e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005542:	e06c      	b.n	800561e <HAL_DMA_IRQHandler+0x154>
>>>>>>> origin/main
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
<<<<<<< HEAD
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	2202      	movs	r2, #2
 8005572:	409a      	lsls	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02e      	beq.n	80055da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d029      	beq.n	80055da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 020a 	bic.w	r2, r2, #10
 80055a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	f003 021f 	and.w	r2, r3, #31
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	2102      	movs	r1, #2
 80055ba:	fa01 f202 	lsl.w	r2, r1, r2
 80055be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d038      	beq.n	8005642 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055d8:	e033      	b.n	8005642 <HAL_DMA_IRQHandler+0x154>
=======
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2202      	movs	r2, #2
 800554e:	409a      	lsls	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02e      	beq.n	80055b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d029      	beq.n	80055b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 020a 	bic.w	r2, r2, #10
 800557e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	f003 021f 	and.w	r2, r3, #31
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005594:	2102      	movs	r1, #2
 8005596:	fa01 f202 	lsl.w	r2, r1, r2
 800559a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d038      	beq.n	800561e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055b4:	e033      	b.n	800561e <HAL_DMA_IRQHandler+0x154>
>>>>>>> origin/main
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
<<<<<<< HEAD
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2208      	movs	r2, #8
 80055e4:	409a      	lsls	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02a      	beq.n	8005644 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d025      	beq.n	8005644 <HAL_DMA_IRQHandler+0x156>
=======
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2208      	movs	r2, #8
 80055c0:	409a      	lsls	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d02a      	beq.n	8005620 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d025      	beq.n	8005620 <HAL_DMA_IRQHandler+0x156>
>>>>>>> origin/main
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 020e 	bic.w	r2, r2, #14
 8005606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	f003 021f 	and.w	r2, r3, #31
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	2101      	movs	r1, #1
 8005616:	fa01 f202 	lsl.w	r2, r1, r2
 800561a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
=======
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 020e 	bic.w	r2, r2, #14
 80055e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f202 	lsl.w	r2, r1, r2
 80055f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
>>>>>>> origin/main
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 8005642:	bf00      	nop
 8005644:	bf00      	nop
}
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <DMA_SetConfig>:
=======
 800561e:	bf00      	nop
 8005620:	bf00      	nop
}
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <DMA_SetConfig>:
>>>>>>> origin/main
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005662:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005674:	605a      	str	r2, [r3, #4]
=======
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800563e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005650:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
<<<<<<< HEAD
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f003 021f 	and.w	r2, r3, #31
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f202 	lsl.w	r2, r1, r2
 8005688:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b10      	cmp	r3, #16
 8005698:	d108      	bne.n	80056ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	60da      	str	r2, [r3, #12]
=======
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	f003 021f 	and.w	r2, r3, #31
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	2101      	movs	r1, #1
 8005660:	fa01 f202 	lsl.w	r2, r1, r2
 8005664:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b10      	cmp	r3, #16
 8005674:	d108      	bne.n	8005688 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 80056aa:	e007      	b.n	80056bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
 8005686:	e007      	b.n	8005698 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> origin/main
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
=======
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
<<<<<<< HEAD
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b16      	ldr	r3, [pc, #88]	@ (8005730 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80056d8:	429a      	cmp	r2, r3
 80056da:	d802      	bhi.n	80056e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80056dc:	4b15      	ldr	r3, [pc, #84]	@ (8005734 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e001      	b.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
=======
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	4b16      	ldr	r3, [pc, #88]	@ (800570c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d802      	bhi.n	80056be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80056b8:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e001      	b.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
>>>>>>> origin/main
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
<<<<<<< HEAD
 80056e2:	4b15      	ldr	r3, [pc, #84]	@ (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056e4:	617b      	str	r3, [r7, #20]
=======
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056c0:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
<<<<<<< HEAD
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	3b08      	subs	r3, #8
 80056f2:	4a12      	ldr	r2, [pc, #72]	@ (800573c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	089b      	lsrs	r3, r3, #2
 8005702:	009a      	lsls	r2, r3, #2
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a0b      	ldr	r2, [pc, #44]	@ (8005740 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005712:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2201      	movs	r2, #1
 800571c:	409a      	lsls	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40020407 	.word	0x40020407
 8005734:	40020800 	.word	0x40020800
 8005738:	40020820 	.word	0x40020820
 800573c:	cccccccd 	.word	0xcccccccd
 8005740:	40020880 	.word	0x40020880

08005744 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	3b08      	subs	r3, #8
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	009a      	lsls	r2, r3, #2
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a0b      	ldr	r2, [pc, #44]	@ (800571c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2201      	movs	r2, #1
 80056f8:	409a      	lsls	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40020407 	.word	0x40020407
 8005710:	40020800 	.word	0x40020800
 8005714:	40020820 	.word	0x40020820
 8005718:	cccccccd 	.word	0xcccccccd
 800571c:	40020880 	.word	0x40020880

08005720 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> origin/main
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	461a      	mov	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005766:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3b01      	subs	r3, #1
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2201      	movs	r2, #1
 8005772:	409a      	lsls	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	1000823f 	.word	0x1000823f
 8005788:	40020940 	.word	0x40020940

0800578c <HAL_EXTI_RegisterCallback>:
=======
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	461a      	mov	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a08      	ldr	r2, [pc, #32]	@ (8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005742:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	2201      	movs	r2, #1
 800574e:	409a      	lsls	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	1000823f 	.word	0x1000823f
 8005764:	40020940 	.word	0x40020940

08005768 <HAL_EXTI_RegisterCallback>:
>>>>>>> origin/main
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
<<<<<<< HEAD
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	460b      	mov	r3, r1
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
=======
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	460b      	mov	r3, r1
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
<<<<<<< HEAD
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <HAL_EXTI_RegisterCallback+0x20>
=======
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <HAL_EXTI_RegisterCallback+0x20>
>>>>>>> origin/main
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
<<<<<<< HEAD
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]
      break;
 80057aa:	e005      	b.n	80057b8 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
      break;
 80057b6:	bf00      	nop
  }

  return status;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_EXTI_GetHandle>:
=======
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]
      break;
 8005786:	e005      	b.n	8005794 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
      break;
 8005792:	bf00      	nop
  }

  return status;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
}
 8005796:	4618      	mov	r0, r3
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_EXTI_GetHandle>:
>>>>>>> origin/main
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
<<<<<<< HEAD
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
=======
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
<<<<<<< HEAD
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e003      	b.n	80057e2 <HAL_EXTI_GetHandle+0x1c>
=======
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e003      	b.n	80057be <HAL_EXTI_GetHandle+0x1c>
>>>>>>> origin/main
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
<<<<<<< HEAD
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_EXTI_IRQHandler>:
=======
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
  }
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_EXTI_IRQHandler>:
>>>>>>> origin/main
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
<<<<<<< HEAD
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
=======
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
<<<<<<< HEAD
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2201      	movs	r2, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <HAL_EXTI_IRQHandler+0x5c>)
 800581a:	4413      	add	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4013      	ands	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4798      	blx	r3
    }
  }
}
 8005842:	bf00      	nop
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40010414 	.word	0x40010414

08005850 <HAL_FDCAN_Init>:
=======
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2201      	movs	r2, #1
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005828 <HAL_EXTI_IRQHandler+0x5c>)
 80057f6:	4413      	add	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4013      	ands	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4798      	blx	r3
    }
  }
}
 800581e:	bf00      	nop
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40010414 	.word	0x40010414

0800582c <HAL_FDCAN_Init>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
=======
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
<<<<<<< HEAD
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e147      	b.n	8005af2 <HAL_FDCAN_Init+0x2a2>
=======
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e147      	b.n	8005ace <HAL_FDCAN_Init+0x2a2>
>>>>>>> origin/main

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
<<<<<<< HEAD
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb f8be 	bl	80009f8 <HAL_FDCAN_MspInit>
=======
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb f8d0 	bl	80009f8 <HAL_FDCAN_MspInit>
>>>>>>> origin/main
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
<<<<<<< HEAD
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0210 	bic.w	r2, r2, #16
 800588a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800588c:	f7fe f89e 	bl	80039cc <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005892:	e012      	b.n	80058ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005894:	f7fe f89a 	bl	80039cc <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b0a      	cmp	r3, #10
 80058a0:	d90b      	bls.n	80058ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2203      	movs	r2, #3
 80058b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e11b      	b.n	8005af2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d0e5      	beq.n	8005894 <HAL_FDCAN_Init+0x44>
=======
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0210 	bic.w	r2, r2, #16
 8005866:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005868:	f7fe f89e 	bl	80039a8 <HAL_GetTick>
 800586c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800586e:	e012      	b.n	8005896 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005870:	f7fe f89a 	bl	80039a8 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b0a      	cmp	r3, #10
 800587c:	d90b      	bls.n	8005896 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005882:	f043 0201 	orr.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2203      	movs	r2, #3
 800588e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e11b      	b.n	8005ace <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d0e5      	beq.n	8005870 <HAL_FDCAN_Init+0x44>
>>>>>>> origin/main
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
<<<<<<< HEAD
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058d8:	f7fe f878 	bl	80039cc <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058de:	e012      	b.n	8005906 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058e0:	f7fe f874 	bl	80039cc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b0a      	cmp	r3, #10
 80058ec:	d90b      	bls.n	8005906 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f2:	f043 0201 	orr.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2203      	movs	r2, #3
 80058fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0f5      	b.n	8005af2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0e5      	beq.n	80058e0 <HAL_FDCAN_Init+0x90>
=======
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058b4:	f7fe f878 	bl	80039a8 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058ba:	e012      	b.n	80058e2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058bc:	f7fe f874 	bl	80039a8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b0a      	cmp	r3, #10
 80058c8:	d90b      	bls.n	80058e2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0f5      	b.n	8005ace <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0e5      	beq.n	80058bc <HAL_FDCAN_Init+0x90>
>>>>>>> origin/main
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
<<<<<<< HEAD
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0202 	orr.w	r2, r2, #2
 8005922:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a74      	ldr	r2, [pc, #464]	@ (8005afc <HAL_FDCAN_Init+0x2ac>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d103      	bne.n	8005936 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800592e:	4a74      	ldr	r2, [pc, #464]	@ (8005b00 <HAL_FDCAN_Init+0x2b0>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	6013      	str	r3, [r2, #0]
=======
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0202 	orr.w	r2, r2, #2
 80058fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a74      	ldr	r2, [pc, #464]	@ (8005ad8 <HAL_FDCAN_Init+0x2ac>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d103      	bne.n	8005912 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800590a:	4a74      	ldr	r2, [pc, #464]	@ (8005adc <HAL_FDCAN_Init+0x2b0>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7c1b      	ldrb	r3, [r3, #16]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d108      	bne.n	8005950 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594c:	619a      	str	r2, [r3, #24]
 800594e:	e007      	b.n	8005960 <HAL_FDCAN_Init+0x110>
=======
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7c1b      	ldrb	r3, [r3, #16]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d108      	bne.n	800592c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005928:	619a      	str	r2, [r3, #24]
 800592a:	e007      	b.n	800593c <HAL_FDCAN_Init+0x110>
>>>>>>> origin/main
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
<<<<<<< HEAD
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800595e:	619a      	str	r2, [r3, #24]
=======
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800593a:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
<<<<<<< HEAD
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7c5b      	ldrb	r3, [r3, #17]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d108      	bne.n	800597a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005976:	619a      	str	r2, [r3, #24]
 8005978:	e007      	b.n	800598a <HAL_FDCAN_Init+0x13a>
=======
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7c5b      	ldrb	r3, [r3, #17]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d108      	bne.n	8005956 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005952:	619a      	str	r2, [r3, #24]
 8005954:	e007      	b.n	8005966 <HAL_FDCAN_Init+0x13a>
>>>>>>> origin/main
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
<<<<<<< HEAD
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005988:	619a      	str	r2, [r3, #24]
=======
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005964:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
<<<<<<< HEAD
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7c9b      	ldrb	r3, [r3, #18]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d108      	bne.n	80059a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059a0:	619a      	str	r2, [r3, #24]
 80059a2:	e007      	b.n	80059b4 <HAL_FDCAN_Init+0x164>
=======
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7c9b      	ldrb	r3, [r3, #18]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d108      	bne.n	8005980 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800597c:	619a      	str	r2, [r3, #24]
 800597e:	e007      	b.n	8005990 <HAL_FDCAN_Init+0x164>
>>>>>>> origin/main
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
<<<<<<< HEAD
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059b2:	619a      	str	r2, [r3, #24]
=======
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800598e:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
<<<<<<< HEAD
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80059d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0210 	bic.w	r2, r2, #16
 80059e8:	611a      	str	r2, [r3, #16]
=======
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80059b4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0210 	bic.w	r2, r2, #16
 80059c4:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
<<<<<<< HEAD
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d108      	bne.n	8005a04 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0204 	orr.w	r2, r2, #4
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	e02c      	b.n	8005a5e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d028      	beq.n	8005a5e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d01c      	beq.n	8005a4e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a22:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0210 	orr.w	r2, r2, #16
 8005a32:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d110      	bne.n	8005a5e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0220 	orr.w	r2, r2, #32
 8005a4a:	619a      	str	r2, [r3, #24]
 8005a4c:	e007      	b.n	8005a5e <HAL_FDCAN_Init+0x20e>
=======
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d108      	bne.n	80059e0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0204 	orr.w	r2, r2, #4
 80059dc:	619a      	str	r2, [r3, #24]
 80059de:	e02c      	b.n	8005a3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d028      	beq.n	8005a3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d01c      	beq.n	8005a2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059fe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0210 	orr.w	r2, r2, #16
 8005a0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d110      	bne.n	8005a3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0220 	orr.w	r2, r2, #32
 8005a26:	619a      	str	r2, [r3, #24]
 8005a28:	e007      	b.n	8005a3a <HAL_FDCAN_Init+0x20e>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
<<<<<<< HEAD
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0220 	orr.w	r2, r2, #32
 8005a5c:	619a      	str	r2, [r3, #24]
=======
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0220 	orr.w	r2, r2, #32
 8005a38:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
<<<<<<< HEAD
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a6e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a76:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a86:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a88:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a92:	d115      	bne.n	8005ac0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005aa2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005aac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005abc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005abe:	60da      	str	r2, [r3, #12]
=======
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a6e:	d115      	bne.n	8005a9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a84:	3b01      	subs	r3, #1
 8005a86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a90:	3b01      	subs	r3, #1
 8005a92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a9a:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
<<<<<<< HEAD
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb14 	bl	8006104 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40006400 	.word	0x40006400
 8005b00:	40006500 	.word	0x40006500

08005b04 <HAL_FDCAN_GetRxMessage>:
=======
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fb14 	bl	80060e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40006400 	.word	0x40006400
 8005adc:	40006500 	.word	0x40006500

08005ae0 <HAL_FDCAN_GetRxMessage>:
>>>>>>> origin/main
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
<<<<<<< HEAD
 8005b04:	b480      	push	{r7}
 8005b06:	b08b      	sub	sp, #44	@ 0x2c
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
=======
 8005ae0:	b480      	push	{r7}
 8005ae2:	b08b      	sub	sp, #44	@ 0x2c
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
>>>>>>> origin/main
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
<<<<<<< HEAD
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b1c:	76fb      	strb	r3, [r7, #27]
=======
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005af8:	76fb      	strb	r3, [r7, #27]
>>>>>>> origin/main

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
<<<<<<< HEAD
 8005b1e:	7efb      	ldrb	r3, [r7, #27]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	f040 80e8 	bne.w	8005cf6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d137      	bne.n	8005b9c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0db      	b.n	8005d04 <HAL_FDCAN_GetRxMessage+0x200>
=======
 8005afa:	7efb      	ldrb	r3, [r7, #27]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	f040 80e8 	bne.w	8005cd2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d137      	bne.n	8005b78 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0db      	b.n	8005ce0 <HAL_FDCAN_GetRxMessage+0x200>
>>>>>>> origin/main
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
<<<<<<< HEAD
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5c:	d10a      	bne.n	8005b74 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6e:	d101      	bne.n	8005b74 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
=======
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b38:	d10a      	bne.n	8005b50 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b4a:	d101      	bne.n	8005b50 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
>>>>>>> origin/main
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
<<<<<<< HEAD
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9a:	e036      	b.n	8005c0a <HAL_FDCAN_GetRxMessage+0x106>
=======
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b58:	0a1b      	lsrs	r3, r3, #8
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	440b      	add	r3, r1
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b76:	e036      	b.n	8005be6 <HAL_FDCAN_GetRxMessage+0x106>
>>>>>>> origin/main
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
<<<<<<< HEAD
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0a3      	b.n	8005d04 <HAL_FDCAN_GetRxMessage+0x200>
=======
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d107      	bne.n	8005b98 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0a3      	b.n	8005ce0 <HAL_FDCAN_GetRxMessage+0x200>
>>>>>>> origin/main
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
<<<<<<< HEAD
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bcc:	d10a      	bne.n	8005be4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bde:	d101      	bne.n	8005be4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
=======
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ba8:	d10a      	bne.n	8005bc0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bba:	d101      	bne.n	8005bc0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
>>>>>>> origin/main
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
<<<<<<< HEAD
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4413      	add	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	440b      	add	r3, r1
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc8:	0a1b      	lsrs	r3, r3, #8
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> origin/main
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
<<<<<<< HEAD
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d107      	bne.n	8005c2e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	0c9b      	lsrs	r3, r3, #18
 8005c24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e005      	b.n	8005c3a <HAL_FDCAN_GetRxMessage+0x136>
=======
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d107      	bne.n	8005c0a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	0c9b      	lsrs	r3, r3, #18
 8005c00:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e005      	b.n	8005c16 <HAL_FDCAN_GetRxMessage+0x136>
>>>>>>> origin/main
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
<<<<<<< HEAD
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
=======
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
<<<<<<< HEAD
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	3304      	adds	r3, #4
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	f003 020f 	and.w	r2, r3, #15
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	0fda      	lsrs	r2, r3, #31
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
 8005cae:	e00a      	b.n	8005cc6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	440b      	add	r3, r1
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	4a11      	ldr	r2, [pc, #68]	@ (8005d10 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005ccc:	5cd3      	ldrb	r3, [r2, r3]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d3ec      	bcc.n	8005cb0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b40      	cmp	r3, #64	@ 0x40
 8005cda:	d105      	bne.n	8005ce8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005ce6:	e004      	b.n	8005cf2 <HAL_FDCAN_GetRxMessage+0x1ee>
=======
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	3304      	adds	r3, #4
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0e1b      	lsrs	r3, r3, #24
 8005c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	0fda      	lsrs	r2, r3, #31
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	3304      	adds	r3, #4
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c86:	2300      	movs	r3, #0
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	e00a      	b.n	8005ca2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	441a      	add	r2, r3
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	440b      	add	r3, r1
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4a11      	ldr	r2, [pc, #68]	@ (8005cec <HAL_FDCAN_GetRxMessage+0x20c>)
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d3ec      	bcc.n	8005c8c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b40      	cmp	r3, #64	@ 0x40
 8005cb6:	d105      	bne.n	8005cc4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005cc2:	e004      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x1ee>
>>>>>>> origin/main
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
<<<<<<< HEAD
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
=======
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
>>>>>>> origin/main
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e006      	b.n	8005d04 <HAL_FDCAN_GetRxMessage+0x200>
=======
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e006      	b.n	8005ce0 <HAL_FDCAN_GetRxMessage+0x200>
>>>>>>> origin/main
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
<<<<<<< HEAD
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cfa:	f043 0208 	orr.w	r2, r3, #8
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	372c      	adds	r7, #44	@ 0x2c
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	0800cd5c 	.word	0x0800cd5c

08005d14 <HAL_FDCAN_GetTxEvent>:
=======
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd6:	f043 0208 	orr.w	r2, r3, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	372c      	adds	r7, #44	@ 0x2c
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	0800cd3c 	.word	0x0800cd3c

08005cf0 <HAL_FDCAN_GetTxEvent>:
>>>>>>> origin/main
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
<<<<<<< HEAD
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d24:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d16e      	bne.n	8005e0a <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d107      	bne.n	8005d4c <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e065      	b.n	8005e18 <HAL_FDCAN_GetTxEvent+0x104>
=======
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d00:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d16e      	bne.n	8005de6 <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d107      	bne.n	8005d28 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e065      	b.n	8005df4 <HAL_FDCAN_GetTxEvent+0x104>
>>>>>>> origin/main
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
<<<<<<< HEAD
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d107      	bne.n	8005d8c <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0c9b      	lsrs	r3, r3, #18
 8005d82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e005      	b.n	8005d98 <HAL_FDCAN_GetTxEvent+0x84>
=======
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	0c9b      	lsrs	r3, r3, #18
 8005d5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e005      	b.n	8005d74 <HAL_FDCAN_GetTxEvent+0x84>
>>>>>>> origin/main
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
<<<<<<< HEAD
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	601a      	str	r2, [r3, #0]
=======
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
<<<<<<< HEAD
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3304      	adds	r3, #4
 8005db4:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	0c1b      	lsrs	r3, r3, #16
 8005dc6:	f003 020f 	and.w	r2, r3, #15
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	0e1a      	lsrs	r2, r3, #24
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e006      	b.n	8005e18 <HAL_FDCAN_GetTxEvent+0x104>
=======
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	f003 020f 	and.w	r2, r3, #15
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0e1a      	lsrs	r2, r3, #24
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e006      	b.n	8005df4 <HAL_FDCAN_GetTxEvent+0x104>
>>>>>>> origin/main
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
<<<<<<< HEAD
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0e:	f043 0208 	orr.w	r2, r3, #8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_FDCAN_IRQHandler>:
=======
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dea:	f043 0208 	orr.w	r2, r3, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_FDCAN_IRQHandler>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	@ 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
=======
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	@ 0x30
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
<<<<<<< HEAD
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e32:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e40:	4013      	ands	r3, r2
 8005e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e58:	4013      	ands	r3, r2
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e70:	4013      	ands	r3, r2
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005e7e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e92:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e96:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00c      	beq.n	8005eda <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	099b      	lsrs	r3, r3, #6
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d006      	beq.n	8005eda <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2240      	movs	r2, #64	@ 0x40
 8005ed2:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e34:	4013      	ands	r3, r2
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e56:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005e5a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	4013      	ands	r3, r2
 8005e66:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e72:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d006      	beq.n	8005eb6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2240      	movs	r2, #64	@ 0x40
 8005eae:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
<<<<<<< HEAD
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f901 	bl	80060dc <HAL_FDCAN_HighPriorityMessageCallback>
=======
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f901 	bl	80060b8 <HAL_FDCAN_HighPriorityMessageCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
<<<<<<< HEAD
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01a      	beq.n	8005f1c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005efa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d014      	beq.n	8005ef8 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ed6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005eee:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
<<<<<<< HEAD
 8005f14:	6939      	ldr	r1, [r7, #16]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8c1 	bl	800609e <HAL_FDCAN_TxBufferAbortCallback>
=======
 8005ef0:	6939      	ldr	r1, [r7, #16]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8c1 	bl	800607a <HAL_FDCAN_TxBufferAbortCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
<<<<<<< HEAD
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f28:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f04:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
<<<<<<< HEAD
 8005f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fb fc33 	bl	8001798 <HAL_FDCAN_TxEventFifoCallback>
=======
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fb fc87 	bl	800181c <HAL_FDCAN_TxEventFifoCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
<<<<<<< HEAD
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f3e:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
<<<<<<< HEAD
 8005f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb fc4e 	bl	80017e4 <HAL_FDCAN_RxFifo0Callback>
=======
 8005f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fb fca2 	bl	8001868 <HAL_FDCAN_RxFifo0Callback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
<<<<<<< HEAD
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f54:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f30:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
<<<<<<< HEAD
 8005f56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fb fcb3 	bl	80018c4 <HAL_FDCAN_RxFifo1Callback>
=======
 8005f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fb fd07 	bl	8001948 <HAL_FDCAN_RxFifo1Callback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
<<<<<<< HEAD
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	0a5b      	lsrs	r3, r3, #9
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	0a5b      	lsrs	r3, r3, #9
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	0a5b      	lsrs	r3, r3, #9
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
<<<<<<< HEAD
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f882 	bl	800608a <HAL_FDCAN_TxFifoEmptyCallback>
=======
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f882 	bl	8006066 <HAL_FDCAN_TxFifoEmptyCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
<<<<<<< HEAD
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	09db      	lsrs	r3, r3, #7
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d019      	beq.n	8005fc6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	09db      	lsrs	r3, r3, #7
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d013      	beq.n	8005fc6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fa6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2280      	movs	r2, #128	@ 0x80
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	09db      	lsrs	r3, r3, #7
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d019      	beq.n	8005fa2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d013      	beq.n	8005fa2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f82:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2280      	movs	r2, #128	@ 0x80
 8005f98:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
<<<<<<< HEAD
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fb fc04 	bl	80017ce <HAL_FDCAN_TxBufferCompleteCallback>
=======
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fb fc58 	bl	8001852 <HAL_FDCAN_TxBufferCompleteCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
<<<<<<< HEAD
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	0b5b      	lsrs	r3, r3, #13
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	0b5b      	lsrs	r3, r3, #13
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fe6:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	0b5b      	lsrs	r3, r3, #13
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	0b5b      	lsrs	r3, r3, #13
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fc2:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
<<<<<<< HEAD
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f863 	bl	80060b4 <HAL_FDCAN_TimestampWraparoundCallback>
=======
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f863 	bl	8006090 <HAL_FDCAN_TimestampWraparoundCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
<<<<<<< HEAD
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	0bdb      	lsrs	r3, r3, #15
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00d      	beq.n	8006016 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	0bdb      	lsrs	r3, r3, #15
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800600e:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	0bdb      	lsrs	r3, r3, #15
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	0bdb      	lsrs	r3, r3, #15
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005fea:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
<<<<<<< HEAD
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f859 	bl	80060c8 <HAL_FDCAN_TimeoutOccurredCallback>
=======
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f859 	bl	80060a4 <HAL_FDCAN_TimeoutOccurredCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
<<<<<<< HEAD
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	0b9b      	lsrs	r3, r3, #14
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	0b9b      	lsrs	r3, r3, #14
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006036:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	0b9b      	lsrs	r3, r3, #14
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d010      	beq.n	8006020 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	0b9b      	lsrs	r3, r3, #14
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006012:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006018:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> origin/main
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
<<<<<<< HEAD
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
<<<<<<< HEAD
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fb fb83 	bl	8001760 <HAL_FDCAN_ErrorStatusCallback>
=======
 800602e:	69f9      	ldr	r1, [r7, #28]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fb fbd7 	bl	80017e4 <HAL_FDCAN_ErrorStatusCallback>
>>>>>>> origin/main
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
<<<<<<< HEAD
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_FDCAN_IRQHandler+0x25e>
=======
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_FDCAN_IRQHandler+0x25e>
>>>>>>> origin/main
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
<<<<<<< HEAD
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f837 	bl	80060f0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006082:	bf00      	nop
 8006084:	3730      	adds	r7, #48	@ 0x30
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_FDCAN_TxFifoEmptyCallback>:
=======
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f837 	bl	80060cc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800605e:	bf00      	nop
 8006060:	3730      	adds	r7, #48	@ 0x30
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_FDCAN_TxFifoEmptyCallback>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
=======
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_FDCAN_TxBufferAbortCallback>:
=======
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_FDCAN_TxBufferAbortCallback>:
>>>>>>> origin/main
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
<<<<<<< HEAD
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
=======
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_FDCAN_TimestampWraparoundCallback>:
=======
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_FDCAN_TimestampWraparoundCallback>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
=======
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_FDCAN_TimeoutOccurredCallback>:
=======
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_FDCAN_TimeoutOccurredCallback>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
=======
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_FDCAN_HighPriorityMessageCallback>:
=======
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_FDCAN_HighPriorityMessageCallback>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
=======
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_FDCAN_ErrorCallback>:
=======
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_FDCAN_ErrorCallback>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
=======
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <FDCAN_CalcultateRamBlockAddresses>:
=======
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <FDCAN_CalcultateRamBlockAddresses>:
>>>>>>> origin/main
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800610c:	4b27      	ldr	r3, [pc, #156]	@ (80061ac <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800610e:	60bb      	str	r3, [r7, #8]
=======
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80060e8:	4b27      	ldr	r3, [pc, #156]	@ (8006188 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80060ea:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
<<<<<<< HEAD
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800611e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006126:	041a      	lsls	r2, r3, #16
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006144:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	061a      	lsls	r2, r3, #24
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e005      	b.n	8006192 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3304      	adds	r3, #4
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3f3      	bcc.n	8006186 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	4000a400 	.word	0x4000a400

080061b0 <HAL_GPIO_Init>:
=======
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	041a      	lsls	r2, r3, #16
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006120:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	061a      	lsls	r2, r3, #24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e005      	b.n	800616e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3304      	adds	r3, #4
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3f3      	bcc.n	8006162 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	4000a400 	.word	0x4000a400

0800618c <HAL_GPIO_Init>:
>>>>>>> origin/main
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
=======
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< HEAD
 80061be:	e15a      	b.n	8006476 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	2101      	movs	r1, #1
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa01 f303 	lsl.w	r3, r1, r3
 80061cc:	4013      	ands	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 814c 	beq.w	8006470 <HAL_GPIO_Init+0x2c0>
=======
 800619a:	e15a      	b.n	8006452 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2101      	movs	r1, #1
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 814c 	beq.w	800644c <HAL_GPIO_Init+0x2c0>
>>>>>>> origin/main
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< HEAD
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d005      	beq.n	80061f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d130      	bne.n	8006252 <HAL_GPIO_Init+0xa2>
=======
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d005      	beq.n	80061cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d130      	bne.n	800622e <HAL_GPIO_Init+0xa2>
>>>>>>> origin/main
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	2203      	movs	r2, #3
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006226:	2201      	movs	r2, #1
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4013      	ands	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	f003 0201 	and.w	r2, r3, #1
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d017      	beq.n	800628e <HAL_GPIO_Init+0xde>
=======
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	2203      	movs	r2, #3
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4013      	ands	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006202:	2201      	movs	r2, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4013      	ands	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	091b      	lsrs	r3, r3, #4
 8006218:	f003 0201 	and.w	r2, r3, #1
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d017      	beq.n	800626a <HAL_GPIO_Init+0xde>
>>>>>>> origin/main
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	2203      	movs	r2, #3
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	43db      	mvns	r3, r3
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4013      	ands	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	60da      	str	r2, [r3, #12]
=======
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	2203      	movs	r2, #3
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4013      	ands	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d123      	bne.n	80062e2 <HAL_GPIO_Init+0x132>
=======
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d123      	bne.n	80062be <HAL_GPIO_Init+0x132>
>>>>>>> origin/main
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	08da      	lsrs	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3208      	adds	r2, #8
 80062a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	220f      	movs	r2, #15
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4013      	ands	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	08da      	lsrs	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3208      	adds	r2, #8
 80062dc:	6939      	ldr	r1, [r7, #16]
 80062de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	08da      	lsrs	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3208      	adds	r2, #8
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	220f      	movs	r2, #15
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4013      	ands	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	08da      	lsrs	r2, r3, #3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3208      	adds	r2, #8
 80062b8:	6939      	ldr	r1, [r7, #16]
 80062ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> origin/main
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	2203      	movs	r2, #3
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43db      	mvns	r3, r3
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 0203 	and.w	r2, r3, #3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	601a      	str	r2, [r3, #0]
=======
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	2203      	movs	r2, #3
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43db      	mvns	r3, r3
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0203 	and.w	r2, r3, #3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80a6 	beq.w	8006470 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006324:	4b5b      	ldr	r3, [pc, #364]	@ (8006494 <HAL_GPIO_Init+0x2e4>)
 8006326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006328:	4a5a      	ldr	r2, [pc, #360]	@ (8006494 <HAL_GPIO_Init+0x2e4>)
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006330:	4b58      	ldr	r3, [pc, #352]	@ (8006494 <HAL_GPIO_Init+0x2e4>)
 8006332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800633c:	4a56      	ldr	r2, [pc, #344]	@ (8006498 <HAL_GPIO_Init+0x2e8>)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	089b      	lsrs	r3, r3, #2
 8006342:	3302      	adds	r3, #2
 8006344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	220f      	movs	r2, #15
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4013      	ands	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006366:	d01f      	beq.n	80063a8 <HAL_GPIO_Init+0x1f8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a4c      	ldr	r2, [pc, #304]	@ (800649c <HAL_GPIO_Init+0x2ec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d019      	beq.n	80063a4 <HAL_GPIO_Init+0x1f4>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a4b      	ldr	r2, [pc, #300]	@ (80064a0 <HAL_GPIO_Init+0x2f0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_GPIO_Init+0x1f0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a4a      	ldr	r2, [pc, #296]	@ (80064a4 <HAL_GPIO_Init+0x2f4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00d      	beq.n	800639c <HAL_GPIO_Init+0x1ec>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a49      	ldr	r2, [pc, #292]	@ (80064a8 <HAL_GPIO_Init+0x2f8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <HAL_GPIO_Init+0x1e8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a48      	ldr	r2, [pc, #288]	@ (80064ac <HAL_GPIO_Init+0x2fc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d101      	bne.n	8006394 <HAL_GPIO_Init+0x1e4>
 8006390:	2305      	movs	r3, #5
 8006392:	e00a      	b.n	80063aa <HAL_GPIO_Init+0x1fa>
 8006394:	2306      	movs	r3, #6
 8006396:	e008      	b.n	80063aa <HAL_GPIO_Init+0x1fa>
 8006398:	2304      	movs	r3, #4
 800639a:	e006      	b.n	80063aa <HAL_GPIO_Init+0x1fa>
 800639c:	2303      	movs	r3, #3
 800639e:	e004      	b.n	80063aa <HAL_GPIO_Init+0x1fa>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e002      	b.n	80063aa <HAL_GPIO_Init+0x1fa>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <HAL_GPIO_Init+0x1fa>
 80063a8:	2300      	movs	r3, #0
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	f002 0203 	and.w	r2, r2, #3
 80063b0:	0092      	lsls	r2, r2, #2
 80063b2:	4093      	lsls	r3, r2
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063ba:	4937      	ldr	r1, [pc, #220]	@ (8006498 <HAL_GPIO_Init+0x2e8>)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	3302      	adds	r3, #2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063c8:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4013      	ands	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063ec:	4a30      	ldr	r2, [pc, #192]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063f2:	4b2f      	ldr	r3, [pc, #188]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006416:	4a26      	ldr	r2, [pc, #152]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800641c:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	43db      	mvns	r3, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4013      	ands	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006440:	4a1b      	ldr	r2, [pc, #108]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006446:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	43db      	mvns	r3, r3
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4013      	ands	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800646a:	4a11      	ldr	r2, [pc, #68]	@ (80064b0 <HAL_GPIO_Init+0x300>)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6013      	str	r3, [r2, #0]
=======
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a6 	beq.w	800644c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006300:	4b5b      	ldr	r3, [pc, #364]	@ (8006470 <HAL_GPIO_Init+0x2e4>)
 8006302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006304:	4a5a      	ldr	r2, [pc, #360]	@ (8006470 <HAL_GPIO_Init+0x2e4>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6613      	str	r3, [r2, #96]	@ 0x60
 800630c:	4b58      	ldr	r3, [pc, #352]	@ (8006470 <HAL_GPIO_Init+0x2e4>)
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006318:	4a56      	ldr	r2, [pc, #344]	@ (8006474 <HAL_GPIO_Init+0x2e8>)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	3302      	adds	r3, #2
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	220f      	movs	r2, #15
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4013      	ands	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006342:	d01f      	beq.n	8006384 <HAL_GPIO_Init+0x1f8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a4c      	ldr	r2, [pc, #304]	@ (8006478 <HAL_GPIO_Init+0x2ec>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d019      	beq.n	8006380 <HAL_GPIO_Init+0x1f4>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a4b      	ldr	r2, [pc, #300]	@ (800647c <HAL_GPIO_Init+0x2f0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d013      	beq.n	800637c <HAL_GPIO_Init+0x1f0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a4a      	ldr	r2, [pc, #296]	@ (8006480 <HAL_GPIO_Init+0x2f4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00d      	beq.n	8006378 <HAL_GPIO_Init+0x1ec>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a49      	ldr	r2, [pc, #292]	@ (8006484 <HAL_GPIO_Init+0x2f8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <HAL_GPIO_Init+0x1e8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a48      	ldr	r2, [pc, #288]	@ (8006488 <HAL_GPIO_Init+0x2fc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <HAL_GPIO_Init+0x1e4>
 800636c:	2305      	movs	r3, #5
 800636e:	e00a      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006370:	2306      	movs	r3, #6
 8006372:	e008      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006374:	2304      	movs	r3, #4
 8006376:	e006      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006378:	2303      	movs	r3, #3
 800637a:	e004      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 800637c:	2302      	movs	r3, #2
 800637e:	e002      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <HAL_GPIO_Init+0x1fa>
 8006384:	2300      	movs	r3, #0
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	f002 0203 	and.w	r2, r2, #3
 800638c:	0092      	lsls	r2, r2, #2
 800638e:	4093      	lsls	r3, r2
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006396:	4937      	ldr	r1, [pc, #220]	@ (8006474 <HAL_GPIO_Init+0x2e8>)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	3302      	adds	r3, #2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063a4:	4b39      	ldr	r3, [pc, #228]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4013      	ands	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063c8:	4a30      	ldr	r2, [pc, #192]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063ce:	4b2f      	ldr	r3, [pc, #188]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	43db      	mvns	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4013      	ands	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063f2:	4a26      	ldr	r2, [pc, #152]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063f8:	4b24      	ldr	r3, [pc, #144]	@ (800648c <HAL_GPIO_Init+0x300>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	43db      	mvns	r3, r3
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4013      	ands	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800641c:	4a1b      	ldr	r2, [pc, #108]	@ (800648c <HAL_GPIO_Init+0x300>)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006422:	4b1a      	ldr	r3, [pc, #104]	@ (800648c <HAL_GPIO_Init+0x300>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	43db      	mvns	r3, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4013      	ands	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006446:	4a11      	ldr	r2, [pc, #68]	@ (800648c <HAL_GPIO_Init+0x300>)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
      }
    }

    position++;
<<<<<<< HEAD
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3301      	adds	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	f47f ae9d 	bne.w	80061c0 <HAL_GPIO_Init+0x10>
  }
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40021000 	.word	0x40021000
 8006498:	40010000 	.word	0x40010000
 800649c:	48000400 	.word	0x48000400
 80064a0:	48000800 	.word	0x48000800
 80064a4:	48000c00 	.word	0x48000c00
 80064a8:	48001000 	.word	0x48001000
 80064ac:	48001400 	.word	0x48001400
 80064b0:	40010400 	.word	0x40010400

080064b4 <HAL_GPIO_WritePin>:
=======
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3301      	adds	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f ae9d 	bne.w	800619c <HAL_GPIO_Init+0x10>
  }
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40021000 	.word	0x40021000
 8006474:	40010000 	.word	0x40010000
 8006478:	48000400 	.word	0x48000400
 800647c:	48000800 	.word	0x48000800
 8006480:	48000c00 	.word	0x48000c00
 8006484:	48001000 	.word	0x48001000
 8006488:	48001400 	.word	0x48001400
 800648c:	40010400 	.word	0x40010400

08006490 <HAL_GPIO_WritePin>:
>>>>>>> origin/main
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
 80064c0:	4613      	mov	r3, r2
 80064c2:	707b      	strb	r3, [r7, #1]
=======
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
 800649c:	4613      	mov	r3, r2
 800649e:	707b      	strb	r3, [r7, #1]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80064c4:	787b      	ldrb	r3, [r7, #1]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064ca:	887a      	ldrh	r2, [r7, #2]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	619a      	str	r2, [r3, #24]
=======
 80064a0:	787b      	ldrb	r3, [r7, #1]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 80064d0:	e002      	b.n	80064d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064d2:	887a      	ldrh	r2, [r7, #2]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80064ac:	e002      	b.n	80064b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> origin/main
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ee:	4b08      	ldr	r3, [pc, #32]	@ (8006510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064fa:	4a05      	ldr	r2, [pc, #20]	@ (8006510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fb fa48 	bl	8001998 <HAL_GPIO_EXTI_Callback>
  }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40010400 	.word	0x40010400

08006514 <HAL_I2C_Init>:
=======
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ca:	4b08      	ldr	r3, [pc, #32]	@ (80064ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064d6:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fb fa9c 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40010400 	.word	0x40010400

080064f0 <HAL_I2C_Init>:
>>>>>>> origin/main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e08d      	b.n	8006642 <HAL_I2C_Init+0x12e>
=======
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e08d      	b.n	800661e <HAL_I2C_Init+0x12e>
>>>>>>> origin/main
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> origin/main

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fa fb9c 	bl	8000c78 <HAL_I2C_MspInit>
=======
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fa fbbc 	bl	8000c94 <HAL_I2C_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	@ 0x24
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]
=======
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	@ 0x24
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< HEAD
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006564:	611a      	str	r2, [r3, #16]
=======
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006540:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< HEAD
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d107      	bne.n	800658e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	e006      	b.n	800659c <HAL_I2C_Init+0x88>
=======
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006550:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	e006      	b.n	8006578 <HAL_I2C_Init+0x88>
>>>>>>> origin/main
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800659a:	609a      	str	r2, [r3, #8]
=======
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006576:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< HEAD
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d108      	bne.n	80065b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b2:	605a      	str	r2, [r3, #4]
 80065b4:	e007      	b.n	80065c6 <HAL_I2C_Init+0xb2>
=======
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d108      	bne.n	8006592 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	e007      	b.n	80065a2 <HAL_I2C_Init+0xb2>
>>>>>>> origin/main
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
<<<<<<< HEAD
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d8:	6053      	str	r3, [r2, #4]
=======
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b4:	6053      	str	r3, [r2, #4]
>>>>>>> origin/main

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< HEAD
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	60da      	str	r2, [r3, #12]
=======
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< HEAD
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_I2CEx_ConfigAnalogFilter>:
=======
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69d9      	ldr	r1, [r3, #28]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> origin/main
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
=======
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b20      	cmp	r3, #32
 800665e:	d138      	bne.n	80066d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800666a:	2302      	movs	r3, #2
 800666c:	e032      	b.n	80066d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2224      	movs	r2, #36	@ 0x24
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800669c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6819      	ldr	r1, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e000      	b.n	80066d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b20      	cmp	r3, #32
 800663a:	d138      	bne.n	80066ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006646:	2302      	movs	r3, #2
 8006648:	e032      	b.n	80066b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2224      	movs	r2, #36	@ 0x24
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006678:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> origin/main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80066d2:	2302      	movs	r3, #2
  }
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> origin/main
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
=======
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d139      	bne.n	800676a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006700:	2302      	movs	r3, #2
 8006702:	e033      	b.n	800676c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	@ 0x24
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006732:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0201 	orr.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e000      	b.n	800676c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d139      	bne.n	8006746 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066dc:	2302      	movs	r3, #2
 80066de:	e033      	b.n	8006748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2224      	movs	r2, #36	@ 0x24
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800670e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> origin/main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800676a:	2302      	movs	r3, #2
  }
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_PWREx_ControlVoltageScaling>:
=======
 8006746:	2302      	movs	r3, #2
  }
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> origin/main
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
=======
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< HEAD
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d141      	bne.n	800680a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006786:	4b4b      	ldr	r3, [pc, #300]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006792:	d131      	bne.n	80067f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006794:	4b47      	ldr	r3, [pc, #284]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679a:	4a46      	ldr	r2, [pc, #280]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a4:	4b43      	ldr	r3, [pc, #268]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067ac:	4a41      	ldr	r2, [pc, #260]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b4:	4b40      	ldr	r3, [pc, #256]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2232      	movs	r2, #50	@ 0x32
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	4a3f      	ldr	r2, [pc, #252]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	0c9b      	lsrs	r3, r3, #18
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ca:	e002      	b.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d2:	4b38      	ldr	r3, [pc, #224]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067de:	d102      	bne.n	80067e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f2      	bne.n	80067cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067e6:	4b33      	ldr	r3, [pc, #204]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f2:	d158      	bne.n	80068a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e057      	b.n	80068a8 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d141      	bne.n	80067e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006762:	4b4b      	ldr	r3, [pc, #300]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676e:	d131      	bne.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006770:	4b47      	ldr	r3, [pc, #284]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006776:	4a46      	ldr	r2, [pc, #280]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800677c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006780:	4b43      	ldr	r3, [pc, #268]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006788:	4a41      	ldr	r2, [pc, #260]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800678e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006790:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2232      	movs	r2, #50	@ 0x32
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	4a3f      	ldr	r2, [pc, #252]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	0c9b      	lsrs	r3, r3, #18
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a6:	e002      	b.n	80067ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ae:	4b38      	ldr	r3, [pc, #224]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ba:	d102      	bne.n	80067c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f2      	bne.n	80067a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067c2:	4b33      	ldr	r3, [pc, #204]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ce:	d158      	bne.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e057      	b.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> origin/main
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 80067f8:	4b2e      	ldr	r3, [pc, #184]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067fe:	4a2d      	ldr	r2, [pc, #180]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006808:	e04d      	b.n	80068a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006810:	d141      	bne.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006812:	4b28      	ldr	r3, [pc, #160]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800681a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800681e:	d131      	bne.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006820:	4b24      	ldr	r3, [pc, #144]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006826:	4a23      	ldr	r2, [pc, #140]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800682c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006830:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006838:	4a1e      	ldr	r2, [pc, #120]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800683e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006840:	4b1d      	ldr	r3, [pc, #116]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2232      	movs	r2, #50	@ 0x32
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	4a1c      	ldr	r2, [pc, #112]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	0c9b      	lsrs	r3, r3, #18
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006856:	e002      	b.n	800685e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3b01      	subs	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685e:	4b15      	ldr	r3, [pc, #84]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686a:	d102      	bne.n	8006872 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f2      	bne.n	8006858 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006872:	4b10      	ldr	r3, [pc, #64]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687e:	d112      	bne.n	80068a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e011      	b.n	80068a8 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 80067d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067da:	4a2d      	ldr	r2, [pc, #180]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067e4:	e04d      	b.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ec:	d141      	bne.n	8006872 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067ee:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fa:	d131      	bne.n	8006860 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067fc:	4b24      	ldr	r3, [pc, #144]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006802:	4a23      	ldr	r2, [pc, #140]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006808:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800680c:	4b20      	ldr	r3, [pc, #128]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006814:	4a1e      	ldr	r2, [pc, #120]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800681a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800681c:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2232      	movs	r2, #50	@ 0x32
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	4a1c      	ldr	r2, [pc, #112]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	0c9b      	lsrs	r3, r3, #18
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006832:	e002      	b.n	800683a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3b01      	subs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683a:	4b15      	ldr	r3, [pc, #84]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006846:	d102      	bne.n	800684e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f2      	bne.n	8006834 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800684e:	4b10      	ldr	r3, [pc, #64]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685a:	d112      	bne.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e011      	b.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> origin/main
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 8006884:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688a:	4a0a      	ldr	r2, [pc, #40]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006890:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006894:	e007      	b.n	80068a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006866:	4a0a      	ldr	r2, [pc, #40]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006870:	e007      	b.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> origin/main
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< HEAD
 8006896:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800689e:	4a05      	ldr	r2, [pc, #20]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068a4:	6013      	str	r3, [r2, #0]
=======
 8006872:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800687a:	4a05      	ldr	r2, [pc, #20]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006880:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< HEAD
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40007000 	.word	0x40007000
 80068b8:	20000000 	.word	0x20000000
 80068bc:	431bde83 	.word	0x431bde83

080068c0 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40007000 	.word	0x40007000
 8006894:	20000000 	.word	0x20000000
 8006898:	431bde83 	.word	0x431bde83

0800689c <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> origin/main
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
<<<<<<< HEAD
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	4a04      	ldr	r2, [pc, #16]	@ (80068dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068ce:	6093      	str	r3, [r2, #8]
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40007000 	.word	0x40007000

080068e0 <HAL_RCC_OscConfig>:
=======
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	4a04      	ldr	r2, [pc, #16]	@ (80068b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068aa:	6093      	str	r3, [r2, #8]
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40007000 	.word	0x40007000

080068bc <HAL_RCC_OscConfig>:
>>>>>>> origin/main
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
=======
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e2fe      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
=======
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e2fe      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d075      	beq.n	80069ea <HAL_RCC_OscConfig+0x10a>
=======
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d075      	beq.n	80069c6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 80068fe:	4b97      	ldr	r3, [pc, #604]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006908:	4b94      	ldr	r3, [pc, #592]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b0c      	cmp	r3, #12
 8006916:	d102      	bne.n	800691e <HAL_RCC_OscConfig+0x3e>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d002      	beq.n	8006924 <HAL_RCC_OscConfig+0x44>
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d10b      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	4b8d      	ldr	r3, [pc, #564]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05b      	beq.n	80069e8 <HAL_RCC_OscConfig+0x108>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d157      	bne.n	80069e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e2d9      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
=======
 80068da:	4b97      	ldr	r3, [pc, #604]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e4:	4b94      	ldr	r3, [pc, #592]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b0c      	cmp	r3, #12
 80068f2:	d102      	bne.n	80068fa <HAL_RCC_OscConfig+0x3e>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d002      	beq.n	8006900 <HAL_RCC_OscConfig+0x44>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d10b      	bne.n	8006918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	4b8d      	ldr	r3, [pc, #564]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05b      	beq.n	80069c4 <HAL_RCC_OscConfig+0x108>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d157      	bne.n	80069c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e2d9      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006944:	d106      	bne.n	8006954 <HAL_RCC_OscConfig+0x74>
 8006946:	4b85      	ldr	r3, [pc, #532]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a84      	ldr	r2, [pc, #528]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e01d      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x98>
 800695e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a7e      	ldr	r2, [pc, #504]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a7b      	ldr	r2, [pc, #492]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006978:	4b78      	ldr	r3, [pc, #480]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a77      	ldr	r2, [pc, #476]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 800697e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	4b75      	ldr	r3, [pc, #468]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a74      	ldr	r2, [pc, #464]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 800698a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800698e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d013      	beq.n	80069c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fd f818 	bl	80039cc <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a0:	f7fd f814 	bl	80039cc <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	@ 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e29e      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069b2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0xc0>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
=======
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006920:	d106      	bne.n	8006930 <HAL_RCC_OscConfig+0x74>
 8006922:	4b85      	ldr	r3, [pc, #532]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a84      	ldr	r2, [pc, #528]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e01d      	b.n	800696c <HAL_RCC_OscConfig+0xb0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x98>
 800693a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b7c      	ldr	r3, [pc, #496]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a7b      	ldr	r2, [pc, #492]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e00b      	b.n	800696c <HAL_RCC_OscConfig+0xb0>
 8006954:	4b78      	ldr	r3, [pc, #480]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a77      	ldr	r2, [pc, #476]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 800695a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	4b75      	ldr	r3, [pc, #468]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a74      	ldr	r2, [pc, #464]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800696a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d013      	beq.n	800699c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006974:	f7fd f818 	bl	80039a8 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800697c:	f7fd f814 	bl	80039a8 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	@ 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e29e      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800698e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCC_OscConfig+0xc0>
 800699a:	e014      	b.n	80069c6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> origin/main
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80069c0:	f7fd f804 	bl	80039cc <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fd f800 	bl	80039cc <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	@ 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e28a      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069da:	4b60      	ldr	r3, [pc, #384]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0xe8>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	bf00      	nop
=======
 800699c:	f7fd f804 	bl	80039a8 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fd f800 	bl	80039a8 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	@ 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e28a      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069b6:	4b60      	ldr	r3, [pc, #384]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0xe8>
 80069c2:	e000      	b.n	80069c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c4:	bf00      	nop
>>>>>>> origin/main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d075      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x202>
=======
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d075      	beq.n	8006abe <HAL_RCC_OscConfig+0x202>
>>>>>>> origin/main
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 80069f6:	4b59      	ldr	r3, [pc, #356]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a00:	4b56      	ldr	r3, [pc, #344]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCC_OscConfig+0x136>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d002      	beq.n	8006a1c <HAL_RCC_OscConfig+0x13c>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d11f      	bne.n	8006a5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <HAL_RCC_OscConfig+0x154>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e25d      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
=======
 80069d2:	4b59      	ldr	r3, [pc, #356]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 030c 	and.w	r3, r3, #12
 80069da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069dc:	4b56      	ldr	r3, [pc, #344]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d102      	bne.n	80069f2 <HAL_RCC_OscConfig+0x136>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d002      	beq.n	80069f8 <HAL_RCC_OscConfig+0x13c>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d11f      	bne.n	8006a38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCC_OscConfig+0x154>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e25d      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
>>>>>>> origin/main
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8006a34:	4b49      	ldr	r3, [pc, #292]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	4946      	ldr	r1, [pc, #280]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a48:	4b45      	ldr	r3, [pc, #276]	@ (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fa fa5b 	bl	8000f08 <HAL_InitTick>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d043      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e249      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
=======
 8006a10:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	061b      	lsls	r3, r3, #24
 8006a1e:	4946      	ldr	r1, [pc, #280]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a24:	4b45      	ldr	r3, [pc, #276]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fa fa7b 	bl	8000f24 <HAL_InitTick>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d043      	beq.n	8006abc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e249      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d023      	beq.n	8006aac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a64:	4b3d      	ldr	r3, [pc, #244]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a3c      	ldr	r2, [pc, #240]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fc ffac 	bl	80039cc <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a78:	f7fc ffa8 	bl	80039cc <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e232      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8a:	4b34      	ldr	r3, [pc, #208]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCC_OscConfig+0x198>
=======
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d023      	beq.n	8006a88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a40:	4b3d      	ldr	r3, [pc, #244]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a3c      	ldr	r2, [pc, #240]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fc ffac 	bl	80039a8 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a54:	f7fc ffa8 	bl	80039a8 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e232      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a66:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x198>
>>>>>>> origin/main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8006a96:	4b31      	ldr	r3, [pc, #196]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	492d      	ldr	r1, [pc, #180]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	604b      	str	r3, [r1, #4]
 8006aaa:	e01a      	b.n	8006ae2 <HAL_RCC_OscConfig+0x202>
=======
 8006a72:	4b31      	ldr	r3, [pc, #196]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	061b      	lsls	r3, r3, #24
 8006a80:	492d      	ldr	r1, [pc, #180]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	604b      	str	r3, [r1, #4]
 8006a86:	e01a      	b.n	8006abe <HAL_RCC_OscConfig+0x202>
>>>>>>> origin/main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8006aac:	4b2b      	ldr	r3, [pc, #172]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006ab2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fc ff88 	bl	80039cc <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac0:	f7fc ff84 	bl	80039cc <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e20e      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ad2:	4b22      	ldr	r3, [pc, #136]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x1e0>
 8006ade:	e000      	b.n	8006ae2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae0:	bf00      	nop
=======
 8006a88:	4b2b      	ldr	r3, [pc, #172]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fc ff88 	bl	80039a8 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fc ff84 	bl	80039a8 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e20e      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aae:	4b22      	ldr	r3, [pc, #136]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1e0>
 8006aba:	e000      	b.n	8006abe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006abc:	bf00      	nop
>>>>>>> origin/main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d041      	beq.n	8006b72 <HAL_RCC_OscConfig+0x292>
=======
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d041      	beq.n	8006b4e <HAL_RCC_OscConfig+0x292>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01c      	beq.n	8006b30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006af6:	4b19      	ldr	r3, [pc, #100]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006afc:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b06:	f7fc ff61 	bl	80039cc <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b0e:	f7fc ff5d 	bl	80039cc <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e1e7      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b20:	4b0e      	ldr	r3, [pc, #56]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ef      	beq.n	8006b0e <HAL_RCC_OscConfig+0x22e>
 8006b2e:	e020      	b.n	8006b72 <HAL_RCC_OscConfig+0x292>
=======
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01c      	beq.n	8006b0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad2:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad8:	4a17      	ldr	r2, [pc, #92]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae2:	f7fc ff61 	bl	80039a8 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aea:	f7fc ff5d 	bl	80039a8 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e1e7      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006afc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0ef      	beq.n	8006aea <HAL_RCC_OscConfig+0x22e>
 8006b0a:	e020      	b.n	8006b4e <HAL_RCC_OscConfig+0x292>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8006b30:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b36:	4a09      	ldr	r2, [pc, #36]	@ (8006b5c <HAL_RCC_OscConfig+0x27c>)
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fc ff44 	bl	80039cc <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b46:	e00d      	b.n	8006b64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b48:	f7fc ff40 	bl	80039cc <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d906      	bls.n	8006b64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e1ca      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
 8006b5a:	bf00      	nop
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	200001f8 	.word	0x200001f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b64:	4b8c      	ldr	r3, [pc, #560]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1ea      	bne.n	8006b48 <HAL_RCC_OscConfig+0x268>
=======
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b12:	4a09      	ldr	r2, [pc, #36]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fc ff44 	bl	80039a8 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b22:	e00d      	b.n	8006b40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b24:	f7fc ff40 	bl	80039a8 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d906      	bls.n	8006b40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e1ca      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b40:	4b8c      	ldr	r3, [pc, #560]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1ea      	bne.n	8006b24 <HAL_RCC_OscConfig+0x268>
>>>>>>> origin/main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80a6 	beq.w	8006ccc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b80:	2300      	movs	r3, #0
 8006b82:	77fb      	strb	r3, [r7, #31]
=======
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80a6 	beq.w	8006ca8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 8006b84:	4b84      	ldr	r3, [pc, #528]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_RCC_OscConfig+0x2b4>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <HAL_RCC_OscConfig+0x2b6>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00d      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb6:	4b79      	ldr	r3, [pc, #484]	@ (8006d9c <HAL_RCC_OscConfig+0x4bc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d118      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc2:	4b76      	ldr	r3, [pc, #472]	@ (8006d9c <HAL_RCC_OscConfig+0x4bc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a75      	ldr	r2, [pc, #468]	@ (8006d9c <HAL_RCC_OscConfig+0x4bc>)
 8006bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bce:	f7fc fefd 	bl	80039cc <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd6:	f7fc fef9 	bl	80039cc <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e183      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006be8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d9c <HAL_RCC_OscConfig+0x4bc>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x2f6>
=======
 8006b60:	4b84      	ldr	r3, [pc, #528]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_OscConfig+0x2b4>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x2b6>
 8006b70:	2300      	movs	r3, #0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b76:	4b7f      	ldr	r3, [pc, #508]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b82:	4b7c      	ldr	r3, [pc, #496]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b92:	4b79      	ldr	r3, [pc, #484]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d118      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b9e:	4b76      	ldr	r3, [pc, #472]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a75      	ldr	r2, [pc, #468]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006baa:	f7fc fefd 	bl	80039a8 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb2:	f7fc fef9 	bl	80039a8 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e183      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> origin/main
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d108      	bne.n	8006c0e <HAL_RCC_OscConfig+0x32e>
 8006bfc:	4b66      	ldr	r3, [pc, #408]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c02:	4a65      	ldr	r2, [pc, #404]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c0c:	e024      	b.n	8006c58 <HAL_RCC_OscConfig+0x378>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	d110      	bne.n	8006c38 <HAL_RCC_OscConfig+0x358>
 8006c16:	4b60      	ldr	r3, [pc, #384]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c1e:	f043 0304 	orr.w	r3, r3, #4
 8006c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c26:	4b5c      	ldr	r3, [pc, #368]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c36:	e00f      	b.n	8006c58 <HAL_RCC_OscConfig+0x378>
 8006c38:	4b57      	ldr	r3, [pc, #348]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3e:	4a56      	ldr	r2, [pc, #344]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c48:	4b53      	ldr	r3, [pc, #332]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4e:	4a52      	ldr	r2, [pc, #328]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c50:	f023 0304 	bic.w	r3, r3, #4
 8006c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d016      	beq.n	8006c8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c60:	f7fc feb4 	bl	80039cc <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c66:	e00a      	b.n	8006c7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c68:	f7fc feb0 	bl	80039cc <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e138      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c7e:	4b46      	ldr	r3, [pc, #280]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0ed      	beq.n	8006c68 <HAL_RCC_OscConfig+0x388>
 8006c8c:	e015      	b.n	8006cba <HAL_RCC_OscConfig+0x3da>
=======
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d108      	bne.n	8006bea <HAL_RCC_OscConfig+0x32e>
 8006bd8:	4b66      	ldr	r3, [pc, #408]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bde:	4a65      	ldr	r2, [pc, #404]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006be8:	e024      	b.n	8006c34 <HAL_RCC_OscConfig+0x378>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d110      	bne.n	8006c14 <HAL_RCC_OscConfig+0x358>
 8006bf2:	4b60      	ldr	r3, [pc, #384]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c02:	4b5c      	ldr	r3, [pc, #368]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c08:	4a5a      	ldr	r2, [pc, #360]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c12:	e00f      	b.n	8006c34 <HAL_RCC_OscConfig+0x378>
 8006c14:	4b57      	ldr	r3, [pc, #348]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	4a56      	ldr	r2, [pc, #344]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c24:	4b53      	ldr	r3, [pc, #332]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2a:	4a52      	ldr	r2, [pc, #328]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3c:	f7fc feb4 	bl	80039a8 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c44:	f7fc feb0 	bl	80039a8 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e138      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c5a:	4b46      	ldr	r3, [pc, #280]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0ed      	beq.n	8006c44 <HAL_RCC_OscConfig+0x388>
 8006c68:	e015      	b.n	8006c96 <HAL_RCC_OscConfig+0x3da>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8006c8e:	f7fc fe9d 	bl	80039cc <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c94:	e00a      	b.n	8006cac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c96:	f7fc fe99 	bl	80039cc <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e121      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cac:	4b3a      	ldr	r3, [pc, #232]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ed      	bne.n	8006c96 <HAL_RCC_OscConfig+0x3b6>
=======
 8006c6a:	f7fc fe9d 	bl	80039a8 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fc fe99 	bl	80039a8 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e121      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c88:	4b3a      	ldr	r3, [pc, #232]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ed      	bne.n	8006c72 <HAL_RCC_OscConfig+0x3b6>
>>>>>>> origin/main
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8006cba:	7ffb      	ldrb	r3, [r7, #31]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d105      	bne.n	8006ccc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc0:	4b35      	ldr	r3, [pc, #212]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc4:	4a34      	ldr	r2, [pc, #208]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cca:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8006c96:	7ffb      	ldrb	r3, [r7, #31]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d105      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c9c:	4b35      	ldr	r3, [pc, #212]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca0:	4a34      	ldr	r2, [pc, #208]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ca6:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> origin/main
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d03c      	beq.n	8006d52 <HAL_RCC_OscConfig+0x472>
=======
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d03c      	beq.n	8006d2e <HAL_RCC_OscConfig+0x472>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01c      	beq.n	8006d1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf0:	f7fc fe6c 	bl	80039cc <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cf8:	f7fc fe68 	bl	80039cc <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e0f2      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d0a:	4b23      	ldr	r3, [pc, #140]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0ef      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x418>
 8006d18:	e01b      	b.n	8006d52 <HAL_RCC_OscConfig+0x472>
=======
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01c      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ccc:	f7fc fe6c 	bl	80039a8 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cd4:	f7fc fe68 	bl	80039a8 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e0f2      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ce6:	4b23      	ldr	r3, [pc, #140]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0ef      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x418>
 8006cf4:	e01b      	b.n	8006d2e <HAL_RCC_OscConfig+0x472>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d20:	4a1d      	ldr	r2, [pc, #116]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2a:	f7fc fe4f 	bl	80039cc <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d32:	f7fc fe4b 	bl	80039cc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e0d5      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d44:	4b14      	ldr	r3, [pc, #80]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1ef      	bne.n	8006d32 <HAL_RCC_OscConfig+0x452>
=======
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d06:	f7fc fe4f 	bl	80039a8 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d0e:	f7fc fe4b 	bl	80039a8 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e0d5      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d20:	4b14      	ldr	r3, [pc, #80]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ef      	bne.n	8006d0e <HAL_RCC_OscConfig+0x452>
>>>>>>> origin/main

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 80c9 	beq.w	8006eee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 030c 	and.w	r3, r3, #12
 8006d64:	2b0c      	cmp	r3, #12
 8006d66:	f000 8083 	beq.w	8006e70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d15e      	bne.n	8006e30 <HAL_RCC_OscConfig+0x550>
=======
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80c9 	beq.w	8006eca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d38:	4b0e      	ldr	r3, [pc, #56]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	f000 8083 	beq.w	8006e4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d15e      	bne.n	8006e0c <HAL_RCC_OscConfig+0x550>
>>>>>>> origin/main
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8006d72:	4b09      	ldr	r3, [pc, #36]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a08      	ldr	r2, [pc, #32]	@ (8006d98 <HAL_RCC_OscConfig+0x4b8>)
 8006d78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7e:	f7fc fe25 	bl	80039cc <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d84:	e00c      	b.n	8006da0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d86:	f7fc fe21 	bl	80039cc <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d905      	bls.n	8006da0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e0ab      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da0:	4b55      	ldr	r3, [pc, #340]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1ec      	bne.n	8006d86 <HAL_RCC_OscConfig+0x4a6>
=======
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a08      	ldr	r2, [pc, #32]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fc fe25 	bl	80039a8 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d60:	e00c      	b.n	8006d7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d62:	f7fc fe21 	bl	80039a8 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d905      	bls.n	8006d7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e0ab      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
 8006d74:	40021000 	.word	0x40021000
 8006d78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d7c:	4b55      	ldr	r3, [pc, #340]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ec      	bne.n	8006d62 <HAL_RCC_OscConfig+0x4a6>
>>>>>>> origin/main
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8006dac:	4b52      	ldr	r3, [pc, #328]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	4b52      	ldr	r3, [pc, #328]	@ (8006efc <HAL_RCC_OscConfig+0x61c>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6a11      	ldr	r1, [r2, #32]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dbc:	3a01      	subs	r2, #1
 8006dbe:	0112      	lsls	r2, r2, #4
 8006dc0:	4311      	orrs	r1, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006dc6:	0212      	lsls	r2, r2, #8
 8006dc8:	4311      	orrs	r1, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dce:	0852      	lsrs	r2, r2, #1
 8006dd0:	3a01      	subs	r2, #1
 8006dd2:	0552      	lsls	r2, r2, #21
 8006dd4:	4311      	orrs	r1, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dda:	0852      	lsrs	r2, r2, #1
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	0652      	lsls	r2, r2, #25
 8006de0:	4311      	orrs	r1, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006de6:	06d2      	lsls	r2, r2, #27
 8006de8:	430a      	orrs	r2, r1
 8006dea:	4943      	ldr	r1, [pc, #268]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60cb      	str	r3, [r1, #12]
=======
 8006d88:	4b52      	ldr	r3, [pc, #328]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	4b52      	ldr	r3, [pc, #328]	@ (8006ed8 <HAL_RCC_OscConfig+0x61c>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6a11      	ldr	r1, [r2, #32]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d98:	3a01      	subs	r2, #1
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	4311      	orrs	r1, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006da2:	0212      	lsls	r2, r2, #8
 8006da4:	4311      	orrs	r1, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006daa:	0852      	lsrs	r2, r2, #1
 8006dac:	3a01      	subs	r2, #1
 8006dae:	0552      	lsls	r2, r2, #21
 8006db0:	4311      	orrs	r1, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006db6:	0852      	lsrs	r2, r2, #1
 8006db8:	3a01      	subs	r2, #1
 8006dba:	0652      	lsls	r2, r2, #25
 8006dbc:	4311      	orrs	r1, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dc2:	06d2      	lsls	r2, r2, #27
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	4943      	ldr	r1, [pc, #268]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60cb      	str	r3, [r1, #12]
>>>>>>> origin/main
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8006df0:	4b41      	ldr	r3, [pc, #260]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a40      	ldr	r2, [pc, #256]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dfa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4a3d      	ldr	r2, [pc, #244]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fc fde0 	bl	80039cc <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fc fddc 	bl	80039cc <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e066      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e22:	4b35      	ldr	r3, [pc, #212]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0f0      	beq.n	8006e10 <HAL_RCC_OscConfig+0x530>
 8006e2e:	e05e      	b.n	8006eee <HAL_RCC_OscConfig+0x60e>
=======
 8006dcc:	4b41      	ldr	r3, [pc, #260]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a40      	ldr	r2, [pc, #256]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006de2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fc fde0 	bl	80039a8 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dec:	f7fc fddc 	bl	80039a8 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e066      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfe:	4b35      	ldr	r3, [pc, #212]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0x530>
 8006e0a:	e05e      	b.n	8006eca <HAL_RCC_OscConfig+0x60e>
>>>>>>> origin/main
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8006e30:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a30      	ldr	r2, [pc, #192]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fc fdc6 	bl	80039cc <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fc fdc2 	bl	80039cc <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e04c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e56:	4b28      	ldr	r3, [pc, #160]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x564>
=======
 8006e0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a30      	ldr	r2, [pc, #192]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fc fdc6 	bl	80039a8 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e20:	f7fc fdc2 	bl	80039a8 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e04c      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e32:	4b28      	ldr	r3, [pc, #160]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0x564>
>>>>>>> origin/main
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
<<<<<<< HEAD
 8006e62:	4b25      	ldr	r3, [pc, #148]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	4924      	ldr	r1, [pc, #144]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e68:	4b25      	ldr	r3, [pc, #148]	@ (8006f00 <HAL_RCC_OscConfig+0x620>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	60cb      	str	r3, [r1, #12]
 8006e6e:	e03e      	b.n	8006eee <HAL_RCC_OscConfig+0x60e>
=======
 8006e3e:	4b25      	ldr	r3, [pc, #148]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	4924      	ldr	r1, [pc, #144]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e44:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <HAL_RCC_OscConfig+0x620>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	60cb      	str	r3, [r1, #12]
 8006e4a:	e03e      	b.n	8006eca <HAL_RCC_OscConfig+0x60e>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e039      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
=======
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e039      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
>>>>>>> origin/main
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
<<<<<<< HEAD
 8006e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef8 <HAL_RCC_OscConfig+0x618>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f003 0203 	and.w	r2, r3, #3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d12c      	bne.n	8006eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d123      	bne.n	8006eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d11b      	bne.n	8006eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d113      	bne.n	8006eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d109      	bne.n	8006eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d001      	beq.n	8006eee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <HAL_RCC_OscConfig+0x610>
=======
 8006e58:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f003 0203 	and.w	r2, r3, #3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d12c      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	3b01      	subs	r3, #1
 8006e78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d123      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d113      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d109      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d001      	beq.n	8006eca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
>>>>>>> origin/main
      }
    }
  }
  }

  return HAL_OK;
<<<<<<< HEAD
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	019f800c 	.word	0x019f800c
 8006f00:	feeefffc 	.word	0xfeeefffc

08006f04 <HAL_RCC_ClockConfig>:
=======
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	019f800c 	.word	0x019f800c
 8006edc:	feeefffc 	.word	0xfeeefffc

08006ee0 <HAL_RCC_ClockConfig>:
>>>>>>> origin/main
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e11e      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
=======
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e11e      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
>>>>>>> origin/main
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006f1c:	4b91      	ldr	r3, [pc, #580]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d910      	bls.n	8006f4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2a:	4b8e      	ldr	r3, [pc, #568]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 020f 	bic.w	r2, r3, #15
 8006f32:	498c      	ldr	r1, [pc, #560]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]
=======
 8006ef8:	4b91      	ldr	r3, [pc, #580]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d910      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f06:	4b8e      	ldr	r3, [pc, #568]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 020f 	bic.w	r2, r3, #15
 8006f0e:	498c      	ldr	r1, [pc, #560]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]
>>>>>>> origin/main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8006f3a:	4b8a      	ldr	r3, [pc, #552]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e106      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
=======
 8006f16:	4b8a      	ldr	r3, [pc, #552]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e106      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
>>>>>>> origin/main
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d073      	beq.n	8007040 <HAL_RCC_ClockConfig+0x13c>
=======
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d073      	beq.n	800701c <HAL_RCC_ClockConfig+0x13c>
>>>>>>> origin/main
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d129      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f60:	4b81      	ldr	r3, [pc, #516]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0f4      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
=======
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d129      	bne.n	8006f90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f3c:	4b81      	ldr	r3, [pc, #516]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0f4      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
>>>>>>> origin/main
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
<<<<<<< HEAD
 8006f70:	f000 f9d0 	bl	8007314 <RCC_GetSysClockFreqFromPLLSource>
 8006f74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4a7c      	ldr	r2, [pc, #496]	@ (800716c <HAL_RCC_ClockConfig+0x268>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d93f      	bls.n	8006ffe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d033      	beq.n	8006ffe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d12f      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f9e:	4b72      	ldr	r3, [pc, #456]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fa6:	4a70      	ldr	r2, [pc, #448]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fae:	2380      	movs	r3, #128	@ 0x80
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e024      	b.n	8006ffe <HAL_RCC_ClockConfig+0xfa>
=======
 8006f4c:	f000 f9d0 	bl	80072f0 <RCC_GetSysClockFreqFromPLLSource>
 8006f50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4a7c      	ldr	r2, [pc, #496]	@ (8007148 <HAL_RCC_ClockConfig+0x268>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d93f      	bls.n	8006fda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d033      	beq.n	8006fda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d12f      	bne.n	8006fda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f7a:	4b72      	ldr	r3, [pc, #456]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f82:	4a70      	ldr	r2, [pc, #448]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e024      	b.n	8006fda <HAL_RCC_ClockConfig+0xfa>
>>>>>>> origin/main
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d107      	bne.n	8006fcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0c6      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
=======
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f98:	4b6a      	ldr	r3, [pc, #424]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0c6      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
>>>>>>> origin/main
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 8006fcc:	4b66      	ldr	r3, [pc, #408]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0be      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
=======
 8006fa8:	4b66      	ldr	r3, [pc, #408]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0be      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
>>>>>>> origin/main
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
<<<<<<< HEAD
 8006fdc:	f000 f8ce 	bl	800717c <HAL_RCC_GetSysClockFreq>
 8006fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4a61      	ldr	r2, [pc, #388]	@ (800716c <HAL_RCC_ClockConfig+0x268>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d909      	bls.n	8006ffe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fea:	4b5f      	ldr	r3, [pc, #380]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ffa:	2380      	movs	r3, #128	@ 0x80
 8006ffc:	617b      	str	r3, [r7, #20]
=======
 8006fb8:	f000 f8ce 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4a61      	ldr	r2, [pc, #388]	@ (8007148 <HAL_RCC_ClockConfig+0x268>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d909      	bls.n	8006fda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fce:	4a5d      	ldr	r2, [pc, #372]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fd6:	2380      	movs	r3, #128	@ 0x80
 8006fd8:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8006ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 0203 	bic.w	r2, r3, #3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4957      	ldr	r1, [pc, #348]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800700c:	4313      	orrs	r3, r2
 800700e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007010:	f7fc fcdc 	bl	80039cc <HAL_GetTick>
 8007014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007016:	e00a      	b.n	800702e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007018:	f7fc fcd8 	bl	80039cc <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e095      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702e:	4b4e      	ldr	r3, [pc, #312]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 020c 	and.w	r2, r3, #12
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	429a      	cmp	r2, r3
 800703e:	d1eb      	bne.n	8007018 <HAL_RCC_ClockConfig+0x114>
=======
 8006fda:	4b5a      	ldr	r3, [pc, #360]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 0203 	bic.w	r2, r3, #3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	4957      	ldr	r1, [pc, #348]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fec:	f7fc fcdc 	bl	80039a8 <HAL_GetTick>
 8006ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff2:	e00a      	b.n	800700a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff4:	f7fc fcd8 	bl	80039a8 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e095      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700a:	4b4e      	ldr	r3, [pc, #312]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 020c 	and.w	r2, r3, #12
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	429a      	cmp	r2, r3
 800701a:	d1eb      	bne.n	8006ff4 <HAL_RCC_ClockConfig+0x114>
>>>>>>> origin/main
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d023      	beq.n	8007094 <HAL_RCC_ClockConfig+0x190>
=======
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d023      	beq.n	8007070 <HAL_RCC_ClockConfig+0x190>
>>>>>>> origin/main
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007058:	4b43      	ldr	r3, [pc, #268]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4a42      	ldr	r2, [pc, #264]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800705e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007062:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007070:	4b3d      	ldr	r3, [pc, #244]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007078:	4a3b      	ldr	r2, [pc, #236]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800707a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800707e:	6093      	str	r3, [r2, #8]
=======
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007034:	4b43      	ldr	r3, [pc, #268]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4a42      	ldr	r2, [pc, #264]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800703a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800703e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800704c:	4b3d      	ldr	r3, [pc, #244]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007054:	4a3b      	ldr	r2, [pc, #236]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800705a:	6093      	str	r3, [r2, #8]
>>>>>>> origin/main
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8007080:	4b39      	ldr	r3, [pc, #228]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4936      	ldr	r1, [pc, #216]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800708e:	4313      	orrs	r3, r2
 8007090:	608b      	str	r3, [r1, #8]
 8007092:	e008      	b.n	80070a6 <HAL_RCC_ClockConfig+0x1a2>
=======
 800705c:	4b39      	ldr	r3, [pc, #228]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4936      	ldr	r1, [pc, #216]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	e008      	b.n	8007082 <HAL_RCC_ClockConfig+0x1a2>
>>>>>>> origin/main
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< HEAD
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b80      	cmp	r3, #128	@ 0x80
 8007098:	d105      	bne.n	80070a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800709a:	4b33      	ldr	r3, [pc, #204]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4a32      	ldr	r2, [pc, #200]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 80070a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070a4:	6093      	str	r3, [r2, #8]
=======
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b80      	cmp	r3, #128	@ 0x80
 8007074:	d105      	bne.n	8007082 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007076:	4b33      	ldr	r3, [pc, #204]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	4a32      	ldr	r2, [pc, #200]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800707c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007080:	6093      	str	r3, [r2, #8]
>>>>>>> origin/main
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80070a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d21d      	bcs.n	80070f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f023 020f 	bic.w	r2, r3, #15
 80070bc:	4929      	ldr	r1, [pc, #164]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]
=======
 8007082:	4b2f      	ldr	r3, [pc, #188]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d21d      	bcs.n	80070cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007090:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f023 020f 	bic.w	r2, r3, #15
 8007098:	4929      	ldr	r1, [pc, #164]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	4313      	orrs	r3, r2
 800709e:	600b      	str	r3, [r1, #0]
>>>>>>> origin/main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80070c4:	f7fc fc82 	bl	80039cc <HAL_GetTick>
 80070c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ca:	e00a      	b.n	80070e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070cc:	f7fc fc7e 	bl	80039cc <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070da:	4293      	cmp	r3, r2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e03b      	b.n	800715a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b20      	ldr	r3, [pc, #128]	@ (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1ed      	bne.n	80070cc <HAL_RCC_ClockConfig+0x1c8>
=======
 80070a0:	f7fc fc82 	bl	80039a8 <HAL_GetTick>
 80070a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a6:	e00a      	b.n	80070be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a8:	f7fc fc7e 	bl	80039a8 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e03b      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070be:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d1ed      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> origin/main
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	4917      	ldr	r1, [pc, #92]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800710a:	4313      	orrs	r3, r2
 800710c:	608b      	str	r3, [r1, #8]
=======
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4917      	ldr	r1, [pc, #92]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
>>>>>>> origin/main
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800711a:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	490f      	ldr	r1, [pc, #60]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
=======
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	490f      	ldr	r1, [pc, #60]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
>>>>>>> origin/main
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 800712e:	f000 f825 	bl	800717c <HAL_RCC_GetSysClockFreq>
 8007132:	4602      	mov	r2, r0
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <HAL_RCC_ClockConfig+0x264>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	490c      	ldr	r1, [pc, #48]	@ (8007170 <HAL_RCC_ClockConfig+0x26c>)
 8007140:	5ccb      	ldrb	r3, [r1, r3]
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <HAL_RCC_ClockConfig+0x270>)
 800714c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800714e:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <HAL_RCC_ClockConfig+0x274>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 fed8 	bl	8000f08 <HAL_InitTick>
 8007158:	4603      	mov	r3, r0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40022000 	.word	0x40022000
 8007168:	40021000 	.word	0x40021000
 800716c:	04c4b400 	.word	0x04c4b400
 8007170:	0800cd14 	.word	0x0800cd14
 8007174:	20000000 	.word	0x20000000
 8007178:	200001f8 	.word	0x200001f8

0800717c <HAL_RCC_GetSysClockFreq>:
=======
 800710a:	f000 f825 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 800710e:	4602      	mov	r2, r0
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	091b      	lsrs	r3, r3, #4
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	490c      	ldr	r1, [pc, #48]	@ (800714c <HAL_RCC_ClockConfig+0x26c>)
 800711c:	5ccb      	ldrb	r3, [r1, r3]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	fa22 f303 	lsr.w	r3, r2, r3
 8007126:	4a0a      	ldr	r2, [pc, #40]	@ (8007150 <HAL_RCC_ClockConfig+0x270>)
 8007128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800712a:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <HAL_RCC_ClockConfig+0x274>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f7f9 fef8 	bl	8000f24 <HAL_InitTick>
 8007134:	4603      	mov	r3, r0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40022000 	.word	0x40022000
 8007144:	40021000 	.word	0x40021000
 8007148:	04c4b400 	.word	0x04c4b400
 800714c:	0800ccf4 	.word	0x0800ccf4
 8007150:	20000000 	.word	0x20000000
 8007154:	20000230 	.word	0x20000230

08007158 <HAL_RCC_GetSysClockFreq>:
>>>>>>> origin/main
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
=======
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< HEAD
 8007182:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b04      	cmp	r3, #4
 800718c:	d102      	bne.n	8007194 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800718e:	4b2a      	ldr	r3, [pc, #168]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e047      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007194:	4b27      	ldr	r3, [pc, #156]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 030c 	and.w	r3, r3, #12
 800719c:	2b08      	cmp	r3, #8
 800719e:	d102      	bne.n	80071a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071a0:	4b26      	ldr	r3, [pc, #152]	@ (800723c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	e03e      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80071a6:	4b23      	ldr	r3, [pc, #140]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 030c 	and.w	r3, r3, #12
 80071ae:	2b0c      	cmp	r3, #12
 80071b0:	d136      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0xa4>
=======
 800715e:	4b2c      	ldr	r3, [pc, #176]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b04      	cmp	r3, #4
 8007168:	d102      	bne.n	8007170 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800716a:	4b2a      	ldr	r3, [pc, #168]	@ (8007214 <HAL_RCC_GetSysClockFreq+0xbc>)
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e047      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007170:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b08      	cmp	r3, #8
 800717a:	d102      	bne.n	8007182 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800717c:	4b26      	ldr	r3, [pc, #152]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xc0>)
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	e03e      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007182:	4b23      	ldr	r3, [pc, #140]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d136      	bne.n	80071fc <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> origin/main
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 80071b2:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	3301      	adds	r3, #1
 80071c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d10c      	bne.n	80071ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071d0:	4a1a      	ldr	r2, [pc, #104]	@ (800723c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	4a16      	ldr	r2, [pc, #88]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071da:	68d2      	ldr	r2, [r2, #12]
 80071dc:	0a12      	lsrs	r2, r2, #8
 80071de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	617b      	str	r3, [r7, #20]
      break;
 80071e8:	e00c      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x88>
=======
 800718e:	4b20      	ldr	r3, [pc, #128]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007198:	4b1d      	ldr	r3, [pc, #116]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d10c      	bne.n	80071c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b4:	4a16      	ldr	r2, [pc, #88]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b6:	68d2      	ldr	r2, [r2, #12]
 80071b8:	0a12      	lsrs	r2, r2, #8
 80071ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	617b      	str	r3, [r7, #20]
      break;
 80071c4:	e00c      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> origin/main

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< HEAD
 80071ea:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f2:	4a10      	ldr	r2, [pc, #64]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f4:	68d2      	ldr	r2, [r2, #12]
 80071f6:	0a12      	lsrs	r2, r2, #8
 80071f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071fc:	fb02 f303 	mul.w	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]
      break;
 8007202:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007204:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	0e5b      	lsrs	r3, r3, #25
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	3301      	adds	r3, #1
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e001      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0xa8>
=======
 80071c6:	4a13      	ldr	r2, [pc, #76]	@ (8007214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ce:	4a10      	ldr	r2, [pc, #64]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071d0:	68d2      	ldr	r2, [r2, #12]
 80071d2:	0a12      	lsrs	r2, r2, #8
 80071d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
      break;
 80071de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	0e5b      	lsrs	r3, r3, #25
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	3301      	adds	r3, #1
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	e001      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0xa8>
>>>>>>> origin/main
  }
  else
  {
    sysclockfreq = 0U;
<<<<<<< HEAD
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007224:	693b      	ldr	r3, [r7, #16]
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40021000 	.word	0x40021000
 8007238:	00f42400 	.word	0x00f42400
 800723c:	016e3600 	.word	0x016e3600

08007240 <HAL_RCC_GetHCLKFreq>:
=======
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007200:	693b      	ldr	r3, [r7, #16]
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40021000 	.word	0x40021000
 8007214:	00f42400 	.word	0x00f42400
 8007218:	016e3600 	.word	0x016e3600

0800721c <HAL_RCC_GetHCLKFreq>:
>>>>>>> origin/main
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007244:	4b03      	ldr	r3, [pc, #12]	@ (8007254 <HAL_RCC_GetHCLKFreq+0x14>)
 8007246:	681b      	ldr	r3, [r3, #0]
}
 8007248:	4618      	mov	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000000 	.word	0x20000000

08007258 <HAL_RCC_GetPCLK1Freq>:
=======
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007220:	4b03      	ldr	r3, [pc, #12]	@ (8007230 <HAL_RCC_GetHCLKFreq+0x14>)
 8007222:	681b      	ldr	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000000 	.word	0x20000000

08007234 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> origin/main
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800725c:	f7ff fff0 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007260:	4602      	mov	r2, r0
 8007262:	4b06      	ldr	r3, [pc, #24]	@ (800727c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	4904      	ldr	r1, [pc, #16]	@ (8007280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800726e:	5ccb      	ldrb	r3, [r1, r3]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007278:	4618      	mov	r0, r3
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40021000 	.word	0x40021000
 8007280:	0800cd24 	.word	0x0800cd24

08007284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007288:	f7ff ffda 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 800728c:	4602      	mov	r2, r0
 800728e:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	0adb      	lsrs	r3, r3, #11
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	4904      	ldr	r1, [pc, #16]	@ (80072ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800729a:	5ccb      	ldrb	r3, [r1, r3]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40021000 	.word	0x40021000
 80072ac:	0800cd24 	.word	0x0800cd24

080072b0 <HAL_RCC_GetClockConfig>:
=======
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007238:	f7ff fff0 	bl	800721c <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4904      	ldr	r1, [pc, #16]	@ (800725c <HAL_RCC_GetPCLK1Freq+0x28>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40021000 	.word	0x40021000
 800725c:	0800cd04 	.word	0x0800cd04

08007260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007264:	f7ff ffda 	bl	800721c <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	0adb      	lsrs	r3, r3, #11
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4904      	ldr	r1, [pc, #16]	@ (8007288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007280:	4618      	mov	r0, r3
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40021000 	.word	0x40021000
 8007288:	0800cd04 	.word	0x0800cd04

0800728c <HAL_RCC_GetClockConfig>:
>>>>>>> origin/main
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
=======
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220f      	movs	r2, #15
 80072be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072c0:	4b12      	ldr	r3, [pc, #72]	@ (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0203 	and.w	r2, r3, #3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80072cc:	4b0f      	ldr	r3, [pc, #60]	@ (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072d8:	4b0c      	ldr	r3, [pc, #48]	@ (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072e4:	4b09      	ldr	r3, [pc, #36]	@ (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	08db      	lsrs	r3, r3, #3
 80072ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <HAL_RCC_GetClockConfig+0x60>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	601a      	str	r2, [r3, #0]
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000
 8007310:	40022000 	.word	0x40022000

08007314 <RCC_GetSysClockFreqFromPLLSource>:
=======
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	220f      	movs	r2, #15
 800729a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800729c:	4b12      	ldr	r3, [pc, #72]	@ (80072e8 <HAL_RCC_GetClockConfig+0x5c>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 0203 	and.w	r2, r3, #3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80072a8:	4b0f      	ldr	r3, [pc, #60]	@ (80072e8 <HAL_RCC_GetClockConfig+0x5c>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072b4:	4b0c      	ldr	r3, [pc, #48]	@ (80072e8 <HAL_RCC_GetClockConfig+0x5c>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072c0:	4b09      	ldr	r3, [pc, #36]	@ (80072e8 <HAL_RCC_GetClockConfig+0x5c>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	08db      	lsrs	r3, r3, #3
 80072c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072ce:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <HAL_RCC_GetClockConfig+0x60>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40021000 	.word	0x40021000
 80072ec:	40022000 	.word	0x40022000

080072f0 <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> origin/main
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< HEAD
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
=======
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 800731a:	4b1e      	ldr	r3, [pc, #120]	@ (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007324:	4b1b      	ldr	r3, [pc, #108]	@ (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d10c      	bne.n	8007352 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007338:	4a17      	ldr	r2, [pc, #92]	@ (8007398 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007340:	4a14      	ldr	r2, [pc, #80]	@ (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007342:	68d2      	ldr	r2, [r2, #12]
 8007344:	0a12      	lsrs	r2, r2, #8
 8007346:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	617b      	str	r3, [r7, #20]
    break;
 8007350:	e00c      	b.n	800736c <RCC_GetSysClockFreqFromPLLSource+0x58>
=======
 80072f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007300:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b03      	cmp	r3, #3
 8007312:	d10c      	bne.n	800732e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007314:	4a17      	ldr	r2, [pc, #92]	@ (8007374 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	fbb2 f3f3 	udiv	r3, r2, r3
 800731c:	4a14      	ldr	r2, [pc, #80]	@ (8007370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800731e:	68d2      	ldr	r2, [r2, #12]
 8007320:	0a12      	lsrs	r2, r2, #8
 8007322:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	617b      	str	r3, [r7, #20]
    break;
 800732c:	e00c      	b.n	8007348 <RCC_GetSysClockFreqFromPLLSource+0x58>
>>>>>>> origin/main

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< HEAD
 8007352:	4a12      	ldr	r2, [pc, #72]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	4a0e      	ldr	r2, [pc, #56]	@ (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800735c:	68d2      	ldr	r2, [r2, #12]
 800735e:	0a12      	lsrs	r2, r2, #8
 8007360:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007364:	fb02 f303 	mul.w	r3, r2, r3
 8007368:	617b      	str	r3, [r7, #20]
    break;
 800736a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800736c:	4b09      	ldr	r3, [pc, #36]	@ (8007394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	0e5b      	lsrs	r3, r3, #25
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	3301      	adds	r3, #1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007386:	687b      	ldr	r3, [r7, #4]
}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	40021000 	.word	0x40021000
 8007398:	016e3600 	.word	0x016e3600
 800739c:	00f42400 	.word	0x00f42400

080073a0 <HAL_RCCEx_PeriphCLKConfig>:
=======
 800732e:	4a12      	ldr	r2, [pc, #72]	@ (8007378 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	4a0e      	ldr	r2, [pc, #56]	@ (8007370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007338:	68d2      	ldr	r2, [r2, #12]
 800733a:	0a12      	lsrs	r2, r2, #8
 800733c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007340:	fb02 f303 	mul.w	r3, r2, r3
 8007344:	617b      	str	r3, [r7, #20]
    break;
 8007346:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	0e5b      	lsrs	r3, r3, #25
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	3301      	adds	r3, #1
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007360:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007362:	687b      	ldr	r3, [r7, #4]
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40021000 	.word	0x40021000
 8007374:	016e3600 	.word	0x016e3600
 8007378:	00f42400 	.word	0x00f42400

0800737c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> origin/main
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073a8:	2300      	movs	r3, #0
 80073aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073ac:	2300      	movs	r3, #0
 80073ae:	74bb      	strb	r3, [r7, #18]
=======
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007384:	2300      	movs	r3, #0
 8007386:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007388:	2300      	movs	r3, #0
 800738a:	74bb      	strb	r3, [r7, #18]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8098 	beq.w	80074ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073be:	2300      	movs	r3, #0
 80073c0:	747b      	strb	r3, [r7, #17]
=======
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8098 	beq.w	80074ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800739a:	2300      	movs	r3, #0
 800739c:	747b      	strb	r3, [r7, #17]
>>>>>>> origin/main
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80073c2:	4b43      	ldr	r3, [pc, #268]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10d      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ce:	4b40      	ldr	r3, [pc, #256]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d2:	4a3f      	ldr	r2, [pc, #252]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80073da:	4b3d      	ldr	r3, [pc, #244]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073e6:	2301      	movs	r3, #1
 80073e8:	747b      	strb	r3, [r7, #17]
=======
 800739e:	4b43      	ldr	r3, [pc, #268]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10d      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073aa:	4b40      	ldr	r3, [pc, #256]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ae:	4a3f      	ldr	r2, [pc, #252]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80073b6:	4b3d      	ldr	r3, [pc, #244]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073c2:	2301      	movs	r3, #1
 80073c4:	747b      	strb	r3, [r7, #17]
>>>>>>> origin/main
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 80073ea:	4b3a      	ldr	r3, [pc, #232]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a39      	ldr	r2, [pc, #228]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073f6:	f7fc fae9 	bl	80039cc <HAL_GetTick>
 80073fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073fc:	e009      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fe:	f7fc fae5 	bl	80039cc <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d902      	bls.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	74fb      	strb	r3, [r7, #19]
        break;
 8007410:	e005      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007412:	4b30      	ldr	r3, [pc, #192]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ef      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 80073c6:	4b3a      	ldr	r3, [pc, #232]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a39      	ldr	r2, [pc, #228]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073d2:	f7fc fae9 	bl	80039a8 <HAL_GetTick>
 80073d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d8:	e009      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073da:	f7fc fae5 	bl	80039a8 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d902      	bls.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	74fb      	strb	r3, [r7, #19]
        break;
 80073ec:	e005      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ee:	4b30      	ldr	r3, [pc, #192]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ef      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> origin/main
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 800741e:	7cfb      	ldrb	r3, [r7, #19]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d159      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007424:	4b2a      	ldr	r3, [pc, #168]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800742e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	429a      	cmp	r2, r3
 800743e:	d019      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007440:	4b23      	ldr	r3, [pc, #140]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800744a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800744c:	4b20      	ldr	r3, [pc, #128]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	4a1f      	ldr	r2, [pc, #124]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800745c:	4b1c      	ldr	r3, [pc, #112]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007462:	4a1b      	ldr	r2, [pc, #108]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800746c:	4a18      	ldr	r2, [pc, #96]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 80073fa:	7cfb      	ldrb	r3, [r7, #19]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d159      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007400:	4b2a      	ldr	r3, [pc, #168]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01e      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	429a      	cmp	r2, r3
 800741a:	d019      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800741c:	4b23      	ldr	r3, [pc, #140]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007428:	4b20      	ldr	r3, [pc, #128]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	4a1f      	ldr	r2, [pc, #124]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007438:	4b1c      	ldr	r3, [pc, #112]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743e:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007448:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> origin/main
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d016      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747e:	f7fc faa5 	bl	80039cc <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007484:	e00b      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fc faa1 	bl	80039cc <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d902      	bls.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	74fb      	strb	r3, [r7, #19]
            break;
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0ec      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xe6>
=======
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d016      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fc faa5 	bl	80039a8 <HAL_GetTick>
 800745e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007460:	e00b      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fc faa1 	bl	80039a8 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d902      	bls.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	74fb      	strb	r3, [r7, #19]
            break;
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ec      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xe6>
>>>>>>> origin/main
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< HEAD
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b2:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	4903      	ldr	r1, [pc, #12]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80074c8:	e008      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8007488:	7cfb      	ldrb	r3, [r7, #19]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800748e:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749c:	4903      	ldr	r1, [pc, #12]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80074a4:	e008      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> origin/main
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 80074ca:	7cfb      	ldrb	r3, [r7, #19]
 80074cc:	74bb      	strb	r3, [r7, #18]
 80074ce:	e005      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40007000 	.word	0x40007000
=======
 80074a6:	7cfb      	ldrb	r3, [r7, #19]
 80074a8:	74bb      	strb	r3, [r7, #18]
 80074aa:	e005      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40007000 	.word	0x40007000
>>>>>>> origin/main
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	74bb      	strb	r3, [r7, #18]
=======
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	74bb      	strb	r3, [r7, #18]
>>>>>>> origin/main
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80074dc:	7c7b      	ldrb	r3, [r7, #17]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d105      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e2:	4ba6      	ldr	r3, [pc, #664]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e6:	4aa5      	ldr	r2, [pc, #660]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ec:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 80074b8:	7c7b      	ldrb	r3, [r7, #17]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d105      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074be:	4ba6      	ldr	r3, [pc, #664]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c2:	4aa5      	ldr	r2, [pc, #660]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c8:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> origin/main
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 80074fa:	4ba0      	ldr	r3, [pc, #640]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	f023 0203 	bic.w	r2, r3, #3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	499c      	ldr	r1, [pc, #624]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80074d6:	4ba0      	ldr	r3, [pc, #640]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074dc:	f023 0203 	bic.w	r2, r3, #3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	499c      	ldr	r1, [pc, #624]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 800751c:	4b97      	ldr	r3, [pc, #604]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007522:	f023 020c 	bic.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4994      	ldr	r1, [pc, #592]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80074f8:	4b97      	ldr	r3, [pc, #604]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fe:	f023 020c 	bic.w	r2, r3, #12
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	4994      	ldr	r1, [pc, #592]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 800753e:	4b8f      	ldr	r3, [pc, #572]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007544:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	498b      	ldr	r1, [pc, #556]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800751a:	4b8f      	ldr	r3, [pc, #572]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007520:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	498b      	ldr	r1, [pc, #556]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8007560:	4b86      	ldr	r3, [pc, #536]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	4983      	ldr	r1, [pc, #524]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800753c:	4b86      	ldr	r3, [pc, #536]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	4983      	ldr	r1, [pc, #524]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
=======
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8007582:	4b7e      	ldr	r3, [pc, #504]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007588:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	497a      	ldr	r1, [pc, #488]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800755e:	4b7e      	ldr	r3, [pc, #504]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007564:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	497a      	ldr	r1, [pc, #488]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
=======
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x21a>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 80075a4:	4b75      	ldr	r3, [pc, #468]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	4972      	ldr	r1, [pc, #456]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007580:	4b75      	ldr	r3, [pc, #468]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007586:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	4972      	ldr	r1, [pc, #456]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
=======
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 80075c6:	4b6d      	ldr	r3, [pc, #436]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	4969      	ldr	r1, [pc, #420]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80075a2:	4b6d      	ldr	r3, [pc, #436]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	4969      	ldr	r1, [pc, #420]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
=======
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x25e>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 80075e8:	4b64      	ldr	r3, [pc, #400]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4961      	ldr	r1, [pc, #388]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80075c4:	4b64      	ldr	r3, [pc, #400]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	4961      	ldr	r1, [pc, #388]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< HEAD
 800760a:	4b5c      	ldr	r3, [pc, #368]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007610:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	4958      	ldr	r1, [pc, #352]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80075e6:	4b5c      	ldr	r3, [pc, #368]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	4958      	ldr	r1, [pc, #352]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> origin/main
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< HEAD
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007628:	2b00      	cmp	r3, #0
 800762a:	d015      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
=======
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007604:	2b00      	cmp	r3, #0
 8007606:	d015      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< HEAD
 800762c:	4b53      	ldr	r3, [pc, #332]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007632:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	4950      	ldr	r1, [pc, #320]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800764a:	d105      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800764c:	4b4b      	ldr	r3, [pc, #300]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4a4a      	ldr	r2, [pc, #296]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007656:	60d3      	str	r3, [r2, #12]
=======
 8007608:	4b53      	ldr	r3, [pc, #332]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	4950      	ldr	r1, [pc, #320]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007626:	d105      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007628:	4b4b      	ldr	r3, [pc, #300]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	4a4a      	ldr	r2, [pc, #296]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007632:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< HEAD
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
=======
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763c:	2b00      	cmp	r3, #0
 800763e:	d015      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 8007664:	4b45      	ldr	r3, [pc, #276]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007672:	4942      	ldr	r1, [pc, #264]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007674:	4313      	orrs	r3, r2
 8007676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007682:	d105      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007684:	4b3d      	ldr	r3, [pc, #244]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4a3c      	ldr	r2, [pc, #240]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800768e:	60d3      	str	r3, [r2, #12]
=======
 8007640:	4b45      	ldr	r3, [pc, #276]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007646:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	4942      	ldr	r1, [pc, #264]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800765e:	d105      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007660:	4b3d      	ldr	r3, [pc, #244]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4a3c      	ldr	r2, [pc, #240]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800766a:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< HEAD
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d015      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d015      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< HEAD
 800769c:	4b37      	ldr	r3, [pc, #220]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076aa:	4934      	ldr	r1, [pc, #208]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076ba:	d105      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076bc:	4b2f      	ldr	r3, [pc, #188]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4a2e      	ldr	r2, [pc, #184]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076c6:	60d3      	str	r3, [r2, #12]
=======
 8007678:	4b37      	ldr	r3, [pc, #220]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007686:	4934      	ldr	r1, [pc, #208]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007696:	d105      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007698:	4b2f      	ldr	r3, [pc, #188]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4a2e      	ldr	r2, [pc, #184]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076a2:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d015      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076d4:	4b29      	ldr	r3, [pc, #164]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	4926      	ldr	r1, [pc, #152]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f2:	d105      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076f4:	4b21      	ldr	r3, [pc, #132]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4a20      	ldr	r2, [pc, #128]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076fe:	60d3      	str	r3, [r2, #12]
=======
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d015      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076b0:	4b29      	ldr	r3, [pc, #164]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076be:	4926      	ldr	r1, [pc, #152]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ce:	d105      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d0:	4b21      	ldr	r3, [pc, #132]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	4a20      	ldr	r2, [pc, #128]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076da:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d015      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800770c:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771a:	4918      	ldr	r1, [pc, #96]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800772a:	d105      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800772c:	4b13      	ldr	r3, [pc, #76]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4a12      	ldr	r2, [pc, #72]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007736:	60d3      	str	r3, [r2, #12]
=======
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f6:	4918      	ldr	r1, [pc, #96]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007706:	d105      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007708:	4b13      	ldr	r3, [pc, #76]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a12      	ldr	r2, [pc, #72]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007712:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< HEAD
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d015      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
=======
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d015      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< HEAD
 8007744:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007752:	490a      	ldr	r1, [pc, #40]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007754:	4313      	orrs	r3, r2
 8007756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007762:	d105      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4a04      	ldr	r2, [pc, #16]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800776e:	60d3      	str	r3, [r2, #12]
=======
 8007720:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007726:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772e:	490a      	ldr	r1, [pc, #40]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800774a:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
    }
  }

#endif /* QUADSPI */

  return status;
<<<<<<< HEAD
 8007770:	7cbb      	ldrb	r3, [r7, #18]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40021000 	.word	0x40021000

08007780 <HAL_TIM_Base_Init>:
=======
 800774c:	7cbb      	ldrb	r3, [r7, #18]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40021000 	.word	0x40021000

0800775c <HAL_TIM_Base_Init>:
>>>>>>> origin/main
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e049      	b.n	8007826 <HAL_TIM_Base_Init+0xa6>
=======
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e049      	b.n	8007802 <HAL_TIM_Base_Init+0xa6>
>>>>>>> origin/main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> origin/main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f841 	bl	800782e <HAL_TIM_Base_MspInit>
=======
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f841 	bl	800780a <HAL_TIM_Base_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f000 fe56 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_TIM_Base_MspInit>:
=======
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f000 fe56 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_TIM_Base_MspInit>:
>>>>>>> origin/main
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
=======
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <HAL_TIM_Base_Start>:
=======
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <HAL_TIM_Base_Start>:
>>>>>>> origin/main
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
=======
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e042      	b.n	80078e2 <HAL_TIM_Base_Start+0x9e>
=======
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d001      	beq.n	8007838 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e042      	b.n	80078be <HAL_TIM_Base_Start+0x9e>
>>>>>>> origin/main
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a21      	ldr	r2, [pc, #132]	@ (80078f0 <HAL_TIM_Base_Start+0xac>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1d      	ldr	r2, [pc, #116]	@ (80078f4 <HAL_TIM_Base_Start+0xb0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1c      	ldr	r2, [pc, #112]	@ (80078f8 <HAL_TIM_Base_Start+0xb4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1a      	ldr	r2, [pc, #104]	@ (80078fc <HAL_TIM_Base_Start+0xb8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a19      	ldr	r2, [pc, #100]	@ (8007900 <HAL_TIM_Base_Start+0xbc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d115      	bne.n	80078cc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	4b17      	ldr	r3, [pc, #92]	@ (8007904 <HAL_TIM_Base_Start+0xc0>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d015      	beq.n	80078de <HAL_TIM_Base_Start+0x9a>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b8:	d011      	beq.n	80078de <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0201 	orr.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ca:	e008      	b.n	80078de <HAL_TIM_Base_Start+0x9a>
=======
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <HAL_TIM_Base_Start+0xac>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d018      	beq.n	800787c <HAL_TIM_Base_Start+0x5c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007852:	d013      	beq.n	800787c <HAL_TIM_Base_Start+0x5c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a1d      	ldr	r2, [pc, #116]	@ (80078d0 <HAL_TIM_Base_Start+0xb0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00e      	beq.n	800787c <HAL_TIM_Base_Start+0x5c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a1c      	ldr	r2, [pc, #112]	@ (80078d4 <HAL_TIM_Base_Start+0xb4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d009      	beq.n	800787c <HAL_TIM_Base_Start+0x5c>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a1a      	ldr	r2, [pc, #104]	@ (80078d8 <HAL_TIM_Base_Start+0xb8>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d004      	beq.n	800787c <HAL_TIM_Base_Start+0x5c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a19      	ldr	r2, [pc, #100]	@ (80078dc <HAL_TIM_Base_Start+0xbc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d115      	bne.n	80078a8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	4b17      	ldr	r3, [pc, #92]	@ (80078e0 <HAL_TIM_Base_Start+0xc0>)
 8007884:	4013      	ands	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b06      	cmp	r3, #6
 800788c:	d015      	beq.n	80078ba <HAL_TIM_Base_Start+0x9a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007894:	d011      	beq.n	80078ba <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0201 	orr.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a6:	e008      	b.n	80078ba <HAL_TIM_Base_Start+0x9a>
>>>>>>> origin/main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e000      	b.n	80078e0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078de:	bf00      	nop
=======
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e000      	b.n	80078bc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ba:	bf00      	nop
>>>>>>> origin/main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40012c00 	.word	0x40012c00
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40013400 	.word	0x40013400
 8007900:	40014000 	.word	0x40014000
 8007904:	00010007 	.word	0x00010007

08007908 <HAL_TIM_Base_Start_IT>:
=======
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800
 80078d8:	40013400 	.word	0x40013400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	00010007 	.word	0x00010007

080078e4 <HAL_TIM_Base_Start_IT>:
>>>>>>> origin/main
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
=======
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d001      	beq.n	8007920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e04a      	b.n	80079b6 <HAL_TIM_Base_Start_IT+0xae>
=======
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d001      	beq.n	80078fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e04a      	b.n	8007992 <HAL_TIM_Base_Start_IT+0xae>
>>>>>>> origin/main
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a21      	ldr	r2, [pc, #132]	@ (80079c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d018      	beq.n	8007974 <HAL_TIM_Base_Start_IT+0x6c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794a:	d013      	beq.n	8007974 <HAL_TIM_Base_Start_IT+0x6c>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a1d      	ldr	r2, [pc, #116]	@ (80079c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00e      	beq.n	8007974 <HAL_TIM_Base_Start_IT+0x6c>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1c      	ldr	r2, [pc, #112]	@ (80079cc <HAL_TIM_Base_Start_IT+0xc4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d009      	beq.n	8007974 <HAL_TIM_Base_Start_IT+0x6c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1a      	ldr	r2, [pc, #104]	@ (80079d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_TIM_Base_Start_IT+0x6c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a19      	ldr	r2, [pc, #100]	@ (80079d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d115      	bne.n	80079a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	4b17      	ldr	r3, [pc, #92]	@ (80079d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b06      	cmp	r3, #6
 8007984:	d015      	beq.n	80079b2 <HAL_TIM_Base_Start_IT+0xaa>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800798c:	d011      	beq.n	80079b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0201 	orr.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799e:	e008      	b.n	80079b2 <HAL_TIM_Base_Start_IT+0xaa>
=======
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0201 	orr.w	r2, r2, #1
 8007912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a21      	ldr	r2, [pc, #132]	@ (80079a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d018      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x6c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007926:	d013      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x6c>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1d      	ldr	r2, [pc, #116]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00e      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x6c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1c      	ldr	r2, [pc, #112]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x6c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1a      	ldr	r2, [pc, #104]	@ (80079ac <HAL_TIM_Base_Start_IT+0xc8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x6c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a19      	ldr	r2, [pc, #100]	@ (80079b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d115      	bne.n	800797c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	4b17      	ldr	r3, [pc, #92]	@ (80079b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d015      	beq.n	800798e <HAL_TIM_Base_Start_IT+0xaa>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007968:	d011      	beq.n	800798e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	e008      	b.n	800798e <HAL_TIM_Base_Start_IT+0xaa>
>>>>>>> origin/main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e000      	b.n	80079b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	bf00      	nop
=======
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e000      	b.n	8007990 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798e:	bf00      	nop
>>>>>>> origin/main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40012c00 	.word	0x40012c00
 80079c8:	40000400 	.word	0x40000400
 80079cc:	40000800 	.word	0x40000800
 80079d0:	40013400 	.word	0x40013400
 80079d4:	40014000 	.word	0x40014000
 80079d8:	00010007 	.word	0x00010007

080079dc <HAL_TIM_OC_Init>:
=======
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40013400 	.word	0x40013400
 80079b0:	40014000 	.word	0x40014000
 80079b4:	00010007 	.word	0x00010007

080079b8 <HAL_TIM_OC_Init>:
>>>>>>> origin/main
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e049      	b.n	8007a82 <HAL_TIM_OC_Init+0xa6>
=======
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e049      	b.n	8007a5e <HAL_TIM_OC_Init+0xa6>
>>>>>>> origin/main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d106      	bne.n	80079e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> origin/main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7f9 fcfa 	bl	80013fc <HAL_TIM_OC_MspInit>
=======
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7f9 fd1a 	bl	8001418 <HAL_TIM_OC_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f000 fd28 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_PWM_Init>:
=======
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f000 fd28 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_TIM_PWM_Init>:
>>>>>>> origin/main
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e049      	b.n	8007b30 <HAL_TIM_PWM_Init+0xa6>
=======
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e049      	b.n	8007b0c <HAL_TIM_PWM_Init+0xa6>
>>>>>>> origin/main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d106      	bne.n	8007ab6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> origin/main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7f9 fc7d 	bl	80013b0 <HAL_TIM_PWM_MspInit>
=======
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7f9 fc9d 	bl	80013cc <HAL_TIM_PWM_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 fcd1 	bl	8008470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_TIM_PWM_Start>:
=======
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f000 fcd1 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_TIM_PWM_Start>:
>>>>>>> origin/main
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
=======
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <HAL_TIM_PWM_Start+0x24>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	bf14      	ite	ne
 8007b54:	2301      	movne	r3, #1
 8007b56:	2300      	moveq	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e03c      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x9e>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d109      	bne.n	8007b76 <HAL_TIM_PWM_Start+0x3e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	e02f      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x9e>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d109      	bne.n	8007b90 <HAL_TIM_PWM_Start+0x58>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e022      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x9e>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b0c      	cmp	r3, #12
 8007b94:	d109      	bne.n	8007baa <HAL_TIM_PWM_Start+0x72>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	bf14      	ite	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e015      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x9e>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d109      	bne.n	8007bc4 <HAL_TIM_PWM_Start+0x8c>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e008      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x9e>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e097      	b.n	8007d0e <HAL_TIM_PWM_Start+0x1d6>
=======
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <HAL_TIM_PWM_Start+0x24>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	bf14      	ite	ne
 8007b30:	2301      	movne	r3, #1
 8007b32:	2300      	moveq	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	e03c      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d109      	bne.n	8007b52 <HAL_TIM_PWM_Start+0x3e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	bf14      	ite	ne
 8007b4a:	2301      	movne	r3, #1
 8007b4c:	2300      	moveq	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	e02f      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d109      	bne.n	8007b6c <HAL_TIM_PWM_Start+0x58>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	bf14      	ite	ne
 8007b64:	2301      	movne	r3, #1
 8007b66:	2300      	moveq	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e022      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d109      	bne.n	8007b86 <HAL_TIM_PWM_Start+0x72>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	e015      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d109      	bne.n	8007ba0 <HAL_TIM_PWM_Start+0x8c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	bf14      	ite	ne
 8007b98:	2301      	movne	r3, #1
 8007b9a:	2300      	moveq	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e008      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x9e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e097      	b.n	8007cea <HAL_TIM_PWM_Start+0x1d6>
>>>>>>> origin/main
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_PWM_Start+0xb6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bec:	e023      	b.n	8007c36 <HAL_TIM_PWM_Start+0xfe>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d104      	bne.n	8007bfe <HAL_TIM_PWM_Start+0xc6>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bfc:	e01b      	b.n	8007c36 <HAL_TIM_PWM_Start+0xfe>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_PWM_Start+0xd6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c0c:	e013      	b.n	8007c36 <HAL_TIM_PWM_Start+0xfe>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b0c      	cmp	r3, #12
 8007c12:	d104      	bne.n	8007c1e <HAL_TIM_PWM_Start+0xe6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c1c:	e00b      	b.n	8007c36 <HAL_TIM_PWM_Start+0xfe>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d104      	bne.n	8007c2e <HAL_TIM_PWM_Start+0xf6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c2c:	e003      	b.n	8007c36 <HAL_TIM_PWM_Start+0xfe>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 ffa8 	bl	8008b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a33      	ldr	r2, [pc, #204]	@ (8007d18 <HAL_TIM_PWM_Start+0x1e0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d013      	beq.n	8007c76 <HAL_TIM_PWM_Start+0x13e>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a32      	ldr	r2, [pc, #200]	@ (8007d1c <HAL_TIM_PWM_Start+0x1e4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00e      	beq.n	8007c76 <HAL_TIM_PWM_Start+0x13e>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a30      	ldr	r2, [pc, #192]	@ (8007d20 <HAL_TIM_PWM_Start+0x1e8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d009      	beq.n	8007c76 <HAL_TIM_PWM_Start+0x13e>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a2f      	ldr	r2, [pc, #188]	@ (8007d24 <HAL_TIM_PWM_Start+0x1ec>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d004      	beq.n	8007c76 <HAL_TIM_PWM_Start+0x13e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a2d      	ldr	r2, [pc, #180]	@ (8007d28 <HAL_TIM_PWM_Start+0x1f0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d101      	bne.n	8007c7a <HAL_TIM_PWM_Start+0x142>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <HAL_TIM_PWM_Start+0x144>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c8e:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Start+0xb6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bc8:	e023      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Start+0xc6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bd8:	e01b      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_PWM_Start+0xd6>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be8:	e013      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b0c      	cmp	r3, #12
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_PWM_Start+0xe6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bf8:	e00b      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d104      	bne.n	8007c0a <HAL_TIM_PWM_Start+0xf6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c08:	e003      	b.n	8007c12 <HAL_TIM_PWM_Start+0xfe>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2201      	movs	r2, #1
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 ffa8 	bl	8008b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a33      	ldr	r2, [pc, #204]	@ (8007cf4 <HAL_TIM_PWM_Start+0x1e0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a32      	ldr	r2, [pc, #200]	@ (8007cf8 <HAL_TIM_PWM_Start+0x1e4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00e      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a30      	ldr	r2, [pc, #192]	@ (8007cfc <HAL_TIM_PWM_Start+0x1e8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a2f      	ldr	r2, [pc, #188]	@ (8007d00 <HAL_TIM_PWM_Start+0x1ec>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_TIM_PWM_Start+0x13e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d04 <HAL_TIM_PWM_Start+0x1f0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d101      	bne.n	8007c56 <HAL_TIM_PWM_Start+0x142>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <HAL_TIM_PWM_Start+0x144>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c6a:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> origin/main
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a20      	ldr	r2, [pc, #128]	@ (8007d18 <HAL_TIM_PWM_Start+0x1e0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <HAL_TIM_PWM_Start+0x194>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca2:	d013      	beq.n	8007ccc <HAL_TIM_PWM_Start+0x194>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a20      	ldr	r2, [pc, #128]	@ (8007d2c <HAL_TIM_PWM_Start+0x1f4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <HAL_TIM_PWM_Start+0x194>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <HAL_TIM_PWM_Start+0x1f8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_TIM_PWM_Start+0x194>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a17      	ldr	r2, [pc, #92]	@ (8007d1c <HAL_TIM_PWM_Start+0x1e4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_TIM_PWM_Start+0x194>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a16      	ldr	r2, [pc, #88]	@ (8007d20 <HAL_TIM_PWM_Start+0x1e8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d115      	bne.n	8007cf8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	4b18      	ldr	r3, [pc, #96]	@ (8007d34 <HAL_TIM_PWM_Start+0x1fc>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b06      	cmp	r3, #6
 8007cdc:	d015      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x1d2>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce4:	d011      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f042 0201 	orr.w	r2, r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf6:	e008      	b.n	8007d0a <HAL_TIM_PWM_Start+0x1d2>
=======
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a20      	ldr	r2, [pc, #128]	@ (8007cf4 <HAL_TIM_PWM_Start+0x1e0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d018      	beq.n	8007ca8 <HAL_TIM_PWM_Start+0x194>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c7e:	d013      	beq.n	8007ca8 <HAL_TIM_PWM_Start+0x194>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a20      	ldr	r2, [pc, #128]	@ (8007d08 <HAL_TIM_PWM_Start+0x1f4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00e      	beq.n	8007ca8 <HAL_TIM_PWM_Start+0x194>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d0c <HAL_TIM_PWM_Start+0x1f8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d009      	beq.n	8007ca8 <HAL_TIM_PWM_Start+0x194>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a17      	ldr	r2, [pc, #92]	@ (8007cf8 <HAL_TIM_PWM_Start+0x1e4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d004      	beq.n	8007ca8 <HAL_TIM_PWM_Start+0x194>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a16      	ldr	r2, [pc, #88]	@ (8007cfc <HAL_TIM_PWM_Start+0x1e8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d115      	bne.n	8007cd4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	4b18      	ldr	r3, [pc, #96]	@ (8007d10 <HAL_TIM_PWM_Start+0x1fc>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d015      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x1d2>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc0:	d011      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0201 	orr.w	r2, r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd2:	e008      	b.n	8007ce6 <HAL_TIM_PWM_Start+0x1d2>
>>>>>>> origin/main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	e000      	b.n	8007d0c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0a:	bf00      	nop
=======
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e000      	b.n	8007ce8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce6:	bf00      	nop
>>>>>>> origin/main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	40012c00 	.word	0x40012c00
 8007d1c:	40013400 	.word	0x40013400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40014400 	.word	0x40014400
 8007d28:	40014800 	.word	0x40014800
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	00010007 	.word	0x00010007

08007d38 <HAL_TIM_PWM_Stop>:
=======
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40013400 	.word	0x40013400
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40014400 	.word	0x40014400
 8007d04:	40014800 	.word	0x40014800
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	00010007 	.word	0x00010007

08007d14 <HAL_TIM_PWM_Stop>:
>>>>>>> origin/main
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
=======
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 ff22 	bl	8008b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a3e      	ldr	r2, [pc, #248]	@ (8007e50 <HAL_TIM_PWM_Stop+0x118>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_TIM_PWM_Stop+0x4a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8007e54 <HAL_TIM_PWM_Stop+0x11c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIM_PWM_Stop+0x4a>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a3b      	ldr	r2, [pc, #236]	@ (8007e58 <HAL_TIM_PWM_Stop+0x120>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIM_PWM_Stop+0x4a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a3a      	ldr	r2, [pc, #232]	@ (8007e5c <HAL_TIM_PWM_Stop+0x124>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d004      	beq.n	8007d82 <HAL_TIM_PWM_Stop+0x4a>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a38      	ldr	r2, [pc, #224]	@ (8007e60 <HAL_TIM_PWM_Stop+0x128>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d101      	bne.n	8007d86 <HAL_TIM_PWM_Stop+0x4e>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <HAL_TIM_PWM_Stop+0x50>
 8007d86:	2300      	movs	r3, #0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d017      	beq.n	8007dbc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10f      	bne.n	8007dbc <HAL_TIM_PWM_Stop+0x84>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d107      	bne.n	8007dbc <HAL_TIM_PWM_Stop+0x84>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dba:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 ff22 	bl	8008b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a3e      	ldr	r2, [pc, #248]	@ (8007e2c <HAL_TIM_PWM_Stop+0x118>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <HAL_TIM_PWM_Stop+0x4a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007e30 <HAL_TIM_PWM_Stop+0x11c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00e      	beq.n	8007d5e <HAL_TIM_PWM_Stop+0x4a>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a3b      	ldr	r2, [pc, #236]	@ (8007e34 <HAL_TIM_PWM_Stop+0x120>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_TIM_PWM_Stop+0x4a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8007e38 <HAL_TIM_PWM_Stop+0x124>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d004      	beq.n	8007d5e <HAL_TIM_PWM_Stop+0x4a>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a38      	ldr	r2, [pc, #224]	@ (8007e3c <HAL_TIM_PWM_Stop+0x128>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d101      	bne.n	8007d62 <HAL_TIM_PWM_Stop+0x4e>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <HAL_TIM_PWM_Stop+0x50>
 8007d62:	2300      	movs	r3, #0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d017      	beq.n	8007d98 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6a1a      	ldr	r2, [r3, #32]
 8007d6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d72:	4013      	ands	r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10f      	bne.n	8007d98 <HAL_TIM_PWM_Stop+0x84>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6a1a      	ldr	r2, [r3, #32]
 8007d7e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d107      	bne.n	8007d98 <HAL_TIM_PWM_Stop+0x84>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d96:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> origin/main
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10f      	bne.n	8007dec <HAL_TIM_PWM_Stop+0xb4>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <HAL_TIM_PWM_Stop+0xb4>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0201 	bic.w	r2, r2, #1
 8007dea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <HAL_TIM_PWM_Stop+0xc4>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dfa:	e023      	b.n	8007e44 <HAL_TIM_PWM_Stop+0x10c>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d104      	bne.n	8007e0c <HAL_TIM_PWM_Stop+0xd4>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e0a:	e01b      	b.n	8007e44 <HAL_TIM_PWM_Stop+0x10c>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d104      	bne.n	8007e1c <HAL_TIM_PWM_Stop+0xe4>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e1a:	e013      	b.n	8007e44 <HAL_TIM_PWM_Stop+0x10c>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b0c      	cmp	r3, #12
 8007e20:	d104      	bne.n	8007e2c <HAL_TIM_PWM_Stop+0xf4>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e2a:	e00b      	b.n	8007e44 <HAL_TIM_PWM_Stop+0x10c>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b10      	cmp	r3, #16
 8007e30:	d104      	bne.n	8007e3c <HAL_TIM_PWM_Stop+0x104>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e3a:	e003      	b.n	8007e44 <HAL_TIM_PWM_Stop+0x10c>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	40013400 	.word	0x40013400
 8007e58:	40014000 	.word	0x40014000
 8007e5c:	40014400 	.word	0x40014400
 8007e60:	40014800 	.word	0x40014800

08007e64 <HAL_TIM_IRQHandler>:
=======
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007da2:	4013      	ands	r3, r2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10f      	bne.n	8007dc8 <HAL_TIM_PWM_Stop+0xb4>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6a1a      	ldr	r2, [r3, #32]
 8007dae:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d107      	bne.n	8007dc8 <HAL_TIM_PWM_Stop+0xb4>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <HAL_TIM_PWM_Stop+0xc4>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd6:	e023      	b.n	8007e20 <HAL_TIM_PWM_Stop+0x10c>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d104      	bne.n	8007de8 <HAL_TIM_PWM_Stop+0xd4>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007de6:	e01b      	b.n	8007e20 <HAL_TIM_PWM_Stop+0x10c>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d104      	bne.n	8007df8 <HAL_TIM_PWM_Stop+0xe4>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007df6:	e013      	b.n	8007e20 <HAL_TIM_PWM_Stop+0x10c>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d104      	bne.n	8007e08 <HAL_TIM_PWM_Stop+0xf4>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e06:	e00b      	b.n	8007e20 <HAL_TIM_PWM_Stop+0x10c>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d104      	bne.n	8007e18 <HAL_TIM_PWM_Stop+0x104>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e16:	e003      	b.n	8007e20 <HAL_TIM_PWM_Stop+0x10c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40012c00 	.word	0x40012c00
 8007e30:	40013400 	.word	0x40013400
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	40014800 	.word	0x40014800

08007e40 <HAL_TIM_IRQHandler>:
>>>>>>> origin/main
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d020      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01b      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0202 	mvn.w	r2, #2
 8007e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x52>
=======
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d020      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0202 	mvn.w	r2, #2
 8007e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x52>
>>>>>>> origin/main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fac0 	bl	8008434 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0x5e>
=======
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fac0 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0x5e>
>>>>>>> origin/main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fab2 	bl	8008420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fac3 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
=======
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fab2 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fac3 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
>>>>>>> origin/main
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d020      	beq.n	8007f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01b      	beq.n	8007f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0204 	mvn.w	r2, #4
 8007ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x9e>
=======
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d020      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01b      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0204 	mvn.w	r2, #4
 8007ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0x9e>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa9a 	bl	8008434 <HAL_TIM_IC_CaptureCallback>
 8007f00:	e005      	b.n	8007f0e <HAL_TIM_IRQHandler+0xaa>
=======
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa9a 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0xaa>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa8c 	bl	8008420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa9d 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	771a      	strb	r2, [r3, #28]
=======
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa8c 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa9d 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
>>>>>>> origin/main
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d020      	beq.n	8007f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01b      	beq.n	8007f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0208 	mvn.w	r2, #8
 8007f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2204      	movs	r2, #4
 8007f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0xea>
=======
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d020      	beq.n	8007f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01b      	beq.n	8007f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0208 	mvn.w	r2, #8
 8007f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2204      	movs	r2, #4
 8007f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_TIM_IRQHandler+0xea>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa74 	bl	8008434 <HAL_TIM_IC_CaptureCallback>
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_IRQHandler+0xf6>
=======
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa74 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 8007f28:	e005      	b.n	8007f36 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa66 	bl	8008420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fa77 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]
=======
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa66 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa77 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	771a      	strb	r2, [r3, #28]
>>>>>>> origin/main
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d020      	beq.n	8007fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01b      	beq.n	8007fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0210 	mvn.w	r2, #16
 8007f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2208      	movs	r2, #8
 8007f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_TIM_IRQHandler+0x136>
=======
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d020      	beq.n	8007f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01b      	beq.n	8007f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0210 	mvn.w	r2, #16
 8007f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_TIM_IRQHandler+0x136>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa4e 	bl	8008434 <HAL_TIM_IC_CaptureCallback>
 8007f98:	e005      	b.n	8007fa6 <HAL_TIM_IRQHandler+0x142>
=======
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa4e 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 8007f74:	e005      	b.n	8007f82 <HAL_TIM_IRQHandler+0x142>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa40 	bl	8008420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa51 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	771a      	strb	r2, [r3, #28]
=======
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa40 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa51 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	771a      	strb	r2, [r3, #28]
>>>>>>> origin/main
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00c      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0201 	mvn.w	r2, #1
 8007fc8:	611a      	str	r2, [r3, #16]
=======
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00c      	beq.n	8007fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f06f 0201 	mvn.w	r2, #1
 8007fa4:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7f8 ff58 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
=======
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7f8 ff78 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< HEAD
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ff6:	611a      	str	r2, [r3, #16]
=======
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d104      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00c      	beq.n	8007fda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007fd2:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f82e 	bl	800905a <HAL_TIMEx_BreakCallback>
=======
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f82e 	bl	8009036 <HAL_TIMEx_BreakCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< HEAD
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00c      	beq.n	8008022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800801a:	611a      	str	r2, [r3, #16]
=======
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ff6:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 f826 	bl	800906e <HAL_TIMEx_Break2Callback>
=======
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f826 	bl	800904a <HAL_TIMEx_Break2Callback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800803e:	611a      	str	r2, [r3, #16]
=======
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00c      	beq.n	8008022 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800801a:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fa0b 	bl	800845c <HAL_TIM_TriggerCallback>
=======
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa0b 	bl	8008438 <HAL_TIM_TriggerCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f06f 0220 	mvn.w	r2, #32
 8008062:	611a      	str	r2, [r3, #16]
=======
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f06f 0220 	mvn.w	r2, #32
 800803e:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 ffee 	bl	8009046 <HAL_TIMEx_CommutCallback>
=======
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 ffee 	bl	8009022 <HAL_TIMEx_CommutCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
<<<<<<< HEAD
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008086:	611a      	str	r2, [r3, #16]
=======
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008062:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
<<<<<<< HEAD
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fffa 	bl	8009082 <HAL_TIMEx_EncoderIndexCallback>
=======
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fffa 	bl	800905e <HAL_TIMEx_EncoderIndexCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
<<<<<<< HEAD
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80080aa:	611a      	str	r2, [r3, #16]
=======
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008086:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
<<<<<<< HEAD
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fff2 	bl	8009096 <HAL_TIMEx_DirectionChangeCallback>
=======
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fff2 	bl	8009072 <HAL_TIMEx_DirectionChangeCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
<<<<<<< HEAD
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00c      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80080ce:	611a      	str	r2, [r3, #16]
=======
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80080aa:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
<<<<<<< HEAD
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 ffea 	bl	80090aa <HAL_TIMEx_IndexErrorCallback>
=======
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 ffea 	bl	8009086 <HAL_TIMEx_IndexErrorCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
<<<<<<< HEAD
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d007      	beq.n	80080fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80080f2:	611a      	str	r2, [r3, #16]
=======
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00c      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80080ce:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
<<<<<<< HEAD
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 ffe2 	bl	80090be <HAL_TIMEx_TransitionErrorCallback>
=======
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 ffe2 	bl	800909a <HAL_TIMEx_TransitionErrorCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_TIM_OC_ConfigChannel>:
=======
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <HAL_TIM_OC_ConfigChannel>:
>>>>>>> origin/main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
=======
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_TIM_OC_ConfigChannel+0x1e>
 800811e:	2302      	movs	r3, #2
 8008120:	e066      	b.n	80081f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b14      	cmp	r3, #20
 800812e:	d857      	bhi.n	80081e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008130:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	0800818d 	.word	0x0800818d
 800813c:	080081e1 	.word	0x080081e1
 8008140:	080081e1 	.word	0x080081e1
 8008144:	080081e1 	.word	0x080081e1
 8008148:	0800819b 	.word	0x0800819b
 800814c:	080081e1 	.word	0x080081e1
 8008150:	080081e1 	.word	0x080081e1
 8008154:	080081e1 	.word	0x080081e1
 8008158:	080081a9 	.word	0x080081a9
 800815c:	080081e1 	.word	0x080081e1
 8008160:	080081e1 	.word	0x080081e1
 8008164:	080081e1 	.word	0x080081e1
 8008168:	080081b7 	.word	0x080081b7
 800816c:	080081e1 	.word	0x080081e1
 8008170:	080081e1 	.word	0x080081e1
 8008174:	080081e1 	.word	0x080081e1
 8008178:	080081c5 	.word	0x080081c5
 800817c:	080081e1 	.word	0x080081e1
 8008180:	080081e1 	.word	0x080081e1
 8008184:	080081e1 	.word	0x080081e1
 8008188:	080081d3 	.word	0x080081d3
=======
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e066      	b.n	80081cc <HAL_TIM_OC_ConfigChannel+0xec>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b14      	cmp	r3, #20
 800810a:	d857      	bhi.n	80081bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800810c:	a201      	add	r2, pc, #4	@ (adr r2, 8008114 <HAL_TIM_OC_ConfigChannel+0x34>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008169 	.word	0x08008169
 8008118:	080081bd 	.word	0x080081bd
 800811c:	080081bd 	.word	0x080081bd
 8008120:	080081bd 	.word	0x080081bd
 8008124:	08008177 	.word	0x08008177
 8008128:	080081bd 	.word	0x080081bd
 800812c:	080081bd 	.word	0x080081bd
 8008130:	080081bd 	.word	0x080081bd
 8008134:	08008185 	.word	0x08008185
 8008138:	080081bd 	.word	0x080081bd
 800813c:	080081bd 	.word	0x080081bd
 8008140:	080081bd 	.word	0x080081bd
 8008144:	08008193 	.word	0x08008193
 8008148:	080081bd 	.word	0x080081bd
 800814c:	080081bd 	.word	0x080081bd
 8008150:	080081bd 	.word	0x080081bd
 8008154:	080081a1 	.word	0x080081a1
 8008158:	080081bd 	.word	0x080081bd
 800815c:	080081bd 	.word	0x080081bd
 8008160:	080081bd 	.word	0x080081bd
 8008164:	080081af 	.word	0x080081af
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa08 	bl	80085a8 <TIM_OC1_SetConfig>
      break;
 8008198:	e025      	b.n	80081e6 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fa08 	bl	8008584 <TIM_OC1_SetConfig>
      break;
 8008174:	e025      	b.n	80081c2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fa91 	bl	80086c8 <TIM_OC2_SetConfig>
      break;
 80081a6:	e01e      	b.n	80081e6 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fa91 	bl	80086a4 <TIM_OC2_SetConfig>
      break;
 8008182:	e01e      	b.n	80081c2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68b9      	ldr	r1, [r7, #8]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fb14 	bl	80087dc <TIM_OC3_SetConfig>
      break;
 80081b4:	e017      	b.n	80081e6 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fb14 	bl	80087b8 <TIM_OC3_SetConfig>
      break;
 8008190:	e017      	b.n	80081c2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fb95 	bl	80088ec <TIM_OC4_SetConfig>
      break;
 80081c2:	e010      	b.n	80081e6 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fb95 	bl	80088c8 <TIM_OC4_SetConfig>
      break;
 800819e:	e010      	b.n	80081c2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fc18 	bl	8008a00 <TIM_OC5_SetConfig>
      break;
 80081d0:	e009      	b.n	80081e6 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fc18 	bl	80089dc <TIM_OC5_SetConfig>
      break;
 80081ac:	e009      	b.n	80081c2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fc75 	bl	8008ac8 <TIM_OC6_SetConfig>
      break;
 80081de:	e002      	b.n	80081e6 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fc75 	bl	8008aa4 <TIM_OC6_SetConfig>
      break;
 80081ba:	e002      	b.n	80081c2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> origin/main
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80081e0:	2301      	movs	r3, #1
 80081e2:	75fb      	strb	r3, [r7, #23]
      break;
 80081e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_TIM_PWM_ConfigChannel>:
=======
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> origin/main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]
=======
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008212:	2302      	movs	r3, #2
 8008214:	e0ff      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b14      	cmp	r3, #20
 8008222:	f200 80f0 	bhi.w	8008406 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008226:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008281 	.word	0x08008281
 8008230:	08008407 	.word	0x08008407
 8008234:	08008407 	.word	0x08008407
 8008238:	08008407 	.word	0x08008407
 800823c:	080082c1 	.word	0x080082c1
 8008240:	08008407 	.word	0x08008407
 8008244:	08008407 	.word	0x08008407
 8008248:	08008407 	.word	0x08008407
 800824c:	08008303 	.word	0x08008303
 8008250:	08008407 	.word	0x08008407
 8008254:	08008407 	.word	0x08008407
 8008258:	08008407 	.word	0x08008407
 800825c:	08008343 	.word	0x08008343
 8008260:	08008407 	.word	0x08008407
 8008264:	08008407 	.word	0x08008407
 8008268:	08008407 	.word	0x08008407
 800826c:	08008385 	.word	0x08008385
 8008270:	08008407 	.word	0x08008407
 8008274:	08008407 	.word	0x08008407
 8008278:	08008407 	.word	0x08008407
 800827c:	080083c5 	.word	0x080083c5
=======
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e0ff      	b.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b14      	cmp	r3, #20
 80081fe:	f200 80f0 	bhi.w	80083e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008202:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	0800825d 	.word	0x0800825d
 800820c:	080083e3 	.word	0x080083e3
 8008210:	080083e3 	.word	0x080083e3
 8008214:	080083e3 	.word	0x080083e3
 8008218:	0800829d 	.word	0x0800829d
 800821c:	080083e3 	.word	0x080083e3
 8008220:	080083e3 	.word	0x080083e3
 8008224:	080083e3 	.word	0x080083e3
 8008228:	080082df 	.word	0x080082df
 800822c:	080083e3 	.word	0x080083e3
 8008230:	080083e3 	.word	0x080083e3
 8008234:	080083e3 	.word	0x080083e3
 8008238:	0800831f 	.word	0x0800831f
 800823c:	080083e3 	.word	0x080083e3
 8008240:	080083e3 	.word	0x080083e3
 8008244:	080083e3 	.word	0x080083e3
 8008248:	08008361 	.word	0x08008361
 800824c:	080083e3 	.word	0x080083e3
 8008250:	080083e3 	.word	0x080083e3
 8008254:	080083e3 	.word	0x080083e3
 8008258:	080083a1 	.word	0x080083a1
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f98e 	bl	80085a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0208 	orr.w	r2, r2, #8
 800829a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0204 	bic.w	r2, r2, #4
 80082aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6999      	ldr	r1, [r3, #24]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	619a      	str	r2, [r3, #24]
      break;
 80082be:	e0a5      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f98e 	bl	8008584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0208 	orr.w	r2, r2, #8
 8008276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0204 	bic.w	r2, r2, #4
 8008286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6999      	ldr	r1, [r3, #24]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	619a      	str	r2, [r3, #24]
      break;
 800829a:	e0a5      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f9fe 	bl	80086c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6999      	ldr	r1, [r3, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	619a      	str	r2, [r3, #24]
      break;
 8008300:	e084      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f9fe 	bl	80086a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6999      	ldr	r1, [r3, #24]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	021a      	lsls	r2, r3, #8
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	619a      	str	r2, [r3, #24]
      break;
 80082dc:	e084      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fa67 	bl	80087dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0208 	orr.w	r2, r2, #8
 800831c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0204 	bic.w	r2, r2, #4
 800832c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69d9      	ldr	r1, [r3, #28]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	61da      	str	r2, [r3, #28]
      break;
 8008340:	e064      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fa67 	bl	80087b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69da      	ldr	r2, [r3, #28]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0208 	orr.w	r2, r2, #8
 80082f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69da      	ldr	r2, [r3, #28]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0204 	bic.w	r2, r2, #4
 8008308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69d9      	ldr	r1, [r3, #28]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	61da      	str	r2, [r3, #28]
      break;
 800831c:	e064      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 facf 	bl	80088ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800835c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800836c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69d9      	ldr	r1, [r3, #28]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	021a      	lsls	r2, r3, #8
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	61da      	str	r2, [r3, #28]
      break;
 8008382:	e043      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	4618      	mov	r0, r3
 8008326:	f000 facf 	bl	80088c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69d9      	ldr	r1, [r3, #28]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	021a      	lsls	r2, r3, #8
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	61da      	str	r2, [r3, #28]
      break;
 800835e:	e043      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fb38 	bl	8008a00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0208 	orr.w	r2, r2, #8
 800839e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0204 	bic.w	r2, r2, #4
 80083ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083c2:	e023      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fb38 	bl	80089dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0208 	orr.w	r2, r2, #8
 800837a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0204 	bic.w	r2, r2, #4
 800838a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800839e:	e023      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fb7c 	bl	8008ac8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	021a      	lsls	r2, r3, #8
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008404:	e002      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fb7c 	bl	8008aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	021a      	lsls	r2, r3, #8
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083e0:	e002      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8008406:	2301      	movs	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
      break;
 800840a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80083e2:	2301      	movs	r3, #1
 80083e4:	75fb      	strb	r3, [r7, #23]
      break;
 80083e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop

080083fc <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> origin/main
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
=======
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIM_IC_CaptureCallback>:
=======
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> origin/main
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
=======
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> origin/main
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
=======
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_TIM_TriggerCallback>:
=======
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIM_TriggerCallback>:
>>>>>>> origin/main
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
=======
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <TIM_Base_SetConfig>:
=======
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <TIM_Base_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a42      	ldr	r2, [pc, #264]	@ (800858c <TIM_Base_SetConfig+0x11c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00f      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800848e:	d00b      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a3f      	ldr	r2, [pc, #252]	@ (8008590 <TIM_Base_SetConfig+0x120>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d007      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a3e      	ldr	r2, [pc, #248]	@ (8008594 <TIM_Base_SetConfig+0x124>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_Base_SetConfig+0x38>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008598 <TIM_Base_SetConfig+0x128>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d108      	bne.n	80084ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a33      	ldr	r2, [pc, #204]	@ (800858c <TIM_Base_SetConfig+0x11c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d01b      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c8:	d017      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a30      	ldr	r2, [pc, #192]	@ (8008590 <TIM_Base_SetConfig+0x120>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a2f      	ldr	r2, [pc, #188]	@ (8008594 <TIM_Base_SetConfig+0x124>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00f      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a2e      	ldr	r2, [pc, #184]	@ (8008598 <TIM_Base_SetConfig+0x128>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00b      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a2d      	ldr	r2, [pc, #180]	@ (800859c <TIM_Base_SetConfig+0x12c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a2c      	ldr	r2, [pc, #176]	@ (80085a0 <TIM_Base_SetConfig+0x130>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_Base_SetConfig+0x8a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2b      	ldr	r2, [pc, #172]	@ (80085a4 <TIM_Base_SetConfig+0x134>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d108      	bne.n	800850c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
=======
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a42      	ldr	r2, [pc, #264]	@ (8008568 <TIM_Base_SetConfig+0x11c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00f      	beq.n	8008484 <TIM_Base_SetConfig+0x38>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846a:	d00b      	beq.n	8008484 <TIM_Base_SetConfig+0x38>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3f      	ldr	r2, [pc, #252]	@ (800856c <TIM_Base_SetConfig+0x120>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d007      	beq.n	8008484 <TIM_Base_SetConfig+0x38>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a3e      	ldr	r2, [pc, #248]	@ (8008570 <TIM_Base_SetConfig+0x124>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_Base_SetConfig+0x38>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a3d      	ldr	r2, [pc, #244]	@ (8008574 <TIM_Base_SetConfig+0x128>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d108      	bne.n	8008496 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a33      	ldr	r2, [pc, #204]	@ (8008568 <TIM_Base_SetConfig+0x11c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01b      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a4:	d017      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a30      	ldr	r2, [pc, #192]	@ (800856c <TIM_Base_SetConfig+0x120>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008570 <TIM_Base_SetConfig+0x124>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00f      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a2e      	ldr	r2, [pc, #184]	@ (8008574 <TIM_Base_SetConfig+0x128>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00b      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008578 <TIM_Base_SetConfig+0x12c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2c      	ldr	r2, [pc, #176]	@ (800857c <TIM_Base_SetConfig+0x130>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_Base_SetConfig+0x8a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008580 <TIM_Base_SetConfig+0x134>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d108      	bne.n	80084e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a16      	ldr	r2, [pc, #88]	@ (800858c <TIM_Base_SetConfig+0x11c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00f      	beq.n	8008558 <TIM_Base_SetConfig+0xe8>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a17      	ldr	r2, [pc, #92]	@ (8008598 <TIM_Base_SetConfig+0x128>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00b      	beq.n	8008558 <TIM_Base_SetConfig+0xe8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a16      	ldr	r2, [pc, #88]	@ (800859c <TIM_Base_SetConfig+0x12c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d007      	beq.n	8008558 <TIM_Base_SetConfig+0xe8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a15      	ldr	r2, [pc, #84]	@ (80085a0 <TIM_Base_SetConfig+0x130>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_Base_SetConfig+0xe8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a14      	ldr	r2, [pc, #80]	@ (80085a4 <TIM_Base_SetConfig+0x134>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d103      	bne.n	8008560 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a16      	ldr	r2, [pc, #88]	@ (8008568 <TIM_Base_SetConfig+0x11c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00f      	beq.n	8008534 <TIM_Base_SetConfig+0xe8>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a17      	ldr	r2, [pc, #92]	@ (8008574 <TIM_Base_SetConfig+0x128>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00b      	beq.n	8008534 <TIM_Base_SetConfig+0xe8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a16      	ldr	r2, [pc, #88]	@ (8008578 <TIM_Base_SetConfig+0x12c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d007      	beq.n	8008534 <TIM_Base_SetConfig+0xe8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a15      	ldr	r2, [pc, #84]	@ (800857c <TIM_Base_SetConfig+0x130>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d003      	beq.n	8008534 <TIM_Base_SetConfig+0xe8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a14      	ldr	r2, [pc, #80]	@ (8008580 <TIM_Base_SetConfig+0x134>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d103      	bne.n	800853c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> origin/main
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b01      	cmp	r3, #1
 8008570:	d105      	bne.n	800857e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f023 0201 	bic.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	611a      	str	r2, [r3, #16]
  }
}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40012c00 	.word	0x40012c00
 8008590:	40000400 	.word	0x40000400
 8008594:	40000800 	.word	0x40000800
 8008598:	40013400 	.word	0x40013400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <TIM_OC1_SetConfig>:
=======
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b01      	cmp	r3, #1
 800854c:	d105      	bne.n	800855a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f023 0201 	bic.w	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	611a      	str	r2, [r3, #16]
  }
}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40013400 	.word	0x40013400
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800

08008584 <TIM_OC1_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
=======
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f023 0201 	bic.w	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0303 	bic.w	r3, r3, #3
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f023 0302 	bic.w	r3, r3, #2
 80085f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a2c      	ldr	r2, [pc, #176]	@ (80086b4 <TIM_OC1_SetConfig+0x10c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00f      	beq.n	8008628 <TIM_OC1_SetConfig+0x80>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a2b      	ldr	r2, [pc, #172]	@ (80086b8 <TIM_OC1_SetConfig+0x110>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00b      	beq.n	8008628 <TIM_OC1_SetConfig+0x80>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a2a      	ldr	r2, [pc, #168]	@ (80086bc <TIM_OC1_SetConfig+0x114>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d007      	beq.n	8008628 <TIM_OC1_SetConfig+0x80>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a29      	ldr	r2, [pc, #164]	@ (80086c0 <TIM_OC1_SetConfig+0x118>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_OC1_SetConfig+0x80>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a28      	ldr	r2, [pc, #160]	@ (80086c4 <TIM_OC1_SetConfig+0x11c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10c      	bne.n	8008642 <TIM_OC1_SetConfig+0x9a>
=======
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	f023 0201 	bic.w	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f023 0302 	bic.w	r3, r3, #2
 80085d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a2c      	ldr	r2, [pc, #176]	@ (8008690 <TIM_OC1_SetConfig+0x10c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00f      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008694 <TIM_OC1_SetConfig+0x110>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00b      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <TIM_OC1_SetConfig+0x114>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a29      	ldr	r2, [pc, #164]	@ (800869c <TIM_OC1_SetConfig+0x118>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_OC1_SetConfig+0x80>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <TIM_OC1_SetConfig+0x11c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d10c      	bne.n	800861e <TIM_OC1_SetConfig+0x9a>
>>>>>>> origin/main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0308 	bic.w	r3, r3, #8
 800862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 0304 	bic.w	r3, r3, #4
 8008640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a1b      	ldr	r2, [pc, #108]	@ (80086b4 <TIM_OC1_SetConfig+0x10c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00f      	beq.n	800866a <TIM_OC1_SetConfig+0xc2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1a      	ldr	r2, [pc, #104]	@ (80086b8 <TIM_OC1_SetConfig+0x110>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00b      	beq.n	800866a <TIM_OC1_SetConfig+0xc2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a19      	ldr	r2, [pc, #100]	@ (80086bc <TIM_OC1_SetConfig+0x114>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d007      	beq.n	800866a <TIM_OC1_SetConfig+0xc2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a18      	ldr	r2, [pc, #96]	@ (80086c0 <TIM_OC1_SetConfig+0x118>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <TIM_OC1_SetConfig+0xc2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a17      	ldr	r2, [pc, #92]	@ (80086c4 <TIM_OC1_SetConfig+0x11c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d111      	bne.n	800868e <TIM_OC1_SetConfig+0xe6>
=======
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0308 	bic.w	r3, r3, #8
 800860a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f023 0304 	bic.w	r3, r3, #4
 800861c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a1b      	ldr	r2, [pc, #108]	@ (8008690 <TIM_OC1_SetConfig+0x10c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00f      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1a      	ldr	r2, [pc, #104]	@ (8008694 <TIM_OC1_SetConfig+0x110>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00b      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a19      	ldr	r2, [pc, #100]	@ (8008698 <TIM_OC1_SetConfig+0x114>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d007      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a18      	ldr	r2, [pc, #96]	@ (800869c <TIM_OC1_SetConfig+0x118>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d003      	beq.n	8008646 <TIM_OC1_SetConfig+0xc2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a17      	ldr	r2, [pc, #92]	@ (80086a0 <TIM_OC1_SetConfig+0x11c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d111      	bne.n	800866a <TIM_OC1_SetConfig+0xe6>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
=======
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800864c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	4313      	orrs	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	621a      	str	r2, [r3, #32]
}
 80086a8:	bf00      	nop
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	40013400 	.word	0x40013400
 80086bc:	40014000 	.word	0x40014000
 80086c0:	40014400 	.word	0x40014400
 80086c4:	40014800 	.word	0x40014800

080086c8 <TIM_OC2_SetConfig>:
=======
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	40012c00 	.word	0x40012c00
 8008694:	40013400 	.word	0x40013400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_OC2_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
=======
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	f023 0210 	bic.w	r2, r3, #16
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0320 	bic.w	r3, r3, #32
 8008716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a28      	ldr	r2, [pc, #160]	@ (80087c8 <TIM_OC2_SetConfig+0x100>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC2_SetConfig+0x6c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a27      	ldr	r2, [pc, #156]	@ (80087cc <TIM_OC2_SetConfig+0x104>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d10d      	bne.n	8008750 <TIM_OC2_SetConfig+0x88>
=======
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	f023 0210 	bic.w	r2, r3, #16
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a28      	ldr	r2, [pc, #160]	@ (80087a4 <TIM_OC2_SetConfig+0x100>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_OC2_SetConfig+0x6c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a27      	ldr	r2, [pc, #156]	@ (80087a8 <TIM_OC2_SetConfig+0x104>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10d      	bne.n	800872c <TIM_OC2_SetConfig+0x88>
>>>>>>> origin/main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800873a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800874e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a1d      	ldr	r2, [pc, #116]	@ (80087c8 <TIM_OC2_SetConfig+0x100>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00f      	beq.n	8008778 <TIM_OC2_SetConfig+0xb0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a1c      	ldr	r2, [pc, #112]	@ (80087cc <TIM_OC2_SetConfig+0x104>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <TIM_OC2_SetConfig+0xb0>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a1b      	ldr	r2, [pc, #108]	@ (80087d0 <TIM_OC2_SetConfig+0x108>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_OC2_SetConfig+0xb0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1a      	ldr	r2, [pc, #104]	@ (80087d4 <TIM_OC2_SetConfig+0x10c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_OC2_SetConfig+0xb0>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a19      	ldr	r2, [pc, #100]	@ (80087d8 <TIM_OC2_SetConfig+0x110>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d113      	bne.n	80087a0 <TIM_OC2_SetConfig+0xd8>
=======
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800872a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a1d      	ldr	r2, [pc, #116]	@ (80087a4 <TIM_OC2_SetConfig+0x100>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00f      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <TIM_OC2_SetConfig+0x104>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00b      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a1b      	ldr	r2, [pc, #108]	@ (80087ac <TIM_OC2_SetConfig+0x108>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d007      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a1a      	ldr	r2, [pc, #104]	@ (80087b0 <TIM_OC2_SetConfig+0x10c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d003      	beq.n	8008754 <TIM_OC2_SetConfig+0xb0>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a19      	ldr	r2, [pc, #100]	@ (80087b4 <TIM_OC2_SetConfig+0x110>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d113      	bne.n	800877c <TIM_OC2_SetConfig+0xd8>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800877e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
=======
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800875a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	4313      	orrs	r3, r2
 800877a:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40013400 	.word	0x40013400
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800

080087dc <TIM_OC3_SetConfig>:
=======
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40013400 	.word	0x40013400
 80087ac:	40014000 	.word	0x40014000
 80087b0:	40014400 	.word	0x40014400
 80087b4:	40014800 	.word	0x40014800

080087b8 <TIM_OC3_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
=======
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800880a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0303 	bic.w	r3, r3, #3
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a27      	ldr	r2, [pc, #156]	@ (80088d8 <TIM_OC3_SetConfig+0xfc>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_OC3_SetConfig+0x6a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a26      	ldr	r2, [pc, #152]	@ (80088dc <TIM_OC3_SetConfig+0x100>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d10d      	bne.n	8008862 <TIM_OC3_SetConfig+0x86>
=======
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a27      	ldr	r2, [pc, #156]	@ (80088b4 <TIM_OC3_SetConfig+0xfc>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_OC3_SetConfig+0x6a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a26      	ldr	r2, [pc, #152]	@ (80088b8 <TIM_OC3_SetConfig+0x100>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d10d      	bne.n	800883e <TIM_OC3_SetConfig+0x86>
>>>>>>> origin/main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800884c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1c      	ldr	r2, [pc, #112]	@ (80088d8 <TIM_OC3_SetConfig+0xfc>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00f      	beq.n	800888a <TIM_OC3_SetConfig+0xae>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1b      	ldr	r2, [pc, #108]	@ (80088dc <TIM_OC3_SetConfig+0x100>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00b      	beq.n	800888a <TIM_OC3_SetConfig+0xae>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1a      	ldr	r2, [pc, #104]	@ (80088e0 <TIM_OC3_SetConfig+0x104>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_OC3_SetConfig+0xae>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a19      	ldr	r2, [pc, #100]	@ (80088e4 <TIM_OC3_SetConfig+0x108>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_OC3_SetConfig+0xae>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a18      	ldr	r2, [pc, #96]	@ (80088e8 <TIM_OC3_SetConfig+0x10c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d113      	bne.n	80088b2 <TIM_OC3_SetConfig+0xd6>
=======
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800883c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a1c      	ldr	r2, [pc, #112]	@ (80088b4 <TIM_OC3_SetConfig+0xfc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00f      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a1b      	ldr	r2, [pc, #108]	@ (80088b8 <TIM_OC3_SetConfig+0x100>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00b      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a1a      	ldr	r2, [pc, #104]	@ (80088bc <TIM_OC3_SetConfig+0x104>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d007      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a19      	ldr	r2, [pc, #100]	@ (80088c0 <TIM_OC3_SetConfig+0x108>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d003      	beq.n	8008866 <TIM_OC3_SetConfig+0xae>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a18      	ldr	r2, [pc, #96]	@ (80088c4 <TIM_OC3_SetConfig+0x10c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d113      	bne.n	800888e <TIM_OC3_SetConfig+0xd6>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]
=======
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800886c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	621a      	str	r2, [r3, #32]
}
 80088cc:	bf00      	nop
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	40012c00 	.word	0x40012c00
 80088dc:	40013400 	.word	0x40013400
 80088e0:	40014000 	.word	0x40014000
 80088e4:	40014400 	.word	0x40014400
 80088e8:	40014800 	.word	0x40014800

080088ec <TIM_OC4_SetConfig>:
=======
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	621a      	str	r2, [r3, #32]
}
 80088a8:	bf00      	nop
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40013400 	.word	0x40013400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <TIM_OC4_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
=======
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800891e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800893a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	031b      	lsls	r3, r3, #12
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a28      	ldr	r2, [pc, #160]	@ (80089ec <TIM_OC4_SetConfig+0x100>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d003      	beq.n	8008958 <TIM_OC4_SetConfig+0x6c>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a27      	ldr	r2, [pc, #156]	@ (80089f0 <TIM_OC4_SetConfig+0x104>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d10d      	bne.n	8008974 <TIM_OC4_SetConfig+0x88>
=======
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4313      	orrs	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	031b      	lsls	r3, r3, #12
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4313      	orrs	r3, r2
 8008922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a28      	ldr	r2, [pc, #160]	@ (80089c8 <TIM_OC4_SetConfig+0x100>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_OC4_SetConfig+0x6c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a27      	ldr	r2, [pc, #156]	@ (80089cc <TIM_OC4_SetConfig+0x104>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d10d      	bne.n	8008950 <TIM_OC4_SetConfig+0x88>
>>>>>>> origin/main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
<<<<<<< HEAD
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800895e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	031b      	lsls	r3, r3, #12
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a1d      	ldr	r2, [pc, #116]	@ (80089ec <TIM_OC4_SetConfig+0x100>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d00f      	beq.n	800899c <TIM_OC4_SetConfig+0xb0>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a1c      	ldr	r2, [pc, #112]	@ (80089f0 <TIM_OC4_SetConfig+0x104>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00b      	beq.n	800899c <TIM_OC4_SetConfig+0xb0>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <TIM_OC4_SetConfig+0x108>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d007      	beq.n	800899c <TIM_OC4_SetConfig+0xb0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1a      	ldr	r2, [pc, #104]	@ (80089f8 <TIM_OC4_SetConfig+0x10c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_OC4_SetConfig+0xb0>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a19      	ldr	r2, [pc, #100]	@ (80089fc <TIM_OC4_SetConfig+0x110>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d113      	bne.n	80089c4 <TIM_OC4_SetConfig+0xd8>
=======
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800893a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	031b      	lsls	r3, r3, #12
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800894e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1d      	ldr	r2, [pc, #116]	@ (80089c8 <TIM_OC4_SetConfig+0x100>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00f      	beq.n	8008978 <TIM_OC4_SetConfig+0xb0>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a1c      	ldr	r2, [pc, #112]	@ (80089cc <TIM_OC4_SetConfig+0x104>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00b      	beq.n	8008978 <TIM_OC4_SetConfig+0xb0>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a1b      	ldr	r2, [pc, #108]	@ (80089d0 <TIM_OC4_SetConfig+0x108>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d007      	beq.n	8008978 <TIM_OC4_SetConfig+0xb0>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1a      	ldr	r2, [pc, #104]	@ (80089d4 <TIM_OC4_SetConfig+0x10c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d003      	beq.n	8008978 <TIM_OC4_SetConfig+0xb0>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a19      	ldr	r2, [pc, #100]	@ (80089d8 <TIM_OC4_SetConfig+0x110>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d113      	bne.n	80089a0 <TIM_OC4_SetConfig+0xd8>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	019b      	lsls	r3, r3, #6
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	019b      	lsls	r3, r3, #6
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
=======
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800897e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008986:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	019b      	lsls	r3, r3, #6
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	4313      	orrs	r3, r2
 8008992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	019b      	lsls	r3, r3, #6
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	4313      	orrs	r3, r2
 800899e:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	621a      	str	r2, [r3, #32]
}
 80089de:	bf00      	nop
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40012c00 	.word	0x40012c00
 80089f0:	40013400 	.word	0x40013400
 80089f4:	40014000 	.word	0x40014000
 80089f8:	40014400 	.word	0x40014400
 80089fc:	40014800 	.word	0x40014800

08008a00 <TIM_OC5_SetConfig>:
=======
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	621a      	str	r2, [r3, #32]
}
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	40012c00 	.word	0x40012c00
 80089cc:	40013400 	.word	0x40013400
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40014400 	.word	0x40014400
 80089d8:	40014800 	.word	0x40014800

080089dc <TIM_OC5_SetConfig>:
>>>>>>> origin/main
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
=======
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a17      	ldr	r2, [pc, #92]	@ (8008ab4 <TIM_OC5_SetConfig+0xb4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00f      	beq.n	8008a7a <TIM_OC5_SetConfig+0x7a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a16      	ldr	r2, [pc, #88]	@ (8008ab8 <TIM_OC5_SetConfig+0xb8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00b      	beq.n	8008a7a <TIM_OC5_SetConfig+0x7a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a15      	ldr	r2, [pc, #84]	@ (8008abc <TIM_OC5_SetConfig+0xbc>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d007      	beq.n	8008a7a <TIM_OC5_SetConfig+0x7a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a14      	ldr	r2, [pc, #80]	@ (8008ac0 <TIM_OC5_SetConfig+0xc0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_OC5_SetConfig+0x7a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a13      	ldr	r2, [pc, #76]	@ (8008ac4 <TIM_OC5_SetConfig+0xc4>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d109      	bne.n	8008a8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	021b      	lsls	r3, r3, #8
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	621a      	str	r2, [r3, #32]
}
 8008aa8:	bf00      	nop
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40012c00 	.word	0x40012c00
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400
 8008ac4:	40014800 	.word	0x40014800

08008ac8 <TIM_OC6_SetConfig>:
=======
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	041b      	lsls	r3, r3, #16
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a17      	ldr	r2, [pc, #92]	@ (8008a90 <TIM_OC5_SetConfig+0xb4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00f      	beq.n	8008a56 <TIM_OC5_SetConfig+0x7a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a16      	ldr	r2, [pc, #88]	@ (8008a94 <TIM_OC5_SetConfig+0xb8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00b      	beq.n	8008a56 <TIM_OC5_SetConfig+0x7a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a15      	ldr	r2, [pc, #84]	@ (8008a98 <TIM_OC5_SetConfig+0xbc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d007      	beq.n	8008a56 <TIM_OC5_SetConfig+0x7a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a14      	ldr	r2, [pc, #80]	@ (8008a9c <TIM_OC5_SetConfig+0xc0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d003      	beq.n	8008a56 <TIM_OC5_SetConfig+0x7a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a13      	ldr	r2, [pc, #76]	@ (8008aa0 <TIM_OC5_SetConfig+0xc4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d109      	bne.n	8008a6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	621a      	str	r2, [r3, #32]
}
 8008a84:	bf00      	nop
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	40013400 	.word	0x40013400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800

08008aa4 <TIM_OC6_SetConfig>:
>>>>>>> origin/main
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
=======
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	051b      	lsls	r3, r3, #20
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a18      	ldr	r2, [pc, #96]	@ (8008b80 <TIM_OC6_SetConfig+0xb8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00f      	beq.n	8008b44 <TIM_OC6_SetConfig+0x7c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a17      	ldr	r2, [pc, #92]	@ (8008b84 <TIM_OC6_SetConfig+0xbc>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00b      	beq.n	8008b44 <TIM_OC6_SetConfig+0x7c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a16      	ldr	r2, [pc, #88]	@ (8008b88 <TIM_OC6_SetConfig+0xc0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d007      	beq.n	8008b44 <TIM_OC6_SetConfig+0x7c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a15      	ldr	r2, [pc, #84]	@ (8008b8c <TIM_OC6_SetConfig+0xc4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_OC6_SetConfig+0x7c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a14      	ldr	r2, [pc, #80]	@ (8008b90 <TIM_OC6_SetConfig+0xc8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d109      	bne.n	8008b58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	029b      	lsls	r3, r3, #10
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
=======
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	051b      	lsls	r3, r3, #20
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a18      	ldr	r2, [pc, #96]	@ (8008b5c <TIM_OC6_SetConfig+0xb8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00f      	beq.n	8008b20 <TIM_OC6_SetConfig+0x7c>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a17      	ldr	r2, [pc, #92]	@ (8008b60 <TIM_OC6_SetConfig+0xbc>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00b      	beq.n	8008b20 <TIM_OC6_SetConfig+0x7c>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a16      	ldr	r2, [pc, #88]	@ (8008b64 <TIM_OC6_SetConfig+0xc0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d007      	beq.n	8008b20 <TIM_OC6_SetConfig+0x7c>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a15      	ldr	r2, [pc, #84]	@ (8008b68 <TIM_OC6_SetConfig+0xc4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_OC6_SetConfig+0x7c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a14      	ldr	r2, [pc, #80]	@ (8008b6c <TIM_OC6_SetConfig+0xc8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d109      	bne.n	8008b34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	029b      	lsls	r3, r3, #10
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40012c00 	.word	0x40012c00
 8008b84:	40013400 	.word	0x40013400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800

08008b94 <TIM_CCxChannelCmd>:
=======
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	621a      	str	r2, [r3, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40013400 	.word	0x40013400
 8008b64:	40014000 	.word	0x40014000
 8008b68:	40014400 	.word	0x40014400
 8008b6c:	40014800 	.word	0x40014800

08008b70 <TIM_CCxChannelCmd>:
>>>>>>> origin/main
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
=======
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a1a      	ldr	r2, [r3, #32]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	401a      	ands	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a1a      	ldr	r2, [r3, #32]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f003 031f 	and.w	r3, r3, #31
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
	...

08008be0 <HAL_TIMEx_PWMN_Start>:
=======
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	2201      	movs	r2, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	43db      	mvns	r3, r3
 8008b92:	401a      	ands	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1a      	ldr	r2, [r3, #32]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <HAL_TIMEx_PWMN_Start>:
>>>>>>> origin/main
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
=======
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <HAL_TIMEx_PWMN_Start+0x24>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	e022      	b.n	8008c4a <HAL_TIMEx_PWMN_Start+0x6a>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d109      	bne.n	8008c1e <HAL_TIMEx_PWMN_Start+0x3e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	bf14      	ite	ne
 8008c16:	2301      	movne	r3, #1
 8008c18:	2300      	moveq	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	e015      	b.n	8008c4a <HAL_TIMEx_PWMN_Start+0x6a>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d109      	bne.n	8008c38 <HAL_TIMEx_PWMN_Start+0x58>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	bf14      	ite	ne
 8008c30:	2301      	movne	r3, #1
 8008c32:	2300      	moveq	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	e008      	b.n	8008c4a <HAL_TIMEx_PWMN_Start+0x6a>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	bf14      	ite	ne
 8008c44:	2301      	movne	r3, #1
 8008c46:	2300      	moveq	r3, #0
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e069      	b.n	8008d26 <HAL_TIMEx_PWMN_Start+0x146>
=======
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <HAL_TIMEx_PWMN_Start+0x24>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e022      	b.n	8008c26 <HAL_TIMEx_PWMN_Start+0x6a>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d109      	bne.n	8008bfa <HAL_TIMEx_PWMN_Start+0x3e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	bf14      	ite	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	2300      	moveq	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	e015      	b.n	8008c26 <HAL_TIMEx_PWMN_Start+0x6a>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d109      	bne.n	8008c14 <HAL_TIMEx_PWMN_Start+0x58>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	bf14      	ite	ne
 8008c0c:	2301      	movne	r3, #1
 8008c0e:	2300      	moveq	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	e008      	b.n	8008c26 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e069      	b.n	8008d02 <HAL_TIMEx_PWMN_Start+0x146>
>>>>>>> origin/main
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <HAL_TIMEx_PWMN_Start+0x82>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c60:	e013      	b.n	8008c8a <HAL_TIMEx_PWMN_Start+0xaa>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d104      	bne.n	8008c72 <HAL_TIMEx_PWMN_Start+0x92>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c70:	e00b      	b.n	8008c8a <HAL_TIMEx_PWMN_Start+0xaa>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d104      	bne.n	8008c82 <HAL_TIMEx_PWMN_Start+0xa2>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c80:	e003      	b.n	8008c8a <HAL_TIMEx_PWMN_Start+0xaa>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fa1d 	bl	80090d2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ca6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a20      	ldr	r2, [pc, #128]	@ (8008d30 <HAL_TIMEx_PWMN_Start+0x150>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d018      	beq.n	8008ce4 <HAL_TIMEx_PWMN_Start+0x104>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cba:	d013      	beq.n	8008ce4 <HAL_TIMEx_PWMN_Start+0x104>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8008d34 <HAL_TIMEx_PWMN_Start+0x154>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00e      	beq.n	8008ce4 <HAL_TIMEx_PWMN_Start+0x104>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <HAL_TIMEx_PWMN_Start+0x158>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d009      	beq.n	8008ce4 <HAL_TIMEx_PWMN_Start+0x104>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a19      	ldr	r2, [pc, #100]	@ (8008d3c <HAL_TIMEx_PWMN_Start+0x15c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d004      	beq.n	8008ce4 <HAL_TIMEx_PWMN_Start+0x104>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a18      	ldr	r2, [pc, #96]	@ (8008d40 <HAL_TIMEx_PWMN_Start+0x160>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d115      	bne.n	8008d10 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	4b16      	ldr	r3, [pc, #88]	@ (8008d44 <HAL_TIMEx_PWMN_Start+0x164>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d015      	beq.n	8008d22 <HAL_TIMEx_PWMN_Start+0x142>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cfc:	d011      	beq.n	8008d22 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0e:	e008      	b.n	8008d22 <HAL_TIMEx_PWMN_Start+0x142>
=======
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <HAL_TIMEx_PWMN_Start+0x82>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3c:	e013      	b.n	8008c66 <HAL_TIMEx_PWMN_Start+0xaa>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d104      	bne.n	8008c4e <HAL_TIMEx_PWMN_Start+0x92>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c4c:	e00b      	b.n	8008c66 <HAL_TIMEx_PWMN_Start+0xaa>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d104      	bne.n	8008c5e <HAL_TIMEx_PWMN_Start+0xa2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c5c:	e003      	b.n	8008c66 <HAL_TIMEx_PWMN_Start+0xaa>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fa1d 	bl	80090ae <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a20      	ldr	r2, [pc, #128]	@ (8008d0c <HAL_TIMEx_PWMN_Start+0x150>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d018      	beq.n	8008cc0 <HAL_TIMEx_PWMN_Start+0x104>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c96:	d013      	beq.n	8008cc0 <HAL_TIMEx_PWMN_Start+0x104>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d10 <HAL_TIMEx_PWMN_Start+0x154>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_TIMEx_PWMN_Start+0x104>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d14 <HAL_TIMEx_PWMN_Start+0x158>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <HAL_TIMEx_PWMN_Start+0x104>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a19      	ldr	r2, [pc, #100]	@ (8008d18 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <HAL_TIMEx_PWMN_Start+0x104>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a18      	ldr	r2, [pc, #96]	@ (8008d1c <HAL_TIMEx_PWMN_Start+0x160>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d115      	bne.n	8008cec <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	4b16      	ldr	r3, [pc, #88]	@ (8008d20 <HAL_TIMEx_PWMN_Start+0x164>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b06      	cmp	r3, #6
 8008cd0:	d015      	beq.n	8008cfe <HAL_TIMEx_PWMN_Start+0x142>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd8:	d011      	beq.n	8008cfe <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cea:	e008      	b.n	8008cfe <HAL_TIMEx_PWMN_Start+0x142>
>>>>>>> origin/main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e000      	b.n	8008d24 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d22:	bf00      	nop
=======
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0201 	orr.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e000      	b.n	8008d00 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfe:	bf00      	nop
>>>>>>> origin/main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	40012c00 	.word	0x40012c00
 8008d34:	40000400 	.word	0x40000400
 8008d38:	40000800 	.word	0x40000800
 8008d3c:	40013400 	.word	0x40013400
 8008d40:	40014000 	.word	0x40014000
 8008d44:	00010007 	.word	0x00010007

08008d48 <HAL_TIMEx_PWMN_Stop>:
=======
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40012c00 	.word	0x40012c00
 8008d10:	40000400 	.word	0x40000400
 8008d14:	40000800 	.word	0x40000800
 8008d18:	40013400 	.word	0x40013400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	00010007 	.word	0x00010007

08008d24 <HAL_TIMEx_PWMN_Stop>:
>>>>>>> origin/main
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
=======
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
<<<<<<< HEAD
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2200      	movs	r2, #0
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f9b9 	bl	80090d2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6a1a      	ldr	r2, [r3, #32]
 8008d66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10f      	bne.n	8008d90 <HAL_TIMEx_PWMN_Stop+0x48>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a1a      	ldr	r2, [r3, #32]
 8008d76:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d107      	bne.n	8008d90 <HAL_TIMEx_PWMN_Stop+0x48>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a1a      	ldr	r2, [r3, #32]
 8008d96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10f      	bne.n	8008dc0 <HAL_TIMEx_PWMN_Stop+0x78>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6a1a      	ldr	r2, [r3, #32]
 8008da6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008daa:	4013      	ands	r3, r2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d107      	bne.n	8008dc0 <HAL_TIMEx_PWMN_Stop+0x78>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0201 	bic.w	r2, r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <HAL_TIMEx_PWMN_Stop+0x88>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dce:	e013      	b.n	8008df8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d104      	bne.n	8008de0 <HAL_TIMEx_PWMN_Stop+0x98>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dde:	e00b      	b.n	8008df8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d104      	bne.n	8008df0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008dee:	e003      	b.n	8008df8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f9b9 	bl	80090ae <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d46:	4013      	ands	r3, r2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10f      	bne.n	8008d6c <HAL_TIMEx_PWMN_Stop+0x48>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6a1a      	ldr	r2, [r3, #32]
 8008d52:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d107      	bne.n	8008d6c <HAL_TIMEx_PWMN_Stop+0x48>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6a1a      	ldr	r2, [r3, #32]
 8008d72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d76:	4013      	ands	r3, r2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10f      	bne.n	8008d9c <HAL_TIMEx_PWMN_Stop+0x78>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6a1a      	ldr	r2, [r3, #32]
 8008d82:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <HAL_TIMEx_PWMN_Stop+0x78>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f022 0201 	bic.w	r2, r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d104      	bne.n	8008dac <HAL_TIMEx_PWMN_Stop+0x88>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008daa:	e013      	b.n	8008dd4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d104      	bne.n	8008dbc <HAL_TIMEx_PWMN_Stop+0x98>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dba:	e00b      	b.n	8008dd4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d104      	bne.n	8008dcc <HAL_TIMEx_PWMN_Stop+0xa8>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008dca:	e003      	b.n	8008dd4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> origin/main
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
=======
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e065      	b.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d108      	bne.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e065      	b.n	8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a2b      	ldr	r2, [pc, #172]	@ (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d108      	bne.n	8008e3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
=======
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e92:	d013      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a18      	ldr	r2, [pc, #96]	@ (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a17      	ldr	r2, [pc, #92]	@ (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a12      	ldr	r2, [pc, #72]	@ (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a13      	ldr	r2, [pc, #76]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d10c      	bne.n	8008ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	609a      	str	r2, [r3, #8]
=======
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d018      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6e:	d013      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a18      	ldr	r2, [pc, #96]	@ (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00e      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a17      	ldr	r2, [pc, #92]	@ (8008edc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d009      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a12      	ldr	r2, [pc, #72]	@ (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a13      	ldr	r2, [pc, #76]	@ (8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d10c      	bne.n	8008eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40014000 	.word	0x40014000

08008f08 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	40012c00 	.word	0x40012c00
 8008ed4:	40013400 	.word	0x40013400
 8008ed8:	40000400 	.word	0x40000400
 8008edc:	40000800 	.word	0x40000800
 8008ee0:	40014000 	.word	0x40014000

08008ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> origin/main
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
=======
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e073      	b.n	800900c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e073      	b.n	8008fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> origin/main

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	041b      	lsls	r3, r3, #16
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a19      	ldr	r2, [pc, #100]	@ (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d004      	beq.n	8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a18      	ldr	r2, [pc, #96]	@ (800901c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d11c      	bne.n	8008ffa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
=======
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	041b      	lsls	r3, r3, #16
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a19      	ldr	r2, [pc, #100]	@ (8008ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d004      	beq.n	8008f9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a18      	ldr	r2, [pc, #96]	@ (8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d11c      	bne.n	8008fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
>>>>>>> origin/main
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< HEAD
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	051b      	lsls	r3, r3, #20
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
=======
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa6:	051b      	lsls	r3, r3, #20
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	40012c00 	.word	0x40012c00
 800901c:	40013400 	.word	0x40013400

08009020 <HAL_TIMEx_EnableDeadTimePreload>:
=======
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	40012c00 	.word	0x40012c00
 8008ff8:	40013400 	.word	0x40013400

08008ffc <HAL_TIMEx_EnableDeadTimePreload>:
>>>>>>> origin/main
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
=======
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
<<<<<<< HEAD
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009036:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <HAL_TIMEx_CommutCallback>:
=======
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009012:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <HAL_TIMEx_CommutCallback>:
>>>>>>> origin/main
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
=======
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <HAL_TIMEx_BreakCallback>:
=======
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <HAL_TIMEx_BreakCallback>:
>>>>>>> origin/main
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
=======
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <HAL_TIMEx_Break2Callback>:
=======
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <HAL_TIMEx_Break2Callback>:
>>>>>>> origin/main
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
=======
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <HAL_TIMEx_EncoderIndexCallback>:
=======
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <HAL_TIMEx_EncoderIndexCallback>:
>>>>>>> origin/main
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
=======
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <HAL_TIMEx_DirectionChangeCallback>:
=======
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <HAL_TIMEx_DirectionChangeCallback>:
>>>>>>> origin/main
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
=======
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <HAL_TIMEx_IndexErrorCallback>:
=======
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <HAL_TIMEx_IndexErrorCallback>:
>>>>>>> origin/main
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
=======
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80090b2:	bf00      	nop
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <HAL_TIMEx_TransitionErrorCallback>:
=======
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <HAL_TIMEx_TransitionErrorCallback>:
>>>>>>> origin/main
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
=======
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <TIM_CCxNChannelCmd>:
=======
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <TIM_CCxNChannelCmd>:
>>>>>>> origin/main
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
<<<<<<< HEAD
 80090d2:	b480      	push	{r7}
 80090d4:	b087      	sub	sp, #28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	2204      	movs	r2, #4
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a1a      	ldr	r2, [r3, #32]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	401a      	ands	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1a      	ldr	r2, [r3, #32]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f003 030f 	and.w	r3, r3, #15
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	fa01 f303 	lsl.w	r3, r1, r3
 800910a:	431a      	orrs	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	621a      	str	r2, [r3, #32]
}
 8009110:	bf00      	nop
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_UART_Init>:
=======
 80090ae:	b480      	push	{r7}
 80090b0:	b087      	sub	sp, #28
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	2204      	movs	r2, #4
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	43db      	mvns	r3, r3
 80090d0:	401a      	ands	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a1a      	ldr	r2, [r3, #32]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f003 030f 	and.w	r3, r3, #15
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	fa01 f303 	lsl.w	r3, r1, r3
 80090e6:	431a      	orrs	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_UART_Init>:
>>>>>>> origin/main
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e042      	b.n	80091b4 <HAL_UART_Init+0x98>
=======
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e042      	b.n	8009190 <HAL_UART_Init+0x98>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> origin/main

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f83b 	bl	80091bc <HAL_UART_MspInit>
=======
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f83b 	bl	8009198 <HAL_UART_MspInit>
>>>>>>> origin/main
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2224      	movs	r2, #36	@ 0x24
 800914a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0201 	bic.w	r2, r2, #1
 800915c:	601a      	str	r2, [r3, #0]
=======
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2224      	movs	r2, #36	@ 0x24
 8009126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0201 	bic.w	r2, r2, #1
 8009138:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fafe 	bl	8009768 <UART_AdvFeatureConfig>
=======
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fafe 	bl	8009744 <UART_AdvFeatureConfig>
>>>>>>> origin/main
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f82f 	bl	80091d0 <UART_SetConfig>
 8009172:	4603      	mov	r3, r0
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e01b      	b.n	80091b4 <HAL_UART_Init+0x98>
=======
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f82f 	bl	80091ac <UART_SetConfig>
 800914e:	4603      	mov	r3, r0
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e01b      	b.n	8009190 <HAL_UART_Init+0x98>
>>>>>>> origin/main
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800918a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800919a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fb7d 	bl	80098ac <UART_CheckIdleState>
 80091b2:	4603      	mov	r3, r0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_UART_MspInit>:
=======
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f042 0201 	orr.w	r2, r2, #1
 8009186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb7d 	bl	8009888 <UART_CheckIdleState>
 800918e:	4603      	mov	r3, r0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_UART_MspInit>:
>>>>>>> origin/main
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
=======
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
<<<<<<< HEAD
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <UART_SetConfig>:
=======
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <UART_SetConfig>:
>>>>>>> origin/main
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80091d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d4:	b08c      	sub	sp, #48	@ 0x30
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6178      	str	r0, [r7, #20]
=======
 80091ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091b0:	b08c      	sub	sp, #48	@ 0x30
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6178      	str	r0, [r7, #20]
>>>>>>> origin/main
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 80091b6:	2300      	movs	r3, #0
 80091b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> origin/main
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4bab      	ldr	r3, [pc, #684]	@ (80094ac <UART_SetConfig+0x2dc>)
 8009200:	4013      	ands	r3, r2
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009208:	430b      	orrs	r3, r1
 800920a:	6013      	str	r3, [r2, #0]
=======
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	431a      	orrs	r2, r3
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4bab      	ldr	r3, [pc, #684]	@ (8009488 <UART_SetConfig+0x2dc>)
 80091dc:	4013      	ands	r3, r2
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e4:	430b      	orrs	r3, r1
 80091e6:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]
=======
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4aa0      	ldr	r2, [pc, #640]	@ (80094b0 <UART_SetConfig+0x2e0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d004      	beq.n	800923c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009238:	4313      	orrs	r3, r2
 800923a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009246:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009250:	430b      	orrs	r3, r1
 8009252:	6093      	str	r3, [r2, #8]
=======
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4aa0      	ldr	r2, [pc, #640]	@ (800948c <UART_SetConfig+0x2e0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d004      	beq.n	8009218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009214:	4313      	orrs	r3, r2
 8009216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009222:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800922c:	430b      	orrs	r3, r1
 800922e:	6093      	str	r3, [r2, #8]
>>>>>>> origin/main

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925a:	f023 010f 	bic.w	r1, r3, #15
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a91      	ldr	r2, [pc, #580]	@ (80094b4 <UART_SetConfig+0x2e4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d125      	bne.n	80092c0 <UART_SetConfig+0xf0>
 8009274:	4b90      	ldr	r3, [pc, #576]	@ (80094b8 <UART_SetConfig+0x2e8>)
 8009276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	2b03      	cmp	r3, #3
 8009280:	d81a      	bhi.n	80092b8 <UART_SetConfig+0xe8>
 8009282:	a201      	add	r2, pc, #4	@ (adr r2, 8009288 <UART_SetConfig+0xb8>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	08009299 	.word	0x08009299
 800928c:	080092a9 	.word	0x080092a9
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092b1 	.word	0x080092b1
 8009298:	2301      	movs	r3, #1
 800929a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800929e:	e0d6      	b.n	800944e <UART_SetConfig+0x27e>
 80092a0:	2302      	movs	r3, #2
 80092a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092a6:	e0d2      	b.n	800944e <UART_SetConfig+0x27e>
 80092a8:	2304      	movs	r3, #4
 80092aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ae:	e0ce      	b.n	800944e <UART_SetConfig+0x27e>
 80092b0:	2308      	movs	r3, #8
 80092b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092b6:	e0ca      	b.n	800944e <UART_SetConfig+0x27e>
 80092b8:	2310      	movs	r3, #16
 80092ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092be:	e0c6      	b.n	800944e <UART_SetConfig+0x27e>
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a7d      	ldr	r2, [pc, #500]	@ (80094bc <UART_SetConfig+0x2ec>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d138      	bne.n	800933c <UART_SetConfig+0x16c>
 80092ca:	4b7b      	ldr	r3, [pc, #492]	@ (80094b8 <UART_SetConfig+0x2e8>)
 80092cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d0:	f003 030c 	and.w	r3, r3, #12
 80092d4:	2b0c      	cmp	r3, #12
 80092d6:	d82d      	bhi.n	8009334 <UART_SetConfig+0x164>
 80092d8:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <UART_SetConfig+0x110>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	08009315 	.word	0x08009315
 80092e4:	08009335 	.word	0x08009335
 80092e8:	08009335 	.word	0x08009335
 80092ec:	08009335 	.word	0x08009335
 80092f0:	08009325 	.word	0x08009325
 80092f4:	08009335 	.word	0x08009335
 80092f8:	08009335 	.word	0x08009335
 80092fc:	08009335 	.word	0x08009335
 8009300:	0800931d 	.word	0x0800931d
 8009304:	08009335 	.word	0x08009335
 8009308:	08009335 	.word	0x08009335
 800930c:	08009335 	.word	0x08009335
 8009310:	0800932d 	.word	0x0800932d
 8009314:	2300      	movs	r3, #0
 8009316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800931a:	e098      	b.n	800944e <UART_SetConfig+0x27e>
 800931c:	2302      	movs	r3, #2
 800931e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009322:	e094      	b.n	800944e <UART_SetConfig+0x27e>
 8009324:	2304      	movs	r3, #4
 8009326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932a:	e090      	b.n	800944e <UART_SetConfig+0x27e>
 800932c:	2308      	movs	r3, #8
 800932e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009332:	e08c      	b.n	800944e <UART_SetConfig+0x27e>
 8009334:	2310      	movs	r3, #16
 8009336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800933a:	e088      	b.n	800944e <UART_SetConfig+0x27e>
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a5f      	ldr	r2, [pc, #380]	@ (80094c0 <UART_SetConfig+0x2f0>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d125      	bne.n	8009392 <UART_SetConfig+0x1c2>
 8009346:	4b5c      	ldr	r3, [pc, #368]	@ (80094b8 <UART_SetConfig+0x2e8>)
 8009348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009350:	2b30      	cmp	r3, #48	@ 0x30
 8009352:	d016      	beq.n	8009382 <UART_SetConfig+0x1b2>
 8009354:	2b30      	cmp	r3, #48	@ 0x30
 8009356:	d818      	bhi.n	800938a <UART_SetConfig+0x1ba>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d00a      	beq.n	8009372 <UART_SetConfig+0x1a2>
 800935c:	2b20      	cmp	r3, #32
 800935e:	d814      	bhi.n	800938a <UART_SetConfig+0x1ba>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <UART_SetConfig+0x19a>
 8009364:	2b10      	cmp	r3, #16
 8009366:	d008      	beq.n	800937a <UART_SetConfig+0x1aa>
 8009368:	e00f      	b.n	800938a <UART_SetConfig+0x1ba>
 800936a:	2300      	movs	r3, #0
 800936c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009370:	e06d      	b.n	800944e <UART_SetConfig+0x27e>
 8009372:	2302      	movs	r3, #2
 8009374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009378:	e069      	b.n	800944e <UART_SetConfig+0x27e>
 800937a:	2304      	movs	r3, #4
 800937c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009380:	e065      	b.n	800944e <UART_SetConfig+0x27e>
 8009382:	2308      	movs	r3, #8
 8009384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009388:	e061      	b.n	800944e <UART_SetConfig+0x27e>
 800938a:	2310      	movs	r3, #16
 800938c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009390:	e05d      	b.n	800944e <UART_SetConfig+0x27e>
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4b      	ldr	r2, [pc, #300]	@ (80094c4 <UART_SetConfig+0x2f4>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d125      	bne.n	80093e8 <UART_SetConfig+0x218>
 800939c:	4b46      	ldr	r3, [pc, #280]	@ (80094b8 <UART_SetConfig+0x2e8>)
 800939e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80093a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80093a8:	d016      	beq.n	80093d8 <UART_SetConfig+0x208>
 80093aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80093ac:	d818      	bhi.n	80093e0 <UART_SetConfig+0x210>
 80093ae:	2b80      	cmp	r3, #128	@ 0x80
 80093b0:	d00a      	beq.n	80093c8 <UART_SetConfig+0x1f8>
 80093b2:	2b80      	cmp	r3, #128	@ 0x80
 80093b4:	d814      	bhi.n	80093e0 <UART_SetConfig+0x210>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <UART_SetConfig+0x1f0>
 80093ba:	2b40      	cmp	r3, #64	@ 0x40
 80093bc:	d008      	beq.n	80093d0 <UART_SetConfig+0x200>
 80093be:	e00f      	b.n	80093e0 <UART_SetConfig+0x210>
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093c6:	e042      	b.n	800944e <UART_SetConfig+0x27e>
 80093c8:	2302      	movs	r3, #2
 80093ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ce:	e03e      	b.n	800944e <UART_SetConfig+0x27e>
 80093d0:	2304      	movs	r3, #4
 80093d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093d6:	e03a      	b.n	800944e <UART_SetConfig+0x27e>
 80093d8:	2308      	movs	r3, #8
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093de:	e036      	b.n	800944e <UART_SetConfig+0x27e>
 80093e0:	2310      	movs	r3, #16
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e6:	e032      	b.n	800944e <UART_SetConfig+0x27e>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a30      	ldr	r2, [pc, #192]	@ (80094b0 <UART_SetConfig+0x2e0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d12a      	bne.n	8009448 <UART_SetConfig+0x278>
 80093f2:	4b31      	ldr	r3, [pc, #196]	@ (80094b8 <UART_SetConfig+0x2e8>)
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009400:	d01a      	beq.n	8009438 <UART_SetConfig+0x268>
 8009402:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009406:	d81b      	bhi.n	8009440 <UART_SetConfig+0x270>
 8009408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800940c:	d00c      	beq.n	8009428 <UART_SetConfig+0x258>
 800940e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009412:	d815      	bhi.n	8009440 <UART_SetConfig+0x270>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <UART_SetConfig+0x250>
 8009418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800941c:	d008      	beq.n	8009430 <UART_SetConfig+0x260>
 800941e:	e00f      	b.n	8009440 <UART_SetConfig+0x270>
 8009420:	2300      	movs	r3, #0
 8009422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009426:	e012      	b.n	800944e <UART_SetConfig+0x27e>
 8009428:	2302      	movs	r3, #2
 800942a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942e:	e00e      	b.n	800944e <UART_SetConfig+0x27e>
 8009430:	2304      	movs	r3, #4
 8009432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009436:	e00a      	b.n	800944e <UART_SetConfig+0x27e>
 8009438:	2308      	movs	r3, #8
 800943a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943e:	e006      	b.n	800944e <UART_SetConfig+0x27e>
 8009440:	2310      	movs	r3, #16
 8009442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009446:	e002      	b.n	800944e <UART_SetConfig+0x27e>
 8009448:	2310      	movs	r3, #16
 800944a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a17      	ldr	r2, [pc, #92]	@ (80094b0 <UART_SetConfig+0x2e0>)
 8009454:	4293      	cmp	r3, r2
 8009456:	f040 80a8 	bne.w	80095aa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800945a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800945e:	2b08      	cmp	r3, #8
 8009460:	d834      	bhi.n	80094cc <UART_SetConfig+0x2fc>
 8009462:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <UART_SetConfig+0x298>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	0800948d 	.word	0x0800948d
 800946c:	080094cd 	.word	0x080094cd
 8009470:	08009495 	.word	0x08009495
 8009474:	080094cd 	.word	0x080094cd
 8009478:	0800949b 	.word	0x0800949b
 800947c:	080094cd 	.word	0x080094cd
 8009480:	080094cd 	.word	0x080094cd
 8009484:	080094cd 	.word	0x080094cd
 8009488:	080094a3 	.word	0x080094a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800948c:	f7fd fee4 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8009490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009492:	e021      	b.n	80094d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009494:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <UART_SetConfig+0x2f8>)
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009498:	e01e      	b.n	80094d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800949a:	f7fd fe6f 	bl	800717c <HAL_RCC_GetSysClockFreq>
 800949e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094a0:	e01a      	b.n	80094d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094a8:	e016      	b.n	80094d8 <UART_SetConfig+0x308>
 80094aa:	bf00      	nop
 80094ac:	cfff69f3 	.word	0xcfff69f3
 80094b0:	40008000 	.word	0x40008000
 80094b4:	40013800 	.word	0x40013800
 80094b8:	40021000 	.word	0x40021000
 80094bc:	40004400 	.word	0x40004400
 80094c0:	40004800 	.word	0x40004800
 80094c4:	40004c00 	.word	0x40004c00
 80094c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094d6:	bf00      	nop
=======
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009236:	f023 010f 	bic.w	r1, r3, #15
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a91      	ldr	r2, [pc, #580]	@ (8009490 <UART_SetConfig+0x2e4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d125      	bne.n	800929c <UART_SetConfig+0xf0>
 8009250:	4b90      	ldr	r3, [pc, #576]	@ (8009494 <UART_SetConfig+0x2e8>)
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	2b03      	cmp	r3, #3
 800925c:	d81a      	bhi.n	8009294 <UART_SetConfig+0xe8>
 800925e:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <UART_SetConfig+0xb8>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009275 	.word	0x08009275
 8009268:	08009285 	.word	0x08009285
 800926c:	0800927d 	.word	0x0800927d
 8009270:	0800928d 	.word	0x0800928d
 8009274:	2301      	movs	r3, #1
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800927a:	e0d6      	b.n	800942a <UART_SetConfig+0x27e>
 800927c:	2302      	movs	r3, #2
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009282:	e0d2      	b.n	800942a <UART_SetConfig+0x27e>
 8009284:	2304      	movs	r3, #4
 8009286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800928a:	e0ce      	b.n	800942a <UART_SetConfig+0x27e>
 800928c:	2308      	movs	r3, #8
 800928e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009292:	e0ca      	b.n	800942a <UART_SetConfig+0x27e>
 8009294:	2310      	movs	r3, #16
 8009296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800929a:	e0c6      	b.n	800942a <UART_SetConfig+0x27e>
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a7d      	ldr	r2, [pc, #500]	@ (8009498 <UART_SetConfig+0x2ec>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d138      	bne.n	8009318 <UART_SetConfig+0x16c>
 80092a6:	4b7b      	ldr	r3, [pc, #492]	@ (8009494 <UART_SetConfig+0x2e8>)
 80092a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ac:	f003 030c 	and.w	r3, r3, #12
 80092b0:	2b0c      	cmp	r3, #12
 80092b2:	d82d      	bhi.n	8009310 <UART_SetConfig+0x164>
 80092b4:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <UART_SetConfig+0x110>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	080092f1 	.word	0x080092f1
 80092c0:	08009311 	.word	0x08009311
 80092c4:	08009311 	.word	0x08009311
 80092c8:	08009311 	.word	0x08009311
 80092cc:	08009301 	.word	0x08009301
 80092d0:	08009311 	.word	0x08009311
 80092d4:	08009311 	.word	0x08009311
 80092d8:	08009311 	.word	0x08009311
 80092dc:	080092f9 	.word	0x080092f9
 80092e0:	08009311 	.word	0x08009311
 80092e4:	08009311 	.word	0x08009311
 80092e8:	08009311 	.word	0x08009311
 80092ec:	08009309 	.word	0x08009309
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092f6:	e098      	b.n	800942a <UART_SetConfig+0x27e>
 80092f8:	2302      	movs	r3, #2
 80092fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092fe:	e094      	b.n	800942a <UART_SetConfig+0x27e>
 8009300:	2304      	movs	r3, #4
 8009302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009306:	e090      	b.n	800942a <UART_SetConfig+0x27e>
 8009308:	2308      	movs	r3, #8
 800930a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800930e:	e08c      	b.n	800942a <UART_SetConfig+0x27e>
 8009310:	2310      	movs	r3, #16
 8009312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009316:	e088      	b.n	800942a <UART_SetConfig+0x27e>
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a5f      	ldr	r2, [pc, #380]	@ (800949c <UART_SetConfig+0x2f0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d125      	bne.n	800936e <UART_SetConfig+0x1c2>
 8009322:	4b5c      	ldr	r3, [pc, #368]	@ (8009494 <UART_SetConfig+0x2e8>)
 8009324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800932c:	2b30      	cmp	r3, #48	@ 0x30
 800932e:	d016      	beq.n	800935e <UART_SetConfig+0x1b2>
 8009330:	2b30      	cmp	r3, #48	@ 0x30
 8009332:	d818      	bhi.n	8009366 <UART_SetConfig+0x1ba>
 8009334:	2b20      	cmp	r3, #32
 8009336:	d00a      	beq.n	800934e <UART_SetConfig+0x1a2>
 8009338:	2b20      	cmp	r3, #32
 800933a:	d814      	bhi.n	8009366 <UART_SetConfig+0x1ba>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <UART_SetConfig+0x19a>
 8009340:	2b10      	cmp	r3, #16
 8009342:	d008      	beq.n	8009356 <UART_SetConfig+0x1aa>
 8009344:	e00f      	b.n	8009366 <UART_SetConfig+0x1ba>
 8009346:	2300      	movs	r3, #0
 8009348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800934c:	e06d      	b.n	800942a <UART_SetConfig+0x27e>
 800934e:	2302      	movs	r3, #2
 8009350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009354:	e069      	b.n	800942a <UART_SetConfig+0x27e>
 8009356:	2304      	movs	r3, #4
 8009358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800935c:	e065      	b.n	800942a <UART_SetConfig+0x27e>
 800935e:	2308      	movs	r3, #8
 8009360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009364:	e061      	b.n	800942a <UART_SetConfig+0x27e>
 8009366:	2310      	movs	r3, #16
 8009368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800936c:	e05d      	b.n	800942a <UART_SetConfig+0x27e>
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a4b      	ldr	r2, [pc, #300]	@ (80094a0 <UART_SetConfig+0x2f4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d125      	bne.n	80093c4 <UART_SetConfig+0x218>
 8009378:	4b46      	ldr	r3, [pc, #280]	@ (8009494 <UART_SetConfig+0x2e8>)
 800937a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009382:	2bc0      	cmp	r3, #192	@ 0xc0
 8009384:	d016      	beq.n	80093b4 <UART_SetConfig+0x208>
 8009386:	2bc0      	cmp	r3, #192	@ 0xc0
 8009388:	d818      	bhi.n	80093bc <UART_SetConfig+0x210>
 800938a:	2b80      	cmp	r3, #128	@ 0x80
 800938c:	d00a      	beq.n	80093a4 <UART_SetConfig+0x1f8>
 800938e:	2b80      	cmp	r3, #128	@ 0x80
 8009390:	d814      	bhi.n	80093bc <UART_SetConfig+0x210>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <UART_SetConfig+0x1f0>
 8009396:	2b40      	cmp	r3, #64	@ 0x40
 8009398:	d008      	beq.n	80093ac <UART_SetConfig+0x200>
 800939a:	e00f      	b.n	80093bc <UART_SetConfig+0x210>
 800939c:	2300      	movs	r3, #0
 800939e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093a2:	e042      	b.n	800942a <UART_SetConfig+0x27e>
 80093a4:	2302      	movs	r3, #2
 80093a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093aa:	e03e      	b.n	800942a <UART_SetConfig+0x27e>
 80093ac:	2304      	movs	r3, #4
 80093ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093b2:	e03a      	b.n	800942a <UART_SetConfig+0x27e>
 80093b4:	2308      	movs	r3, #8
 80093b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ba:	e036      	b.n	800942a <UART_SetConfig+0x27e>
 80093bc:	2310      	movs	r3, #16
 80093be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093c2:	e032      	b.n	800942a <UART_SetConfig+0x27e>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a30      	ldr	r2, [pc, #192]	@ (800948c <UART_SetConfig+0x2e0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d12a      	bne.n	8009424 <UART_SetConfig+0x278>
 80093ce:	4b31      	ldr	r3, [pc, #196]	@ (8009494 <UART_SetConfig+0x2e8>)
 80093d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093dc:	d01a      	beq.n	8009414 <UART_SetConfig+0x268>
 80093de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093e2:	d81b      	bhi.n	800941c <UART_SetConfig+0x270>
 80093e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093e8:	d00c      	beq.n	8009404 <UART_SetConfig+0x258>
 80093ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ee:	d815      	bhi.n	800941c <UART_SetConfig+0x270>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <UART_SetConfig+0x250>
 80093f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f8:	d008      	beq.n	800940c <UART_SetConfig+0x260>
 80093fa:	e00f      	b.n	800941c <UART_SetConfig+0x270>
 80093fc:	2300      	movs	r3, #0
 80093fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009402:	e012      	b.n	800942a <UART_SetConfig+0x27e>
 8009404:	2302      	movs	r3, #2
 8009406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800940a:	e00e      	b.n	800942a <UART_SetConfig+0x27e>
 800940c:	2304      	movs	r3, #4
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009412:	e00a      	b.n	800942a <UART_SetConfig+0x27e>
 8009414:	2308      	movs	r3, #8
 8009416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800941a:	e006      	b.n	800942a <UART_SetConfig+0x27e>
 800941c:	2310      	movs	r3, #16
 800941e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009422:	e002      	b.n	800942a <UART_SetConfig+0x27e>
 8009424:	2310      	movs	r3, #16
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a17      	ldr	r2, [pc, #92]	@ (800948c <UART_SetConfig+0x2e0>)
 8009430:	4293      	cmp	r3, r2
 8009432:	f040 80a8 	bne.w	8009586 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009436:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800943a:	2b08      	cmp	r3, #8
 800943c:	d834      	bhi.n	80094a8 <UART_SetConfig+0x2fc>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <UART_SetConfig+0x298>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009469 	.word	0x08009469
 8009448:	080094a9 	.word	0x080094a9
 800944c:	08009471 	.word	0x08009471
 8009450:	080094a9 	.word	0x080094a9
 8009454:	08009477 	.word	0x08009477
 8009458:	080094a9 	.word	0x080094a9
 800945c:	080094a9 	.word	0x080094a9
 8009460:	080094a9 	.word	0x080094a9
 8009464:	0800947f 	.word	0x0800947f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009468:	f7fd fee4 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 800946c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800946e:	e021      	b.n	80094b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009470:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <UART_SetConfig+0x2f8>)
 8009472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009474:	e01e      	b.n	80094b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009476:	f7fd fe6f 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 800947a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800947c:	e01a      	b.n	80094b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009484:	e016      	b.n	80094b4 <UART_SetConfig+0x308>
 8009486:	bf00      	nop
 8009488:	cfff69f3 	.word	0xcfff69f3
 800948c:	40008000 	.word	0x40008000
 8009490:	40013800 	.word	0x40013800
 8009494:	40021000 	.word	0x40021000
 8009498:	40004400 	.word	0x40004400
 800949c:	40004800 	.word	0x40004800
 80094a0:	40004c00 	.word	0x40004c00
 80094a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094b2:	bf00      	nop
>>>>>>> origin/main
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 812a 	beq.w	8009734 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e4:	4a9e      	ldr	r2, [pc, #632]	@ (8009760 <UART_SetConfig+0x590>)
 80094e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80094f2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	4413      	add	r3, r2
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	429a      	cmp	r2, r3
 8009502:	d305      	bcc.n	8009510 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	429a      	cmp	r2, r3
 800950e:	d903      	bls.n	8009518 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009516:	e10d      	b.n	8009734 <UART_SetConfig+0x564>
=======
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 812a 	beq.w	8009710 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c0:	4a9e      	ldr	r2, [pc, #632]	@ (800973c <UART_SetConfig+0x590>)
 80094c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	4613      	mov	r3, r2
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	4413      	add	r3, r2
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d305      	bcc.n	80094ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d903      	bls.n	80094f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094f2:	e10d      	b.n	8009710 <UART_SetConfig+0x564>
>>>>>>> origin/main
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	2200      	movs	r2, #0
 800951c:	60bb      	str	r3, [r7, #8]
 800951e:	60fa      	str	r2, [r7, #12]
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009524:	4a8e      	ldr	r2, [pc, #568]	@ (8009760 <UART_SetConfig+0x590>)
 8009526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800952a:	b29b      	uxth	r3, r3
 800952c:	2200      	movs	r2, #0
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800953a:	f7f6 fe71 	bl	8000220 <__aeabi_uldivmod>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4610      	mov	r0, r2
 8009544:	4619      	mov	r1, r3
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	020b      	lsls	r3, r1, #8
 8009550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009554:	0202      	lsls	r2, r0, #8
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	6849      	ldr	r1, [r1, #4]
 800955a:	0849      	lsrs	r1, r1, #1
 800955c:	2000      	movs	r0, #0
 800955e:	460c      	mov	r4, r1
 8009560:	4605      	mov	r5, r0
 8009562:	eb12 0804 	adds.w	r8, r2, r4
 8009566:	eb43 0905 	adc.w	r9, r3, r5
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	469a      	mov	sl, r3
 8009572:	4693      	mov	fp, r2
 8009574:	4652      	mov	r2, sl
 8009576:	465b      	mov	r3, fp
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f6 fe50 	bl	8000220 <__aeabi_uldivmod>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4613      	mov	r3, r2
 8009586:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800958e:	d308      	bcc.n	80095a2 <UART_SetConfig+0x3d2>
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009596:	d204      	bcs.n	80095a2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6a3a      	ldr	r2, [r7, #32]
 800959e:	60da      	str	r2, [r3, #12]
 80095a0:	e0c8      	b.n	8009734 <UART_SetConfig+0x564>
=======
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	2200      	movs	r2, #0
 80094f8:	60bb      	str	r3, [r7, #8]
 80094fa:	60fa      	str	r2, [r7, #12]
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	4a8e      	ldr	r2, [pc, #568]	@ (800973c <UART_SetConfig+0x590>)
 8009502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009506:	b29b      	uxth	r3, r3
 8009508:	2200      	movs	r2, #0
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009516:	f7f6 fe83 	bl	8000220 <__aeabi_uldivmod>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4610      	mov	r0, r2
 8009520:	4619      	mov	r1, r3
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	f04f 0300 	mov.w	r3, #0
 800952a:	020b      	lsls	r3, r1, #8
 800952c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009530:	0202      	lsls	r2, r0, #8
 8009532:	6979      	ldr	r1, [r7, #20]
 8009534:	6849      	ldr	r1, [r1, #4]
 8009536:	0849      	lsrs	r1, r1, #1
 8009538:	2000      	movs	r0, #0
 800953a:	460c      	mov	r4, r1
 800953c:	4605      	mov	r5, r0
 800953e:	eb12 0804 	adds.w	r8, r2, r4
 8009542:	eb43 0905 	adc.w	r9, r3, r5
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	469a      	mov	sl, r3
 800954e:	4693      	mov	fp, r2
 8009550:	4652      	mov	r2, sl
 8009552:	465b      	mov	r3, fp
 8009554:	4640      	mov	r0, r8
 8009556:	4649      	mov	r1, r9
 8009558:	f7f6 fe62 	bl	8000220 <__aeabi_uldivmod>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4613      	mov	r3, r2
 8009562:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800956a:	d308      	bcc.n	800957e <UART_SetConfig+0x3d2>
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009572:	d204      	bcs.n	800957e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a3a      	ldr	r2, [r7, #32]
 800957a:	60da      	str	r2, [r3, #12]
 800957c:	e0c8      	b.n	8009710 <UART_SetConfig+0x564>
>>>>>>> origin/main
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 80095a2:	2301      	movs	r3, #1
 80095a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80095a8:	e0c4      	b.n	8009734 <UART_SetConfig+0x564>
=======
 800957e:	2301      	movs	r3, #1
 8009580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009584:	e0c4      	b.n	8009710 <UART_SetConfig+0x564>
>>>>>>> origin/main
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095b2:	d167      	bne.n	8009684 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80095b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d828      	bhi.n	800960e <UART_SetConfig+0x43e>
 80095bc:	a201      	add	r2, pc, #4	@ (adr r2, 80095c4 <UART_SetConfig+0x3f4>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	0800960f 	.word	0x0800960f
 80095d4:	080095ff 	.word	0x080095ff
 80095d8:	0800960f 	.word	0x0800960f
 80095dc:	0800960f 	.word	0x0800960f
 80095e0:	0800960f 	.word	0x0800960f
 80095e4:	08009607 	.word	0x08009607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095e8:	f7fd fe36 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 80095ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095ee:	e014      	b.n	800961a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095f0:	f7fd fe48 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 80095f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095f6:	e010      	b.n	800961a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009764 <UART_SetConfig+0x594>)
 80095fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095fc:	e00d      	b.n	800961a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095fe:	f7fd fdbd 	bl	800717c <HAL_RCC_GetSysClockFreq>
 8009602:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009604:	e009      	b.n	800961a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800960a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800960c:	e005      	b.n	800961a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009618:	bf00      	nop
=======
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800958e:	d167      	bne.n	8009660 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009590:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009594:	2b08      	cmp	r3, #8
 8009596:	d828      	bhi.n	80095ea <UART_SetConfig+0x43e>
 8009598:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <UART_SetConfig+0x3f4>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095c5 	.word	0x080095c5
 80095a4:	080095cd 	.word	0x080095cd
 80095a8:	080095d5 	.word	0x080095d5
 80095ac:	080095eb 	.word	0x080095eb
 80095b0:	080095db 	.word	0x080095db
 80095b4:	080095eb 	.word	0x080095eb
 80095b8:	080095eb 	.word	0x080095eb
 80095bc:	080095eb 	.word	0x080095eb
 80095c0:	080095e3 	.word	0x080095e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095c4:	f7fd fe36 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 80095c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095ca:	e014      	b.n	80095f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095cc:	f7fd fe48 	bl	8007260 <HAL_RCC_GetPCLK2Freq>
 80095d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095d2:	e010      	b.n	80095f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095d4:	4b5a      	ldr	r3, [pc, #360]	@ (8009740 <UART_SetConfig+0x594>)
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095d8:	e00d      	b.n	80095f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095da:	f7fd fdbd 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 80095de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095e0:	e009      	b.n	80095f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095e8:	e005      	b.n	80095f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095f4:	bf00      	nop
>>>>>>> origin/main
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8089 	beq.w	8009734 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009626:	4a4e      	ldr	r2, [pc, #312]	@ (8009760 <UART_SetConfig+0x590>)
 8009628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800962c:	461a      	mov	r2, r3
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	fbb3 f3f2 	udiv	r3, r3, r2
 8009634:	005a      	lsls	r2, r3, #1
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	085b      	lsrs	r3, r3, #1
 800963c:	441a      	add	r2, r3
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	fbb2 f3f3 	udiv	r3, r2, r3
 8009646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	2b0f      	cmp	r3, #15
 800964c:	d916      	bls.n	800967c <UART_SetConfig+0x4ac>
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009654:	d212      	bcs.n	800967c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	b29b      	uxth	r3, r3
 800965a:	f023 030f 	bic.w	r3, r3, #15
 800965e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	b29b      	uxth	r3, r3
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	b29a      	uxth	r2, r3
 800966c:	8bfb      	ldrh	r3, [r7, #30]
 800966e:	4313      	orrs	r3, r2
 8009670:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	8bfa      	ldrh	r2, [r7, #30]
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	e05b      	b.n	8009734 <UART_SetConfig+0x564>
=======
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 8089 	beq.w	8009710 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009602:	4a4e      	ldr	r2, [pc, #312]	@ (800973c <UART_SetConfig+0x590>)
 8009604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009608:	461a      	mov	r2, r3
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009610:	005a      	lsls	r2, r3, #1
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	441a      	add	r2, r3
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009622:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	2b0f      	cmp	r3, #15
 8009628:	d916      	bls.n	8009658 <UART_SetConfig+0x4ac>
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009630:	d212      	bcs.n	8009658 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f023 030f 	bic.w	r3, r3, #15
 800963a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	b29a      	uxth	r2, r3
 8009648:	8bfb      	ldrh	r3, [r7, #30]
 800964a:	4313      	orrs	r3, r2
 800964c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	8bfa      	ldrh	r2, [r7, #30]
 8009654:	60da      	str	r2, [r3, #12]
 8009656:	e05b      	b.n	8009710 <UART_SetConfig+0x564>
>>>>>>> origin/main
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800967c:	2301      	movs	r3, #1
 800967e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009682:	e057      	b.n	8009734 <UART_SetConfig+0x564>
=======
 8009658:	2301      	movs	r3, #1
 800965a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800965e:	e057      	b.n	8009710 <UART_SetConfig+0x564>
>>>>>>> origin/main
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8009684:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009688:	2b08      	cmp	r3, #8
 800968a:	d828      	bhi.n	80096de <UART_SetConfig+0x50e>
 800968c:	a201      	add	r2, pc, #4	@ (adr r2, 8009694 <UART_SetConfig+0x4c4>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	080096b9 	.word	0x080096b9
 8009698:	080096c1 	.word	0x080096c1
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	080096df 	.word	0x080096df
 80096a4:	080096cf 	.word	0x080096cf
 80096a8:	080096df 	.word	0x080096df
 80096ac:	080096df 	.word	0x080096df
 80096b0:	080096df 	.word	0x080096df
 80096b4:	080096d7 	.word	0x080096d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096b8:	f7fd fdce 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 80096bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096be:	e014      	b.n	80096ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096c0:	f7fd fde0 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 80096c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096c6:	e010      	b.n	80096ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096c8:	4b26      	ldr	r3, [pc, #152]	@ (8009764 <UART_SetConfig+0x594>)
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096cc:	e00d      	b.n	80096ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ce:	f7fd fd55 	bl	800717c <HAL_RCC_GetSysClockFreq>
 80096d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096d4:	e009      	b.n	80096ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096dc:	e005      	b.n	80096ea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096e8:	bf00      	nop
    }

    if (pclk != 0U)
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d021      	beq.n	8009734 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009760 <UART_SetConfig+0x590>)
 80096f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096fa:	461a      	mov	r2, r3
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	085b      	lsrs	r3, r3, #1
 8009708:	441a      	add	r2, r3
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	2b0f      	cmp	r3, #15
 8009718:	d909      	bls.n	800972e <UART_SetConfig+0x55e>
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009720:	d205      	bcs.n	800972e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	b29a      	uxth	r2, r3
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60da      	str	r2, [r3, #12]
 800972c:	e002      	b.n	8009734 <UART_SetConfig+0x564>
=======
 8009660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009664:	2b08      	cmp	r3, #8
 8009666:	d828      	bhi.n	80096ba <UART_SetConfig+0x50e>
 8009668:	a201      	add	r2, pc, #4	@ (adr r2, 8009670 <UART_SetConfig+0x4c4>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	08009695 	.word	0x08009695
 8009674:	0800969d 	.word	0x0800969d
 8009678:	080096a5 	.word	0x080096a5
 800967c:	080096bb 	.word	0x080096bb
 8009680:	080096ab 	.word	0x080096ab
 8009684:	080096bb 	.word	0x080096bb
 8009688:	080096bb 	.word	0x080096bb
 800968c:	080096bb 	.word	0x080096bb
 8009690:	080096b3 	.word	0x080096b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009694:	f7fd fdce 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 8009698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800969a:	e014      	b.n	80096c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800969c:	f7fd fde0 	bl	8007260 <HAL_RCC_GetPCLK2Freq>
 80096a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096a2:	e010      	b.n	80096c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096a4:	4b26      	ldr	r3, [pc, #152]	@ (8009740 <UART_SetConfig+0x594>)
 80096a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096a8:	e00d      	b.n	80096c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096aa:	f7fd fd55 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 80096ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096b0:	e009      	b.n	80096c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096b8:	e005      	b.n	80096c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096c4:	bf00      	nop
    }

    if (pclk != 0U)
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d021      	beq.n	8009710 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	4a1a      	ldr	r2, [pc, #104]	@ (800973c <UART_SetConfig+0x590>)
 80096d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096d6:	461a      	mov	r2, r3
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	fbb3 f2f2 	udiv	r2, r3, r2
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	085b      	lsrs	r3, r3, #1
 80096e4:	441a      	add	r2, r3
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	2b0f      	cmp	r3, #15
 80096f4:	d909      	bls.n	800970a <UART_SetConfig+0x55e>
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096fc:	d205      	bcs.n	800970a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	b29a      	uxth	r2, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60da      	str	r2, [r3, #12]
 8009708:	e002      	b.n	8009710 <UART_SetConfig+0x564>
>>>>>>> origin/main
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800972e:	2301      	movs	r3, #1
 8009730:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 800970a:	2301      	movs	r3, #1
 800970c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> origin/main
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2201      	movs	r2, #1
 8009738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2200      	movs	r2, #0
 8009748:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2200      	movs	r2, #0
 800974e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009750:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009754:	4618      	mov	r0, r3
 8009756:	3730      	adds	r7, #48	@ 0x30
 8009758:	46bd      	mov	sp, r7
 800975a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800975e:	bf00      	nop
 8009760:	0800cd6c 	.word	0x0800cd6c
 8009764:	00f42400 	.word	0x00f42400

08009768 <UART_AdvFeatureConfig>:
=======
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2201      	movs	r2, #1
 8009714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2201      	movs	r2, #1
 800971c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2200      	movs	r2, #0
 8009724:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2200      	movs	r2, #0
 800972a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800972c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009730:	4618      	mov	r0, r3
 8009732:	3730      	adds	r7, #48	@ 0x30
 8009734:	46bd      	mov	sp, r7
 8009736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800973a:	bf00      	nop
 800973c:	0800cd4c 	.word	0x0800cd4c
 8009740:	00f42400 	.word	0x00f42400

08009744 <UART_AdvFeatureConfig>:
>>>>>>> origin/main
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
=======
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
=======
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	f003 0308 	and.w	r3, r3, #8
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00a      	beq.n	800976e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	605a      	str	r2, [r3, #4]
=======
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
=======
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00a      	beq.n	80097b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	605a      	str	r2, [r3, #4]
=======
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fc:	f003 0310 	and.w	r3, r3, #16
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	609a      	str	r2, [r3, #8]
=======
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	f003 0310 	and.w	r3, r3, #16
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00a      	beq.n	80097f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	609a      	str	r2, [r3, #8]
=======
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	430a      	orrs	r2, r1
 8009816:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009844:	2b00      	cmp	r3, #0
 8009846:	d01a      	beq.n	800987e <UART_AdvFeatureConfig+0x116>
=======
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01a      	beq.n	800985a <UART_AdvFeatureConfig+0x116>
>>>>>>> origin/main
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009866:	d10a      	bne.n	800987e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	605a      	str	r2, [r3, #4]
=======
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800983e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009842:	d10a      	bne.n	800985a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	605a      	str	r2, [r3, #4]
  }
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <UART_CheckIdleState>:
=======
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	605a      	str	r2, [r3, #4]
  }
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <UART_CheckIdleState>:
>>>>>>> origin/main
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b098      	sub	sp, #96	@ 0x60
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	6078      	str	r0, [r7, #4]
=======
 8009888:	b580      	push	{r7, lr}
 800988a:	b098      	sub	sp, #96	@ 0x60
 800988c:	af02      	add	r7, sp, #8
 800988e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098bc:	f7fa f886 	bl	80039cc <HAL_GetTick>
 80098c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0308 	and.w	r3, r3, #8
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d12f      	bne.n	8009930 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098d8:	2200      	movs	r2, #0
 80098da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f88e 	bl	8009a00 <UART_WaitOnFlagUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d022      	beq.n	8009930 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009898:	f7fa f886 	bl	80039a8 <HAL_GetTick>
 800989c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d12f      	bne.n	800990c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b4:	2200      	movs	r2, #0
 80098b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f88e 	bl	80099dc <UART_WaitOnFlagUntilTimeout>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d022      	beq.n	800990c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> origin/main
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80098f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009908:	647b      	str	r3, [r7, #68]	@ 0x44
 800990a:	643a      	str	r2, [r7, #64]	@ 0x40
=======
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098da:	653b      	str	r3, [r7, #80]	@ 0x50
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80098e6:	643a      	str	r2, [r7, #64]	@ 0x40
>>>>>>> origin/main
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800990c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800990e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e6      	bne.n	80098ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2220      	movs	r2, #32
 8009920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e063      	b.n	80099f8 <UART_CheckIdleState+0x14c>
=======
 80098e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e6      	bne.n	80098c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e063      	b.n	80099d4 <UART_CheckIdleState+0x14c>
>>>>>>> origin/main
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b04      	cmp	r3, #4
 800993c:	d149      	bne.n	80099d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800993e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009946:	2200      	movs	r2, #0
 8009948:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f857 	bl	8009a00 <UART_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d03c      	beq.n	80099d2 <UART_CheckIdleState+0x126>
=======
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b04      	cmp	r3, #4
 8009918:	d149      	bne.n	80099ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800991a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009922:	2200      	movs	r2, #0
 8009924:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f857 	bl	80099dc <UART_WaitOnFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d03c      	beq.n	80099ae <UART_CheckIdleState+0x126>
>>>>>>> origin/main
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	623b      	str	r3, [r7, #32]
   return(result);
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800996c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009976:	633b      	str	r3, [r7, #48]	@ 0x30
 8009978:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800997c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e6      	bne.n	8009958 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3308      	adds	r3, #8
 8009990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	60fb      	str	r3, [r7, #12]
   return(result);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f023 0301 	bic.w	r3, r3, #1
 80099a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3308      	adds	r3, #8
 80099a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099aa:	61fa      	str	r2, [r7, #28]
 80099ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	69b9      	ldr	r1, [r7, #24]
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	617b      	str	r3, [r7, #20]
   return(result);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e5      	bne.n	800998a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e012      	b.n	80099f8 <UART_CheckIdleState+0x14c>
=======
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	623b      	str	r3, [r7, #32]
   return(result);
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009952:	633b      	str	r3, [r7, #48]	@ 0x30
 8009954:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e6      	bne.n	8009934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	60fb      	str	r3, [r7, #12]
   return(result);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f023 0301 	bic.w	r3, r3, #1
 800997c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009986:	61fa      	str	r2, [r7, #28]
 8009988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	69b9      	ldr	r1, [r7, #24]
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	617b      	str	r3, [r7, #20]
   return(result);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e012      	b.n	80099d4 <UART_CheckIdleState+0x14c>
>>>>>>> origin/main
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3758      	adds	r7, #88	@ 0x58
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <UART_WaitOnFlagUntilTimeout>:
=======
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3758      	adds	r7, #88	@ 0x58
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <UART_WaitOnFlagUntilTimeout>:
>>>>>>> origin/main
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a10:	e04f      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a18:	d04b      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1a:	f7f9 ffd7 	bl	80039cc <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d302      	bcc.n	8009a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e04e      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d037      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	2b80      	cmp	r3, #128	@ 0x80
 8009a46:	d034      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b40      	cmp	r3, #64	@ 0x40
 8009a4c:	d031      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d110      	bne.n	8009a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2208      	movs	r2, #8
 8009a62:	621a      	str	r2, [r3, #32]
=======
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	603b      	str	r3, [r7, #0]
 80099e8:	4613      	mov	r3, r2
 80099ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ec:	e04f      	b.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d04b      	beq.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099f6:	f7f9 ffd7 	bl	80039a8 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d302      	bcc.n	8009a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e04e      	b.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d037      	beq.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b80      	cmp	r3, #128	@ 0x80
 8009a22:	d034      	beq.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b40      	cmp	r3, #64	@ 0x40
 8009a28:	d031      	beq.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	f003 0308 	and.w	r3, r3, #8
 8009a34:	2b08      	cmp	r3, #8
 8009a36:	d110      	bne.n	8009a5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	621a      	str	r2, [r3, #32]
>>>>>>> origin/main

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f838 	bl	8009ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e029      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a8c:	d111      	bne.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a96:	621a      	str	r2, [r3, #32]
=======
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f838 	bl	8009ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2208      	movs	r2, #8
 8009a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e029      	b.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a68:	d111      	bne.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a72:	621a      	str	r2, [r3, #32]
>>>>>>> origin/main

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f81e 	bl	8009ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e00f      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4013      	ands	r3, r2
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	bf0c      	ite	eq
 8009ac2:	2301      	moveq	r3, #1
 8009ac4:	2300      	movne	r3, #0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d0a0      	beq.n	8009a12 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f81e 	bl	8009ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e00f      	b.n	8009aae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69da      	ldr	r2, [r3, #28]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	4013      	ands	r3, r2
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	bf0c      	ite	eq
 8009a9e:	2301      	moveq	r3, #1
 8009aa0:	2300      	movne	r3, #0
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d0a0      	beq.n	80099ee <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> origin/main
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <UART_EndRxTransfer>:
=======
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <UART_EndRxTransfer>:
>>>>>>> origin/main
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009ada:	b480      	push	{r7}
 8009adc:	b095      	sub	sp, #84	@ 0x54
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e6      	bne.n	8009ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b2a:	f023 0301 	bic.w	r3, r3, #1
 8009b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3308      	adds	r3, #8
 8009b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b40:	e841 2300 	strex	r3, r2, [r1]
 8009b44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e3      	bne.n	8009b14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d118      	bne.n	8009b86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f023 0310 	bic.w	r3, r3, #16
 8009b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b76:	6979      	ldr	r1, [r7, #20]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	e841 2300 	strex	r3, r2, [r1]
 8009b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1e6      	bne.n	8009b54 <UART_EndRxTransfer+0x7a>
=======
 8009ab6:	b480      	push	{r7}
 8009ab8:	b095      	sub	sp, #84	@ 0x54
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ade:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e6      	bne.n	8009abe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3308      	adds	r3, #8
 8009af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3308      	adds	r3, #8
 8009b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e3      	bne.n	8009af0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d118      	bne.n	8009b62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f023 0310 	bic.w	r3, r3, #16
 8009b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e6      	bne.n	8009b30 <UART_EndRxTransfer+0x7a>
>>>>>>> origin/main
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b9a:	bf00      	nop
 8009b9c:	3754      	adds	r7, #84	@ 0x54
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <__NVIC_SetPriority>:
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	db0a      	blt.n	8009bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	490c      	ldr	r1, [pc, #48]	@ (8009bf4 <__NVIC_SetPriority+0x4c>)
 8009bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc6:	0112      	lsls	r2, r2, #4
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	440b      	add	r3, r1
 8009bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009bd0:	e00a      	b.n	8009be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	4908      	ldr	r1, [pc, #32]	@ (8009bf8 <__NVIC_SetPriority+0x50>)
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	f003 030f 	and.w	r3, r3, #15
 8009bde:	3b04      	subs	r3, #4
 8009be0:	0112      	lsls	r2, r2, #4
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	440b      	add	r3, r1
 8009be6:	761a      	strb	r2, [r3, #24]
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	e000e100 	.word	0xe000e100
 8009bf8:	e000ed00 	.word	0xe000ed00

08009bfc <SysTick_Handler>:
=======
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b76:	bf00      	nop
 8009b78:	3754      	adds	r7, #84	@ 0x54
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <__NVIC_SetPriority>:
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	db0a      	blt.n	8009bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	490c      	ldr	r1, [pc, #48]	@ (8009bd0 <__NVIC_SetPriority+0x4c>)
 8009b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ba2:	0112      	lsls	r2, r2, #4
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009bac:	e00a      	b.n	8009bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	4908      	ldr	r1, [pc, #32]	@ (8009bd4 <__NVIC_SetPriority+0x50>)
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	3b04      	subs	r3, #4
 8009bbc:	0112      	lsls	r2, r2, #4
 8009bbe:	b2d2      	uxtb	r2, r2
 8009bc0:	440b      	add	r3, r1
 8009bc2:	761a      	strb	r2, [r3, #24]
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	e000e100 	.word	0xe000e100
 8009bd4:	e000ed00 	.word	0xe000ed00

08009bd8 <SysTick_Handler>:
>>>>>>> origin/main

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< HEAD
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c00:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <SysTick_Handler+0x1c>)
 8009c02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c04:	f001 fe94 	bl	800b930 <xTaskGetSchedulerState>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d001      	beq.n	8009c12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009c0e:	f002 fc8b 	bl	800c528 <xPortSysTickHandler>
  }
}
 8009c12:	bf00      	nop
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	e000e010 	.word	0xe000e010

08009c1c <SVC_Setup>:
=======
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <SysTick_Handler+0x1c>)
 8009bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009be0:	f001 fe94 	bl	800b90c <xTaskGetSchedulerState>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d001      	beq.n	8009bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bea:	f002 fc8d 	bl	800c508 <xPortSysTickHandler>
  }
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	e000e010 	.word	0xe000e010

08009bf8 <SVC_Setup>:
>>>>>>> origin/main
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
=======
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
>>>>>>> origin/main
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 8009c20:	2100      	movs	r1, #0
 8009c22:	f06f 0004 	mvn.w	r0, #4
 8009c26:	f7ff ffbf 	bl	8009ba8 <__NVIC_SetPriority>
#endif
}
 8009c2a:	bf00      	nop
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <osKernelInitialize>:
=======
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	f06f 0004 	mvn.w	r0, #4
 8009c02:	f7ff ffbf 	bl	8009b84 <__NVIC_SetPriority>
#endif
}
 8009c06:	bf00      	nop
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <osKernelInitialize>:
>>>>>>> origin/main
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c36:	f3ef 8305 	mrs	r3, IPSR
 8009c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c42:	f06f 0305 	mvn.w	r3, #5
 8009c46:	607b      	str	r3, [r7, #4]
 8009c48:	e00c      	b.n	8009c64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c74 <osKernelInitialize+0x44>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <osKernelInitialize+0x2e>
=======
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c12:	f3ef 8305 	mrs	r3, IPSR
 8009c16:	603b      	str	r3, [r7, #0]
  return(result);
 8009c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c1e:	f06f 0305 	mvn.w	r3, #5
 8009c22:	607b      	str	r3, [r7, #4]
 8009c24:	e00c      	b.n	8009c40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c26:	4b0a      	ldr	r3, [pc, #40]	@ (8009c50 <osKernelInitialize+0x44>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d105      	bne.n	8009c3a <osKernelInitialize+0x2e>
>>>>>>> origin/main
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 8009c52:	4b08      	ldr	r3, [pc, #32]	@ (8009c74 <osKernelInitialize+0x44>)
 8009c54:	2201      	movs	r2, #1
 8009c56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	607b      	str	r3, [r7, #4]
 8009c5c:	e002      	b.n	8009c64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c62:	607b      	str	r3, [r7, #4]
=======
 8009c2e:	4b08      	ldr	r3, [pc, #32]	@ (8009c50 <osKernelInitialize+0x44>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	607b      	str	r3, [r7, #4]
 8009c38:	e002      	b.n	8009c40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3e:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
    }
  }

  return (stat);
<<<<<<< HEAD
 8009c64:	687b      	ldr	r3, [r7, #4]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20000a04 	.word	0x20000a04

08009c78 <osKernelStart>:
=======
 8009c40:	687b      	ldr	r3, [r7, #4]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	20000a40 	.word	0x20000a40

08009c54 <osKernelStart>:
>>>>>>> origin/main
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c7e:	f3ef 8305 	mrs	r3, IPSR
 8009c82:	603b      	str	r3, [r7, #0]
  return(result);
 8009c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c8a:	f06f 0305 	mvn.w	r3, #5
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	e010      	b.n	8009cb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c92:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc0 <osKernelStart+0x48>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d109      	bne.n	8009cae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c9a:	f7ff ffbf 	bl	8009c1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c9e:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <osKernelStart+0x48>)
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ca4:	f001 f9ce 	bl	800b044 <vTaskStartScheduler>
      stat = osOK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	607b      	str	r3, [r7, #4]
 8009cac:	e002      	b.n	8009cb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009cae:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb2:	607b      	str	r3, [r7, #4]
=======
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c5a:	f3ef 8305 	mrs	r3, IPSR
 8009c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8009c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c66:	f06f 0305 	mvn.w	r3, #5
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	e010      	b.n	8009c90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c9c <osKernelStart+0x48>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d109      	bne.n	8009c8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c76:	f7ff ffbf 	bl	8009bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c7a:	4b08      	ldr	r3, [pc, #32]	@ (8009c9c <osKernelStart+0x48>)
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c80:	f001 f9ce 	bl	800b020 <vTaskStartScheduler>
      stat = osOK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	607b      	str	r3, [r7, #4]
 8009c88:	e002      	b.n	8009c90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8e:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
    }
  }

  return (stat);
<<<<<<< HEAD
 8009cb4:	687b      	ldr	r3, [r7, #4]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000a04 	.word	0x20000a04

08009cc4 <osKernelGetTickCount>:
=======
 8009c90:	687b      	ldr	r3, [r7, #4]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000a40 	.word	0x20000a40

08009ca0 <osKernelGetTickCount>:
>>>>>>> origin/main
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
<<<<<<< HEAD
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cca:	f3ef 8305 	mrs	r3, IPSR
 8009cce:	603b      	str	r3, [r7, #0]
  return(result);
 8009cd0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009cd6:	f001 fae1 	bl	800b29c <xTaskGetTickCountFromISR>
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	e002      	b.n	8009ce4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009cde:	f001 facd 	bl	800b27c <xTaskGetTickCount>
 8009ce2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009ce4:	687b      	ldr	r3, [r7, #4]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <osThreadNew>:
=======
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca6:	f3ef 8305 	mrs	r3, IPSR
 8009caa:	603b      	str	r3, [r7, #0]
  return(result);
 8009cac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009cb2:	f001 fae1 	bl	800b278 <xTaskGetTickCountFromISR>
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	e002      	b.n	8009cc0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009cba:	f001 facd 	bl	800b258 <xTaskGetTickCount>
 8009cbe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009cc0:	687b      	ldr	r3, [r7, #4]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <osThreadNew>:
>>>>>>> origin/main
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b08e      	sub	sp, #56	@ 0x38
 8009cf2:	af04      	add	r7, sp, #16
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
=======
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b08e      	sub	sp, #56	@ 0x38
 8009cce:	af04      	add	r7, sp, #16
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	617b      	str	r3, [r7, #20]
  return(result);
 8009d04:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d17e      	bne.n	8009e08 <osThreadNew+0x11a>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d07b      	beq.n	8009e08 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d10:	2380      	movs	r3, #128	@ 0x80
 8009d12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d14:	2318      	movs	r3, #24
 8009d16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d045      	beq.n	8009db4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <osThreadNew+0x48>
        name = attr->name;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d008      	beq.n	8009d5c <osThreadNew+0x6e>
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	2b38      	cmp	r3, #56	@ 0x38
 8009d4e:	d805      	bhi.n	8009d5c <osThreadNew+0x6e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <osThreadNew+0x72>
        return (NULL);
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e054      	b.n	8009e0a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	089b      	lsrs	r3, r3, #2
 8009d6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00e      	beq.n	8009d96 <osThreadNew+0xa8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	2ba7      	cmp	r3, #167	@ 0xa7
 8009d7e:	d90a      	bls.n	8009d96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <osThreadNew+0xa8>
        mem = 1;
 8009d90:	2301      	movs	r3, #1
 8009d92:	61bb      	str	r3, [r7, #24]
 8009d94:	e010      	b.n	8009db8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10c      	bne.n	8009db8 <osThreadNew+0xca>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d108      	bne.n	8009db8 <osThreadNew+0xca>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d104      	bne.n	8009db8 <osThreadNew+0xca>
          mem = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	e001      	b.n	8009db8 <osThreadNew+0xca>
=======
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cda:	f3ef 8305 	mrs	r3, IPSR
 8009cde:	617b      	str	r3, [r7, #20]
  return(result);
 8009ce0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d17e      	bne.n	8009de4 <osThreadNew+0x11a>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d07b      	beq.n	8009de4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009cec:	2380      	movs	r3, #128	@ 0x80
 8009cee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cf0:	2318      	movs	r3, #24
 8009cf2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d045      	beq.n	8009d90 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <osThreadNew+0x48>
        name = attr->name;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d008      	beq.n	8009d38 <osThreadNew+0x6e>
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	2b38      	cmp	r3, #56	@ 0x38
 8009d2a:	d805      	bhi.n	8009d38 <osThreadNew+0x6e>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <osThreadNew+0x72>
        return (NULL);
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e054      	b.n	8009de6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	089b      	lsrs	r3, r3, #2
 8009d4a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00e      	beq.n	8009d72 <osThreadNew+0xa8>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	2ba7      	cmp	r3, #167	@ 0xa7
 8009d5a:	d90a      	bls.n	8009d72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <osThreadNew+0xa8>
        mem = 1;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	61bb      	str	r3, [r7, #24]
 8009d70:	e010      	b.n	8009d94 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10c      	bne.n	8009d94 <osThreadNew+0xca>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d108      	bne.n	8009d94 <osThreadNew+0xca>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d104      	bne.n	8009d94 <osThreadNew+0xca>
          mem = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	e001      	b.n	8009d94 <osThreadNew+0xca>
>>>>>>> origin/main
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8009db4:	2300      	movs	r3, #0
 8009db6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d110      	bne.n	8009de0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dc6:	9202      	str	r2, [sp, #8]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	6a3a      	ldr	r2, [r7, #32]
 8009dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 fe4d 	bl	800aa74 <xTaskCreateStatic>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	613b      	str	r3, [r7, #16]
 8009dde:	e013      	b.n	8009e08 <osThreadNew+0x11a>
=======
 8009d90:	2300      	movs	r3, #0
 8009d92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d110      	bne.n	8009dbc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009da2:	9202      	str	r2, [sp, #8]
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fe4d 	bl	800aa50 <xTaskCreateStatic>
 8009db6:	4603      	mov	r3, r0
 8009db8:	613b      	str	r3, [r7, #16]
 8009dba:	e013      	b.n	8009de4 <osThreadNew+0x11a>
>>>>>>> origin/main
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d110      	bne.n	8009e08 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	f107 0310 	add.w	r3, r7, #16
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fe9b 	bl	800ab34 <xTaskCreate>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d001      	beq.n	8009e08 <osThreadNew+0x11a>
            hTask = NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	613b      	str	r3, [r7, #16]
=======
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d110      	bne.n	8009de4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f107 0310 	add.w	r3, r7, #16
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 fe9b 	bl	800ab10 <xTaskCreate>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d001      	beq.n	8009de4 <osThreadNew+0x11a>
            hTask = NULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 8009e08:	693b      	ldr	r3, [r7, #16]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3728      	adds	r7, #40	@ 0x28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <osThreadExit>:
=======
 8009de4:	693b      	ldr	r3, [r7, #16]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3728      	adds	r7, #40	@ 0x28
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <osThreadExit>:
>>>>>>> origin/main

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
<<<<<<< HEAD
 8009e12:	b580      	push	{r7, lr}
 8009e14:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009e16:	2000      	movs	r0, #0
 8009e18:	f000 ffea 	bl	800adf0 <vTaskDelete>
#endif
  for (;;);
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <osThreadExit+0xa>

08009e20 <osDelay>:
=======
 8009dee:	b580      	push	{r7, lr}
 8009df0:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009df2:	2000      	movs	r0, #0
 8009df4:	f000 ffea 	bl	800adcc <vTaskDelete>
#endif
  for (;;);
 8009df8:	bf00      	nop
 8009dfa:	e7fd      	b.n	8009df8 <osThreadExit+0xa>

08009dfc <osDelay>:
>>>>>>> origin/main
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e28:	f3ef 8305 	mrs	r3, IPSR
 8009e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <osDelay+0x1c>
    stat = osErrorISR;
 8009e34:	f06f 0305 	mvn.w	r3, #5
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e007      	b.n	8009e4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 f8c6 	bl	800afd8 <vTaskDelay>
=======
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e04:	f3ef 8305 	mrs	r3, IPSR
 8009e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d003      	beq.n	8009e18 <osDelay+0x1c>
    stat = osErrorISR;
 8009e10:	f06f 0305 	mvn.w	r3, #5
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	e007      	b.n	8009e28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 f8c6 	bl	800afb4 <vTaskDelay>
>>>>>>> origin/main
    }
  }

  return (stat);
<<<<<<< HEAD
 8009e4c:	68fb      	ldr	r3, [r7, #12]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b086      	sub	sp, #24
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e5e:	f3ef 8305 	mrs	r3, IPSR
 8009e62:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e64:	68fb      	ldr	r3, [r7, #12]
=======
 8009e28:	68fb      	ldr	r3, [r7, #12]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e3a:	f3ef 8305 	mrs	r3, IPSR
 8009e3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e40:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
<<<<<<< HEAD
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009e6a:	f06f 0305 	mvn.w	r3, #5
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	e019      	b.n	8009ea6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009e76:	f001 fa01 	bl	800b27c <xTaskGetTickCount>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d009      	beq.n	8009ea0 <osDelayUntil+0x4a>
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	db06      	blt.n	8009ea0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	6939      	ldr	r1, [r7, #16]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 f81d 	bl	800aed8 <vTaskDelayUntil>
 8009e9e:	e002      	b.n	8009ea6 <osDelayUntil+0x50>
=======
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009e46:	f06f 0305 	mvn.w	r3, #5
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	e019      	b.n	8009e82 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009e52:	f001 fa01 	bl	800b258 <xTaskGetTickCount>
 8009e56:	4603      	mov	r3, r0
 8009e58:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <osDelayUntil+0x4a>
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	db06      	blt.n	8009e7c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009e6e:	f107 0308 	add.w	r3, r7, #8
 8009e72:	6939      	ldr	r1, [r7, #16]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 f81d 	bl	800aeb4 <vTaskDelayUntil>
 8009e7a:	e002      	b.n	8009e82 <osDelayUntil+0x50>
>>>>>>> origin/main
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
<<<<<<< HEAD
 8009ea0:	f06f 0303 	mvn.w	r3, #3
 8009ea4:	617b      	str	r3, [r7, #20]
=======
 8009e7c:	f06f 0303 	mvn.w	r3, #3
 8009e80:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
    }
  }

  return (stat);
<<<<<<< HEAD
 8009ea6:	697b      	ldr	r3, [r7, #20]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <vApplicationGetIdleTaskMemory>:
=======
 8009e82:	697b      	ldr	r3, [r7, #20]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <vApplicationGetIdleTaskMemory>:
>>>>>>> origin/main

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
=======
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4a07      	ldr	r2, [pc, #28]	@ (8009edc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4a06      	ldr	r2, [pc, #24]	@ (8009ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8009ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2280      	movs	r2, #128	@ 0x80
 8009ecc:	601a      	str	r2, [r3, #0]
}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000a08 	.word	0x20000a08
 8009ee0:	20000ab0 	.word	0x20000ab0

08009ee4 <vApplicationGetTimerTaskMemory>:
=======
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4a07      	ldr	r2, [pc, #28]	@ (8009eb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4a06      	ldr	r2, [pc, #24]	@ (8009ebc <vApplicationGetIdleTaskMemory+0x30>)
 8009ea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2280      	movs	r2, #128	@ 0x80
 8009ea8:	601a      	str	r2, [r3, #0]
}
 8009eaa:	bf00      	nop
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	20000a44 	.word	0x20000a44
 8009ebc:	20000aec 	.word	0x20000aec

08009ec0 <vApplicationGetTimerTaskMemory>:
>>>>>>> origin/main

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
=======
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4a07      	ldr	r2, [pc, #28]	@ (8009f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4a06      	ldr	r2, [pc, #24]	@ (8009f14 <vApplicationGetTimerTaskMemory+0x30>)
 8009efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	20000cb0 	.word	0x20000cb0
 8009f14:	20000d58 	.word	0x20000d58

08009f18 <vListInitialise>:
=======
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4a07      	ldr	r2, [pc, #28]	@ (8009eec <vApplicationGetTimerTaskMemory+0x2c>)
 8009ed0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4a06      	ldr	r2, [pc, #24]	@ (8009ef0 <vApplicationGetTimerTaskMemory+0x30>)
 8009ed6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ede:	601a      	str	r2, [r3, #0]
}
 8009ee0:	bf00      	nop
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	20000cec 	.word	0x20000cec
 8009ef0:	20000d94 	.word	0x20000d94

08009ef4 <vListInitialise>:
>>>>>>> origin/main
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
=======
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f103 0208 	add.w	r2, r3, #8
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	605a      	str	r2, [r3, #4]
=======
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f103 0208 	add.w	r2, r3, #8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f30:	609a      	str	r2, [r3, #8]
=======
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0c:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f103 0208 	add.w	r2, r3, #8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f103 0208 	add.w	r2, r3, #8
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
=======
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f103 0208 	add.w	r2, r3, #8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f103 0208 	add.w	r2, r3, #8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <vListInitialiseItem>:
=======
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <vListInitialiseItem>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	611a      	str	r2, [r3, #16]
=======
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <vListInsertEnd>:
=======
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <vListInsertEnd>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	60fb      	str	r3, [r7, #12]
=======
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	609a      	str	r2, [r3, #8]
=======
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	601a      	str	r2, [r3, #0]
}
 8009fae:	bf00      	nop
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <vListInsert>:
=======
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	601a      	str	r2, [r3, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <vListInsert>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60bb      	str	r3, [r7, #8]
=======
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd0:	d103      	bne.n	8009fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	e00c      	b.n	8009ff4 <vListInsert+0x3a>
=======
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fac:	d103      	bne.n	8009fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e00c      	b.n	8009fd0 <vListInsert+0x3a>
>>>>>>> origin/main
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e002      	b.n	8009fe8 <vListInsert+0x2e>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d2f6      	bcs.n	8009fe2 <vListInsert+0x28>
=======
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e002      	b.n	8009fc4 <vListInsert+0x2e>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d2f6      	bcs.n	8009fbe <vListInsert+0x28>
>>>>>>> origin/main
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	605a      	str	r2, [r3, #4]
=======
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	601a      	str	r2, [r3, #0]
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <uxListRemove>:
=======
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	601a      	str	r2, [r3, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <uxListRemove>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6892      	ldr	r2, [r2, #8]
 800a042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	6852      	ldr	r2, [r2, #4]
 800a04c:	605a      	str	r2, [r3, #4]
=======
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6892      	ldr	r2, [r2, #8]
 800a01e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6852      	ldr	r2, [r2, #4]
 800a028:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	429a      	cmp	r2, r3
 800a056:	d103      	bne.n	800a060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	605a      	str	r2, [r3, #4]
=======
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d103      	bne.n	800a03c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	689a      	ldr	r2, [r3, #8]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	1e5a      	subs	r2, r3, #1
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <xQueueGenericReset>:
=======
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	1e5a      	subs	r2, r3, #1
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <xQueueGenericReset>:
>>>>>>> origin/main
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xQueueGenericReset+0x2c>
=======
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10b      	bne.n	800a088 <xQueueGenericReset+0x2c>
>>>>>>> origin/main

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	60bb      	str	r3, [r7, #8]
=======
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0ac:	f002 f9ac 	bl	800c408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b8:	68f9      	ldr	r1, [r7, #12]
 800a0ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0bc:	fb01 f303 	mul.w	r3, r1, r3
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	441a      	add	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	22ff      	movs	r2, #255	@ 0xff
 800a0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	22ff      	movs	r2, #255	@ 0xff
 800a0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d114      	bne.n	800a12c <xQueueGenericReset+0xac>
=======
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a088:	f002 f9ae 	bl	800c3e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a094:	68f9      	ldr	r1, [r7, #12]
 800a096:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a098:	fb01 f303 	mul.w	r3, r1, r3
 800a09c:	441a      	add	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0be:	fb01 f303 	mul.w	r3, r1, r3
 800a0c2:	441a      	add	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	22ff      	movs	r2, #255	@ 0xff
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	22ff      	movs	r2, #255	@ 0xff
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d114      	bne.n	800a108 <xQueueGenericReset+0xac>
>>>>>>> origin/main
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01a      	beq.n	800a140 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3310      	adds	r3, #16
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 fa48 	bl	800b5a4 <xTaskRemoveFromEventList>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d012      	beq.n	800a140 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a11a:	4b0d      	ldr	r3, [pc, #52]	@ (800a150 <xQueueGenericReset+0xd0>)
 800a11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	e009      	b.n	800a140 <xQueueGenericReset+0xc0>
=======
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01a      	beq.n	800a11c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3310      	adds	r3, #16
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f001 fa48 	bl	800b580 <xTaskRemoveFromEventList>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d012      	beq.n	800a11c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a12c <xQueueGenericReset+0xd0>)
 800a0f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	e009      	b.n	800a11c <xQueueGenericReset+0xc0>
>>>>>>> origin/main
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3310      	adds	r3, #16
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fef1 	bl	8009f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3324      	adds	r3, #36	@ 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff feec 	bl	8009f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a140:	f002 f994 	bl	800c46c <vPortExitCritical>
=======
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3310      	adds	r3, #16
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fef1 	bl	8009ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3324      	adds	r3, #36	@ 0x24
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff feec 	bl	8009ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a11c:	f002 f996 	bl	800c44c <vPortExitCritical>
>>>>>>> origin/main

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 800a144:	2301      	movs	r3, #1
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <xQueueGenericCreateStatic>:
=======
 800a120:	2301      	movs	r3, #1
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	e000ed04 	.word	0xe000ed04

0800a130 <xQueueGenericCreateStatic>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 800a154:	b580      	push	{r7, lr}
 800a156:	b08e      	sub	sp, #56	@ 0x38
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10b      	bne.n	800a180 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	e7fd      	b.n	800a17c <xQueueGenericCreateStatic+0x28>
=======
 800a130:	b580      	push	{r7, lr}
 800a132:	b08e      	sub	sp, #56	@ 0x38
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10b      	bne.n	800a15c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	e7fd      	b.n	800a158 <xQueueGenericCreateStatic+0x28>
>>>>>>> origin/main

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <xQueueGenericCreateStatic+0x46>
=======
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	e7fd      	b.n	800a176 <xQueueGenericCreateStatic+0x46>
>>>>>>> origin/main

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <xQueueGenericCreateStatic+0x56>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <xQueueGenericCreateStatic+0x5a>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <xQueueGenericCreateStatic+0x5c>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10b      	bne.n	800a1cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	623b      	str	r3, [r7, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	e7fd      	b.n	800a1c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d102      	bne.n	800a1d8 <xQueueGenericCreateStatic+0x84>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <xQueueGenericCreateStatic+0x88>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e000      	b.n	800a1de <xQueueGenericCreateStatic+0x8a>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	61fb      	str	r3, [r7, #28]
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <xQueueGenericCreateStatic+0xa2>
=======
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <xQueueGenericCreateStatic+0x56>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <xQueueGenericCreateStatic+0x5a>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <xQueueGenericCreateStatic+0x5c>
 800a18a:	2300      	movs	r3, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10b      	bne.n	800a1a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	623b      	str	r3, [r7, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <xQueueGenericCreateStatic+0x84>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <xQueueGenericCreateStatic+0x88>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <xQueueGenericCreateStatic+0x8a>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10b      	bne.n	800a1d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	61fb      	str	r3, [r7, #28]
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <xQueueGenericCreateStatic+0xa2>
>>>>>>> origin/main
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800a1fa:	2350      	movs	r3, #80	@ 0x50
 800a1fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b50      	cmp	r3, #80	@ 0x50
 800a202:	d00b      	beq.n	800a21c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	61bb      	str	r3, [r7, #24]
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a21c:	697b      	ldr	r3, [r7, #20]
=======
 800a1d6:	2350      	movs	r3, #80	@ 0x50
 800a1d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b50      	cmp	r3, #80	@ 0x50
 800a1de:	d00b      	beq.n	800a1f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	61bb      	str	r3, [r7, #24]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1f8:	697b      	ldr	r3, [r7, #20]
>>>>>>> origin/main
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00d      	beq.n	800a244 <xQueueGenericCreateStatic+0xf0>
=======
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00d      	beq.n	800a220 <xQueueGenericCreateStatic+0xf0>
>>>>>>> origin/main
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 800a228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 800a204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> origin/main
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800a230:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4613      	mov	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f805 	bl	800a24e <prvInitialiseNewQueue>
=======
 800a20c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	4613      	mov	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f805 	bl	800a22a <prvInitialiseNewQueue>
>>>>>>> origin/main
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a246:	4618      	mov	r0, r3
 800a248:	3730      	adds	r7, #48	@ 0x30
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <prvInitialiseNewQueue>:
=======
 800a220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a222:	4618      	mov	r0, r3
 800a224:	3730      	adds	r7, #48	@ 0x30
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <prvInitialiseNewQueue>:
>>>>>>> origin/main

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
 800a25a:	70fb      	strb	r3, [r7, #3]
=======
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	70fb      	strb	r3, [r7, #3]
>>>>>>> origin/main
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d103      	bne.n	800a26a <prvInitialiseNewQueue+0x1c>
=======
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d103      	bne.n	800a246 <prvInitialiseNewQueue+0x1c>
>>>>>>> origin/main
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	e002      	b.n	800a270 <prvInitialiseNewQueue+0x22>
=======
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e002      	b.n	800a24c <prvInitialiseNewQueue+0x22>
>>>>>>> origin/main
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]
=======
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a27c:	2101      	movs	r1, #1
 800a27e:	69b8      	ldr	r0, [r7, #24]
 800a280:	f7ff fefe 	bl	800a080 <xQueueGenericReset>
=======
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a258:	2101      	movs	r1, #1
 800a25a:	69b8      	ldr	r0, [r7, #24]
 800a25c:	f7ff fefe 	bl	800a05c <xQueueGenericReset>
>>>>>>> origin/main

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
=======
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	78fa      	ldrb	r2, [r7, #3]
 800a264:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
>>>>>>> origin/main
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <xQueueGenericSend>:
=======
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <xQueueGenericSend>:
>>>>>>> origin/main

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 800a294:	b580      	push	{r7, lr}
 800a296:	b08e      	sub	sp, #56	@ 0x38
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10b      	bne.n	800a2c8 <xQueueGenericSend+0x34>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	e7fd      	b.n	800a2c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSend+0x42>
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericSend+0x46>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericSend+0x48>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10b      	bne.n	800a2f8 <xQueueGenericSend+0x64>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2f2:	bf00      	nop
 800a2f4:	bf00      	nop
 800a2f6:	e7fd      	b.n	800a2f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d103      	bne.n	800a306 <xQueueGenericSend+0x72>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <xQueueGenericSend+0x76>
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <xQueueGenericSend+0x78>
 800a30a:	2300      	movs	r3, #0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10b      	bne.n	800a328 <xQueueGenericSend+0x94>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	623b      	str	r3, [r7, #32]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a328:	f001 fb02 	bl	800b930 <xTaskGetSchedulerState>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <xQueueGenericSend+0xa4>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <xQueueGenericSend+0xa8>
 800a338:	2301      	movs	r3, #1
 800a33a:	e000      	b.n	800a33e <xQueueGenericSend+0xaa>
 800a33c:	2300      	movs	r3, #0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10b      	bne.n	800a35a <xQueueGenericSend+0xc6>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	61fb      	str	r3, [r7, #28]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <xQueueGenericSend+0xc2>
=======
 800a270:	b580      	push	{r7, lr}
 800a272:	b08e      	sub	sp, #56	@ 0x38
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a27e:	2300      	movs	r3, #0
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10b      	bne.n	800a2a4 <xQueueGenericSend+0x34>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
 800a2a2:	e7fd      	b.n	800a2a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d103      	bne.n	800a2b2 <xQueueGenericSend+0x42>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <xQueueGenericSend+0x46>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e000      	b.n	800a2b8 <xQueueGenericSend+0x48>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10b      	bne.n	800a2d4 <xQueueGenericSend+0x64>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2ce:	bf00      	nop
 800a2d0:	bf00      	nop
 800a2d2:	e7fd      	b.n	800a2d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d103      	bne.n	800a2e2 <xQueueGenericSend+0x72>
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d101      	bne.n	800a2e6 <xQueueGenericSend+0x76>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e000      	b.n	800a2e8 <xQueueGenericSend+0x78>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10b      	bne.n	800a304 <xQueueGenericSend+0x94>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	623b      	str	r3, [r7, #32]
}
 800a2fe:	bf00      	nop
 800a300:	bf00      	nop
 800a302:	e7fd      	b.n	800a300 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a304:	f001 fb02 	bl	800b90c <xTaskGetSchedulerState>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d102      	bne.n	800a314 <xQueueGenericSend+0xa4>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <xQueueGenericSend+0xa8>
 800a314:	2301      	movs	r3, #1
 800a316:	e000      	b.n	800a31a <xQueueGenericSend+0xaa>
 800a318:	2300      	movs	r3, #0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10b      	bne.n	800a336 <xQueueGenericSend+0xc6>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	61fb      	str	r3, [r7, #28]
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	e7fd      	b.n	800a332 <xQueueGenericSend+0xc2>
>>>>>>> origin/main
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a35a:	f002 f855 	bl	800c408 <vPortEnterCritical>
=======
 800a336:	f002 f857 	bl	800c3e8 <vPortEnterCritical>
>>>>>>> origin/main
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a366:	429a      	cmp	r2, r3
 800a368:	d302      	bcc.n	800a370 <xQueueGenericSend+0xdc>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d129      	bne.n	800a3c4 <xQueueGenericSend+0x130>
=======
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a342:	429a      	cmp	r2, r3
 800a344:	d302      	bcc.n	800a34c <xQueueGenericSend+0xdc>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d129      	bne.n	800a3a0 <xQueueGenericSend+0x130>
>>>>>>> origin/main
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	68b9      	ldr	r1, [r7, #8]
 800a374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a376:	f000 fa0f 	bl	800a798 <prvCopyDataToQueue>
 800a37a:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a352:	f000 fa0f 	bl	800a774 <prvCopyDataToQueue>
 800a356:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> origin/main

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d010      	beq.n	800a3a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	3324      	adds	r3, #36	@ 0x24
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 f90b 	bl	800b5a4 <xTaskRemoveFromEventList>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d013      	beq.n	800a3bc <xQueueGenericSend+0x128>
=======
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d010      	beq.n	800a382 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a362:	3324      	adds	r3, #36	@ 0x24
 800a364:	4618      	mov	r0, r3
 800a366:	f001 f90b 	bl	800b580 <xTaskRemoveFromEventList>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d013      	beq.n	800a398 <xQueueGenericSend+0x128>
>>>>>>> origin/main
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800a394:	4b3f      	ldr	r3, [pc, #252]	@ (800a494 <xQueueGenericSend+0x200>)
 800a396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	e00a      	b.n	800a3bc <xQueueGenericSend+0x128>
=======
 800a370:	4b3f      	ldr	r3, [pc, #252]	@ (800a470 <xQueueGenericSend+0x200>)
 800a372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	e00a      	b.n	800a398 <xQueueGenericSend+0x128>
>>>>>>> origin/main
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 800a3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d007      	beq.n	800a3bc <xQueueGenericSend+0x128>
=======
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d007      	beq.n	800a398 <xQueueGenericSend+0x128>
>>>>>>> origin/main
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800a3ac:	4b39      	ldr	r3, [pc, #228]	@ (800a494 <xQueueGenericSend+0x200>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
=======
 800a388:	4b39      	ldr	r3, [pc, #228]	@ (800a470 <xQueueGenericSend+0x200>)
 800a38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a3bc:	f002 f856 	bl	800c46c <vPortExitCritical>
				return pdPASS;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e063      	b.n	800a48c <xQueueGenericSend+0x1f8>
=======
 800a398:	f002 f858 	bl	800c44c <vPortExitCritical>
				return pdPASS;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e063      	b.n	800a468 <xQueueGenericSend+0x1f8>
>>>>>>> origin/main
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d103      	bne.n	800a3d2 <xQueueGenericSend+0x13e>
=======
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d103      	bne.n	800a3ae <xQueueGenericSend+0x13e>
>>>>>>> origin/main
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a3ca:	f002 f84f 	bl	800c46c <vPortExitCritical>
=======
 800a3a6:	f002 f851 	bl	800c44c <vPortExitCritical>
>>>>>>> origin/main

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e05c      	b.n	800a48c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d106      	bne.n	800a3e6 <xQueueGenericSend+0x152>
=======
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e05c      	b.n	800a468 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <xQueueGenericSend+0x152>
>>>>>>> origin/main
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a3d8:	f107 0314 	add.w	r3, r7, #20
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f001 f945 	bl	800b66c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 800a3b4:	f107 0314 	add.w	r3, r7, #20
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f001 f945 	bl	800b648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> origin/main
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a3e6:	f002 f841 	bl	800c46c <vPortExitCritical>
=======
 800a3c2:	f002 f843 	bl	800c44c <vPortExitCritical>
>>>>>>> origin/main

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a3ea:	f000 fe9b 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ee:	f002 f80b 	bl	800c408 <vPortEnterCritical>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3f8:	b25b      	sxtb	r3, r3
 800a3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fe:	d103      	bne.n	800a408 <xQueueGenericSend+0x174>
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a40e:	b25b      	sxtb	r3, r3
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a414:	d103      	bne.n	800a41e <xQueueGenericSend+0x18a>
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a41e:	f002 f825 	bl	800c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a422:	1d3a      	adds	r2, r7, #4
 800a424:	f107 0314 	add.w	r3, r7, #20
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f001 f934 	bl	800b698 <xTaskCheckForTimeOut>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d124      	bne.n	800a480 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a438:	f000 faa6 	bl	800a988 <prvIsQueueFull>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d018      	beq.n	800a474 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	3310      	adds	r3, #16
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f001 f858 	bl	800b500 <vTaskPlaceOnEventList>
=======
 800a3c6:	f000 fe9b 	bl	800b100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ca:	f002 f80d 	bl	800c3e8 <vPortEnterCritical>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3d4:	b25b      	sxtb	r3, r3
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3da:	d103      	bne.n	800a3e4 <xQueueGenericSend+0x174>
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ea:	b25b      	sxtb	r3, r3
 800a3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f0:	d103      	bne.n	800a3fa <xQueueGenericSend+0x18a>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3fa:	f002 f827 	bl	800c44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3fe:	1d3a      	adds	r2, r7, #4
 800a400:	f107 0314 	add.w	r3, r7, #20
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f001 f934 	bl	800b674 <xTaskCheckForTimeOut>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d124      	bne.n	800a45c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a414:	f000 faa6 	bl	800a964 <prvIsQueueFull>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d018      	beq.n	800a450 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	3310      	adds	r3, #16
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f001 f858 	bl	800b4dc <vTaskPlaceOnEventList>
>>>>>>> origin/main
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a452:	f000 fa31 	bl	800a8b8 <prvUnlockQueue>
=======
 800a42c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a42e:	f000 fa31 	bl	800a894 <prvUnlockQueue>
>>>>>>> origin/main
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 800a456:	f000 fe73 	bl	800b140 <xTaskResumeAll>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f47f af7c 	bne.w	800a35a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a462:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <xQueueGenericSend+0x200>)
 800a464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	e772      	b.n	800a35a <xQueueGenericSend+0xc6>
=======
 800a432:	f000 fe73 	bl	800b11c <xTaskResumeAll>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f47f af7c 	bne.w	800a336 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a43e:	4b0c      	ldr	r3, [pc, #48]	@ (800a470 <xQueueGenericSend+0x200>)
 800a440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a444:	601a      	str	r2, [r3, #0]
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	e772      	b.n	800a336 <xQueueGenericSend+0xc6>
>>>>>>> origin/main
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a476:	f000 fa1f 	bl	800a8b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a47a:	f000 fe61 	bl	800b140 <xTaskResumeAll>
 800a47e:	e76c      	b.n	800a35a <xQueueGenericSend+0xc6>
=======
 800a450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a452:	f000 fa1f 	bl	800a894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a456:	f000 fe61 	bl	800b11c <xTaskResumeAll>
 800a45a:	e76c      	b.n	800a336 <xQueueGenericSend+0xc6>
>>>>>>> origin/main
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a482:	f000 fa19 	bl	800a8b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a486:	f000 fe5b 	bl	800b140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a48a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3738      	adds	r7, #56	@ 0x38
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	e000ed04 	.word	0xe000ed04

0800a498 <xQueueGenericSendFromISR>:
=======
 800a45c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a45e:	f000 fa19 	bl	800a894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a462:	f000 fe5b 	bl	800b11c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3738      	adds	r7, #56	@ 0x38
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <xQueueGenericSendFromISR>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 800a498:	b580      	push	{r7, lr}
 800a49a:	b090      	sub	sp, #64	@ 0x40
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <xQueueGenericSendFromISR+0x3e>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <xQueueGenericSendFromISR+0x42>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <xQueueGenericSendFromISR+0x44>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10b      	bne.n	800a4f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d103      	bne.n	800a506 <xQueueGenericSendFromISR+0x6e>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <xQueueGenericSendFromISR+0x72>
 800a506:	2301      	movs	r3, #1
 800a508:	e000      	b.n	800a50c <xQueueGenericSendFromISR+0x74>
 800a50a:	2300      	movs	r3, #0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10b      	bne.n	800a528 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	623b      	str	r3, [r7, #32]
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	e7fd      	b.n	800a524 <xQueueGenericSendFromISR+0x8c>
=======
 800a474:	b580      	push	{r7, lr}
 800a476:	b090      	sub	sp, #64	@ 0x40
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10b      	bne.n	800a4a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <xQueueGenericSendFromISR+0x3e>
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <xQueueGenericSendFromISR+0x42>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <xQueueGenericSendFromISR+0x44>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10b      	bne.n	800a4d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	e7fd      	b.n	800a4d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d103      	bne.n	800a4e2 <xQueueGenericSendFromISR+0x6e>
 800a4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d101      	bne.n	800a4e6 <xQueueGenericSendFromISR+0x72>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xQueueGenericSendFromISR+0x74>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10b      	bne.n	800a504 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	623b      	str	r3, [r7, #32]
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	e7fd      	b.n	800a500 <xQueueGenericSendFromISR+0x8c>
>>>>>>> origin/main
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800a528:	f002 f84e 	bl	800c5c8 <vPortValidateInterruptPriority>
=======
 800a504:	f002 f850 	bl	800c5a8 <vPortValidateInterruptPriority>
>>>>>>> origin/main

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800a52c:	f3ef 8211 	mrs	r2, BASEPRI
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	61fa      	str	r2, [r7, #28]
 800a542:	61bb      	str	r3, [r7, #24]
=======
 800a508:	f3ef 8211 	mrs	r2, BASEPRI
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	61fa      	str	r2, [r7, #28]
 800a51e:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 800a544:	69fb      	ldr	r3, [r7, #28]
=======
 800a520:	69fb      	ldr	r3, [r7, #28]
>>>>>>> origin/main
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a550:	429a      	cmp	r2, r3
 800a552:	d302      	bcc.n	800a55a <xQueueGenericSendFromISR+0xc2>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d12f      	bne.n	800a5ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a560:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a568:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800a522:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d302      	bcc.n	800a536 <xQueueGenericSendFromISR+0xc2>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d12f      	bne.n	800a596 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a538:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a53c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a544:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> origin/main
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a570:	f000 f912 	bl	800a798 <prvCopyDataToQueue>
=======
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	68b9      	ldr	r1, [r7, #8]
 800a54a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a54c:	f000 f912 	bl	800a774 <prvCopyDataToQueue>
>>>>>>> origin/main

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 800a574:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d112      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x10c>
=======
 800a550:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d112      	bne.n	800a580 <xQueueGenericSendFromISR+0x10c>
>>>>>>> origin/main
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	2b00      	cmp	r3, #0
 800a584:	d016      	beq.n	800a5b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	3324      	adds	r3, #36	@ 0x24
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 f80a 	bl	800b5a4 <xTaskRemoveFromEventList>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00e      	beq.n	800a5b4 <xQueueGenericSendFromISR+0x11c>
=======
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d016      	beq.n	800a590 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	3324      	adds	r3, #36	@ 0x24
 800a566:	4618      	mov	r0, r3
 800a568:	f001 f80a 	bl	800b580 <xTaskRemoveFromEventList>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00e      	beq.n	800a590 <xQueueGenericSendFromISR+0x11c>
>>>>>>> origin/main
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	e007      	b.n	800a5b4 <xQueueGenericSendFromISR+0x11c>
=======
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e007      	b.n	800a590 <xQueueGenericSendFromISR+0x11c>
>>>>>>> origin/main
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 800a5a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	b25a      	sxtb	r2, r3
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5b8:	e001      	b.n	800a5be <xQueueGenericSendFromISR+0x126>
=======
 800a580:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a584:	3301      	adds	r3, #1
 800a586:	b2db      	uxtb	r3, r3
 800a588:	b25a      	sxtb	r2, r3
 800a58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a590:	2301      	movs	r3, #1
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a594:	e001      	b.n	800a59a <xQueueGenericSendFromISR+0x126>
>>>>>>> origin/main
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c0:	617b      	str	r3, [r7, #20]
=======
 800a596:	2300      	movs	r3, #0
 800a598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59c:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f383 8811 	msr	BASEPRI, r3
=======
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f383 8811 	msr	BASEPRI, r3
>>>>>>> origin/main
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 800a5c8:	bf00      	nop
=======
 800a5a4:	bf00      	nop
>>>>>>> origin/main
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800a5ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3740      	adds	r7, #64	@ 0x40
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <xQueueReceive>:
=======
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3740      	adds	r7, #64	@ 0x40
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <xQueueReceive>:
>>>>>>> origin/main
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08c      	sub	sp, #48	@ 0x30
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10b      	bne.n	800a606 <xQueueReceive+0x32>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	623b      	str	r3, [r7, #32]
}
 800a600:	bf00      	nop
 800a602:	bf00      	nop
 800a604:	e7fd      	b.n	800a602 <xQueueReceive+0x2e>
=======
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08c      	sub	sp, #48	@ 0x30
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10b      	bne.n	800a5e2 <xQueueReceive+0x32>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	623b      	str	r3, [r7, #32]
}
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	e7fd      	b.n	800a5de <xQueueReceive+0x2e>
>>>>>>> origin/main

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <xQueueReceive+0x40>
 800a60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <xQueueReceive+0x44>
 800a614:	2301      	movs	r3, #1
 800a616:	e000      	b.n	800a61a <xQueueReceive+0x46>
 800a618:	2300      	movs	r3, #0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10b      	bne.n	800a636 <xQueueReceive+0x62>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	61fb      	str	r3, [r7, #28]
}
 800a630:	bf00      	nop
 800a632:	bf00      	nop
 800a634:	e7fd      	b.n	800a632 <xQueueReceive+0x5e>
=======
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <xQueueReceive+0x40>
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <xQueueReceive+0x44>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <xQueueReceive+0x46>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xQueueReceive+0x62>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61fb      	str	r3, [r7, #28]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xQueueReceive+0x5e>
>>>>>>> origin/main

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 800a636:	f001 f97b 	bl	800b930 <xTaskGetSchedulerState>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d102      	bne.n	800a646 <xQueueReceive+0x72>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <xQueueReceive+0x76>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <xQueueReceive+0x78>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10b      	bne.n	800a668 <xQueueReceive+0x94>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	61bb      	str	r3, [r7, #24]
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <xQueueReceive+0x90>
=======
 800a612:	f001 f97b 	bl	800b90c <xTaskGetSchedulerState>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d102      	bne.n	800a622 <xQueueReceive+0x72>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <xQueueReceive+0x76>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <xQueueReceive+0x78>
 800a626:	2300      	movs	r3, #0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10b      	bne.n	800a644 <xQueueReceive+0x94>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	61bb      	str	r3, [r7, #24]
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <xQueueReceive+0x90>
>>>>>>> origin/main
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a668:	f001 fece 	bl	800c408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a670:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800a644:	f001 fed0 	bl	800c3e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64c:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> origin/main

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01f      	beq.n	800a6b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a678:	68b9      	ldr	r1, [r7, #8]
 800a67a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a67c:	f000 f8f6 	bl	800a86c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	1e5a      	subs	r2, r3, #1
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01f      	beq.n	800a694 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a658:	f000 f8f6 	bl	800a848 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a662:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> origin/main

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00f      	beq.n	800a6b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a692:	3310      	adds	r3, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f000 ff85 	bl	800b5a4 <xTaskRemoveFromEventList>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d007      	beq.n	800a6b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6a0:	4b3c      	ldr	r3, [pc, #240]	@ (800a794 <xQueueReceive+0x1c0>)
 800a6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	f3bf 8f6f 	isb	sy
=======
 800a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	3310      	adds	r3, #16
 800a670:	4618      	mov	r0, r3
 800a672:	f000 ff85 	bl	800b580 <xTaskRemoveFromEventList>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d007      	beq.n	800a68c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a67c:	4b3c      	ldr	r3, [pc, #240]	@ (800a770 <xQueueReceive+0x1c0>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a6b0:	f001 fedc 	bl	800c46c <vPortExitCritical>
				return pdPASS;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e069      	b.n	800a78c <xQueueReceive+0x1b8>
=======
 800a68c:	f001 fede 	bl	800c44c <vPortExitCritical>
				return pdPASS;
 800a690:	2301      	movs	r3, #1
 800a692:	e069      	b.n	800a768 <xQueueReceive+0x1b8>
>>>>>>> origin/main
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d103      	bne.n	800a6c6 <xQueueReceive+0xf2>
=======
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d103      	bne.n	800a6a2 <xQueueReceive+0xf2>
>>>>>>> origin/main
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a6be:	f001 fed5 	bl	800c46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e062      	b.n	800a78c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <xQueueReceive+0x106>
=======
 800a69a:	f001 fed7 	bl	800c44c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e062      	b.n	800a768 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <xQueueReceive+0x106>
>>>>>>> origin/main
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a6cc:	f107 0310 	add.w	r3, r7, #16
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 ffcb 	bl	800b66c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800a6a8:	f107 0310 	add.w	r3, r7, #16
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 ffcb 	bl	800b648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> origin/main
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a6da:	f001 fec7 	bl	800c46c <vPortExitCritical>
=======
 800a6b6:	f001 fec9 	bl	800c44c <vPortExitCritical>
>>>>>>> origin/main

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a6de:	f000 fd21 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e2:	f001 fe91 	bl	800c408 <vPortEnterCritical>
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6ec:	b25b      	sxtb	r3, r3
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d103      	bne.n	800a6fc <xQueueReceive+0x128>
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a702:	b25b      	sxtb	r3, r3
 800a704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a708:	d103      	bne.n	800a712 <xQueueReceive+0x13e>
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a712:	f001 feab 	bl	800c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a716:	1d3a      	adds	r2, r7, #4
 800a718:	f107 0310 	add.w	r3, r7, #16
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 ffba 	bl	800b698 <xTaskCheckForTimeOut>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d123      	bne.n	800a772 <xQueueReceive+0x19e>
=======
 800a6ba:	f000 fd21 	bl	800b100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6be:	f001 fe93 	bl	800c3e8 <vPortEnterCritical>
 800a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6c8:	b25b      	sxtb	r3, r3
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d103      	bne.n	800a6d8 <xQueueReceive+0x128>
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6de:	b25b      	sxtb	r3, r3
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d103      	bne.n	800a6ee <xQueueReceive+0x13e>
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6ee:	f001 fead 	bl	800c44c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f2:	1d3a      	adds	r2, r7, #4
 800a6f4:	f107 0310 	add.w	r3, r7, #16
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 ffba 	bl	800b674 <xTaskCheckForTimeOut>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d123      	bne.n	800a74e <xQueueReceive+0x19e>
>>>>>>> origin/main
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a72a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a72c:	f000 f916 	bl	800a95c <prvIsQueueEmpty>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d017      	beq.n	800a766 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a738:	3324      	adds	r3, #36	@ 0x24
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	4611      	mov	r1, r2
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fede 	bl	800b500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a746:	f000 f8b7 	bl	800a8b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a74a:	f000 fcf9 	bl	800b140 <xTaskResumeAll>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d189      	bne.n	800a668 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a754:	4b0f      	ldr	r3, [pc, #60]	@ (800a794 <xQueueReceive+0x1c0>)
 800a756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	e780      	b.n	800a668 <xQueueReceive+0x94>
=======
 800a706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a708:	f000 f916 	bl	800a938 <prvIsQueueEmpty>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d017      	beq.n	800a742 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	3324      	adds	r3, #36	@ 0x24
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fede 	bl	800b4dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a722:	f000 f8b7 	bl	800a894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a726:	f000 fcf9 	bl	800b11c <xTaskResumeAll>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d189      	bne.n	800a644 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a730:	4b0f      	ldr	r3, [pc, #60]	@ (800a770 <xQueueReceive+0x1c0>)
 800a732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	e780      	b.n	800a644 <xQueueReceive+0x94>
>>>>>>> origin/main
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a768:	f000 f8a6 	bl	800a8b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a76c:	f000 fce8 	bl	800b140 <xTaskResumeAll>
 800a770:	e77a      	b.n	800a668 <xQueueReceive+0x94>
=======
 800a742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a744:	f000 f8a6 	bl	800a894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a748:	f000 fce8 	bl	800b11c <xTaskResumeAll>
 800a74c:	e77a      	b.n	800a644 <xQueueReceive+0x94>
>>>>>>> origin/main
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a774:	f000 f8a0 	bl	800a8b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a778:	f000 fce2 	bl	800b140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a77c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a77e:	f000 f8ed 	bl	800a95c <prvIsQueueEmpty>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	f43f af6f 	beq.w	800a668 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a78a:	2300      	movs	r3, #0
=======
 800a74e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a750:	f000 f8a0 	bl	800a894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a754:	f000 fce2 	bl	800b11c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a75a:	f000 f8ed 	bl	800a938 <prvIsQueueEmpty>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	f43f af6f 	beq.w	800a644 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a766:	2300      	movs	r3, #0
>>>>>>> origin/main
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800a78c:	4618      	mov	r0, r3
 800a78e:	3730      	adds	r7, #48	@ 0x30
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <prvCopyDataToQueue>:
=======
 800a768:	4618      	mov	r0, r3
 800a76a:	3730      	adds	r7, #48	@ 0x30
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <prvCopyDataToQueue>:
>>>>>>> origin/main

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
=======
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10d      	bne.n	800a7d2 <prvCopyDataToQueue+0x3a>
=======
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a788:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10d      	bne.n	800a7ae <prvCopyDataToQueue+0x3a>
>>>>>>> origin/main
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d14d      	bne.n	800a85a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 f8d2 	bl	800b96c <xTaskPriorityDisinherit>
 800a7c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	609a      	str	r2, [r3, #8]
 800a7d0:	e043      	b.n	800a85a <prvCopyDataToQueue+0xc2>
=======
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d14d      	bne.n	800a836 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 f8d2 	bl	800b948 <xTaskPriorityDisinherit>
 800a7a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	609a      	str	r2, [r3, #8]
 800a7ac:	e043      	b.n	800a836 <prvCopyDataToQueue+0xc2>
>>>>>>> origin/main
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d119      	bne.n	800a80c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6858      	ldr	r0, [r3, #4]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	f002 f9b2 	bl	800cb4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f0:	441a      	add	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	685a      	ldr	r2, [r3, #4]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d32b      	bcc.n	800a85a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	605a      	str	r2, [r3, #4]
 800a80a:	e026      	b.n	800a85a <prvCopyDataToQueue+0xc2>
=======
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d119      	bne.n	800a7e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6858      	ldr	r0, [r3, #4]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7bc:	461a      	mov	r2, r3
 800a7be:	68b9      	ldr	r1, [r7, #8]
 800a7c0:	f002 f9b4 	bl	800cb2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7cc:	441a      	add	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d32b      	bcc.n	800a836 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	605a      	str	r2, [r3, #4]
 800a7e6:	e026      	b.n	800a836 <prvCopyDataToQueue+0xc2>
>>>>>>> origin/main
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	68d8      	ldr	r0, [r3, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a814:	461a      	mov	r2, r3
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	f002 f998 	bl	800cb4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a824:	425b      	negs	r3, r3
 800a826:	441a      	add	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68da      	ldr	r2, [r3, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	429a      	cmp	r2, r3
 800a836:	d207      	bcs.n	800a848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	689a      	ldr	r2, [r3, #8]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a840:	425b      	negs	r3, r3
 800a842:	441a      	add	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	60da      	str	r2, [r3, #12]
=======
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	68d8      	ldr	r0, [r3, #12]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	f002 f99a 	bl	800cb2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	68da      	ldr	r2, [r3, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a800:	425b      	negs	r3, r3
 800a802:	441a      	add	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d207      	bcs.n	800a824 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81c:	425b      	negs	r3, r3
 800a81e:	441a      	add	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d105      	bne.n	800a85a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <prvCopyDataToQueue+0xc2>
=======
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d105      	bne.n	800a836 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <prvCopyDataToQueue+0xc2>
>>>>>>> origin/main
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	3b01      	subs	r3, #1
 800a858:	613b      	str	r3, [r7, #16]
=======
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	3b01      	subs	r3, #1
 800a834:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a862:	697b      	ldr	r3, [r7, #20]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <prvCopyDataFromQueue>:
=======
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a83e:	697b      	ldr	r3, [r7, #20]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <prvCopyDataFromQueue>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d018      	beq.n	800a8b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	441a      	add	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68da      	ldr	r2, [r3, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	429a      	cmp	r2, r3
 800a896:	d303      	bcc.n	800a8a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60da      	str	r2, [r3, #12]
=======
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d018      	beq.n	800a88c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a862:	441a      	add	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	d303      	bcc.n	800a87c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68d9      	ldr	r1, [r3, #12]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6838      	ldr	r0, [r7, #0]
 800a8ac:	f002 f94e 	bl	800cb4c <memcpy>
	}
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <prvUnlockQueue>:
=======
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68d9      	ldr	r1, [r3, #12]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a884:	461a      	mov	r2, r3
 800a886:	6838      	ldr	r0, [r7, #0]
 800a888:	f002 f950 	bl	800cb2c <memcpy>
	}
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <prvUnlockQueue>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
=======
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800a8c0:	f001 fda2 	bl	800c408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8cc:	e011      	b.n	800a8f2 <prvUnlockQueue+0x3a>
=======
 800a89c:	f001 fda4 	bl	800c3e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8a8:	e011      	b.n	800a8ce <prvUnlockQueue+0x3a>
>>>>>>> origin/main
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d012      	beq.n	800a8fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3324      	adds	r3, #36	@ 0x24
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fe62 	bl	800b5a4 <xTaskRemoveFromEventList>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <prvUnlockQueue+0x32>
=======
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d012      	beq.n	800a8d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3324      	adds	r3, #36	@ 0x24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fe62 	bl	800b580 <xTaskRemoveFromEventList>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <prvUnlockQueue+0x32>
>>>>>>> origin/main
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 800a8e6:	f000 ff3b 	bl	800b760 <vTaskMissedYield>
=======
 800a8c2:	f000 ff3b 	bl	800b73c <vTaskMissedYield>
>>>>>>> origin/main
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dce9      	bgt.n	800a8ce <prvUnlockQueue+0x16>
 800a8fa:	e000      	b.n	800a8fe <prvUnlockQueue+0x46>
					break;
 800a8fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	22ff      	movs	r2, #255	@ 0xff
 800a902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a906:	f001 fdb1 	bl	800c46c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a90a:	f001 fd7d 	bl	800c408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a916:	e011      	b.n	800a93c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d012      	beq.n	800a946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3310      	adds	r3, #16
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fe3d 	bl	800b5a4 <xTaskRemoveFromEventList>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a930:	f000 ff16 	bl	800b760 <vTaskMissedYield>
=======
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dce9      	bgt.n	800a8aa <prvUnlockQueue+0x16>
 800a8d6:	e000      	b.n	800a8da <prvUnlockQueue+0x46>
					break;
 800a8d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	22ff      	movs	r2, #255	@ 0xff
 800a8de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a8e2:	f001 fdb3 	bl	800c44c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8e6:	f001 fd7f 	bl	800c3e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8f2:	e011      	b.n	800a918 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d012      	beq.n	800a922 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3310      	adds	r3, #16
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fe3d 	bl	800b580 <xTaskRemoveFromEventList>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a90c:	f000 ff16 	bl	800b73c <vTaskMissedYield>
>>>>>>> origin/main
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	3b01      	subs	r3, #1
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a93c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a940:	2b00      	cmp	r3, #0
 800a942:	dce9      	bgt.n	800a918 <prvUnlockQueue+0x60>
 800a944:	e000      	b.n	800a948 <prvUnlockQueue+0x90>
=======
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	3b01      	subs	r3, #1
 800a914:	b2db      	uxtb	r3, r3
 800a916:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dce9      	bgt.n	800a8f4 <prvUnlockQueue+0x60>
 800a920:	e000      	b.n	800a924 <prvUnlockQueue+0x90>
>>>>>>> origin/main
			}
			else
			{
				break;
<<<<<<< HEAD
 800a946:	bf00      	nop
=======
 800a922:	bf00      	nop
>>>>>>> origin/main
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	22ff      	movs	r2, #255	@ 0xff
 800a94c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a950:	f001 fd8c 	bl	800c46c <vPortExitCritical>
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <prvIsQueueEmpty>:
=======
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	22ff      	movs	r2, #255	@ 0xff
 800a928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a92c:	f001 fd8e 	bl	800c44c <vPortExitCritical>
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a940:	f001 fd52 	bl	800c3e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a94c:	2301      	movs	r3, #1
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	e001      	b.n	800a956 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a956:	f001 fd79 	bl	800c44c <vPortExitCritical>

	return xReturn;
 800a95a:	68fb      	ldr	r3, [r7, #12]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
 800a964:	f001 fd50 	bl	800c408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	e001      	b.n	800a97a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a976:	2300      	movs	r3, #0
 800a978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a97a:	f001 fd77 	bl	800c46c <vPortExitCritical>

	return xReturn;
 800a97e:	68fb      	ldr	r3, [r7, #12]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a990:	f001 fd3a 	bl	800c408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d102      	bne.n	800a9a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e001      	b.n	800a9aa <prvIsQueueFull+0x22>
=======
 800a96c:	f001 fd3c 	bl	800c3e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a978:	429a      	cmp	r2, r3
 800a97a:	d102      	bne.n	800a982 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a97c:	2301      	movs	r3, #1
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e001      	b.n	800a986 <prvIsQueueFull+0x22>
>>>>>>> origin/main
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9aa:	f001 fd5f 	bl	800c46c <vPortExitCritical>

	return xReturn;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <vQueueAddToRegistry>:
=======
 800a982:	2300      	movs	r3, #0
 800a984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a986:	f001 fd61 	bl	800c44c <vPortExitCritical>

	return xReturn;
 800a98a:	68fb      	ldr	r3, [r7, #12]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <vQueueAddToRegistry>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
=======
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	e014      	b.n	800a9f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9c8:	4a0f      	ldr	r2, [pc, #60]	@ (800aa08 <vQueueAddToRegistry+0x50>)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10b      	bne.n	800a9ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9d4:	490c      	ldr	r1, [pc, #48]	@ (800aa08 <vQueueAddToRegistry+0x50>)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9de:	4a0a      	ldr	r2, [pc, #40]	@ (800aa08 <vQueueAddToRegistry+0x50>)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9ea:	e006      	b.n	800a9fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b07      	cmp	r3, #7
 800a9f6:	d9e7      	bls.n	800a9c8 <vQueueAddToRegistry+0x10>
=======
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	e014      	b.n	800a9ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a9e4 <vQueueAddToRegistry+0x50>)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10b      	bne.n	800a9c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9b0:	490c      	ldr	r1, [pc, #48]	@ (800a9e4 <vQueueAddToRegistry+0x50>)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a9e4 <vQueueAddToRegistry+0x50>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	4413      	add	r3, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9c6:	e006      	b.n	800a9d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	d9e7      	bls.n	800a9a4 <vQueueAddToRegistry+0x10>
>>>>>>> origin/main
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	20001158 	.word	0x20001158

0800aa0c <vQueueWaitForMessageRestricted>:
=======
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20001194 	.word	0x20001194

0800a9e8 <vQueueWaitForMessageRestricted>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	617b      	str	r3, [r7, #20]
=======
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 800aa1c:	f001 fcf4 	bl	800c408 <vPortEnterCritical>
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d103      	bne.n	800aa36 <vQueueWaitForMessageRestricted+0x2a>
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa3c:	b25b      	sxtb	r3, r3
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d103      	bne.n	800aa4c <vQueueWaitForMessageRestricted+0x40>
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa4c:	f001 fd0e 	bl	800c46c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d106      	bne.n	800aa66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	3324      	adds	r3, #36	@ 0x24
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	68b9      	ldr	r1, [r7, #8]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 fd73 	bl	800b54c <vTaskPlaceOnEventListRestricted>
=======
 800a9f8:	f001 fcf6 	bl	800c3e8 <vPortEnterCritical>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <vQueueWaitForMessageRestricted+0x2a>
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d103      	bne.n	800aa28 <vQueueWaitForMessageRestricted+0x40>
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa28:	f001 fd10 	bl	800c44c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3324      	adds	r3, #36	@ 0x24
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fd73 	bl	800b528 <vTaskPlaceOnEventListRestricted>
>>>>>>> origin/main
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800aa66:	6978      	ldr	r0, [r7, #20]
 800aa68:	f7ff ff26 	bl	800a8b8 <prvUnlockQueue>
	}
 800aa6c:	bf00      	nop
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <xTaskCreateStatic>:
=======
 800aa42:	6978      	ldr	r0, [r7, #20]
 800aa44:	f7ff ff26 	bl	800a894 <prvUnlockQueue>
	}
 800aa48:	bf00      	nop
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <xTaskCreateStatic>:
>>>>>>> origin/main
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b08e      	sub	sp, #56	@ 0x38
 800aa78:	af04      	add	r7, sp, #16
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
=======
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08e      	sub	sp, #56	@ 0x38
 800aa54:	af04      	add	r7, sp, #16
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
>>>>>>> origin/main
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 800aa82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	623b      	str	r3, [r7, #32]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10b      	bne.n	800aabe <xTaskCreateStatic+0x4a>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	61fb      	str	r3, [r7, #28]
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	e7fd      	b.n	800aaba <xTaskCreateStatic+0x46>
=======
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10b      	bne.n	800aa7c <xTaskCreateStatic+0x2c>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	623b      	str	r3, [r7, #32]
}
 800aa76:	bf00      	nop
 800aa78:	bf00      	nop
 800aa7a:	e7fd      	b.n	800aa78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <xTaskCreateStatic+0x4a>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	61fb      	str	r3, [r7, #28]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <xTaskCreateStatic+0x46>
>>>>>>> origin/main
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 800aabe:	23a8      	movs	r3, #168	@ 0xa8
 800aac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2ba8      	cmp	r3, #168	@ 0xa8
 800aac6:	d00b      	beq.n	800aae0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	61bb      	str	r3, [r7, #24]
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aae0:	693b      	ldr	r3, [r7, #16]
=======
 800aa9a:	23a8      	movs	r3, #168	@ 0xa8
 800aa9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	2ba8      	cmp	r3, #168	@ 0xa8
 800aaa2:	d00b      	beq.n	800aabc <xTaskCreateStatic+0x6c>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	61bb      	str	r3, [r7, #24]
}
 800aab6:	bf00      	nop
 800aab8:	bf00      	nop
 800aaba:	e7fd      	b.n	800aab8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aabc:	693b      	ldr	r3, [r7, #16]
>>>>>>> origin/main
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d01e      	beq.n	800ab26 <xTaskCreateStatic+0xb2>
 800aae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d01b      	beq.n	800ab26 <xTaskCreateStatic+0xb2>
=======
 800aabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01e      	beq.n	800ab02 <xTaskCreateStatic+0xb2>
 800aac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01b      	beq.n	800ab02 <xTaskCreateStatic+0xb2>
>>>>>>> origin/main
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aaf6:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 800aaca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aacc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aad2:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> origin/main

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 800aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> origin/main
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 800ab00:	2300      	movs	r3, #0
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	9302      	str	r3, [sp, #8]
 800ab08:	f107 0314 	add.w	r3, r7, #20
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f851 	bl	800abc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab20:	f000 f8f6 	bl	800ad10 <prvAddNewTaskToReadyList>
 800ab24:	e001      	b.n	800ab2a <xTaskCreateStatic+0xb6>
=======
 800aadc:	2300      	movs	r3, #0
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	f107 0314 	add.w	r3, r7, #20
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	68b9      	ldr	r1, [r7, #8]
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 f851 	bl	800ab9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aafa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aafc:	f000 f8f6 	bl	800acec <prvAddNewTaskToReadyList>
 800ab00:	e001      	b.n	800ab06 <xTaskCreateStatic+0xb6>
>>>>>>> origin/main
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab2a:	697b      	ldr	r3, [r7, #20]
	}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3728      	adds	r7, #40	@ 0x28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <xTaskCreate>:
=======
 800ab02:	2300      	movs	r3, #0
 800ab04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab06:	697b      	ldr	r3, [r7, #20]
	}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3728      	adds	r7, #40	@ 0x28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <xTaskCreate>:
>>>>>>> origin/main
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08c      	sub	sp, #48	@ 0x30
 800ab38:	af04      	add	r7, sp, #16
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	4613      	mov	r3, r2
 800ab42:	80fb      	strh	r3, [r7, #6]
=======
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08c      	sub	sp, #48	@ 0x30
 800ab14:	af04      	add	r7, sp, #16
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	80fb      	strh	r3, [r7, #6]
>>>>>>> origin/main
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 800ab44:	88fb      	ldrh	r3, [r7, #6]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fd7f 	bl	800c64c <pvPortMalloc>
 800ab4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00e      	beq.n	800ab74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab56:	20a8      	movs	r0, #168	@ 0xa8
 800ab58:	f001 fd78 	bl	800c64c <pvPortMalloc>
 800ab5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab6a:	e005      	b.n	800ab78 <xTaskCreate+0x44>
=======
 800ab20:	88fb      	ldrh	r3, [r7, #6]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 fd81 	bl	800c62c <pvPortMalloc>
 800ab2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00e      	beq.n	800ab50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab32:	20a8      	movs	r0, #168	@ 0xa8
 800ab34:	f001 fd7a 	bl	800c62c <pvPortMalloc>
 800ab38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab46:	e005      	b.n	800ab54 <xTaskCreate+0x44>
>>>>>>> origin/main
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800ab6c:	6978      	ldr	r0, [r7, #20]
 800ab6e:	f001 fe3b 	bl	800c7e8 <vPortFree>
 800ab72:	e001      	b.n	800ab78 <xTaskCreate+0x44>
=======
 800ab48:	6978      	ldr	r0, [r7, #20]
 800ab4a:	f001 fe3d 	bl	800c7c8 <vPortFree>
 800ab4e:	e001      	b.n	800ab54 <xTaskCreate+0x44>
>>>>>>> origin/main
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 800ab74:	2300      	movs	r3, #0
 800ab76:	61fb      	str	r3, [r7, #28]
=======
 800ab50:	2300      	movs	r3, #0
 800ab52:	61fb      	str	r3, [r7, #28]
>>>>>>> origin/main
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d017      	beq.n	800abae <xTaskCreate+0x7a>
=======
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d017      	beq.n	800ab8a <xTaskCreate+0x7a>
>>>>>>> origin/main
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> origin/main
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 800ab86:	88fa      	ldrh	r2, [r7, #6]
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	9302      	str	r3, [sp, #8]
 800ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 f80f 	bl	800abc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aba2:	69f8      	ldr	r0, [r7, #28]
 800aba4:	f000 f8b4 	bl	800ad10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	61bb      	str	r3, [r7, #24]
 800abac:	e002      	b.n	800abb4 <xTaskCreate+0x80>
=======
 800ab62:	88fa      	ldrh	r2, [r7, #6]
 800ab64:	2300      	movs	r3, #0
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	9302      	str	r3, [sp, #8]
 800ab6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f000 f80f 	bl	800ab9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab7e:	69f8      	ldr	r0, [r7, #28]
 800ab80:	f000 f8b4 	bl	800acec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab84:	2301      	movs	r3, #1
 800ab86:	61bb      	str	r3, [r7, #24]
 800ab88:	e002      	b.n	800ab90 <xTaskCreate+0x80>
>>>>>>> origin/main
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800abae:	f04f 33ff 	mov.w	r3, #4294967295
 800abb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abb4:	69bb      	ldr	r3, [r7, #24]
	}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3720      	adds	r7, #32
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <prvInitialiseNewTask>:
=======
 800ab8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab90:	69bb      	ldr	r3, [r7, #24]
	}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
	...

0800ab9c <prvInitialiseNewTask>:
>>>>>>> origin/main
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
=======
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	603b      	str	r3, [r7, #0]
>>>>>>> origin/main

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	461a      	mov	r2, r3
 800abd8:	21a5      	movs	r1, #165	@ 0xa5
 800abda:	f001 ff25 	bl	800ca28 <memset>
=======
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	461a      	mov	r2, r3
 800abb4:	21a5      	movs	r1, #165	@ 0xa5
 800abb6:	f001 ff27 	bl	800ca08 <memset>
>>>>>>> origin/main
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 800abde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abe8:	3b01      	subs	r3, #1
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f023 0307 	bic.w	r3, r3, #7
 800abf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	f003 0307 	and.w	r3, r3, #7
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	617b      	str	r3, [r7, #20]
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	e7fd      	b.n	800ac16 <prvInitialiseNewTask+0x56>
=======
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abc4:	3b01      	subs	r3, #1
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	f023 0307 	bic.w	r3, r3, #7
 800abd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	f003 0307 	and.w	r3, r3, #7
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00b      	beq.n	800abf6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	617b      	str	r3, [r7, #20]
}
 800abf0:	bf00      	nop
 800abf2:	bf00      	nop
 800abf4:	e7fd      	b.n	800abf2 <prvInitialiseNewTask+0x56>
>>>>>>> origin/main
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01f      	beq.n	800ac60 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac20:	2300      	movs	r3, #0
 800ac22:	61fb      	str	r3, [r7, #28]
 800ac24:	e012      	b.n	800ac4c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	7819      	ldrb	r1, [r3, #0]
 800ac2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	4413      	add	r3, r2
 800ac34:	3334      	adds	r3, #52	@ 0x34
 800ac36:	460a      	mov	r2, r1
 800ac38:	701a      	strb	r2, [r3, #0]
=======
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01f      	beq.n	800ac3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]
 800ac00:	e012      	b.n	800ac28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4413      	add	r3, r2
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	4413      	add	r3, r2
 800ac10:	3334      	adds	r3, #52	@ 0x34
 800ac12:	460a      	mov	r2, r1
 800ac14:	701a      	strb	r2, [r3, #0]
>>>>>>> origin/main

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4413      	add	r3, r2
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d006      	beq.n	800ac54 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b0f      	cmp	r3, #15
 800ac50:	d9e9      	bls.n	800ac26 <prvInitialiseNewTask+0x66>
 800ac52:	e000      	b.n	800ac56 <prvInitialiseNewTask+0x96>
			{
				break;
 800ac54:	bf00      	nop
=======
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d006      	beq.n	800ac30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	3301      	adds	r3, #1
 800ac26:	61fb      	str	r3, [r7, #28]
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	2b0f      	cmp	r3, #15
 800ac2c:	d9e9      	bls.n	800ac02 <prvInitialiseNewTask+0x66>
 800ac2e:	e000      	b.n	800ac32 <prvInitialiseNewTask+0x96>
			{
				break;
 800ac30:	bf00      	nop
>>>>>>> origin/main
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac5e:	e003      	b.n	800ac68 <prvInitialiseNewTask+0xa8>
=======
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac3a:	e003      	b.n	800ac44 <prvInitialiseNewTask+0xa8>
>>>>>>> origin/main
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> origin/main
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 800ac68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6a:	2b37      	cmp	r3, #55	@ 0x37
 800ac6c:	d901      	bls.n	800ac72 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac6e:	2337      	movs	r3, #55	@ 0x37
 800ac70:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800ac44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac46:	2b37      	cmp	r3, #55	@ 0x37
 800ac48:	d901      	bls.n	800ac4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac4a:	2337      	movs	r3, #55	@ 0x37
 800ac4c:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> origin/main
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 800ac72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac80:	2200      	movs	r2, #0
 800ac82:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	3304      	adds	r3, #4
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff f965 	bl	8009f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac90:	3318      	adds	r3, #24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff f960 	bl	8009f58 <vListInitialiseItem>
=======
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	3304      	adds	r3, #4
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff f965 	bl	8009f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6c:	3318      	adds	r3, #24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff f960 	bl	8009f34 <vListInitialiseItem>
>>>>>>> origin/main

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acac:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac88:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> origin/main
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800acae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
=======
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
>>>>>>> origin/main
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	3354      	adds	r3, #84	@ 0x54
 800acc2:	224c      	movs	r2, #76	@ 0x4c
 800acc4:	2100      	movs	r1, #0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f001 feae 	bl	800ca28 <memset>
 800accc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acce:	4a0d      	ldr	r2, [pc, #52]	@ (800ad04 <prvInitialiseNewTask+0x144>)
 800acd0:	659a      	str	r2, [r3, #88]	@ 0x58
 800acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd4:	4a0c      	ldr	r2, [pc, #48]	@ (800ad08 <prvInitialiseNewTask+0x148>)
 800acd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	4a0c      	ldr	r2, [pc, #48]	@ (800ad0c <prvInitialiseNewTask+0x14c>)
 800acdc:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	3354      	adds	r3, #84	@ 0x54
 800ac9e:	224c      	movs	r2, #76	@ 0x4c
 800aca0:	2100      	movs	r1, #0
 800aca2:	4618      	mov	r0, r3
 800aca4:	f001 feb0 	bl	800ca08 <memset>
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	4a0d      	ldr	r2, [pc, #52]	@ (800ace0 <prvInitialiseNewTask+0x144>)
 800acac:	659a      	str	r2, [r3, #88]	@ 0x58
 800acae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb0:	4a0c      	ldr	r2, [pc, #48]	@ (800ace4 <prvInitialiseNewTask+0x148>)
 800acb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ace8 <prvInitialiseNewTask+0x14c>)
 800acb8:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> origin/main
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	68f9      	ldr	r1, [r7, #12]
 800ace2:	69b8      	ldr	r0, [r7, #24]
 800ace4:	f001 fa60 	bl	800c1a8 <pxPortInitialiseStack>
 800ace8:	4602      	mov	r2, r0
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	601a      	str	r2, [r3, #0]
=======
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	69b8      	ldr	r0, [r7, #24]
 800acc0:	f001 fa60 	bl	800c184 <pxPortInitialiseStack>
 800acc4:	4602      	mov	r2, r0
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 800acee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <prvInitialiseNewTask+0x13a>
=======
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <prvInitialiseNewTask+0x13a>
>>>>>>> origin/main
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800acf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acf8:	601a      	str	r2, [r3, #0]
=======
 800acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd4:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800acfa:	bf00      	nop
 800acfc:	3720      	adds	r7, #32
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	200023ec 	.word	0x200023ec
 800ad08:	20002454 	.word	0x20002454
 800ad0c:	200024bc 	.word	0x200024bc

0800ad10 <prvAddNewTaskToReadyList>:
=======
 800acd6:	bf00      	nop
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20002428 	.word	0x20002428
 800ace4:	20002490 	.word	0x20002490
 800ace8:	200024f8 	.word	0x200024f8

0800acec <prvAddNewTaskToReadyList>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad18:	f001 fb76 	bl	800c408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad1c:	4b2d      	ldr	r3, [pc, #180]	@ (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3301      	adds	r3, #1
 800ad22:	4a2c      	ldr	r2, [pc, #176]	@ (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad26:	4b2c      	ldr	r3, [pc, #176]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <prvAddNewTaskToReadyList+0x32>
=======
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acf4:	f001 fb78 	bl	800c3e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acf8:	4b2d      	ldr	r3, [pc, #180]	@ (800adb0 <prvAddNewTaskToReadyList+0xc4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3301      	adds	r3, #1
 800acfe:	4a2c      	ldr	r2, [pc, #176]	@ (800adb0 <prvAddNewTaskToReadyList+0xc4>)
 800ad00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad02:	4b2c      	ldr	r3, [pc, #176]	@ (800adb4 <prvAddNewTaskToReadyList+0xc8>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <prvAddNewTaskToReadyList+0x32>
>>>>>>> origin/main
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800ad2e:	4a2a      	ldr	r2, [pc, #168]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad34:	4b27      	ldr	r3, [pc, #156]	@ (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d110      	bne.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
=======
 800ad0a:	4a2a      	ldr	r2, [pc, #168]	@ (800adb4 <prvAddNewTaskToReadyList+0xc8>)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad10:	4b27      	ldr	r3, [pc, #156]	@ (800adb0 <prvAddNewTaskToReadyList+0xc4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d110      	bne.n	800ad3a <prvAddNewTaskToReadyList+0x4e>
>>>>>>> origin/main
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800ad3c:	f000 fd34 	bl	800b7a8 <prvInitialiseTaskLists>
 800ad40:	e00d      	b.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
=======
 800ad18:	f000 fd34 	bl	800b784 <prvInitialiseTaskLists>
 800ad1c:	e00d      	b.n	800ad3a <prvAddNewTaskToReadyList+0x4e>
>>>>>>> origin/main
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800ad42:	4b26      	ldr	r3, [pc, #152]	@ (800addc <prvAddNewTaskToReadyList+0xcc>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d109      	bne.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad4a:	4b23      	ldr	r3, [pc, #140]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d802      	bhi.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad58:	4a1f      	ldr	r2, [pc, #124]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6013      	str	r3, [r2, #0]
=======
 800ad1e:	4b26      	ldr	r3, [pc, #152]	@ (800adb8 <prvAddNewTaskToReadyList+0xcc>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d109      	bne.n	800ad3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad26:	4b23      	ldr	r3, [pc, #140]	@ (800adb4 <prvAddNewTaskToReadyList+0xc8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d802      	bhi.n	800ad3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad34:	4a1f      	ldr	r2, [pc, #124]	@ (800adb4 <prvAddNewTaskToReadyList+0xc8>)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800ad5e:	4b20      	ldr	r3, [pc, #128]	@ (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	4a1e      	ldr	r2, [pc, #120]	@ (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad66:	6013      	str	r3, [r2, #0]
=======
 800ad3a:	4b20      	ldr	r3, [pc, #128]	@ (800adbc <prvAddNewTaskToReadyList+0xd0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	4a1e      	ldr	r2, [pc, #120]	@ (800adbc <prvAddNewTaskToReadyList+0xd0>)
 800ad42:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 800ad68:	4b1d      	ldr	r3, [pc, #116]	@ (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800ad44:	4b1d      	ldr	r3, [pc, #116]	@ (800adbc <prvAddNewTaskToReadyList+0xd0>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> origin/main
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad74:	4b1b      	ldr	r3, [pc, #108]	@ (800ade4 <prvAddNewTaskToReadyList+0xd4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <prvAddNewTaskToReadyList+0x74>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	4a18      	ldr	r2, [pc, #96]	@ (800ade4 <prvAddNewTaskToReadyList+0xd4>)
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a15      	ldr	r2, [pc, #84]	@ (800ade8 <prvAddNewTaskToReadyList+0xd8>)
 800ad92:	441a      	add	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7ff f8e9 	bl	8009f72 <vListInsertEnd>
=======
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad50:	4b1b      	ldr	r3, [pc, #108]	@ (800adc0 <prvAddNewTaskToReadyList+0xd4>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d903      	bls.n	800ad60 <prvAddNewTaskToReadyList+0x74>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	4a18      	ldr	r2, [pc, #96]	@ (800adc0 <prvAddNewTaskToReadyList+0xd4>)
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4a15      	ldr	r2, [pc, #84]	@ (800adc4 <prvAddNewTaskToReadyList+0xd8>)
 800ad6e:	441a      	add	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7ff f8e9 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800ada0:	f001 fb64 	bl	800c46c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ada4:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <prvAddNewTaskToReadyList+0xcc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <prvAddNewTaskToReadyList+0xba>
=======
 800ad7c:	f001 fb66 	bl	800c44c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad80:	4b0d      	ldr	r3, [pc, #52]	@ (800adb8 <prvAddNewTaskToReadyList+0xcc>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00e      	beq.n	800ada6 <prvAddNewTaskToReadyList+0xba>
>>>>>>> origin/main
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800adac:	4b0a      	ldr	r3, [pc, #40]	@ (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d207      	bcs.n	800adca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adba:	4b0c      	ldr	r3, [pc, #48]	@ (800adec <prvAddNewTaskToReadyList+0xdc>)
 800adbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	f3bf 8f6f 	isb	sy
=======
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <prvAddNewTaskToReadyList+0xc8>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d207      	bcs.n	800ada6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad96:	4b0c      	ldr	r3, [pc, #48]	@ (800adc8 <prvAddNewTaskToReadyList+0xdc>)
 800ad98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	2000166c 	.word	0x2000166c
 800add8:	20001198 	.word	0x20001198
 800addc:	20001678 	.word	0x20001678
 800ade0:	20001688 	.word	0x20001688
 800ade4:	20001674 	.word	0x20001674
 800ade8:	2000119c 	.word	0x2000119c
 800adec:	e000ed04 	.word	0xe000ed04

0800adf0 <vTaskDelete>:
=======
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	200016a8 	.word	0x200016a8
 800adb4:	200011d4 	.word	0x200011d4
 800adb8:	200016b4 	.word	0x200016b4
 800adbc:	200016c4 	.word	0x200016c4
 800adc0:	200016b0 	.word	0x200016b0
 800adc4:	200011d8 	.word	0x200011d8
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <vTaskDelete>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
<<<<<<< HEAD
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800adf8:	f001 fb06 	bl	800c408 <vPortEnterCritical>
=======
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800add4:	f001 fb08 	bl	800c3e8 <vPortEnterCritical>
>>>>>>> origin/main
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
<<<<<<< HEAD
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d102      	bne.n	800ae08 <vTaskDelete+0x18>
 800ae02:	4b2d      	ldr	r3, [pc, #180]	@ (800aeb8 <vTaskDelete+0xc8>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	e000      	b.n	800ae0a <vTaskDelete+0x1a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff f90b 	bl	800a02c <uxListRemove>
=======
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <vTaskDelete+0x18>
 800adde:	4b2d      	ldr	r3, [pc, #180]	@ (800ae94 <vTaskDelete+0xc8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	e000      	b.n	800ade6 <vTaskDelete+0x1a>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3304      	adds	r3, #4
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff f90b 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3318      	adds	r3, #24
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff f902 	bl	800a02c <uxListRemove>
=======
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d004      	beq.n	800ae04 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3318      	adds	r3, #24
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff f902 	bl	800a008 <uxListRemove>
>>>>>>> origin/main

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
<<<<<<< HEAD
 800ae28:	4b24      	ldr	r3, [pc, #144]	@ (800aebc <vTaskDelete+0xcc>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	4a23      	ldr	r2, [pc, #140]	@ (800aebc <vTaskDelete+0xcc>)
 800ae30:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ae32:	4b21      	ldr	r3, [pc, #132]	@ (800aeb8 <vTaskDelete+0xc8>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d10b      	bne.n	800ae54 <vTaskDelete+0x64>
=======
 800ae04:	4b24      	ldr	r3, [pc, #144]	@ (800ae98 <vTaskDelete+0xcc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	4a23      	ldr	r2, [pc, #140]	@ (800ae98 <vTaskDelete+0xcc>)
 800ae0c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ae0e:	4b21      	ldr	r3, [pc, #132]	@ (800ae94 <vTaskDelete+0xc8>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d10b      	bne.n	800ae30 <vTaskDelete+0x64>
>>>>>>> origin/main
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	4619      	mov	r1, r3
 800ae42:	481f      	ldr	r0, [pc, #124]	@ (800aec0 <vTaskDelete+0xd0>)
 800ae44:	f7ff f895 	bl	8009f72 <vListInsertEnd>
=======
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	481f      	ldr	r0, [pc, #124]	@ (800ae9c <vTaskDelete+0xd0>)
 800ae20:	f7ff f895 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
<<<<<<< HEAD
 800ae48:	4b1e      	ldr	r3, [pc, #120]	@ (800aec4 <vTaskDelete+0xd4>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	4a1d      	ldr	r2, [pc, #116]	@ (800aec4 <vTaskDelete+0xd4>)
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	e009      	b.n	800ae68 <vTaskDelete+0x78>
=======
 800ae24:	4b1e      	ldr	r3, [pc, #120]	@ (800aea0 <vTaskDelete+0xd4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <vTaskDelete+0xd4>)
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	e009      	b.n	800ae44 <vTaskDelete+0x78>
>>>>>>> origin/main
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
<<<<<<< HEAD
 800ae54:	4b1c      	ldr	r3, [pc, #112]	@ (800aec8 <vTaskDelete+0xd8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	4a1b      	ldr	r2, [pc, #108]	@ (800aec8 <vTaskDelete+0xd8>)
 800ae5c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 fd10 	bl	800b884 <prvDeleteTCB>
=======
 800ae30:	4b1c      	ldr	r3, [pc, #112]	@ (800aea4 <vTaskDelete+0xd8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	4a1b      	ldr	r2, [pc, #108]	@ (800aea4 <vTaskDelete+0xd8>)
 800ae38:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 fd10 	bl	800b860 <prvDeleteTCB>
>>>>>>> origin/main

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800ae64:	f000 fd44 	bl	800b8f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ae68:	f001 fb00 	bl	800c46c <vPortExitCritical>
=======
 800ae40:	f000 fd44 	bl	800b8cc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ae44:	f001 fb02 	bl	800c44c <vPortExitCritical>
>>>>>>> origin/main

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
<<<<<<< HEAD
 800ae6c:	4b17      	ldr	r3, [pc, #92]	@ (800aecc <vTaskDelete+0xdc>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01c      	beq.n	800aeae <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ae74:	4b10      	ldr	r3, [pc, #64]	@ (800aeb8 <vTaskDelete+0xc8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d117      	bne.n	800aeae <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ae7e:	4b14      	ldr	r3, [pc, #80]	@ (800aed0 <vTaskDelete+0xe0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00b      	beq.n	800ae9e <vTaskDelete+0xae>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	60bb      	str	r3, [r7, #8]
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <vTaskDelete+0xe4>)
 800aea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	f3bf 8f6f 	isb	sy
=======
 800ae48:	4b17      	ldr	r3, [pc, #92]	@ (800aea8 <vTaskDelete+0xdc>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d01c      	beq.n	800ae8a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ae50:	4b10      	ldr	r3, [pc, #64]	@ (800ae94 <vTaskDelete+0xc8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d117      	bne.n	800ae8a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ae5a:	4b14      	ldr	r3, [pc, #80]	@ (800aeac <vTaskDelete+0xe0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <vTaskDelete+0xae>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	60bb      	str	r3, [r7, #8]
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	e7fd      	b.n	800ae76 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb0 <vTaskDelete+0xe4>)
 800ae7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20001198 	.word	0x20001198
 800aebc:	20001688 	.word	0x20001688
 800aec0:	20001640 	.word	0x20001640
 800aec4:	20001654 	.word	0x20001654
 800aec8:	2000166c 	.word	0x2000166c
 800aecc:	20001678 	.word	0x20001678
 800aed0:	20001694 	.word	0x20001694
 800aed4:	e000ed04 	.word	0xe000ed04

0800aed8 <vTaskDelayUntil>:
=======
 800ae8a:	bf00      	nop
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200011d4 	.word	0x200011d4
 800ae98:	200016c4 	.word	0x200016c4
 800ae9c:	2000167c 	.word	0x2000167c
 800aea0:	20001690 	.word	0x20001690
 800aea4:	200016a8 	.word	0x200016a8
 800aea8:	200016b4 	.word	0x200016b4
 800aeac:	200016d0 	.word	0x200016d0
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <vTaskDelayUntil>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
<<<<<<< HEAD
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08a      	sub	sp, #40	@ 0x28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10b      	bne.n	800af04 <vTaskDelayUntil+0x2c>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	617b      	str	r3, [r7, #20]
}
 800aefe:	bf00      	nop
 800af00:	bf00      	nop
 800af02:	e7fd      	b.n	800af00 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10b      	bne.n	800af22 <vTaskDelayUntil+0x4a>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	613b      	str	r3, [r7, #16]
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	e7fd      	b.n	800af1e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800af22:	4b2a      	ldr	r3, [pc, #168]	@ (800afcc <vTaskDelayUntil+0xf4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00b      	beq.n	800af42 <vTaskDelayUntil+0x6a>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	60fb      	str	r3, [r7, #12]
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	e7fd      	b.n	800af3e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800af42:	f000 f8ef 	bl	800b124 <vTaskSuspendAll>
=======
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08a      	sub	sp, #40	@ 0x28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10b      	bne.n	800aee0 <vTaskDelayUntil+0x2c>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	617b      	str	r3, [r7, #20]
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	e7fd      	b.n	800aedc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <vTaskDelayUntil+0x4a>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	613b      	str	r3, [r7, #16]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800aefe:	4b2a      	ldr	r3, [pc, #168]	@ (800afa8 <vTaskDelayUntil+0xf4>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00b      	beq.n	800af1e <vTaskDelayUntil+0x6a>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	60fb      	str	r3, [r7, #12]
}
 800af18:	bf00      	nop
 800af1a:	bf00      	nop
 800af1c:	e7fd      	b.n	800af1a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800af1e:	f000 f8ef 	bl	800b100 <vTaskSuspendAll>
>>>>>>> origin/main
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 800af46:	4b22      	ldr	r3, [pc, #136]	@ (800afd0 <vTaskDelayUntil+0xf8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	4413      	add	r3, r2
 800af54:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6a3a      	ldr	r2, [r7, #32]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d20b      	bcs.n	800af78 <vTaskDelayUntil+0xa0>
=======
 800af22:	4b22      	ldr	r3, [pc, #136]	@ (800afac <vTaskDelayUntil+0xf8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	4413      	add	r3, r2
 800af30:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6a3a      	ldr	r2, [r7, #32]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d20b      	bcs.n	800af54 <vTaskDelayUntil+0xa0>
>>>>>>> origin/main
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
<<<<<<< HEAD
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	429a      	cmp	r2, r3
 800af68:	d211      	bcs.n	800af8e <vTaskDelayUntil+0xb6>
 800af6a:	69fa      	ldr	r2, [r7, #28]
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d90d      	bls.n	800af8e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af72:	2301      	movs	r3, #1
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
 800af76:	e00a      	b.n	800af8e <vTaskDelayUntil+0xb6>
=======
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69fa      	ldr	r2, [r7, #28]
 800af42:	429a      	cmp	r2, r3
 800af44:	d211      	bcs.n	800af6a <vTaskDelayUntil+0xb6>
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d90d      	bls.n	800af6a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af4e:	2301      	movs	r3, #1
 800af50:	627b      	str	r3, [r7, #36]	@ 0x24
 800af52:	e00a      	b.n	800af6a <vTaskDelayUntil+0xb6>
>>>>>>> origin/main
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
<<<<<<< HEAD
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	69fa      	ldr	r2, [r7, #28]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d303      	bcc.n	800af8a <vTaskDelayUntil+0xb2>
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	429a      	cmp	r2, r3
 800af88:	d901      	bls.n	800af8e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af8a:	2301      	movs	r3, #1
 800af8c:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	69fa      	ldr	r2, [r7, #28]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d303      	bcc.n	800af66 <vTaskDelayUntil+0xb2>
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	429a      	cmp	r2, r3
 800af64:	d901      	bls.n	800af6a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af66:	2301      	movs	r3, #1
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> origin/main
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
<<<<<<< HEAD
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69fa      	ldr	r2, [r7, #28]
 800af92:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800af94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af96:	2b00      	cmp	r3, #0
 800af98:	d006      	beq.n	800afa8 <vTaskDelayUntil+0xd0>
=======
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800af70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af72:	2b00      	cmp	r3, #0
 800af74:	d006      	beq.n	800af84 <vTaskDelayUntil+0xd0>
>>>>>>> origin/main
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
<<<<<<< HEAD
 800af9a:	69fa      	ldr	r2, [r7, #28]
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	2100      	movs	r1, #0
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fd52 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
=======
 800af76:	69fa      	ldr	r2, [r7, #28]
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2100      	movs	r1, #0
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fd52 	bl	800ba28 <prvAddCurrentTaskToDelayedList>
>>>>>>> origin/main
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
<<<<<<< HEAD
 800afa8:	f000 f8ca 	bl	800b140 <xTaskResumeAll>
 800afac:	61b8      	str	r0, [r7, #24]
=======
 800af84:	f000 f8ca 	bl	800b11c <xTaskResumeAll>
 800af88:	61b8      	str	r0, [r7, #24]
>>>>>>> origin/main

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d107      	bne.n	800afc4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800afb4:	4b07      	ldr	r3, [pc, #28]	@ (800afd4 <vTaskDelayUntil+0xfc>)
 800afb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	f3bf 8f6f 	isb	sy
=======
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d107      	bne.n	800afa0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800af90:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <vTaskDelayUntil+0xfc>)
 800af92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af96:	601a      	str	r2, [r3, #0]
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800afc4:	bf00      	nop
 800afc6:	3728      	adds	r7, #40	@ 0x28
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20001694 	.word	0x20001694
 800afd0:	20001670 	.word	0x20001670
 800afd4:	e000ed04 	.word	0xe000ed04

0800afd8 <vTaskDelay>:
=======
 800afa0:	bf00      	nop
 800afa2:	3728      	adds	r7, #40	@ 0x28
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	200016d0 	.word	0x200016d0
 800afac:	200016ac 	.word	0x200016ac
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <vTaskDelay>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afe0:	2300      	movs	r3, #0
 800afe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d018      	beq.n	800b01c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afea:	4b14      	ldr	r3, [pc, #80]	@ (800b03c <vTaskDelay+0x64>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00b      	beq.n	800b00a <vTaskDelay+0x32>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60bb      	str	r3, [r7, #8]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b00a:	f000 f88b 	bl	800b124 <vTaskSuspendAll>
=======
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d018      	beq.n	800aff8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afc6:	4b14      	ldr	r3, [pc, #80]	@ (800b018 <vTaskDelay+0x64>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00b      	beq.n	800afe6 <vTaskDelay+0x32>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	60bb      	str	r3, [r7, #8]
}
 800afe0:	bf00      	nop
 800afe2:	bf00      	nop
 800afe4:	e7fd      	b.n	800afe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afe6:	f000 f88b 	bl	800b100 <vTaskSuspendAll>
>>>>>>> origin/main
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800b00e:	2100      	movs	r1, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fd1b 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b016:	f000 f893 	bl	800b140 <xTaskResumeAll>
 800b01a:	60f8      	str	r0, [r7, #12]
=======
 800afea:	2100      	movs	r1, #0
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fd1b 	bl	800ba28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aff2:	f000 f893 	bl	800b11c <xTaskResumeAll>
 800aff6:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d107      	bne.n	800b032 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b022:	4b07      	ldr	r3, [pc, #28]	@ (800b040 <vTaskDelay+0x68>)
 800b024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	f3bf 8f6f 	isb	sy
=======
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800affe:	4b07      	ldr	r3, [pc, #28]	@ (800b01c <vTaskDelay+0x68>)
 800b000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20001694 	.word	0x20001694
 800b040:	e000ed04 	.word	0xe000ed04

0800b044 <vTaskStartScheduler>:
=======
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	200016d0 	.word	0x200016d0
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <vTaskStartScheduler>:
>>>>>>> origin/main

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800b044:	b580      	push	{r7, lr}
 800b046:	b08a      	sub	sp, #40	@ 0x28
 800b048:	af04      	add	r7, sp, #16
=======
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	@ 0x28
 800b024:	af04      	add	r7, sp, #16
>>>>>>> origin/main
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800b04a:	2300      	movs	r3, #0
 800b04c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
=======
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800b052:	463a      	mov	r2, r7
 800b054:	1d39      	adds	r1, r7, #4
 800b056:	f107 0308 	add.w	r3, r7, #8
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe ff28 	bl	8009eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	9202      	str	r2, [sp, #8]
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	2300      	movs	r3, #0
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	2300      	movs	r3, #0
 800b070:	460a      	mov	r2, r1
 800b072:	4924      	ldr	r1, [pc, #144]	@ (800b104 <vTaskStartScheduler+0xc0>)
 800b074:	4824      	ldr	r0, [pc, #144]	@ (800b108 <vTaskStartScheduler+0xc4>)
 800b076:	f7ff fcfd 	bl	800aa74 <xTaskCreateStatic>
 800b07a:	4603      	mov	r3, r0
 800b07c:	4a23      	ldr	r2, [pc, #140]	@ (800b10c <vTaskStartScheduler+0xc8>)
 800b07e:	6013      	str	r3, [r2, #0]
=======
 800b02e:	463a      	mov	r2, r7
 800b030:	1d39      	adds	r1, r7, #4
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe ff28 	bl	8009e8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	9202      	str	r2, [sp, #8]
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	2300      	movs	r3, #0
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	2300      	movs	r3, #0
 800b04c:	460a      	mov	r2, r1
 800b04e:	4924      	ldr	r1, [pc, #144]	@ (800b0e0 <vTaskStartScheduler+0xc0>)
 800b050:	4824      	ldr	r0, [pc, #144]	@ (800b0e4 <vTaskStartScheduler+0xc4>)
 800b052:	f7ff fcfd 	bl	800aa50 <xTaskCreateStatic>
 800b056:	4603      	mov	r3, r0
 800b058:	4a23      	ldr	r2, [pc, #140]	@ (800b0e8 <vTaskStartScheduler+0xc8>)
 800b05a:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 800b080:	4b22      	ldr	r3, [pc, #136]	@ (800b10c <vTaskStartScheduler+0xc8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b088:	2301      	movs	r3, #1
 800b08a:	617b      	str	r3, [r7, #20]
 800b08c:	e001      	b.n	800b092 <vTaskStartScheduler+0x4e>
=======
 800b05c:	4b22      	ldr	r3, [pc, #136]	@ (800b0e8 <vTaskStartScheduler+0xc8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e001      	b.n	800b06e <vTaskStartScheduler+0x4e>
>>>>>>> origin/main
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 800b08e:	2300      	movs	r3, #0
 800b090:	617b      	str	r3, [r7, #20]
=======
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d102      	bne.n	800b09e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b098:	f000 fd2c 	bl	800baf4 <xTimerCreateTimerTask>
 800b09c:	6178      	str	r0, [r7, #20]
=======
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d102      	bne.n	800b07a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b074:	f000 fd2c 	bl	800bad0 <xTimerCreateTimerTask>
 800b078:	6178      	str	r0, [r7, #20]
>>>>>>> origin/main
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d11b      	bne.n	800b0dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	613b      	str	r3, [r7, #16]
}
 800b0b6:	bf00      	nop
=======
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d11b      	bne.n	800b0b8 <vTaskStartScheduler+0x98>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	613b      	str	r3, [r7, #16]
}
 800b092:	bf00      	nop
>>>>>>> origin/main
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 800b0b8:	4b15      	ldr	r3, [pc, #84]	@ (800b110 <vTaskStartScheduler+0xcc>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3354      	adds	r3, #84	@ 0x54
 800b0be:	4a15      	ldr	r2, [pc, #84]	@ (800b114 <vTaskStartScheduler+0xd0>)
 800b0c0:	6013      	str	r3, [r2, #0]
=======
 800b094:	4b15      	ldr	r3, [pc, #84]	@ (800b0ec <vTaskStartScheduler+0xcc>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3354      	adds	r3, #84	@ 0x54
 800b09a:	4a15      	ldr	r2, [pc, #84]	@ (800b0f0 <vTaskStartScheduler+0xd0>)
 800b09c:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800b0c2:	4b15      	ldr	r3, [pc, #84]	@ (800b118 <vTaskStartScheduler+0xd4>)
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0ca:	4b14      	ldr	r3, [pc, #80]	@ (800b11c <vTaskStartScheduler+0xd8>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0d0:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <vTaskStartScheduler+0xdc>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
=======
 800b09e:	4b15      	ldr	r3, [pc, #84]	@ (800b0f4 <vTaskStartScheduler+0xd4>)
 800b0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0a6:	4b14      	ldr	r3, [pc, #80]	@ (800b0f8 <vTaskStartScheduler+0xd8>)
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0ac:	4b13      	ldr	r3, [pc, #76]	@ (800b0fc <vTaskStartScheduler+0xdc>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800b0d6:	f001 f8f3 	bl	800c2c0 <xPortStartScheduler>
=======
 800b0b2:	f001 f8f5 	bl	800c2a0 <xPortStartScheduler>
>>>>>>> origin/main
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 800b0da:	e00f      	b.n	800b0fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d10b      	bne.n	800b0fc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	60fb      	str	r3, [r7, #12]
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	e7fd      	b.n	800b0f8 <vTaskStartScheduler+0xb4>
}
 800b0fc:	bf00      	nop
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	0800cc90 	.word	0x0800cc90
 800b108:	0800b779 	.word	0x0800b779
 800b10c:	20001690 	.word	0x20001690
 800b110:	20001198 	.word	0x20001198
 800b114:	20000204 	.word	0x20000204
 800b118:	2000168c 	.word	0x2000168c
 800b11c:	20001678 	.word	0x20001678
 800b120:	20001670 	.word	0x20001670

0800b124 <vTaskSuspendAll>:
=======
 800b0b6:	e00f      	b.n	800b0d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0be:	d10b      	bne.n	800b0d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	60fb      	str	r3, [r7, #12]
}
 800b0d2:	bf00      	nop
 800b0d4:	bf00      	nop
 800b0d6:	e7fd      	b.n	800b0d4 <vTaskStartScheduler+0xb4>
}
 800b0d8:	bf00      	nop
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0800cc70 	.word	0x0800cc70
 800b0e4:	0800b755 	.word	0x0800b755
 800b0e8:	200016cc 	.word	0x200016cc
 800b0ec:	200011d4 	.word	0x200011d4
 800b0f0:	2000023c 	.word	0x2000023c
 800b0f4:	200016c8 	.word	0x200016c8
 800b0f8:	200016b4 	.word	0x200016b4
 800b0fc:	200016ac 	.word	0x200016ac

0800b100 <vTaskSuspendAll>:
>>>>>>> origin/main
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
=======
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
>>>>>>> origin/main
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 800b128:	4b04      	ldr	r3, [pc, #16]	@ (800b13c <vTaskSuspendAll+0x18>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3301      	adds	r3, #1
 800b12e:	4a03      	ldr	r2, [pc, #12]	@ (800b13c <vTaskSuspendAll+0x18>)
 800b130:	6013      	str	r3, [r2, #0]
=======
 800b104:	4b04      	ldr	r3, [pc, #16]	@ (800b118 <vTaskSuspendAll+0x18>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	4a03      	ldr	r2, [pc, #12]	@ (800b118 <vTaskSuspendAll+0x18>)
 800b10c:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800b132:	bf00      	nop
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20001694 	.word	0x20001694

0800b140 <xTaskResumeAll>:
=======
 800b10e:	bf00      	nop
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	200016d0 	.word	0x200016d0

0800b11c <xTaskResumeAll>:
>>>>>>> origin/main

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60bb      	str	r3, [r7, #8]
=======
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b126:	2300      	movs	r3, #0
 800b128:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800b14e:	4b42      	ldr	r3, [pc, #264]	@ (800b258 <xTaskResumeAll+0x118>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10b      	bne.n	800b16e <xTaskResumeAll+0x2e>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	603b      	str	r3, [r7, #0]
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	e7fd      	b.n	800b16a <xTaskResumeAll+0x2a>
=======
 800b12a:	4b42      	ldr	r3, [pc, #264]	@ (800b234 <xTaskResumeAll+0x118>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10b      	bne.n	800b14a <xTaskResumeAll+0x2e>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	603b      	str	r3, [r7, #0]
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	e7fd      	b.n	800b146 <xTaskResumeAll+0x2a>
>>>>>>> origin/main
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800b16e:	f001 f94b 	bl	800c408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b172:	4b39      	ldr	r3, [pc, #228]	@ (800b258 <xTaskResumeAll+0x118>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3b01      	subs	r3, #1
 800b178:	4a37      	ldr	r2, [pc, #220]	@ (800b258 <xTaskResumeAll+0x118>)
 800b17a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17c:	4b36      	ldr	r3, [pc, #216]	@ (800b258 <xTaskResumeAll+0x118>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d162      	bne.n	800b24a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b184:	4b35      	ldr	r3, [pc, #212]	@ (800b25c <xTaskResumeAll+0x11c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d05e      	beq.n	800b24a <xTaskResumeAll+0x10a>
=======
 800b14a:	f001 f94d 	bl	800c3e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b14e:	4b39      	ldr	r3, [pc, #228]	@ (800b234 <xTaskResumeAll+0x118>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3b01      	subs	r3, #1
 800b154:	4a37      	ldr	r2, [pc, #220]	@ (800b234 <xTaskResumeAll+0x118>)
 800b156:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b158:	4b36      	ldr	r3, [pc, #216]	@ (800b234 <xTaskResumeAll+0x118>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d162      	bne.n	800b226 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b160:	4b35      	ldr	r3, [pc, #212]	@ (800b238 <xTaskResumeAll+0x11c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d05e      	beq.n	800b226 <xTaskResumeAll+0x10a>
>>>>>>> origin/main
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 800b18c:	e02f      	b.n	800b1ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b18e:	4b34      	ldr	r3, [pc, #208]	@ (800b260 <xTaskResumeAll+0x120>)
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3318      	adds	r3, #24
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe ff46 	bl	800a02c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe ff41 	bl	800a02c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b264 <xTaskResumeAll+0x124>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d903      	bls.n	800b1be <xTaskResumeAll+0x7e>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b264 <xTaskResumeAll+0x124>)
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4a27      	ldr	r2, [pc, #156]	@ (800b268 <xTaskResumeAll+0x128>)
 800b1cc:	441a      	add	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f7fe fecc 	bl	8009f72 <vListInsertEnd>
=======
 800b168:	e02f      	b.n	800b1ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b16a:	4b34      	ldr	r3, [pc, #208]	@ (800b23c <xTaskResumeAll+0x120>)
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3318      	adds	r3, #24
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe ff46 	bl	800a008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3304      	adds	r3, #4
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe ff41 	bl	800a008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b18a:	4b2d      	ldr	r3, [pc, #180]	@ (800b240 <xTaskResumeAll+0x124>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d903      	bls.n	800b19a <xTaskResumeAll+0x7e>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b196:	4a2a      	ldr	r2, [pc, #168]	@ (800b240 <xTaskResumeAll+0x124>)
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19e:	4613      	mov	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4a27      	ldr	r2, [pc, #156]	@ (800b244 <xTaskResumeAll+0x128>)
 800b1a8:	441a      	add	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f7fe fecc 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1de:	4b23      	ldr	r3, [pc, #140]	@ (800b26c <xTaskResumeAll+0x12c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d302      	bcc.n	800b1ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b1e8:	4b21      	ldr	r3, [pc, #132]	@ (800b270 <xTaskResumeAll+0x130>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b260 <xTaskResumeAll+0x120>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1cb      	bne.n	800b18e <xTaskResumeAll+0x4e>
=======
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ba:	4b23      	ldr	r3, [pc, #140]	@ (800b248 <xTaskResumeAll+0x12c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d302      	bcc.n	800b1ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b1c4:	4b21      	ldr	r3, [pc, #132]	@ (800b24c <xTaskResumeAll+0x130>)
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b23c <xTaskResumeAll+0x120>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1cb      	bne.n	800b16a <xTaskResumeAll+0x4e>
>>>>>>> origin/main
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <xTaskResumeAll+0xc0>
=======
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <xTaskResumeAll+0xc0>
>>>>>>> origin/main
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800b1fc:	f000 fb78 	bl	800b8f0 <prvResetNextTaskUnblockTime>
=======
 800b1d8:	f000 fb78 	bl	800b8cc <prvResetNextTaskUnblockTime>
>>>>>>> origin/main
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 800b200:	4b1c      	ldr	r3, [pc, #112]	@ (800b274 <xTaskResumeAll+0x134>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d010      	beq.n	800b22e <xTaskResumeAll+0xee>
=======
 800b1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b250 <xTaskResumeAll+0x134>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d010      	beq.n	800b20a <xTaskResumeAll+0xee>
>>>>>>> origin/main
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800b20c:	f000 f858 	bl	800b2c0 <xTaskIncrementTick>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b216:	4b16      	ldr	r3, [pc, #88]	@ (800b270 <xTaskResumeAll+0x130>)
 800b218:	2201      	movs	r2, #1
 800b21a:	601a      	str	r2, [r3, #0]
=======
 800b1e8:	f000 f858 	bl	800b29c <xTaskIncrementTick>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b1f2:	4b16      	ldr	r3, [pc, #88]	@ (800b24c <xTaskResumeAll+0x130>)
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3b01      	subs	r3, #1
 800b220:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1f1      	bne.n	800b20c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b228:	4b12      	ldr	r3, [pc, #72]	@ (800b274 <xTaskResumeAll+0x134>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
=======
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1f1      	bne.n	800b1e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b204:	4b12      	ldr	r3, [pc, #72]	@ (800b250 <xTaskResumeAll+0x134>)
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800b22e:	4b10      	ldr	r3, [pc, #64]	@ (800b270 <xTaskResumeAll+0x130>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d009      	beq.n	800b24a <xTaskResumeAll+0x10a>
=======
 800b20a:	4b10      	ldr	r3, [pc, #64]	@ (800b24c <xTaskResumeAll+0x130>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d009      	beq.n	800b226 <xTaskResumeAll+0x10a>
>>>>>>> origin/main
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800b236:	2301      	movs	r3, #1
 800b238:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b23a:	4b0f      	ldr	r3, [pc, #60]	@ (800b278 <xTaskResumeAll+0x138>)
 800b23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	f3bf 8f6f 	isb	sy
=======
 800b212:	2301      	movs	r3, #1
 800b214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b216:	4b0f      	ldr	r3, [pc, #60]	@ (800b254 <xTaskResumeAll+0x138>)
 800b218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b21c:	601a      	str	r2, [r3, #0]
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	f3bf 8f6f 	isb	sy
>>>>>>> origin/main
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800b24a:	f001 f90f 	bl	800c46c <vPortExitCritical>

	return xAlreadyYielded;
 800b24e:	68bb      	ldr	r3, [r7, #8]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20001694 	.word	0x20001694
 800b25c:	2000166c 	.word	0x2000166c
 800b260:	2000162c 	.word	0x2000162c
 800b264:	20001674 	.word	0x20001674
 800b268:	2000119c 	.word	0x2000119c
 800b26c:	20001198 	.word	0x20001198
 800b270:	20001680 	.word	0x20001680
 800b274:	2000167c 	.word	0x2000167c
 800b278:	e000ed04 	.word	0xe000ed04

0800b27c <xTaskGetTickCount>:
=======
 800b226:	f001 f911 	bl	800c44c <vPortExitCritical>

	return xAlreadyYielded;
 800b22a:	68bb      	ldr	r3, [r7, #8]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200016d0 	.word	0x200016d0
 800b238:	200016a8 	.word	0x200016a8
 800b23c:	20001668 	.word	0x20001668
 800b240:	200016b0 	.word	0x200016b0
 800b244:	200011d8 	.word	0x200011d8
 800b248:	200011d4 	.word	0x200011d4
 800b24c:	200016bc 	.word	0x200016bc
 800b250:	200016b8 	.word	0x200016b8
 800b254:	e000ed04 	.word	0xe000ed04

0800b258 <xTaskGetTickCount>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
=======
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
>>>>>>> origin/main
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800b282:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <xTaskGetTickCount+0x1c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	607b      	str	r3, [r7, #4]
=======
 800b25e:	4b05      	ldr	r3, [pc, #20]	@ (800b274 <xTaskGetTickCount+0x1c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 800b288:	687b      	ldr	r3, [r7, #4]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	20001670 	.word	0x20001670

0800b29c <xTaskGetTickCountFromISR>:
=======
 800b264:	687b      	ldr	r3, [r7, #4]
}
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	200016ac 	.word	0x200016ac

0800b278 <xTaskGetTickCountFromISR>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
<<<<<<< HEAD
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
=======
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
>>>>>>> origin/main
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800b2a2:	f001 f991 	bl	800c5c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b2aa:	4b04      	ldr	r3, [pc, #16]	@ (800b2bc <xTaskGetTickCountFromISR+0x20>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	603b      	str	r3, [r7, #0]
=======
 800b27e:	f001 f993 	bl	800c5a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b282:	2300      	movs	r3, #0
 800b284:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b286:	4b04      	ldr	r3, [pc, #16]	@ (800b298 <xTaskGetTickCountFromISR+0x20>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	603b      	str	r3, [r7, #0]
>>>>>>> origin/main
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800b2b0:	683b      	ldr	r3, [r7, #0]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20001670 	.word	0x20001670

0800b2c0 <xTaskIncrementTick>:
=======
 800b28c:	683b      	ldr	r3, [r7, #0]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	200016ac 	.word	0x200016ac

0800b29c <xTaskIncrementTick>:
>>>>>>> origin/main

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	617b      	str	r3, [r7, #20]
=======
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800b2ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b408 <xTaskIncrementTick+0x148>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f040 8090 	bne.w	800b3f4 <xTaskIncrementTick+0x134>
=======
 800b2a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b3e4 <xTaskIncrementTick+0x148>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f040 8090 	bne.w	800b3d0 <xTaskIncrementTick+0x134>
>>>>>>> origin/main
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 800b2d4:	4b4d      	ldr	r3, [pc, #308]	@ (800b40c <xTaskIncrementTick+0x14c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	613b      	str	r3, [r7, #16]
=======
 800b2b0:	4b4d      	ldr	r3, [pc, #308]	@ (800b3e8 <xTaskIncrementTick+0x14c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 800b2dc:	4a4b      	ldr	r2, [pc, #300]	@ (800b40c <xTaskIncrementTick+0x14c>)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d121      	bne.n	800b32c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2e8:	4b49      	ldr	r3, [pc, #292]	@ (800b410 <xTaskIncrementTick+0x150>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00b      	beq.n	800b30a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	603b      	str	r3, [r7, #0]
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	e7fd      	b.n	800b306 <xTaskIncrementTick+0x46>
 800b30a:	4b41      	ldr	r3, [pc, #260]	@ (800b410 <xTaskIncrementTick+0x150>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	4b40      	ldr	r3, [pc, #256]	@ (800b414 <xTaskIncrementTick+0x154>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a3e      	ldr	r2, [pc, #248]	@ (800b410 <xTaskIncrementTick+0x150>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	4a3e      	ldr	r2, [pc, #248]	@ (800b414 <xTaskIncrementTick+0x154>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	4b3e      	ldr	r3, [pc, #248]	@ (800b418 <xTaskIncrementTick+0x158>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a3c      	ldr	r2, [pc, #240]	@ (800b418 <xTaskIncrementTick+0x158>)
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	f000 fae2 	bl	800b8f0 <prvResetNextTaskUnblockTime>
=======
 800b2b8:	4a4b      	ldr	r2, [pc, #300]	@ (800b3e8 <xTaskIncrementTick+0x14c>)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d121      	bne.n	800b308 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2c4:	4b49      	ldr	r3, [pc, #292]	@ (800b3ec <xTaskIncrementTick+0x150>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00b      	beq.n	800b2e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	603b      	str	r3, [r7, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xTaskIncrementTick+0x46>
 800b2e6:	4b41      	ldr	r3, [pc, #260]	@ (800b3ec <xTaskIncrementTick+0x150>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	4b40      	ldr	r3, [pc, #256]	@ (800b3f0 <xTaskIncrementTick+0x154>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a3e      	ldr	r2, [pc, #248]	@ (800b3ec <xTaskIncrementTick+0x150>)
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b3f0 <xTaskIncrementTick+0x154>)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	4b3e      	ldr	r3, [pc, #248]	@ (800b3f4 <xTaskIncrementTick+0x158>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	4a3c      	ldr	r2, [pc, #240]	@ (800b3f4 <xTaskIncrementTick+0x158>)
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	f000 fae2 	bl	800b8cc <prvResetNextTaskUnblockTime>
>>>>>>> origin/main

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800b32c:	4b3b      	ldr	r3, [pc, #236]	@ (800b41c <xTaskIncrementTick+0x15c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	429a      	cmp	r2, r3
 800b334:	d349      	bcc.n	800b3ca <xTaskIncrementTick+0x10a>
=======
 800b308:	4b3b      	ldr	r3, [pc, #236]	@ (800b3f8 <xTaskIncrementTick+0x15c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d349      	bcc.n	800b3a6 <xTaskIncrementTick+0x10a>
>>>>>>> origin/main
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800b336:	4b36      	ldr	r3, [pc, #216]	@ (800b410 <xTaskIncrementTick+0x150>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <xTaskIncrementTick+0x8a>
=======
 800b312:	4b36      	ldr	r3, [pc, #216]	@ (800b3ec <xTaskIncrementTick+0x150>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d104      	bne.n	800b326 <xTaskIncrementTick+0x8a>
>>>>>>> origin/main
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800b340:	4b36      	ldr	r3, [pc, #216]	@ (800b41c <xTaskIncrementTick+0x15c>)
 800b342:	f04f 32ff 	mov.w	r2, #4294967295
 800b346:	601a      	str	r2, [r3, #0]
					break;
 800b348:	e03f      	b.n	800b3ca <xTaskIncrementTick+0x10a>
=======
 800b31c:	4b36      	ldr	r3, [pc, #216]	@ (800b3f8 <xTaskIncrementTick+0x15c>)
 800b31e:	f04f 32ff 	mov.w	r2, #4294967295
 800b322:	601a      	str	r2, [r3, #0]
					break;
 800b324:	e03f      	b.n	800b3a6 <xTaskIncrementTick+0x10a>
>>>>>>> origin/main
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800b34a:	4b31      	ldr	r3, [pc, #196]	@ (800b410 <xTaskIncrementTick+0x150>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d203      	bcs.n	800b36a <xTaskIncrementTick+0xaa>
=======
 800b326:	4b31      	ldr	r3, [pc, #196]	@ (800b3ec <xTaskIncrementTick+0x150>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d203      	bcs.n	800b346 <xTaskIncrementTick+0xaa>
>>>>>>> origin/main
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 800b362:	4a2e      	ldr	r2, [pc, #184]	@ (800b41c <xTaskIncrementTick+0x15c>)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b368:	e02f      	b.n	800b3ca <xTaskIncrementTick+0x10a>
=======
 800b33e:	4a2e      	ldr	r2, [pc, #184]	@ (800b3f8 <xTaskIncrementTick+0x15c>)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b344:	e02f      	b.n	800b3a6 <xTaskIncrementTick+0x10a>
>>>>>>> origin/main
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe fe5c 	bl	800a02c <uxListRemove>
=======
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	3304      	adds	r3, #4
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fe5c 	bl	800a008 <uxListRemove>
>>>>>>> origin/main

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	3318      	adds	r3, #24
 800b380:	4618      	mov	r0, r3
 800b382:	f7fe fe53 	bl	800a02c <uxListRemove>
=======
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b354:	2b00      	cmp	r3, #0
 800b356:	d004      	beq.n	800b362 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	3318      	adds	r3, #24
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe fe53 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38a:	4b25      	ldr	r3, [pc, #148]	@ (800b420 <xTaskIncrementTick+0x160>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d903      	bls.n	800b39a <xTaskIncrementTick+0xda>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b396:	4a22      	ldr	r2, [pc, #136]	@ (800b420 <xTaskIncrementTick+0x160>)
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39e:	4613      	mov	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b424 <xTaskIncrementTick+0x164>)
 800b3a8:	441a      	add	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f7fe fdde 	bl	8009f72 <vListInsertEnd>
=======
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b366:	4b25      	ldr	r3, [pc, #148]	@ (800b3fc <xTaskIncrementTick+0x160>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d903      	bls.n	800b376 <xTaskIncrementTick+0xda>
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	4a22      	ldr	r2, [pc, #136]	@ (800b3fc <xTaskIncrementTick+0x160>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4a1f      	ldr	r2, [pc, #124]	@ (800b400 <xTaskIncrementTick+0x164>)
 800b384:	441a      	add	r2, r3
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	3304      	adds	r3, #4
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7fe fdde 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b428 <xTaskIncrementTick+0x168>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d3b8      	bcc.n	800b336 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3c8:	e7b5      	b.n	800b336 <xTaskIncrementTick+0x76>
=======
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b396:	4b1b      	ldr	r3, [pc, #108]	@ (800b404 <xTaskIncrementTick+0x168>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d3b8      	bcc.n	800b312 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a4:	e7b5      	b.n	800b312 <xTaskIncrementTick+0x76>
>>>>>>> origin/main
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800b3ca:	4b17      	ldr	r3, [pc, #92]	@ (800b428 <xTaskIncrementTick+0x168>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d0:	4914      	ldr	r1, [pc, #80]	@ (800b424 <xTaskIncrementTick+0x164>)
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	440b      	add	r3, r1
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d901      	bls.n	800b3e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	617b      	str	r3, [r7, #20]
=======
 800b3a6:	4b17      	ldr	r3, [pc, #92]	@ (800b404 <xTaskIncrementTick+0x168>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ac:	4914      	ldr	r1, [pc, #80]	@ (800b400 <xTaskIncrementTick+0x164>)
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	440b      	add	r3, r1
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d901      	bls.n	800b3c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800b3e6:	4b11      	ldr	r3, [pc, #68]	@ (800b42c <xTaskIncrementTick+0x16c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d007      	beq.n	800b3fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	617b      	str	r3, [r7, #20]
 800b3f2:	e004      	b.n	800b3fe <xTaskIncrementTick+0x13e>
=======
 800b3c2:	4b11      	ldr	r3, [pc, #68]	@ (800b408 <xTaskIncrementTick+0x16c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d007      	beq.n	800b3da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	e004      	b.n	800b3da <xTaskIncrementTick+0x13e>
>>>>>>> origin/main
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 800b3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b430 <xTaskIncrementTick+0x170>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b430 <xTaskIncrementTick+0x170>)
 800b3fc:	6013      	str	r3, [r2, #0]
=======
 800b3d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b40c <xTaskIncrementTick+0x170>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	@ (800b40c <xTaskIncrementTick+0x170>)
 800b3d8:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 800b3fe:	697b      	ldr	r3, [r7, #20]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20001694 	.word	0x20001694
 800b40c:	20001670 	.word	0x20001670
 800b410:	20001624 	.word	0x20001624
 800b414:	20001628 	.word	0x20001628
 800b418:	20001684 	.word	0x20001684
 800b41c:	2000168c 	.word	0x2000168c
 800b420:	20001674 	.word	0x20001674
 800b424:	2000119c 	.word	0x2000119c
 800b428:	20001198 	.word	0x20001198
 800b42c:	20001680 	.word	0x20001680
 800b430:	2000167c 	.word	0x2000167c

0800b434 <vTaskSwitchContext>:
=======
 800b3da:	697b      	ldr	r3, [r7, #20]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	200016d0 	.word	0x200016d0
 800b3e8:	200016ac 	.word	0x200016ac
 800b3ec:	20001660 	.word	0x20001660
 800b3f0:	20001664 	.word	0x20001664
 800b3f4:	200016c0 	.word	0x200016c0
 800b3f8:	200016c8 	.word	0x200016c8
 800b3fc:	200016b0 	.word	0x200016b0
 800b400:	200011d8 	.word	0x200011d8
 800b404:	200011d4 	.word	0x200011d4
 800b408:	200016bc 	.word	0x200016bc
 800b40c:	200016b8 	.word	0x200016b8

0800b410 <vTaskSwitchContext>:
>>>>>>> origin/main

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b43a:	4b2b      	ldr	r3, [pc, #172]	@ (800b4e8 <vTaskSwitchContext+0xb4>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <vTaskSwitchContext+0x16>
=======
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b416:	4b2b      	ldr	r3, [pc, #172]	@ (800b4c4 <vTaskSwitchContext+0xb4>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <vTaskSwitchContext+0x16>
>>>>>>> origin/main
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800b442:	4b2a      	ldr	r3, [pc, #168]	@ (800b4ec <vTaskSwitchContext+0xb8>)
 800b444:	2201      	movs	r2, #1
 800b446:	601a      	str	r2, [r3, #0]
=======
 800b41e:	4b2a      	ldr	r3, [pc, #168]	@ (800b4c8 <vTaskSwitchContext+0xb8>)
 800b420:	2201      	movs	r2, #1
 800b422:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800b448:	e047      	b.n	800b4da <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b44a:	4b28      	ldr	r3, [pc, #160]	@ (800b4ec <vTaskSwitchContext+0xb8>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b450:	4b27      	ldr	r3, [pc, #156]	@ (800b4f0 <vTaskSwitchContext+0xbc>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	e011      	b.n	800b47c <vTaskSwitchContext+0x48>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10b      	bne.n	800b476 <vTaskSwitchContext+0x42>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	607b      	str	r3, [r7, #4]
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <vTaskSwitchContext+0x3e>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3b01      	subs	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	491d      	ldr	r1, [pc, #116]	@ (800b4f4 <vTaskSwitchContext+0xc0>)
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0e3      	beq.n	800b458 <vTaskSwitchContext+0x24>
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4613      	mov	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4a16      	ldr	r2, [pc, #88]	@ (800b4f4 <vTaskSwitchContext+0xc0>)
 800b49c:	4413      	add	r3, r2
 800b49e:	60bb      	str	r3, [r7, #8]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	605a      	str	r2, [r3, #4]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d104      	bne.n	800b4c0 <vTaskSwitchContext+0x8c>
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	605a      	str	r2, [r3, #4]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f8 <vTaskSwitchContext+0xc4>)
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	4a09      	ldr	r2, [pc, #36]	@ (800b4f0 <vTaskSwitchContext+0xbc>)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4d0:	4b09      	ldr	r3, [pc, #36]	@ (800b4f8 <vTaskSwitchContext+0xc4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3354      	adds	r3, #84	@ 0x54
 800b4d6:	4a09      	ldr	r2, [pc, #36]	@ (800b4fc <vTaskSwitchContext+0xc8>)
 800b4d8:	6013      	str	r3, [r2, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20001694 	.word	0x20001694
 800b4ec:	20001680 	.word	0x20001680
 800b4f0:	20001674 	.word	0x20001674
 800b4f4:	2000119c 	.word	0x2000119c
 800b4f8:	20001198 	.word	0x20001198
 800b4fc:	20000204 	.word	0x20000204

0800b500 <vTaskPlaceOnEventList>:
=======
 800b424:	e047      	b.n	800b4b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b426:	4b28      	ldr	r3, [pc, #160]	@ (800b4c8 <vTaskSwitchContext+0xb8>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	4b27      	ldr	r3, [pc, #156]	@ (800b4cc <vTaskSwitchContext+0xbc>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e011      	b.n	800b458 <vTaskSwitchContext+0x48>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10b      	bne.n	800b452 <vTaskSwitchContext+0x42>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	607b      	str	r3, [r7, #4]
}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	e7fd      	b.n	800b44e <vTaskSwitchContext+0x3e>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3b01      	subs	r3, #1
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	491d      	ldr	r1, [pc, #116]	@ (800b4d0 <vTaskSwitchContext+0xc0>)
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0e3      	beq.n	800b434 <vTaskSwitchContext+0x24>
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4a16      	ldr	r2, [pc, #88]	@ (800b4d0 <vTaskSwitchContext+0xc0>)
 800b478:	4413      	add	r3, r2
 800b47a:	60bb      	str	r3, [r7, #8]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	605a      	str	r2, [r3, #4]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	3308      	adds	r3, #8
 800b48e:	429a      	cmp	r2, r3
 800b490:	d104      	bne.n	800b49c <vTaskSwitchContext+0x8c>
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	605a      	str	r2, [r3, #4]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	4a0c      	ldr	r2, [pc, #48]	@ (800b4d4 <vTaskSwitchContext+0xc4>)
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	4a09      	ldr	r2, [pc, #36]	@ (800b4cc <vTaskSwitchContext+0xbc>)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4ac:	4b09      	ldr	r3, [pc, #36]	@ (800b4d4 <vTaskSwitchContext+0xc4>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3354      	adds	r3, #84	@ 0x54
 800b4b2:	4a09      	ldr	r2, [pc, #36]	@ (800b4d8 <vTaskSwitchContext+0xc8>)
 800b4b4:	6013      	str	r3, [r2, #0]
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	200016d0 	.word	0x200016d0
 800b4c8:	200016bc 	.word	0x200016bc
 800b4cc:	200016b0 	.word	0x200016b0
 800b4d0:	200011d8 	.word	0x200011d8
 800b4d4:	200011d4 	.word	0x200011d4
 800b4d8:	2000023c 	.word	0x2000023c

0800b4dc <vTaskPlaceOnEventList>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10b      	bne.n	800b528 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	e7fd      	b.n	800b524 <vTaskPlaceOnEventList+0x24>
=======
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10b      	bne.n	800b504 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	60fb      	str	r3, [r7, #12]
}
 800b4fe:	bf00      	nop
 800b500:	bf00      	nop
 800b502:	e7fd      	b.n	800b500 <vTaskPlaceOnEventList+0x24>
>>>>>>> origin/main

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800b528:	4b07      	ldr	r3, [pc, #28]	@ (800b548 <vTaskPlaceOnEventList+0x48>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3318      	adds	r3, #24
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7fe fd42 	bl	8009fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b536:	2101      	movs	r1, #1
 800b538:	6838      	ldr	r0, [r7, #0]
 800b53a:	f000 fa87 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
}
 800b53e:	bf00      	nop
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20001198 	.word	0x20001198

0800b54c <vTaskPlaceOnEventListRestricted>:
=======
 800b504:	4b07      	ldr	r3, [pc, #28]	@ (800b524 <vTaskPlaceOnEventList+0x48>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3318      	adds	r3, #24
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7fe fd42 	bl	8009f96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b512:	2101      	movs	r1, #1
 800b514:	6838      	ldr	r0, [r7, #0]
 800b516:	f000 fa87 	bl	800ba28 <prvAddCurrentTaskToDelayedList>
}
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	200011d4 	.word	0x200011d4

0800b528 <vTaskPlaceOnEventListRestricted>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10b      	bne.n	800b576 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	617b      	str	r3, [r7, #20]
}
 800b570:	bf00      	nop
 800b572:	bf00      	nop
 800b574:	e7fd      	b.n	800b572 <vTaskPlaceOnEventListRestricted+0x26>
=======
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	617b      	str	r3, [r7, #20]
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	e7fd      	b.n	800b54e <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> origin/main

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800b576:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3318      	adds	r3, #24
 800b57c:	4619      	mov	r1, r3
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7fe fcf7 	bl	8009f72 <vListInsertEnd>
=======
 800b552:	4b0a      	ldr	r3, [pc, #40]	@ (800b57c <vTaskPlaceOnEventListRestricted+0x54>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3318      	adds	r3, #24
 800b558:	4619      	mov	r1, r3
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7fe fcf7 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b58a:	f04f 33ff 	mov.w	r3, #4294967295
 800b58e:	60bb      	str	r3, [r7, #8]
=======
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b566:	f04f 33ff 	mov.w	r3, #4294967295
 800b56a:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	68b8      	ldr	r0, [r7, #8]
 800b594:	f000 fa5a 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
	}
 800b598:	bf00      	nop
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20001198 	.word	0x20001198

0800b5a4 <xTaskRemoveFromEventList>:
=======
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	68b8      	ldr	r0, [r7, #8]
 800b570:	f000 fa5a 	bl	800ba28 <prvAddCurrentTaskToDelayedList>
	}
 800b574:	bf00      	nop
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	200011d4 	.word	0x200011d4

0800b580 <xTaskRemoveFromEventList>:
>>>>>>> origin/main

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
=======
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	60fb      	str	r3, [r7, #12]
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	e7fd      	b.n	800b5ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	3318      	adds	r3, #24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fd28 	bl	800a02c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b654 <xTaskRemoveFromEventList+0xb0>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d11d      	bne.n	800b620 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fe fd1f 	bl	800a02c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5f2:	4b19      	ldr	r3, [pc, #100]	@ (800b658 <xTaskRemoveFromEventList+0xb4>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d903      	bls.n	800b602 <xTaskRemoveFromEventList+0x5e>
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fe:	4a16      	ldr	r2, [pc, #88]	@ (800b658 <xTaskRemoveFromEventList+0xb4>)
 800b600:	6013      	str	r3, [r2, #0]
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4a13      	ldr	r2, [pc, #76]	@ (800b65c <xTaskRemoveFromEventList+0xb8>)
 800b610:	441a      	add	r2, r3
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	3304      	adds	r3, #4
 800b616:	4619      	mov	r1, r3
 800b618:	4610      	mov	r0, r2
 800b61a:	f7fe fcaa 	bl	8009f72 <vListInsertEnd>
 800b61e:	e005      	b.n	800b62c <xTaskRemoveFromEventList+0x88>
=======
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	60fb      	str	r3, [r7, #12]
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3318      	adds	r3, #24
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fd28 	bl	800a008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b630 <xTaskRemoveFromEventList+0xb0>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d11d      	bne.n	800b5fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fd1f 	bl	800a008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ce:	4b19      	ldr	r3, [pc, #100]	@ (800b634 <xTaskRemoveFromEventList+0xb4>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d903      	bls.n	800b5de <xTaskRemoveFromEventList+0x5e>
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5da:	4a16      	ldr	r2, [pc, #88]	@ (800b634 <xTaskRemoveFromEventList+0xb4>)
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4a13      	ldr	r2, [pc, #76]	@ (800b638 <xTaskRemoveFromEventList+0xb8>)
 800b5ec:	441a      	add	r2, r3
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	f7fe fcaa 	bl	8009f4e <vListInsertEnd>
 800b5fa:	e005      	b.n	800b608 <xTaskRemoveFromEventList+0x88>
>>>>>>> origin/main
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3318      	adds	r3, #24
 800b624:	4619      	mov	r1, r3
 800b626:	480e      	ldr	r0, [pc, #56]	@ (800b660 <xTaskRemoveFromEventList+0xbc>)
 800b628:	f7fe fca3 	bl	8009f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b630:	4b0c      	ldr	r3, [pc, #48]	@ (800b664 <xTaskRemoveFromEventList+0xc0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b636:	429a      	cmp	r2, r3
 800b638:	d905      	bls.n	800b646 <xTaskRemoveFromEventList+0xa2>
=======
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	3318      	adds	r3, #24
 800b600:	4619      	mov	r1, r3
 800b602:	480e      	ldr	r0, [pc, #56]	@ (800b63c <xTaskRemoveFromEventList+0xbc>)
 800b604:	f7fe fca3 	bl	8009f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60c:	4b0c      	ldr	r3, [pc, #48]	@ (800b640 <xTaskRemoveFromEventList+0xc0>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b612:	429a      	cmp	r2, r3
 800b614:	d905      	bls.n	800b622 <xTaskRemoveFromEventList+0xa2>
>>>>>>> origin/main
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800b63a:	2301      	movs	r3, #1
 800b63c:	617b      	str	r3, [r7, #20]
=======
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800b63e:	4b0a      	ldr	r3, [pc, #40]	@ (800b668 <xTaskRemoveFromEventList+0xc4>)
 800b640:	2201      	movs	r2, #1
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	e001      	b.n	800b64a <xTaskRemoveFromEventList+0xa6>
=======
 800b61a:	4b0a      	ldr	r3, [pc, #40]	@ (800b644 <xTaskRemoveFromEventList+0xc4>)
 800b61c:	2201      	movs	r2, #1
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	e001      	b.n	800b626 <xTaskRemoveFromEventList+0xa6>
>>>>>>> origin/main
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b64a:	697b      	ldr	r3, [r7, #20]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20001694 	.word	0x20001694
 800b658:	20001674 	.word	0x20001674
 800b65c:	2000119c 	.word	0x2000119c
 800b660:	2000162c 	.word	0x2000162c
 800b664:	20001198 	.word	0x20001198
 800b668:	20001680 	.word	0x20001680

0800b66c <vTaskInternalSetTimeOutState>:
=======
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b626:	697b      	ldr	r3, [r7, #20]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	200016d0 	.word	0x200016d0
 800b634:	200016b0 	.word	0x200016b0
 800b638:	200011d8 	.word	0x200011d8
 800b63c:	20001668 	.word	0x20001668
 800b640:	200011d4 	.word	0x200011d4
 800b644:	200016bc 	.word	0x200016bc

0800b648 <vTaskInternalSetTimeOutState>:
>>>>>>> origin/main
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b674:	4b06      	ldr	r3, [pc, #24]	@ (800b690 <vTaskInternalSetTimeOutState+0x24>)
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b67c:	4b05      	ldr	r3, [pc, #20]	@ (800b694 <vTaskInternalSetTimeOutState+0x28>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	605a      	str	r2, [r3, #4]
}
 800b684:	bf00      	nop
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	20001684 	.word	0x20001684
 800b694:	20001670 	.word	0x20001670

0800b698 <xTaskCheckForTimeOut>:
=======
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b650:	4b06      	ldr	r3, [pc, #24]	@ (800b66c <vTaskInternalSetTimeOutState+0x24>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b658:	4b05      	ldr	r3, [pc, #20]	@ (800b670 <vTaskInternalSetTimeOutState+0x28>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	605a      	str	r2, [r3, #4]
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	200016c0 	.word	0x200016c0
 800b670:	200016ac 	.word	0x200016ac

0800b674 <xTaskCheckForTimeOut>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10b      	bne.n	800b6c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	613b      	str	r3, [r7, #16]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10b      	bne.n	800b6de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	60fb      	str	r3, [r7, #12]
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	e7fd      	b.n	800b6da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6de:	f000 fe93 	bl	800c408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800b758 <xTaskCheckForTimeOut+0xc0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	617b      	str	r3, [r7, #20]
=======
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10b      	bne.n	800b69c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	613b      	str	r3, [r7, #16]
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	e7fd      	b.n	800b698 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10b      	bne.n	800b6ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60fb      	str	r3, [r7, #12]
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop
 800b6b8:	e7fd      	b.n	800b6b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6ba:	f000 fe95 	bl	800c3e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6be:	4b1d      	ldr	r3, [pc, #116]	@ (800b734 <xTaskCheckForTimeOut+0xc0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fa:	d102      	bne.n	800b702 <xTaskCheckForTimeOut+0x6a>
=======
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d102      	bne.n	800b6de <xTaskCheckForTimeOut+0x6a>
>>>>>>> origin/main
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61fb      	str	r3, [r7, #28]
 800b700:	e023      	b.n	800b74a <xTaskCheckForTimeOut+0xb2>
=======
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]
 800b6dc:	e023      	b.n	800b726 <xTaskCheckForTimeOut+0xb2>
>>>>>>> origin/main
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b15      	ldr	r3, [pc, #84]	@ (800b75c <xTaskCheckForTimeOut+0xc4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d007      	beq.n	800b71e <xTaskCheckForTimeOut+0x86>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	429a      	cmp	r2, r3
 800b716:	d302      	bcc.n	800b71e <xTaskCheckForTimeOut+0x86>
=======
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	4b15      	ldr	r3, [pc, #84]	@ (800b738 <xTaskCheckForTimeOut+0xc4>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d007      	beq.n	800b6fa <xTaskCheckForTimeOut+0x86>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d302      	bcc.n	800b6fa <xTaskCheckForTimeOut+0x86>
>>>>>>> origin/main
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 800b718:	2301      	movs	r3, #1
 800b71a:	61fb      	str	r3, [r7, #28]
 800b71c:	e015      	b.n	800b74a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	429a      	cmp	r2, r3
 800b726:	d20b      	bcs.n	800b740 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7ff ff99 	bl	800b66c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	61fb      	str	r3, [r7, #28]
 800b73e:	e004      	b.n	800b74a <xTaskCheckForTimeOut+0xb2>
=======
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	61fb      	str	r3, [r7, #28]
 800b6f8:	e015      	b.n	800b726 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	429a      	cmp	r2, r3
 800b702:	d20b      	bcs.n	800b71c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7ff ff99 	bl	800b648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b716:	2300      	movs	r3, #0
 800b718:	61fb      	str	r3, [r7, #28]
 800b71a:	e004      	b.n	800b726 <xTaskCheckForTimeOut+0xb2>
>>>>>>> origin/main
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b746:	2301      	movs	r3, #1
 800b748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b74a:	f000 fe8f 	bl	800c46c <vPortExitCritical>

	return xReturn;
 800b74e:	69fb      	ldr	r3, [r7, #28]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3720      	adds	r7, #32
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20001670 	.word	0x20001670
 800b75c:	20001684 	.word	0x20001684

0800b760 <vTaskMissedYield>:
=======
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b722:	2301      	movs	r3, #1
 800b724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b726:	f000 fe91 	bl	800c44c <vPortExitCritical>

	return xReturn;
 800b72a:	69fb      	ldr	r3, [r7, #28]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	200016ac 	.word	0x200016ac
 800b738:	200016c0 	.word	0x200016c0

0800b73c <vTaskMissedYield>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b764:	4b03      	ldr	r3, [pc, #12]	@ (800b774 <vTaskMissedYield+0x14>)
 800b766:	2201      	movs	r2, #1
 800b768:	601a      	str	r2, [r3, #0]
}
 800b76a:	bf00      	nop
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	20001680 	.word	0x20001680

0800b778 <prvIdleTask>:
=======
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b740:	4b03      	ldr	r3, [pc, #12]	@ (800b750 <vTaskMissedYield+0x14>)
 800b742:	2201      	movs	r2, #1
 800b744:	601a      	str	r2, [r3, #0]
}
 800b746:	bf00      	nop
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	200016bc 	.word	0x200016bc

0800b754 <prvIdleTask>:
>>>>>>> origin/main
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
=======
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 800b780:	f000 f852 	bl	800b828 <prvCheckTasksWaitingTermination>
=======
 800b75c:	f000 f852 	bl	800b804 <prvCheckTasksWaitingTermination>
>>>>>>> origin/main

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800b784:	4b06      	ldr	r3, [pc, #24]	@ (800b7a0 <prvIdleTask+0x28>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d9f9      	bls.n	800b780 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b78c:	4b05      	ldr	r3, [pc, #20]	@ (800b7a4 <prvIdleTask+0x2c>)
 800b78e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b79c:	e7f0      	b.n	800b780 <prvIdleTask+0x8>
 800b79e:	bf00      	nop
 800b7a0:	2000119c 	.word	0x2000119c
 800b7a4:	e000ed04 	.word	0xe000ed04

0800b7a8 <prvInitialiseTaskLists>:
=======
 800b760:	4b06      	ldr	r3, [pc, #24]	@ (800b77c <prvIdleTask+0x28>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d9f9      	bls.n	800b75c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b768:	4b05      	ldr	r3, [pc, #20]	@ (800b780 <prvIdleTask+0x2c>)
 800b76a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b778:	e7f0      	b.n	800b75c <prvIdleTask+0x8>
 800b77a:	bf00      	nop
 800b77c:	200011d8 	.word	0x200011d8
 800b780:	e000ed04 	.word	0xe000ed04

0800b784 <prvInitialiseTaskLists>:
>>>>>>> origin/main

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	e00c      	b.n	800b7ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4413      	add	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4a12      	ldr	r2, [pc, #72]	@ (800b808 <prvInitialiseTaskLists+0x60>)
 800b7c0:	4413      	add	r3, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fba8 	bl	8009f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	607b      	str	r3, [r7, #4]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b37      	cmp	r3, #55	@ 0x37
 800b7d2:	d9ef      	bls.n	800b7b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7d4:	480d      	ldr	r0, [pc, #52]	@ (800b80c <prvInitialiseTaskLists+0x64>)
 800b7d6:	f7fe fb9f 	bl	8009f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7da:	480d      	ldr	r0, [pc, #52]	@ (800b810 <prvInitialiseTaskLists+0x68>)
 800b7dc:	f7fe fb9c 	bl	8009f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7e0:	480c      	ldr	r0, [pc, #48]	@ (800b814 <prvInitialiseTaskLists+0x6c>)
 800b7e2:	f7fe fb99 	bl	8009f18 <vListInitialise>
=======
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b78a:	2300      	movs	r3, #0
 800b78c:	607b      	str	r3, [r7, #4]
 800b78e:	e00c      	b.n	800b7aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4a12      	ldr	r2, [pc, #72]	@ (800b7e4 <prvInitialiseTaskLists+0x60>)
 800b79c:	4413      	add	r3, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fba8 	bl	8009ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	607b      	str	r3, [r7, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b37      	cmp	r3, #55	@ 0x37
 800b7ae:	d9ef      	bls.n	800b790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7b0:	480d      	ldr	r0, [pc, #52]	@ (800b7e8 <prvInitialiseTaskLists+0x64>)
 800b7b2:	f7fe fb9f 	bl	8009ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7b6:	480d      	ldr	r0, [pc, #52]	@ (800b7ec <prvInitialiseTaskLists+0x68>)
 800b7b8:	f7fe fb9c 	bl	8009ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7bc:	480c      	ldr	r0, [pc, #48]	@ (800b7f0 <prvInitialiseTaskLists+0x6c>)
 800b7be:	f7fe fb99 	bl	8009ef4 <vListInitialise>
>>>>>>> origin/main

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 800b7e6:	480c      	ldr	r0, [pc, #48]	@ (800b818 <prvInitialiseTaskLists+0x70>)
 800b7e8:	f7fe fb96 	bl	8009f18 <vListInitialise>
=======
 800b7c2:	480c      	ldr	r0, [pc, #48]	@ (800b7f4 <prvInitialiseTaskLists+0x70>)
 800b7c4:	f7fe fb96 	bl	8009ef4 <vListInitialise>
>>>>>>> origin/main
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 800b7ec:	480b      	ldr	r0, [pc, #44]	@ (800b81c <prvInitialiseTaskLists+0x74>)
 800b7ee:	f7fe fb93 	bl	8009f18 <vListInitialise>
=======
 800b7c8:	480b      	ldr	r0, [pc, #44]	@ (800b7f8 <prvInitialiseTaskLists+0x74>)
 800b7ca:	f7fe fb93 	bl	8009ef4 <vListInitialise>
>>>>>>> origin/main
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b820 <prvInitialiseTaskLists+0x78>)
 800b7f4:	4a05      	ldr	r2, [pc, #20]	@ (800b80c <prvInitialiseTaskLists+0x64>)
 800b7f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b824 <prvInitialiseTaskLists+0x7c>)
 800b7fa:	4a05      	ldr	r2, [pc, #20]	@ (800b810 <prvInitialiseTaskLists+0x68>)
 800b7fc:	601a      	str	r2, [r3, #0]
}
 800b7fe:	bf00      	nop
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	2000119c 	.word	0x2000119c
 800b80c:	200015fc 	.word	0x200015fc
 800b810:	20001610 	.word	0x20001610
 800b814:	2000162c 	.word	0x2000162c
 800b818:	20001640 	.word	0x20001640
 800b81c:	20001658 	.word	0x20001658
 800b820:	20001624 	.word	0x20001624
 800b824:	20001628 	.word	0x20001628

0800b828 <prvCheckTasksWaitingTermination>:
=======
 800b7ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b7fc <prvInitialiseTaskLists+0x78>)
 800b7d0:	4a05      	ldr	r2, [pc, #20]	@ (800b7e8 <prvInitialiseTaskLists+0x64>)
 800b7d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b800 <prvInitialiseTaskLists+0x7c>)
 800b7d6:	4a05      	ldr	r2, [pc, #20]	@ (800b7ec <prvInitialiseTaskLists+0x68>)
 800b7d8:	601a      	str	r2, [r3, #0]
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	200011d8 	.word	0x200011d8
 800b7e8:	20001638 	.word	0x20001638
 800b7ec:	2000164c 	.word	0x2000164c
 800b7f0:	20001668 	.word	0x20001668
 800b7f4:	2000167c 	.word	0x2000167c
 800b7f8:	20001694 	.word	0x20001694
 800b7fc:	20001660 	.word	0x20001660
 800b800:	20001664 	.word	0x20001664

0800b804 <prvCheckTasksWaitingTermination>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
=======
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
>>>>>>> origin/main
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800b82e:	e019      	b.n	800b864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b830:	f000 fdea 	bl	800c408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b834:	4b10      	ldr	r3, [pc, #64]	@ (800b878 <prvCheckTasksWaitingTermination+0x50>)
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3304      	adds	r3, #4
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe fbf3 	bl	800a02c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <prvCheckTasksWaitingTermination+0x54>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3b01      	subs	r3, #1
 800b84c:	4a0b      	ldr	r2, [pc, #44]	@ (800b87c <prvCheckTasksWaitingTermination+0x54>)
 800b84e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b850:	4b0b      	ldr	r3, [pc, #44]	@ (800b880 <prvCheckTasksWaitingTermination+0x58>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3b01      	subs	r3, #1
 800b856:	4a0a      	ldr	r2, [pc, #40]	@ (800b880 <prvCheckTasksWaitingTermination+0x58>)
 800b858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b85a:	f000 fe07 	bl	800c46c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f810 	bl	800b884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b864:	4b06      	ldr	r3, [pc, #24]	@ (800b880 <prvCheckTasksWaitingTermination+0x58>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1e1      	bne.n	800b830 <prvCheckTasksWaitingTermination+0x8>
=======
 800b80a:	e019      	b.n	800b840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b80c:	f000 fdec 	bl	800c3e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b810:	4b10      	ldr	r3, [pc, #64]	@ (800b854 <prvCheckTasksWaitingTermination+0x50>)
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe fbf3 	bl	800a008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b822:	4b0d      	ldr	r3, [pc, #52]	@ (800b858 <prvCheckTasksWaitingTermination+0x54>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3b01      	subs	r3, #1
 800b828:	4a0b      	ldr	r2, [pc, #44]	@ (800b858 <prvCheckTasksWaitingTermination+0x54>)
 800b82a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b82c:	4b0b      	ldr	r3, [pc, #44]	@ (800b85c <prvCheckTasksWaitingTermination+0x58>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3b01      	subs	r3, #1
 800b832:	4a0a      	ldr	r2, [pc, #40]	@ (800b85c <prvCheckTasksWaitingTermination+0x58>)
 800b834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b836:	f000 fe09 	bl	800c44c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f810 	bl	800b860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b840:	4b06      	ldr	r3, [pc, #24]	@ (800b85c <prvCheckTasksWaitingTermination+0x58>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e1      	bne.n	800b80c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> origin/main
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 800b86c:	bf00      	nop
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20001640 	.word	0x20001640
 800b87c:	2000166c 	.word	0x2000166c
 800b880:	20001654 	.word	0x20001654

0800b884 <prvDeleteTCB>:
=======
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	2000167c 	.word	0x2000167c
 800b858:	200016a8 	.word	0x200016a8
 800b85c:	20001690 	.word	0x20001690

0800b860 <prvDeleteTCB>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
=======
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< HEAD
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3354      	adds	r3, #84	@ 0x54
 800b890:	4618      	mov	r0, r3
 800b892:	f001 f8d1 	bl	800ca38 <_reclaim_reent>
=======
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	3354      	adds	r3, #84	@ 0x54
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 f8d3 	bl	800ca18 <_reclaim_reent>
>>>>>>> origin/main
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d108      	bne.n	800b8b2 <prvDeleteTCB+0x2e>
=======
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d108      	bne.n	800b88e <prvDeleteTCB+0x2e>
>>>>>>> origin/main
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 ff9f 	bl	800c7e8 <vPortFree>
				vPortFree( pxTCB );
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 ff9c 	bl	800c7e8 <vPortFree>
=======
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b880:	4618      	mov	r0, r3
 800b882:	f000 ffa1 	bl	800c7c8 <vPortFree>
				vPortFree( pxTCB );
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 ff9e 	bl	800c7c8 <vPortFree>
>>>>>>> origin/main
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 800b8b0:	e019      	b.n	800b8e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d103      	bne.n	800b8c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 ff93 	bl	800c7e8 <vPortFree>
	}
 800b8c2:	e010      	b.n	800b8e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d00b      	beq.n	800b8e6 <prvDeleteTCB+0x62>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	60fb      	str	r3, [r7, #12]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <prvDeleteTCB+0x5e>
	}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <prvResetNextTaskUnblockTime>:
=======
 800b88c:	e019      	b.n	800b8c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b894:	2b01      	cmp	r3, #1
 800b896:	d103      	bne.n	800b8a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 ff95 	bl	800c7c8 <vPortFree>
	}
 800b89e:	e010      	b.n	800b8c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d00b      	beq.n	800b8c2 <prvDeleteTCB+0x62>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	60fb      	str	r3, [r7, #12]
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	e7fd      	b.n	800b8be <prvDeleteTCB+0x5e>
	}
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <prvResetNextTaskUnblockTime>:
>>>>>>> origin/main

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b928 <prvResetNextTaskUnblockTime+0x38>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <prvResetNextTaskUnblockTime+0x1a>
=======
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <prvResetNextTaskUnblockTime+0x38>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d104      	bne.n	800b8e6 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> origin/main
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800b900:	4b0a      	ldr	r3, [pc, #40]	@ (800b92c <prvResetNextTaskUnblockTime+0x3c>)
 800b902:	f04f 32ff 	mov.w	r2, #4294967295
 800b906:	601a      	str	r2, [r3, #0]
=======
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b908 <prvResetNextTaskUnblockTime+0x3c>)
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800b908:	e008      	b.n	800b91c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b90a:	4b07      	ldr	r3, [pc, #28]	@ (800b928 <prvResetNextTaskUnblockTime+0x38>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4a04      	ldr	r2, [pc, #16]	@ (800b92c <prvResetNextTaskUnblockTime+0x3c>)
 800b91a:	6013      	str	r3, [r2, #0]
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	20001624 	.word	0x20001624
 800b92c:	2000168c 	.word	0x2000168c

0800b930 <xTaskGetSchedulerState>:
=======
 800b8e4:	e008      	b.n	800b8f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e6:	4b07      	ldr	r3, [pc, #28]	@ (800b904 <prvResetNextTaskUnblockTime+0x38>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4a04      	ldr	r2, [pc, #16]	@ (800b908 <prvResetNextTaskUnblockTime+0x3c>)
 800b8f6:	6013      	str	r3, [r2, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20001660 	.word	0x20001660
 800b908:	200016c8 	.word	0x200016c8

0800b90c <xTaskGetSchedulerState>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b936:	4b0b      	ldr	r3, [pc, #44]	@ (800b964 <xTaskGetSchedulerState+0x34>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b93e:	2301      	movs	r3, #1
 800b940:	607b      	str	r3, [r7, #4]
 800b942:	e008      	b.n	800b956 <xTaskGetSchedulerState+0x26>
=======
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b912:	4b0b      	ldr	r3, [pc, #44]	@ (800b940 <xTaskGetSchedulerState+0x34>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b91a:	2301      	movs	r3, #1
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	e008      	b.n	800b932 <xTaskGetSchedulerState+0x26>
>>>>>>> origin/main
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800b944:	4b08      	ldr	r3, [pc, #32]	@ (800b968 <xTaskGetSchedulerState+0x38>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b94c:	2302      	movs	r3, #2
 800b94e:	607b      	str	r3, [r7, #4]
 800b950:	e001      	b.n	800b956 <xTaskGetSchedulerState+0x26>
=======
 800b920:	4b08      	ldr	r3, [pc, #32]	@ (800b944 <xTaskGetSchedulerState+0x38>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b928:	2302      	movs	r3, #2
 800b92a:	607b      	str	r3, [r7, #4]
 800b92c:	e001      	b.n	800b932 <xTaskGetSchedulerState+0x26>
>>>>>>> origin/main
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 800b952:	2300      	movs	r3, #0
 800b954:	607b      	str	r3, [r7, #4]
=======
 800b92e:	2300      	movs	r3, #0
 800b930:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
			}
		}

		return xReturn;
<<<<<<< HEAD
 800b956:	687b      	ldr	r3, [r7, #4]
	}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	20001678 	.word	0x20001678
 800b968:	20001694 	.word	0x20001694

0800b96c <xTaskPriorityDisinherit>:
=======
 800b932:	687b      	ldr	r3, [r7, #4]
	}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	200016b4 	.word	0x200016b4
 800b944:	200016d0 	.word	0x200016d0

0800b948 <xTaskPriorityDisinherit>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d058      	beq.n	800ba34 <xTaskPriorityDisinherit+0xc8>
=======
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b954:	2300      	movs	r3, #0
 800b956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d058      	beq.n	800ba10 <xTaskPriorityDisinherit+0xc8>
>>>>>>> origin/main
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 800b982:	4b2f      	ldr	r3, [pc, #188]	@ (800ba40 <xTaskPriorityDisinherit+0xd4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d00b      	beq.n	800b9a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10b      	bne.n	800b9c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60bb      	str	r3, [r7, #8]
}
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	e7fd      	b.n	800b9c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9c8:	1e5a      	subs	r2, r3, #1
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800b95e:	4b2f      	ldr	r3, [pc, #188]	@ (800ba1c <xTaskPriorityDisinherit+0xd4>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	429a      	cmp	r2, r3
 800b966:	d00b      	beq.n	800b980 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	60fb      	str	r3, [r7, #12]
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	e7fd      	b.n	800b97c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	60bb      	str	r3, [r7, #8]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9a4:	1e5a      	subs	r2, r3, #1
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> origin/main

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d02c      	beq.n	800ba34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d128      	bne.n	800ba34 <xTaskPriorityDisinherit+0xc8>
=======
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d02c      	beq.n	800ba10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d128      	bne.n	800ba10 <xTaskPriorityDisinherit+0xc8>
>>>>>>> origin/main
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fb20 	bl	800a02c <uxListRemove>
=======
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fb20 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> origin/main

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba04:	4b0f      	ldr	r3, [pc, #60]	@ (800ba44 <xTaskPriorityDisinherit+0xd8>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d903      	bls.n	800ba14 <xTaskPriorityDisinherit+0xa8>
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba10:	4a0c      	ldr	r2, [pc, #48]	@ (800ba44 <xTaskPriorityDisinherit+0xd8>)
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4a09      	ldr	r2, [pc, #36]	@ (800ba48 <xTaskPriorityDisinherit+0xdc>)
 800ba22:	441a      	add	r2, r3
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	3304      	adds	r3, #4
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f7fe faa1 	bl	8009f72 <vListInsertEnd>
=======
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800ba20 <xTaskPriorityDisinherit+0xd8>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d903      	bls.n	800b9f0 <xTaskPriorityDisinherit+0xa8>
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ec:	4a0c      	ldr	r2, [pc, #48]	@ (800ba20 <xTaskPriorityDisinherit+0xd8>)
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4a09      	ldr	r2, [pc, #36]	@ (800ba24 <xTaskPriorityDisinherit+0xdc>)
 800b9fe:	441a      	add	r2, r3
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f7fe faa1 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800ba30:	2301      	movs	r3, #1
 800ba32:	617b      	str	r3, [r7, #20]
=======
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800ba34:	697b      	ldr	r3, [r7, #20]
	}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20001198 	.word	0x20001198
 800ba44:	20001674 	.word	0x20001674
 800ba48:	2000119c 	.word	0x2000119c

0800ba4c <prvAddCurrentTaskToDelayedList>:
=======
 800ba10:	697b      	ldr	r3, [r7, #20]
	}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200011d4 	.word	0x200011d4
 800ba20:	200016b0 	.word	0x200016b0
 800ba24:	200011d8 	.word	0x200011d8

0800ba28 <prvAddCurrentTaskToDelayedList>:
>>>>>>> origin/main

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba56:	4b21      	ldr	r3, [pc, #132]	@ (800badc <prvAddCurrentTaskToDelayedList+0x90>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	60fb      	str	r3, [r7, #12]
=======
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba32:	4b21      	ldr	r3, [pc, #132]	@ (800bab8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800ba5c:	4b20      	ldr	r3, [pc, #128]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3304      	adds	r3, #4
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fae2 	bl	800a02c <uxListRemove>
=======
 800ba38:	4b20      	ldr	r3, [pc, #128]	@ (800babc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fae2 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d10a      	bne.n	800ba86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4a:	d10a      	bne.n	800ba62 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d007      	beq.n	800ba62 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> origin/main
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800ba76:	4b1a      	ldr	r3, [pc, #104]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4819      	ldr	r0, [pc, #100]	@ (800bae4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba80:	f7fe fa77 	bl	8009f72 <vListInsertEnd>
=======
 800ba52:	4b1a      	ldr	r3, [pc, #104]	@ (800babc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3304      	adds	r3, #4
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4819      	ldr	r0, [pc, #100]	@ (800bac0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba5c:	f7fe fa77 	bl	8009f4e <vListInsertEnd>
>>>>>>> origin/main

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800ba84:	e026      	b.n	800bad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba8e:	4b14      	ldr	r3, [pc, #80]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d209      	bcs.n	800bab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba9e:	4b12      	ldr	r3, [pc, #72]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	4b0f      	ldr	r3, [pc, #60]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4619      	mov	r1, r3
 800baaa:	4610      	mov	r0, r2
 800baac:	f7fe fa85 	bl	8009fba <vListInsert>
}
 800bab0:	e010      	b.n	800bad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bab2:	4b0e      	ldr	r3, [pc, #56]	@ (800baec <prvAddCurrentTaskToDelayedList+0xa0>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4b0a      	ldr	r3, [pc, #40]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3304      	adds	r3, #4
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	f7fe fa7b 	bl	8009fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bac4:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d202      	bcs.n	800bad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bace:	4a08      	ldr	r2, [pc, #32]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	6013      	str	r3, [r2, #0]
}
 800bad4:	bf00      	nop
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20001670 	.word	0x20001670
 800bae0:	20001198 	.word	0x20001198
 800bae4:	20001658 	.word	0x20001658
 800bae8:	20001628 	.word	0x20001628
 800baec:	20001624 	.word	0x20001624
 800baf0:	2000168c 	.word	0x2000168c

0800baf4 <xTimerCreateTimerTask>:
=======
 800ba60:	e026      	b.n	800bab0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4413      	add	r3, r2
 800ba68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba6a:	4b14      	ldr	r3, [pc, #80]	@ (800babc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d209      	bcs.n	800ba8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba7a:	4b12      	ldr	r3, [pc, #72]	@ (800bac4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	@ (800babc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4619      	mov	r1, r3
 800ba86:	4610      	mov	r0, r2
 800ba88:	f7fe fa85 	bl	8009f96 <vListInsert>
}
 800ba8c:	e010      	b.n	800bab0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b0a      	ldr	r3, [pc, #40]	@ (800babc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7fe fa7b 	bl	8009f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baa0:	4b0a      	ldr	r3, [pc, #40]	@ (800bacc <prvAddCurrentTaskToDelayedList+0xa4>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d202      	bcs.n	800bab0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800baaa:	4a08      	ldr	r2, [pc, #32]	@ (800bacc <prvAddCurrentTaskToDelayedList+0xa4>)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	6013      	str	r3, [r2, #0]
}
 800bab0:	bf00      	nop
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	200016ac 	.word	0x200016ac
 800babc:	200011d4 	.word	0x200011d4
 800bac0:	20001694 	.word	0x20001694
 800bac4:	20001664 	.word	0x20001664
 800bac8:	20001660 	.word	0x20001660
 800bacc:	200016c8 	.word	0x200016c8

0800bad0 <xTimerCreateTimerTask>:
>>>>>>> origin/main
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08a      	sub	sp, #40	@ 0x28
 800baf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
=======
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08a      	sub	sp, #40	@ 0x28
 800bad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 800bafe:	f000 fb13 	bl	800c128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb02:	4b1d      	ldr	r3, [pc, #116]	@ (800bb78 <xTimerCreateTimerTask+0x84>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d021      	beq.n	800bb4e <xTimerCreateTimerTask+0x5a>
=======
 800bada:	f000 fb13 	bl	800c104 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bade:	4b1d      	ldr	r3, [pc, #116]	@ (800bb54 <xTimerCreateTimerTask+0x84>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d021      	beq.n	800bb2a <xTimerCreateTimerTask+0x5a>
>>>>>>> origin/main
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb12:	1d3a      	adds	r2, r7, #4
 800bb14:	f107 0108 	add.w	r1, r7, #8
 800bb18:	f107 030c 	add.w	r3, r7, #12
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fe f9e1 	bl	8009ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	9202      	str	r2, [sp, #8]
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	2300      	movs	r3, #0
 800bb32:	460a      	mov	r2, r1
 800bb34:	4911      	ldr	r1, [pc, #68]	@ (800bb7c <xTimerCreateTimerTask+0x88>)
 800bb36:	4812      	ldr	r0, [pc, #72]	@ (800bb80 <xTimerCreateTimerTask+0x8c>)
 800bb38:	f7fe ff9c 	bl	800aa74 <xTaskCreateStatic>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	4a11      	ldr	r2, [pc, #68]	@ (800bb84 <xTimerCreateTimerTask+0x90>)
 800bb40:	6013      	str	r3, [r2, #0]
=======
 800bae6:	2300      	movs	r3, #0
 800bae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baee:	1d3a      	adds	r2, r7, #4
 800baf0:	f107 0108 	add.w	r1, r7, #8
 800baf4:	f107 030c 	add.w	r3, r7, #12
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fe f9e1 	bl	8009ec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	9202      	str	r2, [sp, #8]
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	2302      	movs	r3, #2
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	460a      	mov	r2, r1
 800bb10:	4911      	ldr	r1, [pc, #68]	@ (800bb58 <xTimerCreateTimerTask+0x88>)
 800bb12:	4812      	ldr	r0, [pc, #72]	@ (800bb5c <xTimerCreateTimerTask+0x8c>)
 800bb14:	f7fe ff9c 	bl	800aa50 <xTaskCreateStatic>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	4a11      	ldr	r2, [pc, #68]	@ (800bb60 <xTimerCreateTimerTask+0x90>)
 800bb1c:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 800bb42:	4b10      	ldr	r3, [pc, #64]	@ (800bb84 <xTimerCreateTimerTask+0x90>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	617b      	str	r3, [r7, #20]
=======
 800bb1e:	4b10      	ldr	r3, [pc, #64]	@ (800bb60 <xTimerCreateTimerTask+0x90>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb26:	2301      	movs	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10b      	bne.n	800bb6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	613b      	str	r3, [r7, #16]
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	e7fd      	b.n	800bb68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb6c:	697b      	ldr	r3, [r7, #20]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	200016c8 	.word	0x200016c8
 800bb7c:	0800cc98 	.word	0x0800cc98
 800bb80:	0800bcc1 	.word	0x0800bcc1
 800bb84:	200016cc 	.word	0x200016cc

0800bb88 <xTimerGenericCommand>:
=======
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	613b      	str	r3, [r7, #16]
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb48:	697b      	ldr	r3, [r7, #20]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20001704 	.word	0x20001704
 800bb58:	0800cc78 	.word	0x0800cc78
 800bb5c:	0800bc9d 	.word	0x0800bc9d
 800bb60:	20001708 	.word	0x20001708

0800bb64 <xTimerGenericCommand>:
>>>>>>> origin/main
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08a      	sub	sp, #40	@ 0x28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10b      	bne.n	800bbb8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	623b      	str	r3, [r7, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	bf00      	nop
 800bbb6:	e7fd      	b.n	800bbb4 <xTimerGenericCommand+0x2c>
=======
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08a      	sub	sp, #40	@ 0x28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10b      	bne.n	800bb94 <xTimerGenericCommand+0x30>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	623b      	str	r3, [r7, #32]
}
 800bb8e:	bf00      	nop
 800bb90:	bf00      	nop
 800bb92:	e7fd      	b.n	800bb90 <xTimerGenericCommand+0x2c>
>>>>>>> origin/main

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 800bbb8:	4b19      	ldr	r3, [pc, #100]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d02a      	beq.n	800bc16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b05      	cmp	r3, #5
 800bbd0:	dc18      	bgt.n	800bc04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbd2:	f7ff fead 	bl	800b930 <xTaskGetSchedulerState>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d109      	bne.n	800bbf0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbdc:	4b10      	ldr	r3, [pc, #64]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bbde:	6818      	ldr	r0, [r3, #0]
 800bbe0:	f107 0110 	add.w	r1, r7, #16
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbe8:	f7fe fb54 	bl	800a294 <xQueueGenericSend>
 800bbec:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbee:	e012      	b.n	800bc16 <xTimerGenericCommand+0x8e>
=======
 800bb94:	4b19      	ldr	r3, [pc, #100]	@ (800bbfc <xTimerGenericCommand+0x98>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d02a      	beq.n	800bbf2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b05      	cmp	r3, #5
 800bbac:	dc18      	bgt.n	800bbe0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbae:	f7ff fead 	bl	800b90c <xTaskGetSchedulerState>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d109      	bne.n	800bbcc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbb8:	4b10      	ldr	r3, [pc, #64]	@ (800bbfc <xTimerGenericCommand+0x98>)
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	f107 0110 	add.w	r1, r7, #16
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbc4:	f7fe fb54 	bl	800a270 <xQueueGenericSend>
 800bbc8:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbca:	e012      	b.n	800bbf2 <xTimerGenericCommand+0x8e>
>>>>>>> origin/main
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	f107 0110 	add.w	r1, r7, #16
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7fe fb4a 	bl	800a294 <xQueueGenericSend>
 800bc00:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc02:	e008      	b.n	800bc16 <xTimerGenericCommand+0x8e>
=======
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbfc <xTimerGenericCommand+0x98>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	f107 0110 	add.w	r1, r7, #16
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f7fe fb4a 	bl	800a270 <xQueueGenericSend>
 800bbdc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbde:	e008      	b.n	800bbf2 <xTimerGenericCommand+0x8e>
>>>>>>> origin/main
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 800bc04:	4b06      	ldr	r3, [pc, #24]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	f107 0110 	add.w	r1, r7, #16
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	f7fe fc42 	bl	800a498 <xQueueGenericSendFromISR>
 800bc14:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 800bbe0:	4b06      	ldr	r3, [pc, #24]	@ (800bbfc <xTimerGenericCommand+0x98>)
 800bbe2:	6818      	ldr	r0, [r3, #0]
 800bbe4:	f107 0110 	add.w	r1, r7, #16
 800bbe8:	2300      	movs	r3, #0
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	f7fe fc42 	bl	800a474 <xQueueGenericSendFromISR>
 800bbf0:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> origin/main
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3728      	adds	r7, #40	@ 0x28
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	200016c8 	.word	0x200016c8

0800bc24 <prvProcessExpiredTimer>:
=======
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3728      	adds	r7, #40	@ 0x28
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20001704 	.word	0x20001704

0800bc00 <prvProcessExpiredTimer>:
>>>>>>> origin/main
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2e:	4b23      	ldr	r3, [pc, #140]	@ (800bcbc <prvProcessExpiredTimer+0x98>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	617b      	str	r3, [r7, #20]
=======
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc0a:	4b23      	ldr	r3, [pc, #140]	@ (800bc98 <prvProcessExpiredTimer+0x98>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe f9f5 	bl	800a02c <uxListRemove>
=======
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	3304      	adds	r3, #4
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe f9f5 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d023      	beq.n	800bc98 <prvProcessExpiredTimer+0x74>
=======
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d023      	beq.n	800bc74 <prvProcessExpiredTimer+0x74>
>>>>>>> origin/main
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	699a      	ldr	r2, [r3, #24]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	18d1      	adds	r1, r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6978      	ldr	r0, [r7, #20]
 800bc5e:	f000 f8d5 	bl	800be0c <prvInsertTimerInActiveList>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d020      	beq.n	800bcaa <prvProcessExpiredTimer+0x86>
=======
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	699a      	ldr	r2, [r3, #24]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	18d1      	adds	r1, r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	6978      	ldr	r0, [r7, #20]
 800bc3a:	f000 f8d5 	bl	800bde8 <prvInsertTimerInActiveList>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d020      	beq.n	800bc86 <prvProcessExpiredTimer+0x86>
>>>>>>> origin/main
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	2100      	movs	r1, #0
 800bc72:	6978      	ldr	r0, [r7, #20]
 800bc74:	f7ff ff88 	bl	800bb88 <xTimerGenericCommand>
 800bc78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d114      	bne.n	800bcaa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60fb      	str	r3, [r7, #12]
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	e7fd      	b.n	800bc94 <prvProcessExpiredTimer+0x70>
=======
 800bc44:	2300      	movs	r3, #0
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	6978      	ldr	r0, [r7, #20]
 800bc50:	f7ff ff88 	bl	800bb64 <xTimerGenericCommand>
 800bc54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d114      	bne.n	800bc86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	bf00      	nop
 800bc72:	e7fd      	b.n	800bc70 <prvProcessExpiredTimer+0x70>
>>>>>>> origin/main
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc9e:	f023 0301 	bic.w	r3, r3, #1
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc7a:	f023 0301 	bic.w	r3, r3, #1
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> origin/main
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	6978      	ldr	r0, [r7, #20]
 800bcb0:	4798      	blx	r3
}
 800bcb2:	bf00      	nop
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	200016c0 	.word	0x200016c0

0800bcc0 <prvTimerTask>:
=======
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	6978      	ldr	r0, [r7, #20]
 800bc8c:	4798      	blx	r3
}
 800bc8e:	bf00      	nop
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	200016fc 	.word	0x200016fc

0800bc9c <prvTimerTask>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
=======
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 800bcc8:	f107 0308 	add.w	r3, r7, #8
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 f859 	bl	800bd84 <prvGetNextExpireTime>
 800bcd2:	60f8      	str	r0, [r7, #12]
=======
 800bca4:	f107 0308 	add.w	r3, r7, #8
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 f859 	bl	800bd60 <prvGetNextExpireTime>
 800bcae:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f000 f805 	bl	800bce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcde:	f000 f8d7 	bl	800be90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bce2:	bf00      	nop
 800bce4:	e7f0      	b.n	800bcc8 <prvTimerTask+0x8>
	...

0800bce8 <prvProcessTimerOrBlockTask>:
=======
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f805 	bl	800bcc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcba:	f000 f8d7 	bl	800be6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcbe:	bf00      	nop
 800bcc0:	e7f0      	b.n	800bca4 <prvTimerTask+0x8>
	...

0800bcc4 <prvProcessTimerOrBlockTask>:
>>>>>>> origin/main
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
=======
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 800bcf2:	f7ff fa17 	bl	800b124 <vTaskSuspendAll>
=======
 800bcce:	f7ff fa17 	bl	800b100 <vTaskSuspendAll>
>>>>>>> origin/main
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800bcf6:	f107 0308 	add.w	r3, r7, #8
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 f866 	bl	800bdcc <prvSampleTimeNow>
 800bd00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d130      	bne.n	800bd6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <prvProcessTimerOrBlockTask+0x3c>
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d806      	bhi.n	800bd24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd16:	f7ff fa13 	bl	800b140 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd1a:	68f9      	ldr	r1, [r7, #12]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff ff81 	bl	800bc24 <prvProcessExpiredTimer>
=======
 800bcd2:	f107 0308 	add.w	r3, r7, #8
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 f866 	bl	800bda8 <prvSampleTimeNow>
 800bcdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d130      	bne.n	800bd46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <prvProcessTimerOrBlockTask+0x3c>
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d806      	bhi.n	800bd00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcf2:	f7ff fa13 	bl	800b11c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcf6:	68f9      	ldr	r1, [r7, #12]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7ff ff81 	bl	800bc00 <prvProcessExpiredTimer>
>>>>>>> origin/main
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 800bd22:	e024      	b.n	800bd6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d008      	beq.n	800bd3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd2a:	4b13      	ldr	r3, [pc, #76]	@ (800bd78 <prvProcessTimerOrBlockTask+0x90>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <prvProcessTimerOrBlockTask+0x50>
 800bd34:	2301      	movs	r3, #1
 800bd36:	e000      	b.n	800bd3a <prvProcessTimerOrBlockTask+0x52>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd7c <prvProcessTimerOrBlockTask+0x94>)
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f7fe fe5f 	bl	800aa0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd4e:	f7ff f9f7 	bl	800b140 <xTaskResumeAll>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd58:	4b09      	ldr	r3, [pc, #36]	@ (800bd80 <prvProcessTimerOrBlockTask+0x98>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
}
 800bd68:	e001      	b.n	800bd6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd6a:	f7ff f9e9 	bl	800b140 <xTaskResumeAll>
}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	200016c4 	.word	0x200016c4
 800bd7c:	200016c8 	.word	0x200016c8
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <prvGetNextExpireTime>:
=======
 800bcfe:	e024      	b.n	800bd4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d008      	beq.n	800bd18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd06:	4b13      	ldr	r3, [pc, #76]	@ (800bd54 <prvProcessTimerOrBlockTask+0x90>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <prvProcessTimerOrBlockTask+0x50>
 800bd10:	2301      	movs	r3, #1
 800bd12:	e000      	b.n	800bd16 <prvProcessTimerOrBlockTask+0x52>
 800bd14:	2300      	movs	r3, #0
 800bd16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd18:	4b0f      	ldr	r3, [pc, #60]	@ (800bd58 <prvProcessTimerOrBlockTask+0x94>)
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	4619      	mov	r1, r3
 800bd26:	f7fe fe5f 	bl	800a9e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd2a:	f7ff f9f7 	bl	800b11c <xTaskResumeAll>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd34:	4b09      	ldr	r3, [pc, #36]	@ (800bd5c <prvProcessTimerOrBlockTask+0x98>)
 800bd36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	f3bf 8f6f 	isb	sy
}
 800bd44:	e001      	b.n	800bd4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd46:	f7ff f9e9 	bl	800b11c <xTaskResumeAll>
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	20001700 	.word	0x20001700
 800bd58:	20001704 	.word	0x20001704
 800bd5c:	e000ed04 	.word	0xe000ed04

0800bd60 <prvGetNextExpireTime>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
=======
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc8 <prvGetNextExpireTime+0x44>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <prvGetNextExpireTime+0x16>
 800bd96:	2201      	movs	r2, #1
 800bd98:	e000      	b.n	800bd9c <prvGetNextExpireTime+0x18>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d105      	bne.n	800bdb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bda8:	4b07      	ldr	r3, [pc, #28]	@ (800bdc8 <prvGetNextExpireTime+0x44>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	60fb      	str	r3, [r7, #12]
 800bdb2:	e001      	b.n	800bdb8 <prvGetNextExpireTime+0x34>
=======
 800bd68:	4b0e      	ldr	r3, [pc, #56]	@ (800bda4 <prvGetNextExpireTime+0x44>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <prvGetNextExpireTime+0x16>
 800bd72:	2201      	movs	r2, #1
 800bd74:	e000      	b.n	800bd78 <prvGetNextExpireTime+0x18>
 800bd76:	2200      	movs	r2, #0
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d105      	bne.n	800bd90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd84:	4b07      	ldr	r3, [pc, #28]	@ (800bda4 <prvGetNextExpireTime+0x44>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	e001      	b.n	800bd94 <prvGetNextExpireTime+0x34>
>>>>>>> origin/main
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	200016c0 	.word	0x200016c0

0800bdcc <prvSampleTimeNow>:
=======
 800bd90:	2300      	movs	r3, #0
 800bd92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd94:	68fb      	ldr	r3, [r7, #12]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	200016fc 	.word	0x200016fc

0800bda8 <prvSampleTimeNow>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
=======
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 800bdd4:	f7ff fa52 	bl	800b27c <xTaskGetTickCount>
 800bdd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdda:	4b0b      	ldr	r3, [pc, #44]	@ (800be08 <prvSampleTimeNow+0x3c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d205      	bcs.n	800bdf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bde4:	f000 f93a 	bl	800c05c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	e002      	b.n	800bdf6 <prvSampleTimeNow+0x2a>
=======
 800bdb0:	f7ff fa52 	bl	800b258 <xTaskGetTickCount>
 800bdb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bde4 <prvSampleTimeNow+0x3c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d205      	bcs.n	800bdcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdc0:	f000 f93a 	bl	800c038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	e002      	b.n	800bdd2 <prvSampleTimeNow+0x2a>
>>>>>>> origin/main
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdf6:	4a04      	ldr	r2, [pc, #16]	@ (800be08 <prvSampleTimeNow+0x3c>)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	200016d0 	.word	0x200016d0

0800be0c <prvInsertTimerInActiveList>:
=======
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdd2:	4a04      	ldr	r2, [pc, #16]	@ (800bde4 <prvSampleTimeNow+0x3c>)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	2000170c 	.word	0x2000170c

0800bde8 <prvInsertTimerInActiveList>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d812      	bhi.n	800be58 <prvInsertTimerInActiveList+0x4c>
=======
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d812      	bhi.n	800be34 <prvInsertTimerInActiveList+0x4c>
>>>>>>> origin/main
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d302      	bcc.n	800be46 <prvInsertTimerInActiveList+0x3a>
=======
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d302      	bcc.n	800be22 <prvInsertTimerInActiveList+0x3a>
>>>>>>> origin/main
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800be40:	2301      	movs	r3, #1
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e01b      	b.n	800be7e <prvInsertTimerInActiveList+0x72>
=======
 800be1c:	2301      	movs	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e01b      	b.n	800be5a <prvInsertTimerInActiveList+0x72>
>>>>>>> origin/main
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800be46:	4b10      	ldr	r3, [pc, #64]	@ (800be88 <prvInsertTimerInActiveList+0x7c>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3304      	adds	r3, #4
 800be4e:	4619      	mov	r1, r3
 800be50:	4610      	mov	r0, r2
 800be52:	f7fe f8b2 	bl	8009fba <vListInsert>
 800be56:	e012      	b.n	800be7e <prvInsertTimerInActiveList+0x72>
=======
 800be22:	4b10      	ldr	r3, [pc, #64]	@ (800be64 <prvInsertTimerInActiveList+0x7c>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3304      	adds	r3, #4
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7fe f8b2 	bl	8009f96 <vListInsert>
 800be32:	e012      	b.n	800be5a <prvInsertTimerInActiveList+0x72>
>>>>>>> origin/main
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d206      	bcs.n	800be6e <prvInsertTimerInActiveList+0x62>
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d302      	bcc.n	800be6e <prvInsertTimerInActiveList+0x62>
=======
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d206      	bcs.n	800be4a <prvInsertTimerInActiveList+0x62>
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d302      	bcc.n	800be4a <prvInsertTimerInActiveList+0x62>
>>>>>>> origin/main
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800be68:	2301      	movs	r3, #1
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	e007      	b.n	800be7e <prvInsertTimerInActiveList+0x72>
=======
 800be44:	2301      	movs	r3, #1
 800be46:	617b      	str	r3, [r7, #20]
 800be48:	e007      	b.n	800be5a <prvInsertTimerInActiveList+0x72>
>>>>>>> origin/main
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800be6e:	4b07      	ldr	r3, [pc, #28]	@ (800be8c <prvInsertTimerInActiveList+0x80>)
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3304      	adds	r3, #4
 800be76:	4619      	mov	r1, r3
 800be78:	4610      	mov	r0, r2
 800be7a:	f7fe f89e 	bl	8009fba <vListInsert>
=======
 800be4a:	4b07      	ldr	r3, [pc, #28]	@ (800be68 <prvInsertTimerInActiveList+0x80>)
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3304      	adds	r3, #4
 800be52:	4619      	mov	r1, r3
 800be54:	4610      	mov	r0, r2
 800be56:	f7fe f89e 	bl	8009f96 <vListInsert>
>>>>>>> origin/main
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 800be7e:	697b      	ldr	r3, [r7, #20]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	200016c4 	.word	0x200016c4
 800be8c:	200016c0 	.word	0x200016c0

0800be90 <prvProcessReceivedCommands>:
=======
 800be5a:	697b      	ldr	r3, [r7, #20]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3718      	adds	r7, #24
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	20001700 	.word	0x20001700
 800be68:	200016fc 	.word	0x200016fc

0800be6c <prvProcessReceivedCommands>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 800be90:	b580      	push	{r7, lr}
 800be92:	b08e      	sub	sp, #56	@ 0x38
 800be94:	af02      	add	r7, sp, #8
=======
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08e      	sub	sp, #56	@ 0x38
 800be70:	af02      	add	r7, sp, #8
>>>>>>> origin/main
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800be96:	e0ce      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
=======
 800be72:	e0ce      	b.n	800c012 <prvProcessReceivedCommands+0x1a6>
>>>>>>> origin/main
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da19      	bge.n	800bed2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be9e:	1d3b      	adds	r3, r7, #4
 800bea0:	3304      	adds	r3, #4
 800bea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	da19      	bge.n	800beae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be7a:	1d3b      	adds	r3, r7, #4
 800be7c:	3304      	adds	r3, #4
 800be7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> origin/main

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 800bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10b      	bne.n	800bec2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	61fb      	str	r3, [r7, #28]
}
 800bebc:	bf00      	nop
 800bebe:	bf00      	nop
 800bec0:	e7fd      	b.n	800bebe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bec8:	6850      	ldr	r0, [r2, #4]
 800beca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800becc:	6892      	ldr	r2, [r2, #8]
 800bece:	4611      	mov	r1, r2
 800bed0:	4798      	blx	r3
=======
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10b      	bne.n	800be9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	61fb      	str	r3, [r7, #28]
}
 800be98:	bf00      	nop
 800be9a:	bf00      	nop
 800be9c:	e7fd      	b.n	800be9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bea4:	6850      	ldr	r0, [r2, #4]
 800bea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bea8:	6892      	ldr	r2, [r2, #8]
 800beaa:	4611      	mov	r1, r2
 800beac:	4798      	blx	r3
>>>>>>> origin/main
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f2c0 80ae 	blt.w	800c036 <prvProcessReceivedCommands+0x1a6>
=======
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f2c0 80ae 	blt.w	800c012 <prvProcessReceivedCommands+0x1a6>
>>>>>>> origin/main
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d004      	beq.n	800bef0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	3304      	adds	r3, #4
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe f89e 	bl	800a02c <uxListRemove>
=======
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d004      	beq.n	800becc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec4:	3304      	adds	r3, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe f89e 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800bef0:	463b      	mov	r3, r7
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff ff6a 	bl	800bdcc <prvSampleTimeNow>
 800bef8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b09      	cmp	r3, #9
 800befe:	f200 8097 	bhi.w	800c030 <prvProcessReceivedCommands+0x1a0>
 800bf02:	a201      	add	r2, pc, #4	@ (adr r2, 800bf08 <prvProcessReceivedCommands+0x78>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf31 	.word	0x0800bf31
 800bf0c:	0800bf31 	.word	0x0800bf31
 800bf10:	0800bf31 	.word	0x0800bf31
 800bf14:	0800bfa7 	.word	0x0800bfa7
 800bf18:	0800bfbb 	.word	0x0800bfbb
 800bf1c:	0800c007 	.word	0x0800c007
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf31 	.word	0x0800bf31
 800bf28:	0800bfa7 	.word	0x0800bfa7
 800bf2c:	0800bfbb 	.word	0x0800bfbb
=======
 800becc:	463b      	mov	r3, r7
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff ff6a 	bl	800bda8 <prvSampleTimeNow>
 800bed4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b09      	cmp	r3, #9
 800beda:	f200 8097 	bhi.w	800c00c <prvProcessReceivedCommands+0x1a0>
 800bede:	a201      	add	r2, pc, #4	@ (adr r2, 800bee4 <prvProcessReceivedCommands+0x78>)
 800bee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bf0d 	.word	0x0800bf0d
 800bef0:	0800bf83 	.word	0x0800bf83
 800bef4:	0800bf97 	.word	0x0800bf97
 800bef8:	0800bfe3 	.word	0x0800bfe3
 800befc:	0800bf0d 	.word	0x0800bf0d
 800bf00:	0800bf0d 	.word	0x0800bf0d
 800bf04:	0800bf83 	.word	0x0800bf83
 800bf08:	0800bf97 	.word	0x0800bf97
>>>>>>> origin/main
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800bf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	18d1      	adds	r1, r2, r3
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf50:	f7ff ff5c 	bl	800be0c <prvInsertTimerInActiveList>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d06c      	beq.n	800c034 <prvProcessReceivedCommands+0x1a4>
=======
 800bf0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	18d1      	adds	r1, r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf2c:	f7ff ff5c 	bl	800bde8 <prvInsertTimerInActiveList>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d06c      	beq.n	800c010 <prvProcessReceivedCommands+0x1a4>
>>>>>>> origin/main
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf68:	f003 0304 	and.w	r3, r3, #4
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d061      	beq.n	800c034 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	441a      	add	r2, r3
 800bf78:	2300      	movs	r3, #0
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2100      	movs	r1, #0
 800bf80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf82:	f7ff fe01 	bl	800bb88 <xTimerGenericCommand>
 800bf86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d152      	bne.n	800c034 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	61bb      	str	r3, [r7, #24]
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	e7fd      	b.n	800bfa2 <prvProcessReceivedCommands+0x112>
=======
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf44:	f003 0304 	and.w	r3, r3, #4
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d061      	beq.n	800c010 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	441a      	add	r2, r3
 800bf54:	2300      	movs	r3, #0
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf5e:	f7ff fe01 	bl	800bb64 <xTimerGenericCommand>
 800bf62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d152      	bne.n	800c010 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	61bb      	str	r3, [r7, #24]
}
 800bf7c:	bf00      	nop
 800bf7e:	bf00      	nop
 800bf80:	e7fd      	b.n	800bf7e <prvProcessReceivedCommands+0x112>
>>>>>>> origin/main
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfac:	f023 0301 	bic.w	r3, r3, #1
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfb8:	e03d      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
=======
 800bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf88:	f023 0301 	bic.w	r3, r3, #1
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf94:	e03d      	b.n	800c012 <prvProcessReceivedCommands+0x1a6>
>>>>>>> origin/main

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800bfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfc0:	f043 0301 	orr.w	r3, r3, #1
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10b      	bne.n	800bff2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	617b      	str	r3, [r7, #20]
}
 800bfec:	bf00      	nop
 800bfee:	bf00      	nop
 800bff0:	e7fd      	b.n	800bfee <prvProcessReceivedCommands+0x15e>
=======
 800bf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf9c:	f043 0301 	orr.w	r3, r3, #1
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	617b      	str	r3, [r7, #20]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <prvProcessReceivedCommands+0x15e>
>>>>>>> origin/main
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	18d1      	adds	r1, r2, r3
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c000:	f7ff ff04 	bl	800be0c <prvInsertTimerInActiveList>
					break;
 800c004:	e017      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
=======
 800bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd0:	699a      	ldr	r2, [r3, #24]
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	18d1      	adds	r1, r2, r3
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfdc:	f7ff ff04 	bl	800bde8 <prvInsertTimerInActiveList>
					break;
 800bfe0:	e017      	b.n	800c012 <prvProcessReceivedCommands+0x1a6>
>>>>>>> origin/main
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 800c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c016:	f000 fbe7 	bl	800c7e8 <vPortFree>
=======
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d103      	bne.n	800bff8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bff2:	f000 fbe9 	bl	800c7c8 <vPortFree>
>>>>>>> origin/main
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 800c01a:	e00c      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	b2da      	uxtb	r2, r3
 800c028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c02e:	e002      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
=======
 800bff6:	e00c      	b.n	800c012 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bffe:	f023 0301 	bic.w	r3, r3, #1
 800c002:	b2da      	uxtb	r2, r3
 800c004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c006:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c00a:	e002      	b.n	800c012 <prvProcessReceivedCommands+0x1a6>
>>>>>>> origin/main

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 800c030:	bf00      	nop
 800c032:	e000      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
					break;
 800c034:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c036:	4b08      	ldr	r3, [pc, #32]	@ (800c058 <prvProcessReceivedCommands+0x1c8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	1d39      	adds	r1, r7, #4
 800c03c:	2200      	movs	r2, #0
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe fac8 	bl	800a5d4 <xQueueReceive>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	f47f af26 	bne.w	800be98 <prvProcessReceivedCommands+0x8>
=======
 800c00c:	bf00      	nop
 800c00e:	e000      	b.n	800c012 <prvProcessReceivedCommands+0x1a6>
					break;
 800c010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c012:	4b08      	ldr	r3, [pc, #32]	@ (800c034 <prvProcessReceivedCommands+0x1c8>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	1d39      	adds	r1, r7, #4
 800c018:	2200      	movs	r2, #0
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fac8 	bl	800a5b0 <xQueueReceive>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	f47f af26 	bne.w	800be74 <prvProcessReceivedCommands+0x8>
>>>>>>> origin/main
			}
		}
	}
}
<<<<<<< HEAD
 800c04c:	bf00      	nop
 800c04e:	bf00      	nop
 800c050:	3730      	adds	r7, #48	@ 0x30
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200016c8 	.word	0x200016c8

0800c05c <prvSwitchTimerLists>:
=======
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
 800c02c:	3730      	adds	r7, #48	@ 0x30
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20001704 	.word	0x20001704

0800c038 <prvSwitchTimerLists>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af02      	add	r7, sp, #8
=======
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8
>>>>>>> origin/main

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800c062:	e049      	b.n	800c0f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c064:	4b2e      	ldr	r3, [pc, #184]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06e:	4b2c      	ldr	r3, [pc, #176]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	3304      	adds	r3, #4
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fd ffd5 	bl	800a02c <uxListRemove>
=======
 800c03e:	e049      	b.n	800c0d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c040:	4b2e      	ldr	r3, [pc, #184]	@ (800c0fc <prvSwitchTimerLists+0xc4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04a:	4b2c      	ldr	r3, [pc, #176]	@ (800c0fc <prvSwitchTimerLists+0xc4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3304      	adds	r3, #4
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fd ffd5 	bl	800a008 <uxListRemove>
>>>>>>> origin/main
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d02f      	beq.n	800c0f8 <prvSwitchTimerLists+0x9c>
=======
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d02f      	beq.n	800c0d4 <prvSwitchTimerLists+0x9c>
>>>>>>> origin/main
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	4413      	add	r3, r2
 800c0a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d90e      	bls.n	800c0c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	f7fd ff7a 	bl	8009fba <vListInsert>
 800c0c6:	e017      	b.n	800c0f8 <prvSwitchTimerLists+0x9c>
=======
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	4413      	add	r3, r2
 800c07c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	429a      	cmp	r2, r3
 800c084:	d90e      	bls.n	800c0a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c092:	4b1a      	ldr	r3, [pc, #104]	@ (800c0fc <prvSwitchTimerLists+0xc4>)
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3304      	adds	r3, #4
 800c09a:	4619      	mov	r1, r3
 800c09c:	4610      	mov	r0, r2
 800c09e:	f7fd ff7a 	bl	8009f96 <vListInsert>
 800c0a2:	e017      	b.n	800c0d4 <prvSwitchTimerLists+0x9c>
>>>>>>> origin/main
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff fd58 	bl	800bb88 <xTimerGenericCommand>
 800c0d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10b      	bne.n	800c0f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	603b      	str	r3, [r7, #0]
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	e7fd      	b.n	800c0f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0f8:	4b09      	ldr	r3, [pc, #36]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1b0      	bne.n	800c064 <prvSwitchTimerLists+0x8>
=======
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff fd58 	bl	800bb64 <xTimerGenericCommand>
 800c0b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10b      	bne.n	800c0d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	603b      	str	r3, [r7, #0]
}
 800c0ce:	bf00      	nop
 800c0d0:	bf00      	nop
 800c0d2:	e7fd      	b.n	800c0d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0d4:	4b09      	ldr	r3, [pc, #36]	@ (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1b0      	bne.n	800c040 <prvSwitchTimerLists+0x8>
>>>>>>> origin/main
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800c102:	4b07      	ldr	r3, [pc, #28]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c108:	4b06      	ldr	r3, [pc, #24]	@ (800c124 <prvSwitchTimerLists+0xc8>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a04      	ldr	r2, [pc, #16]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c10e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c110:	4a04      	ldr	r2, [pc, #16]	@ (800c124 <prvSwitchTimerLists+0xc8>)
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	6013      	str	r3, [r2, #0]
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200016c0 	.word	0x200016c0
 800c124:	200016c4 	.word	0x200016c4

0800c128 <prvCheckForValidListAndQueue>:
=======
 800c0de:	4b07      	ldr	r3, [pc, #28]	@ (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0e4:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <prvSwitchTimerLists+0xc8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a04      	ldr	r2, [pc, #16]	@ (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0ec:	4a04      	ldr	r2, [pc, #16]	@ (800c100 <prvSwitchTimerLists+0xc8>)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	6013      	str	r3, [r2, #0]
}
 800c0f2:	bf00      	nop
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	200016fc 	.word	0x200016fc
 800c100:	20001700 	.word	0x20001700

0800c104 <prvCheckForValidListAndQueue>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af02      	add	r7, sp, #8
=======
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af02      	add	r7, sp, #8
>>>>>>> origin/main
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800c12e:	f000 f96b 	bl	800c408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c132:	4b15      	ldr	r3, [pc, #84]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d120      	bne.n	800c17c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c13a:	4814      	ldr	r0, [pc, #80]	@ (800c18c <prvCheckForValidListAndQueue+0x64>)
 800c13c:	f7fd feec 	bl	8009f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c140:	4813      	ldr	r0, [pc, #76]	@ (800c190 <prvCheckForValidListAndQueue+0x68>)
 800c142:	f7fd fee9 	bl	8009f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c146:	4b13      	ldr	r3, [pc, #76]	@ (800c194 <prvCheckForValidListAndQueue+0x6c>)
 800c148:	4a10      	ldr	r2, [pc, #64]	@ (800c18c <prvCheckForValidListAndQueue+0x64>)
 800c14a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c14c:	4b12      	ldr	r3, [pc, #72]	@ (800c198 <prvCheckForValidListAndQueue+0x70>)
 800c14e:	4a10      	ldr	r2, [pc, #64]	@ (800c190 <prvCheckForValidListAndQueue+0x68>)
 800c150:	601a      	str	r2, [r3, #0]
=======
 800c10a:	f000 f96d 	bl	800c3e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c10e:	4b15      	ldr	r3, [pc, #84]	@ (800c164 <prvCheckForValidListAndQueue+0x60>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d120      	bne.n	800c158 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c116:	4814      	ldr	r0, [pc, #80]	@ (800c168 <prvCheckForValidListAndQueue+0x64>)
 800c118:	f7fd feec 	bl	8009ef4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c11c:	4813      	ldr	r0, [pc, #76]	@ (800c16c <prvCheckForValidListAndQueue+0x68>)
 800c11e:	f7fd fee9 	bl	8009ef4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c122:	4b13      	ldr	r3, [pc, #76]	@ (800c170 <prvCheckForValidListAndQueue+0x6c>)
 800c124:	4a10      	ldr	r2, [pc, #64]	@ (800c168 <prvCheckForValidListAndQueue+0x64>)
 800c126:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c128:	4b12      	ldr	r3, [pc, #72]	@ (800c174 <prvCheckForValidListAndQueue+0x70>)
 800c12a:	4a10      	ldr	r2, [pc, #64]	@ (800c16c <prvCheckForValidListAndQueue+0x68>)
 800c12c:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800c152:	2300      	movs	r3, #0
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	4b11      	ldr	r3, [pc, #68]	@ (800c19c <prvCheckForValidListAndQueue+0x74>)
 800c158:	4a11      	ldr	r2, [pc, #68]	@ (800c1a0 <prvCheckForValidListAndQueue+0x78>)
 800c15a:	2110      	movs	r1, #16
 800c15c:	200a      	movs	r0, #10
 800c15e:	f7fd fff9 	bl	800a154 <xQueueGenericCreateStatic>
 800c162:	4603      	mov	r3, r0
 800c164:	4a08      	ldr	r2, [pc, #32]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c166:	6013      	str	r3, [r2, #0]
=======
 800c12e:	2300      	movs	r3, #0
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	4b11      	ldr	r3, [pc, #68]	@ (800c178 <prvCheckForValidListAndQueue+0x74>)
 800c134:	4a11      	ldr	r2, [pc, #68]	@ (800c17c <prvCheckForValidListAndQueue+0x78>)
 800c136:	2110      	movs	r1, #16
 800c138:	200a      	movs	r0, #10
 800c13a:	f7fd fff9 	bl	800a130 <xQueueGenericCreateStatic>
 800c13e:	4603      	mov	r3, r0
 800c140:	4a08      	ldr	r2, [pc, #32]	@ (800c164 <prvCheckForValidListAndQueue+0x60>)
 800c142:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 800c168:	4b07      	ldr	r3, [pc, #28]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c170:	4b05      	ldr	r3, [pc, #20]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	490b      	ldr	r1, [pc, #44]	@ (800c1a4 <prvCheckForValidListAndQueue+0x7c>)
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fc1e 	bl	800a9b8 <vQueueAddToRegistry>
=======
 800c144:	4b07      	ldr	r3, [pc, #28]	@ (800c164 <prvCheckForValidListAndQueue+0x60>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d005      	beq.n	800c158 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c14c:	4b05      	ldr	r3, [pc, #20]	@ (800c164 <prvCheckForValidListAndQueue+0x60>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	490b      	ldr	r1, [pc, #44]	@ (800c180 <prvCheckForValidListAndQueue+0x7c>)
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fc1e 	bl	800a994 <vQueueAddToRegistry>
>>>>>>> origin/main
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800c17c:	f000 f976 	bl	800c46c <vPortExitCritical>
}
 800c180:	bf00      	nop
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	200016c8 	.word	0x200016c8
 800c18c:	20001698 	.word	0x20001698
 800c190:	200016ac 	.word	0x200016ac
 800c194:	200016c0 	.word	0x200016c0
 800c198:	200016c4 	.word	0x200016c4
 800c19c:	20001774 	.word	0x20001774
 800c1a0:	200016d4 	.word	0x200016d4
 800c1a4:	0800cca0 	.word	0x0800cca0

0800c1a8 <pxPortInitialiseStack>:
=======
 800c158:	f000 f978 	bl	800c44c <vPortExitCritical>
}
 800c15c:	bf00      	nop
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20001704 	.word	0x20001704
 800c168:	200016d4 	.word	0x200016d4
 800c16c:	200016e8 	.word	0x200016e8
 800c170:	200016fc 	.word	0x200016fc
 800c174:	20001700 	.word	0x20001700
 800c178:	200017b0 	.word	0x200017b0
 800c17c:	20001710 	.word	0x20001710
 800c180:	0800cc80 	.word	0x0800cc80

0800c184 <pxPortInitialiseStack>:
>>>>>>> origin/main

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
=======
 800c184:	b480      	push	{r7}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3b04      	subs	r3, #4
 800c1b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	f023 0201 	bic.w	r2, r3, #1
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3b04      	subs	r3, #4
 800c1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1d8:	4a0c      	ldr	r2, [pc, #48]	@ (800c20c <pxPortInitialiseStack+0x64>)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3b14      	subs	r3, #20
 800c1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]
=======
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3b04      	subs	r3, #4
 800c194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c19c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3b04      	subs	r3, #4
 800c1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f023 0201 	bic.w	r2, r3, #1
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3b04      	subs	r3, #4
 800c1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1b4:	4a0c      	ldr	r2, [pc, #48]	@ (800c1e8 <pxPortInitialiseStack+0x64>)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3b14      	subs	r3, #20
 800c1be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f06f 0202 	mvn.w	r2, #2
 800c1f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3b20      	subs	r3, #32
 800c1fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	0800c211 	.word	0x0800c211

0800c210 <prvTaskExitError>:
=======
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3b04      	subs	r3, #4
 800c1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f06f 0202 	mvn.w	r2, #2
 800c1d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3b20      	subs	r3, #32
 800c1d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1da:	68fb      	ldr	r3, [r7, #12]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	0800c1ed 	.word	0x0800c1ed

0800c1ec <prvTaskExitError>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	607b      	str	r3, [r7, #4]
=======
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800c21a:	4b13      	ldr	r3, [pc, #76]	@ (800c268 <prvTaskExitError+0x58>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	d00b      	beq.n	800c23c <prvTaskExitError+0x2c>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	60fb      	str	r3, [r7, #12]
}
 800c236:	bf00      	nop
 800c238:	bf00      	nop
 800c23a:	e7fd      	b.n	800c238 <prvTaskExitError+0x28>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	60bb      	str	r3, [r7, #8]
}
 800c24e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c250:	bf00      	nop
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d0fc      	beq.n	800c252 <prvTaskExitError+0x42>
=======
 800c1f6:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <prvTaskExitError+0x58>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fe:	d00b      	beq.n	800c218 <prvTaskExitError+0x2c>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	60fb      	str	r3, [r7, #12]
}
 800c212:	bf00      	nop
 800c214:	bf00      	nop
 800c216:	e7fd      	b.n	800c214 <prvTaskExitError+0x28>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	60bb      	str	r3, [r7, #8]
}
 800c22a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c22c:	bf00      	nop
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d0fc      	beq.n	800c22e <prvTaskExitError+0x42>
>>>>>>> origin/main
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800c258:	bf00      	nop
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000200 	.word	0x20000200
 800c26c:	00000000 	.word	0x00000000

0800c270 <SVC_Handler>:
=======
 800c234:	bf00      	nop
 800c236:	bf00      	nop
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	20000238 	.word	0x20000238
	...

0800c250 <SVC_Handler>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 800c270:	4b07      	ldr	r3, [pc, #28]	@ (800c290 <pxCurrentTCBConst2>)
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	6808      	ldr	r0, [r1, #0]
 800c276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27a:	f380 8809 	msr	PSP, r0
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f04f 0000 	mov.w	r0, #0
 800c286:	f380 8811 	msr	BASEPRI, r0
 800c28a:	4770      	bx	lr
 800c28c:	f3af 8000 	nop.w

0800c290 <pxCurrentTCBConst2>:
 800c290:	20001198 	.word	0x20001198
=======
 800c250:	4b07      	ldr	r3, [pc, #28]	@ (800c270 <pxCurrentTCBConst2>)
 800c252:	6819      	ldr	r1, [r3, #0]
 800c254:	6808      	ldr	r0, [r1, #0]
 800c256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25a:	f380 8809 	msr	PSP, r0
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f04f 0000 	mov.w	r0, #0
 800c266:	f380 8811 	msr	BASEPRI, r0
 800c26a:	4770      	bx	lr
 800c26c:	f3af 8000 	nop.w

0800c270 <pxCurrentTCBConst2>:
 800c270:	200011d4 	.word	0x200011d4
>>>>>>> origin/main
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 800c294:	bf00      	nop
 800c296:	bf00      	nop

0800c298 <prvPortStartFirstTask>:
=======
 800c274:	bf00      	nop
 800c276:	bf00      	nop

0800c278 <prvPortStartFirstTask>:
>>>>>>> origin/main
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 800c298:	4808      	ldr	r0, [pc, #32]	@ (800c2bc <prvPortStartFirstTask+0x24>)
 800c29a:	6800      	ldr	r0, [r0, #0]
 800c29c:	6800      	ldr	r0, [r0, #0]
 800c29e:	f380 8808 	msr	MSP, r0
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8814 	msr	CONTROL, r0
 800c2aa:	b662      	cpsie	i
 800c2ac:	b661      	cpsie	f
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	df00      	svc	0
 800c2b8:	bf00      	nop
=======
 800c278:	4808      	ldr	r0, [pc, #32]	@ (800c29c <prvPortStartFirstTask+0x24>)
 800c27a:	6800      	ldr	r0, [r0, #0]
 800c27c:	6800      	ldr	r0, [r0, #0]
 800c27e:	f380 8808 	msr	MSP, r0
 800c282:	f04f 0000 	mov.w	r0, #0
 800c286:	f380 8814 	msr	CONTROL, r0
 800c28a:	b662      	cpsie	i
 800c28c:	b661      	cpsie	f
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	df00      	svc	0
 800c298:	bf00      	nop
>>>>>>> origin/main
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800c2ba:	bf00      	nop
 800c2bc:	e000ed08 	.word	0xe000ed08

0800c2c0 <xPortStartScheduler>:
=======
 800c29a:	bf00      	nop
 800c29c:	e000ed08 	.word	0xe000ed08

0800c2a0 <xPortStartScheduler>:
>>>>>>> origin/main

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
=======
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
>>>>>>> origin/main
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 800c2c6:	4b47      	ldr	r3, [pc, #284]	@ (800c3e4 <xPortStartScheduler+0x124>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a47      	ldr	r2, [pc, #284]	@ (800c3e8 <xPortStartScheduler+0x128>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d10b      	bne.n	800c2e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	60fb      	str	r3, [r7, #12]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3e4 <xPortStartScheduler+0x124>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c3ec <xPortStartScheduler+0x12c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d10b      	bne.n	800c30a <xPortStartScheduler+0x4a>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	613b      	str	r3, [r7, #16]
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <xPortStartScheduler+0x46>
=======
 800c2a6:	4b47      	ldr	r3, [pc, #284]	@ (800c3c4 <xPortStartScheduler+0x124>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a47      	ldr	r2, [pc, #284]	@ (800c3c8 <xPortStartScheduler+0x128>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d10b      	bne.n	800c2c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	60fb      	str	r3, [r7, #12]
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	e7fd      	b.n	800c2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3c4 <xPortStartScheduler+0x124>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c3cc <xPortStartScheduler+0x12c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d10b      	bne.n	800c2ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	613b      	str	r3, [r7, #16]
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	e7fd      	b.n	800c2e6 <xPortStartScheduler+0x46>
>>>>>>> origin/main

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800c30a:	4b39      	ldr	r3, [pc, #228]	@ (800c3f0 <xPortStartScheduler+0x130>)
 800c30c:	617b      	str	r3, [r7, #20]
=======
 800c2ea:	4b39      	ldr	r3, [pc, #228]	@ (800c3d0 <xPortStartScheduler+0x130>)
 800c2ec:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	607b      	str	r3, [r7, #4]
=======
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	22ff      	movs	r2, #255	@ 0xff
 800c31a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	b2db      	uxtb	r3, r3
 800c328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	4b31      	ldr	r3, [pc, #196]	@ (800c3f4 <xPortStartScheduler+0x134>)
 800c330:	701a      	strb	r2, [r3, #0]
=======
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	22ff      	movs	r2, #255	@ 0xff
 800c2fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	b2db      	uxtb	r3, r3
 800c308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	4b31      	ldr	r3, [pc, #196]	@ (800c3d4 <xPortStartScheduler+0x134>)
 800c310:	701a      	strb	r2, [r3, #0]
>>>>>>> origin/main

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800c332:	4b31      	ldr	r3, [pc, #196]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c334:	2207      	movs	r2, #7
 800c336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c338:	e009      	b.n	800c34e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c33a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3b01      	subs	r3, #1
 800c340:	4a2d      	ldr	r2, [pc, #180]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c356:	2b80      	cmp	r3, #128	@ 0x80
 800c358:	d0ef      	beq.n	800c33a <xPortStartScheduler+0x7a>
=======
 800c312:	4b31      	ldr	r3, [pc, #196]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c314:	2207      	movs	r2, #7
 800c316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c318:	e009      	b.n	800c32e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c31a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	3b01      	subs	r3, #1
 800c320:	4a2d      	ldr	r2, [pc, #180]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	b2db      	uxtb	r3, r3
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	b2db      	uxtb	r3, r3
 800c332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c336:	2b80      	cmp	r3, #128	@ 0x80
 800c338:	d0ef      	beq.n	800c31a <xPortStartScheduler+0x7a>
>>>>>>> origin/main
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800c35a:	4b27      	ldr	r3, [pc, #156]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f1c3 0307 	rsb	r3, r3, #7
 800c362:	2b04      	cmp	r3, #4
 800c364:	d00b      	beq.n	800c37e <xPortStartScheduler+0xbe>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60bb      	str	r3, [r7, #8]
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <xPortStartScheduler+0xba>
=======
 800c33a:	4b27      	ldr	r3, [pc, #156]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f1c3 0307 	rsb	r3, r3, #7
 800c342:	2b04      	cmp	r3, #4
 800c344:	d00b      	beq.n	800c35e <xPortStartScheduler+0xbe>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	60bb      	str	r3, [r7, #8]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xPortStartScheduler+0xba>
>>>>>>> origin/main
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800c37e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	021b      	lsls	r3, r3, #8
 800c384:	4a1c      	ldr	r2, [pc, #112]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c388:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c390:	4a19      	ldr	r2, [pc, #100]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c392:	6013      	str	r3, [r2, #0]
=======
 800c35e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	4a1c      	ldr	r2, [pc, #112]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c368:	4b1b      	ldr	r3, [pc, #108]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c370:	4a19      	ldr	r2, [pc, #100]	@ (800c3d8 <xPortStartScheduler+0x138>)
 800c372:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	b2da      	uxtb	r2, r3
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	701a      	strb	r2, [r3, #0]
=======
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	b2da      	uxtb	r2, r3
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	701a      	strb	r2, [r3, #0]
>>>>>>> origin/main
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800c39c:	4b17      	ldr	r3, [pc, #92]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a16      	ldr	r2, [pc, #88]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c3a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3a8:	4b14      	ldr	r3, [pc, #80]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a13      	ldr	r2, [pc, #76]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c3ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3b2:	6013      	str	r3, [r2, #0]
=======
 800c37c:	4b17      	ldr	r3, [pc, #92]	@ (800c3dc <xPortStartScheduler+0x13c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a16      	ldr	r2, [pc, #88]	@ (800c3dc <xPortStartScheduler+0x13c>)
 800c382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c388:	4b14      	ldr	r3, [pc, #80]	@ (800c3dc <xPortStartScheduler+0x13c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a13      	ldr	r2, [pc, #76]	@ (800c3dc <xPortStartScheduler+0x13c>)
 800c38e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c392:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800c3b4:	f000 f8da 	bl	800c56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3b8:	4b11      	ldr	r3, [pc, #68]	@ (800c400 <xPortStartScheduler+0x140>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3be:	f000 f8f9 	bl	800c5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3c2:	4b10      	ldr	r3, [pc, #64]	@ (800c404 <xPortStartScheduler+0x144>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c404 <xPortStartScheduler+0x144>)
 800c3c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3ce:	f7ff ff63 	bl	800c298 <prvPortStartFirstTask>
=======
 800c394:	f000 f8da 	bl	800c54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c398:	4b11      	ldr	r3, [pc, #68]	@ (800c3e0 <xPortStartScheduler+0x140>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c39e:	f000 f8f9 	bl	800c594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3a2:	4b10      	ldr	r3, [pc, #64]	@ (800c3e4 <xPortStartScheduler+0x144>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c3e4 <xPortStartScheduler+0x144>)
 800c3a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3ae:	f7ff ff63 	bl	800c278 <prvPortStartFirstTask>
>>>>>>> origin/main
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800c3d2:	f7ff f82f 	bl	800b434 <vTaskSwitchContext>
	prvTaskExitError();
 800c3d6:	f7ff ff1b 	bl	800c210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	e000ed00 	.word	0xe000ed00
 800c3e8:	410fc271 	.word	0x410fc271
 800c3ec:	410fc270 	.word	0x410fc270
 800c3f0:	e000e400 	.word	0xe000e400
 800c3f4:	200017c4 	.word	0x200017c4
 800c3f8:	200017c8 	.word	0x200017c8
 800c3fc:	e000ed20 	.word	0xe000ed20
 800c400:	20000200 	.word	0x20000200
 800c404:	e000ef34 	.word	0xe000ef34

0800c408 <vPortEnterCritical>:
=======
 800c3b2:	f7ff f82d 	bl	800b410 <vTaskSwitchContext>
	prvTaskExitError();
 800c3b6:	f7ff ff19 	bl	800c1ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	e000ed00 	.word	0xe000ed00
 800c3c8:	410fc271 	.word	0x410fc271
 800c3cc:	410fc270 	.word	0x410fc270
 800c3d0:	e000e400 	.word	0xe000e400
 800c3d4:	20001800 	.word	0x20001800
 800c3d8:	20001804 	.word	0x20001804
 800c3dc:	e000ed20 	.word	0xe000ed20
 800c3e0:	20000238 	.word	0x20000238
 800c3e4:	e000ef34 	.word	0xe000ef34

0800c3e8 <vPortEnterCritical>:
>>>>>>> origin/main
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	607b      	str	r3, [r7, #4]
}
 800c420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c422:	4b10      	ldr	r3, [pc, #64]	@ (800c464 <vPortEnterCritical+0x5c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3301      	adds	r3, #1
 800c428:	4a0e      	ldr	r2, [pc, #56]	@ (800c464 <vPortEnterCritical+0x5c>)
 800c42a:	6013      	str	r3, [r2, #0]
=======
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	607b      	str	r3, [r7, #4]
}
 800c400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c402:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <vPortEnterCritical+0x5c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3301      	adds	r3, #1
 800c408:	4a0e      	ldr	r2, [pc, #56]	@ (800c444 <vPortEnterCritical+0x5c>)
 800c40a:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800c42c:	4b0d      	ldr	r3, [pc, #52]	@ (800c464 <vPortEnterCritical+0x5c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d110      	bne.n	800c456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c434:	4b0c      	ldr	r3, [pc, #48]	@ (800c468 <vPortEnterCritical+0x60>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00b      	beq.n	800c456 <vPortEnterCritical+0x4e>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	603b      	str	r3, [r7, #0]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <vPortEnterCritical+0x4a>
	}
}
 800c456:	bf00      	nop
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	20000200 	.word	0x20000200
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <vPortExitCritical>:
=======
 800c40c:	4b0d      	ldr	r3, [pc, #52]	@ (800c444 <vPortEnterCritical+0x5c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d110      	bne.n	800c436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c414:	4b0c      	ldr	r3, [pc, #48]	@ (800c448 <vPortEnterCritical+0x60>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <vPortEnterCritical+0x4e>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	603b      	str	r3, [r7, #0]
}
 800c430:	bf00      	nop
 800c432:	bf00      	nop
 800c434:	e7fd      	b.n	800c432 <vPortEnterCritical+0x4a>
	}
}
 800c436:	bf00      	nop
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20000238 	.word	0x20000238
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <vPortExitCritical>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c472:	4b12      	ldr	r3, [pc, #72]	@ (800c4bc <vPortExitCritical+0x50>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10b      	bne.n	800c492 <vPortExitCritical+0x26>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	607b      	str	r3, [r7, #4]
}
 800c48c:	bf00      	nop
 800c48e:	bf00      	nop
 800c490:	e7fd      	b.n	800c48e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c492:	4b0a      	ldr	r3, [pc, #40]	@ (800c4bc <vPortExitCritical+0x50>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3b01      	subs	r3, #1
 800c498:	4a08      	ldr	r2, [pc, #32]	@ (800c4bc <vPortExitCritical+0x50>)
 800c49a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c49c:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <vPortExitCritical+0x50>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d105      	bne.n	800c4b0 <vPortExitCritical+0x44>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f383 8811 	msr	BASEPRI, r3
}
 800c4ae:	bf00      	nop
=======
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c452:	4b12      	ldr	r3, [pc, #72]	@ (800c49c <vPortExitCritical+0x50>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10b      	bne.n	800c472 <vPortExitCritical+0x26>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	607b      	str	r3, [r7, #4]
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	e7fd      	b.n	800c46e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c472:	4b0a      	ldr	r3, [pc, #40]	@ (800c49c <vPortExitCritical+0x50>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3b01      	subs	r3, #1
 800c478:	4a08      	ldr	r2, [pc, #32]	@ (800c49c <vPortExitCritical+0x50>)
 800c47a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c47c:	4b07      	ldr	r3, [pc, #28]	@ (800c49c <vPortExitCritical+0x50>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d105      	bne.n	800c490 <vPortExitCritical+0x44>
 800c484:	2300      	movs	r3, #0
 800c486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f383 8811 	msr	BASEPRI, r3
}
 800c48e:	bf00      	nop
>>>>>>> origin/main
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	20000200 	.word	0x20000200

0800c4c0 <PendSV_Handler>:
=======
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20000238 	.word	0x20000238

0800c4a0 <PendSV_Handler>:
>>>>>>> origin/main

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 800c4c0:	f3ef 8009 	mrs	r0, PSP
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4b15      	ldr	r3, [pc, #84]	@ (800c520 <pxCurrentTCBConst>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	f01e 0f10 	tst.w	lr, #16
 800c4d0:	bf08      	it	eq
 800c4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4da:	6010      	str	r0, [r2, #0]
 800c4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4e4:	f380 8811 	msr	BASEPRI, r0
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f7fe ffa0 	bl	800b434 <vTaskSwitchContext>
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	f380 8811 	msr	BASEPRI, r0
 800c4fc:	bc09      	pop	{r0, r3}
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	6808      	ldr	r0, [r1, #0]
 800c502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c506:	f01e 0f10 	tst.w	lr, #16
 800c50a:	bf08      	it	eq
 800c50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c510:	f380 8809 	msr	PSP, r0
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	f3af 8000 	nop.w

0800c520 <pxCurrentTCBConst>:
 800c520:	20001198 	.word	0x20001198
=======
 800c4a0:	f3ef 8009 	mrs	r0, PSP
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	4b15      	ldr	r3, [pc, #84]	@ (800c500 <pxCurrentTCBConst>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	f01e 0f10 	tst.w	lr, #16
 800c4b0:	bf08      	it	eq
 800c4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ba:	6010      	str	r0, [r2, #0]
 800c4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4c4:	f380 8811 	msr	BASEPRI, r0
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f7fe ff9e 	bl	800b410 <vTaskSwitchContext>
 800c4d4:	f04f 0000 	mov.w	r0, #0
 800c4d8:	f380 8811 	msr	BASEPRI, r0
 800c4dc:	bc09      	pop	{r0, r3}
 800c4de:	6819      	ldr	r1, [r3, #0]
 800c4e0:	6808      	ldr	r0, [r1, #0]
 800c4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e6:	f01e 0f10 	tst.w	lr, #16
 800c4ea:	bf08      	it	eq
 800c4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4f0:	f380 8809 	msr	PSP, r0
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst>:
 800c500:	200011d4 	.word	0x200011d4
>>>>>>> origin/main
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 800c524:	bf00      	nop
 800c526:	bf00      	nop

0800c528 <xPortSysTickHandler>:
=======
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <xPortSysTickHandler>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
}
 800c540:	bf00      	nop
=======
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	607b      	str	r3, [r7, #4]
}
 800c520:	bf00      	nop
>>>>>>> origin/main
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800c542:	f7fe febd 	bl	800b2c0 <xTaskIncrementTick>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <xPortSysTickHandler+0x2c>
=======
 800c522:	f7fe febb 	bl	800b29c <xTaskIncrementTick>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <xPortSysTickHandler+0x2c>
>>>>>>> origin/main
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800c54c:	4b06      	ldr	r3, [pc, #24]	@ (800c568 <xPortSysTickHandler+0x40>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	2300      	movs	r3, #0
 800c556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	f383 8811 	msr	BASEPRI, r3
}
 800c55e:	bf00      	nop
=======
 800c52c:	4b06      	ldr	r3, [pc, #24]	@ (800c548 <xPortSysTickHandler+0x40>)
 800c52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c532:	601a      	str	r2, [r3, #0]
 800c534:	2300      	movs	r3, #0
 800c536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	f383 8811 	msr	BASEPRI, r3
}
 800c53e:	bf00      	nop
>>>>>>> origin/main
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vPortSetupTimerInterrupt>:
=======
 800c540:	bf00      	nop
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <vPortSetupTimerInterrupt>:
>>>>>>> origin/main
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
=======
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
>>>>>>> origin/main
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 800c570:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c576:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a4 <vPortSetupTimerInterrupt+0x38>)
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <vPortSetupTimerInterrupt+0x3c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0a      	ldr	r2, [pc, #40]	@ (800c5ac <vPortSetupTimerInterrupt+0x40>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	099b      	lsrs	r3, r3, #6
 800c588:	4a09      	ldr	r2, [pc, #36]	@ (800c5b0 <vPortSetupTimerInterrupt+0x44>)
 800c58a:	3b01      	subs	r3, #1
 800c58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c58e:	4b04      	ldr	r3, [pc, #16]	@ (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c590:	2207      	movs	r2, #7
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	bf00      	nop
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	e000e010 	.word	0xe000e010
 800c5a4:	e000e018 	.word	0xe000e018
 800c5a8:	20000000 	.word	0x20000000
 800c5ac:	10624dd3 	.word	0x10624dd3
 800c5b0:	e000e014 	.word	0xe000e014

0800c5b4 <vPortEnableVFP>:
=======
 800c550:	4b0b      	ldr	r3, [pc, #44]	@ (800c580 <vPortSetupTimerInterrupt+0x34>)
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c556:	4b0b      	ldr	r3, [pc, #44]	@ (800c584 <vPortSetupTimerInterrupt+0x38>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	@ (800c588 <vPortSetupTimerInterrupt+0x3c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a0a      	ldr	r2, [pc, #40]	@ (800c58c <vPortSetupTimerInterrupt+0x40>)
 800c562:	fba2 2303 	umull	r2, r3, r2, r3
 800c566:	099b      	lsrs	r3, r3, #6
 800c568:	4a09      	ldr	r2, [pc, #36]	@ (800c590 <vPortSetupTimerInterrupt+0x44>)
 800c56a:	3b01      	subs	r3, #1
 800c56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c56e:	4b04      	ldr	r3, [pc, #16]	@ (800c580 <vPortSetupTimerInterrupt+0x34>)
 800c570:	2207      	movs	r2, #7
 800c572:	601a      	str	r2, [r3, #0]
}
 800c574:	bf00      	nop
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	e000e010 	.word	0xe000e010
 800c584:	e000e018 	.word	0xe000e018
 800c588:	20000000 	.word	0x20000000
 800c58c:	10624dd3 	.word	0x10624dd3
 800c590:	e000e014 	.word	0xe000e014

0800c594 <vPortEnableVFP>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 800c5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5c4 <vPortEnableVFP+0x10>
 800c5b8:	6801      	ldr	r1, [r0, #0]
 800c5ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5be:	6001      	str	r1, [r0, #0]
 800c5c0:	4770      	bx	lr
=======
 800c594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5a4 <vPortEnableVFP+0x10>
 800c598:	6801      	ldr	r1, [r0, #0]
 800c59a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c59e:	6001      	str	r1, [r0, #0]
 800c5a0:	4770      	bx	lr
>>>>>>> origin/main
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 800c5c2:	bf00      	nop
 800c5c4:	e000ed88 	.word	0xe000ed88

0800c5c8 <vPortValidateInterruptPriority>:
=======
 800c5a2:	bf00      	nop
 800c5a4:	e000ed88 	.word	0xe000ed88

0800c5a8 <vPortValidateInterruptPriority>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
=======
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
>>>>>>> origin/main
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800c5ce:	f3ef 8305 	mrs	r3, IPSR
 800c5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	d915      	bls.n	800c606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5da:	4a18      	ldr	r2, [pc, #96]	@ (800c63c <vPortValidateInterruptPriority+0x74>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	72fb      	strb	r3, [r7, #11]
=======
 800c5ae:	f3ef 8305 	mrs	r3, IPSR
 800c5b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b0f      	cmp	r3, #15
 800c5b8:	d915      	bls.n	800c5e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5ba:	4a18      	ldr	r2, [pc, #96]	@ (800c61c <vPortValidateInterruptPriority+0x74>)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	72fb      	strb	r3, [r7, #11]
>>>>>>> origin/main
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 800c5e4:	4b16      	ldr	r3, [pc, #88]	@ (800c640 <vPortValidateInterruptPriority+0x78>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	7afa      	ldrb	r2, [r7, #11]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d20b      	bcs.n	800c606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	607b      	str	r3, [r7, #4]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <vPortValidateInterruptPriority+0x3a>
=======
 800c5c4:	4b16      	ldr	r3, [pc, #88]	@ (800c620 <vPortValidateInterruptPriority+0x78>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	7afa      	ldrb	r2, [r7, #11]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d20b      	bcs.n	800c5e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	607b      	str	r3, [r7, #4]
}
 800c5e0:	bf00      	nop
 800c5e2:	bf00      	nop
 800c5e4:	e7fd      	b.n	800c5e2 <vPortValidateInterruptPriority+0x3a>
>>>>>>> origin/main
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 800c606:	4b0f      	ldr	r3, [pc, #60]	@ (800c644 <vPortValidateInterruptPriority+0x7c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c60e:	4b0e      	ldr	r3, [pc, #56]	@ (800c648 <vPortValidateInterruptPriority+0x80>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d90b      	bls.n	800c62e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	603b      	str	r3, [r7, #0]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <vPortValidateInterruptPriority+0x62>
	}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	e000e3f0 	.word	0xe000e3f0
 800c640:	200017c4 	.word	0x200017c4
 800c644:	e000ed0c 	.word	0xe000ed0c
 800c648:	200017c8 	.word	0x200017c8

0800c64c <pvPortMalloc>:
=======
 800c5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c624 <vPortValidateInterruptPriority+0x7c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c628 <vPortValidateInterruptPriority+0x80>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d90b      	bls.n	800c60e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	603b      	str	r3, [r7, #0]
}
 800c608:	bf00      	nop
 800c60a:	bf00      	nop
 800c60c:	e7fd      	b.n	800c60a <vPortValidateInterruptPriority+0x62>
	}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	e000e3f0 	.word	0xe000e3f0
 800c620:	20001800 	.word	0x20001800
 800c624:	e000ed0c 	.word	0xe000ed0c
 800c628:	20001804 	.word	0x20001804

0800c62c <pvPortMalloc>:
>>>>>>> origin/main
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08a      	sub	sp, #40	@ 0x28
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c658:	f7fe fd64 	bl	800b124 <vTaskSuspendAll>
=======
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08a      	sub	sp, #40	@ 0x28
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c634:	2300      	movs	r3, #0
 800c636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c638:	f7fe fd62 	bl	800b100 <vTaskSuspendAll>
>>>>>>> origin/main
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800c65c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7d0 <pvPortMalloc+0x184>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c664:	f000 f924 	bl	800c8b0 <prvHeapInit>
=======
 800c63c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7b0 <pvPortMalloc+0x184>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c644:	f000 f924 	bl	800c890 <prvHeapInit>
>>>>>>> origin/main

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 800c668:	4b5a      	ldr	r3, [pc, #360]	@ (800c7d4 <pvPortMalloc+0x188>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4013      	ands	r3, r2
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 8095 	bne.w	800c7a0 <pvPortMalloc+0x154>
=======
 800c648:	4b5a      	ldr	r3, [pc, #360]	@ (800c7b4 <pvPortMalloc+0x188>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4013      	ands	r3, r2
 800c650:	2b00      	cmp	r3, #0
 800c652:	f040 8095 	bne.w	800c780 <pvPortMalloc+0x154>
>>>>>>> origin/main
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d01e      	beq.n	800c6ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c67c:	2208      	movs	r2, #8
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4413      	add	r3, r2
 800c682:	607b      	str	r3, [r7, #4]
=======
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01e      	beq.n	800c69a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c65c:	2208      	movs	r2, #8
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4413      	add	r3, r2
 800c662:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d015      	beq.n	800c6ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f023 0307 	bic.w	r3, r3, #7
 800c694:	3308      	adds	r3, #8
 800c696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <pvPortMalloc+0x6e>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	617b      	str	r3, [r7, #20]
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	e7fd      	b.n	800c6b6 <pvPortMalloc+0x6a>
=======
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d015      	beq.n	800c69a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f023 0307 	bic.w	r3, r3, #7
 800c674:	3308      	adds	r3, #8
 800c676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f003 0307 	and.w	r3, r3, #7
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00b      	beq.n	800c69a <pvPortMalloc+0x6e>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	617b      	str	r3, [r7, #20]
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop
 800c698:	e7fd      	b.n	800c696 <pvPortMalloc+0x6a>
>>>>>>> origin/main
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d06f      	beq.n	800c7a0 <pvPortMalloc+0x154>
 800c6c0:	4b45      	ldr	r3, [pc, #276]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d86a      	bhi.n	800c7a0 <pvPortMalloc+0x154>
=======
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d06f      	beq.n	800c780 <pvPortMalloc+0x154>
 800c6a0:	4b45      	ldr	r3, [pc, #276]	@ (800c7b8 <pvPortMalloc+0x18c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d86a      	bhi.n	800c780 <pvPortMalloc+0x154>
>>>>>>> origin/main
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800c6ca:	4b44      	ldr	r3, [pc, #272]	@ (800c7dc <pvPortMalloc+0x190>)
 800c6cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6ce:	4b43      	ldr	r3, [pc, #268]	@ (800c7dc <pvPortMalloc+0x190>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6d4:	e004      	b.n	800c6e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d903      	bls.n	800c6f2 <pvPortMalloc+0xa6>
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1f1      	bne.n	800c6d6 <pvPortMalloc+0x8a>
=======
 800c6aa:	4b44      	ldr	r3, [pc, #272]	@ (800c7bc <pvPortMalloc+0x190>)
 800c6ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6ae:	4b43      	ldr	r3, [pc, #268]	@ (800c7bc <pvPortMalloc+0x190>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6b4:	e004      	b.n	800c6c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d903      	bls.n	800c6d2 <pvPortMalloc+0xa6>
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1f1      	bne.n	800c6b6 <pvPortMalloc+0x8a>
>>>>>>> origin/main
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 800c6f2:	4b37      	ldr	r3, [pc, #220]	@ (800c7d0 <pvPortMalloc+0x184>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d051      	beq.n	800c7a0 <pvPortMalloc+0x154>
=======
 800c6d2:	4b37      	ldr	r3, [pc, #220]	@ (800c7b0 <pvPortMalloc+0x184>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d051      	beq.n	800c780 <pvPortMalloc+0x154>
>>>>>>> origin/main
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2208      	movs	r2, #8
 800c702:	4413      	add	r3, r2
 800c704:	61fb      	str	r3, [r7, #28]
=======
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	4413      	add	r3, r2
 800c6e4:	61fb      	str	r3, [r7, #28]
>>>>>>> origin/main

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	601a      	str	r2, [r3, #0]
=======
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 800c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	1ad2      	subs	r2, r2, r3
 800c716:	2308      	movs	r3, #8
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d920      	bls.n	800c760 <pvPortMalloc+0x114>
=======
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	1ad2      	subs	r2, r2, r3
 800c6f6:	2308      	movs	r3, #8
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d920      	bls.n	800c740 <pvPortMalloc+0x114>
>>>>>>> origin/main
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 800c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4413      	add	r3, r2
 800c724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00b      	beq.n	800c748 <pvPortMalloc+0xfc>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <pvPortMalloc+0xf8>
=======
 800c6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4413      	add	r3, r2
 800c704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	f003 0307 	and.w	r3, r3, #7
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00b      	beq.n	800c728 <pvPortMalloc+0xfc>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	613b      	str	r3, [r7, #16]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <pvPortMalloc+0xf8>
>>>>>>> origin/main

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c75a:	69b8      	ldr	r0, [r7, #24]
 800c75c:	f000 f90a 	bl	800c974 <prvInsertBlockIntoFreeList>
=======
 800c728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	1ad2      	subs	r2, r2, r3
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c73a:	69b8      	ldr	r0, [r7, #24]
 800c73c:	f000 f90a 	bl	800c954 <prvInsertBlockIntoFreeList>
>>>>>>> origin/main
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 800c760:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c76c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c76e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b1b      	ldr	r3, [pc, #108]	@ (800c7e0 <pvPortMalloc+0x194>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d203      	bcs.n	800c782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c77a:	4b17      	ldr	r3, [pc, #92]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a18      	ldr	r2, [pc, #96]	@ (800c7e0 <pvPortMalloc+0x194>)
 800c780:	6013      	str	r3, [r2, #0]
=======
 800c740:	4b1d      	ldr	r3, [pc, #116]	@ (800c7b8 <pvPortMalloc+0x18c>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7b8 <pvPortMalloc+0x18c>)
 800c74c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c74e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7b8 <pvPortMalloc+0x18c>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	4b1b      	ldr	r3, [pc, #108]	@ (800c7c0 <pvPortMalloc+0x194>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	429a      	cmp	r2, r3
 800c758:	d203      	bcs.n	800c762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c75a:	4b17      	ldr	r3, [pc, #92]	@ (800c7b8 <pvPortMalloc+0x18c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a18      	ldr	r2, [pc, #96]	@ (800c7c0 <pvPortMalloc+0x194>)
 800c760:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	4b13      	ldr	r3, [pc, #76]	@ (800c7d4 <pvPortMalloc+0x188>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c796:	4b13      	ldr	r3, [pc, #76]	@ (800c7e4 <pvPortMalloc+0x198>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	4a11      	ldr	r2, [pc, #68]	@ (800c7e4 <pvPortMalloc+0x198>)
 800c79e:	6013      	str	r3, [r2, #0]
=======
 800c762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	4b13      	ldr	r3, [pc, #76]	@ (800c7b4 <pvPortMalloc+0x188>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	431a      	orrs	r2, r3
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c776:	4b13      	ldr	r3, [pc, #76]	@ (800c7c4 <pvPortMalloc+0x198>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3301      	adds	r3, #1
 800c77c:	4a11      	ldr	r2, [pc, #68]	@ (800c7c4 <pvPortMalloc+0x198>)
 800c77e:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 800c7a0:	f7fe fcce 	bl	800b140 <xTaskResumeAll>
=======
 800c780:	f7fe fccc 	bl	800b11c <xTaskResumeAll>
>>>>>>> origin/main
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00b      	beq.n	800c7c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60fb      	str	r3, [r7, #12]
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	e7fd      	b.n	800c7c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c7c6:	69fb      	ldr	r3, [r7, #28]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3728      	adds	r7, #40	@ 0x28
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	200023d4 	.word	0x200023d4
 800c7d4:	200023e8 	.word	0x200023e8
 800c7d8:	200023d8 	.word	0x200023d8
 800c7dc:	200023cc 	.word	0x200023cc
 800c7e0:	200023dc 	.word	0x200023dc
 800c7e4:	200023e0 	.word	0x200023e0

0800c7e8 <vPortFree>:
=======
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60fb      	str	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	e7fd      	b.n	800c7a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3728      	adds	r7, #40	@ 0x28
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20002410 	.word	0x20002410
 800c7b4:	20002424 	.word	0x20002424
 800c7b8:	20002414 	.word	0x20002414
 800c7bc:	20002408 	.word	0x20002408
 800c7c0:	20002418 	.word	0x20002418
 800c7c4:	2000241c 	.word	0x2000241c

0800c7c8 <vPortFree>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d04f      	beq.n	800c89a <vPortFree+0xb2>
=======
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d04f      	beq.n	800c87a <vPortFree+0xb2>
>>>>>>> origin/main
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800c7fa:	2308      	movs	r3, #8
 800c7fc:	425b      	negs	r3, r3
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	4b25      	ldr	r3, [pc, #148]	@ (800c8a4 <vPortFree+0xbc>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4013      	ands	r3, r2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10b      	bne.n	800c82e <vPortFree+0x46>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60fb      	str	r3, [r7, #12]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00b      	beq.n	800c84e <vPortFree+0x66>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	60bb      	str	r3, [r7, #8]
}
 800c848:	bf00      	nop
 800c84a:	bf00      	nop
 800c84c:	e7fd      	b.n	800c84a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4b14      	ldr	r3, [pc, #80]	@ (800c8a4 <vPortFree+0xbc>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4013      	ands	r3, r2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01e      	beq.n	800c89a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d11a      	bne.n	800c89a <vPortFree+0xb2>
=======
 800c7da:	2308      	movs	r3, #8
 800c7dc:	425b      	negs	r3, r3
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	4b25      	ldr	r3, [pc, #148]	@ (800c884 <vPortFree+0xbc>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <vPortFree+0x46>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60fb      	str	r3, [r7, #12]
}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	e7fd      	b.n	800c80a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00b      	beq.n	800c82e <vPortFree+0x66>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60bb      	str	r3, [r7, #8]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	4b14      	ldr	r3, [pc, #80]	@ (800c884 <vPortFree+0xbc>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4013      	ands	r3, r2
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d01e      	beq.n	800c87a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d11a      	bne.n	800c87a <vPortFree+0xb2>
>>>>>>> origin/main
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a4 <vPortFree+0xbc>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	43db      	mvns	r3, r3
 800c86e:	401a      	ands	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c874:	f7fe fc56 	bl	800b124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	4b0a      	ldr	r3, [pc, #40]	@ (800c8a8 <vPortFree+0xc0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4413      	add	r3, r2
 800c882:	4a09      	ldr	r2, [pc, #36]	@ (800c8a8 <vPortFree+0xc0>)
 800c884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c886:	6938      	ldr	r0, [r7, #16]
 800c888:	f000 f874 	bl	800c974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c88c:	4b07      	ldr	r3, [pc, #28]	@ (800c8ac <vPortFree+0xc4>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	4a06      	ldr	r2, [pc, #24]	@ (800c8ac <vPortFree+0xc4>)
 800c894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c896:	f7fe fc53 	bl	800b140 <xTaskResumeAll>
=======
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	4b0e      	ldr	r3, [pc, #56]	@ (800c884 <vPortFree+0xbc>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	43db      	mvns	r3, r3
 800c84e:	401a      	ands	r2, r3
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c854:	f7fe fc54 	bl	800b100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	4b0a      	ldr	r3, [pc, #40]	@ (800c888 <vPortFree+0xc0>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4413      	add	r3, r2
 800c862:	4a09      	ldr	r2, [pc, #36]	@ (800c888 <vPortFree+0xc0>)
 800c864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c866:	6938      	ldr	r0, [r7, #16]
 800c868:	f000 f874 	bl	800c954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c86c:	4b07      	ldr	r3, [pc, #28]	@ (800c88c <vPortFree+0xc4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3301      	adds	r3, #1
 800c872:	4a06      	ldr	r2, [pc, #24]	@ (800c88c <vPortFree+0xc4>)
 800c874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c876:	f7fe fc51 	bl	800b11c <xTaskResumeAll>
>>>>>>> origin/main
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800c89a:	bf00      	nop
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200023e8 	.word	0x200023e8
 800c8a8:	200023d8 	.word	0x200023d8
 800c8ac:	200023e4 	.word	0x200023e4

0800c8b0 <prvHeapInit>:
=======
 800c87a:	bf00      	nop
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	20002424 	.word	0x20002424
 800c888:	20002414 	.word	0x20002414
 800c88c:	20002420 	.word	0x20002420

0800c890 <prvHeapInit>:
>>>>>>> origin/main
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
=======
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
>>>>>>> origin/main
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800c8b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c8ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8bc:	4b27      	ldr	r3, [pc, #156]	@ (800c95c <prvHeapInit+0xac>)
 800c8be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00c      	beq.n	800c8e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3307      	adds	r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 0307 	bic.w	r3, r3, #7
 800c8d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	4a1f      	ldr	r2, [pc, #124]	@ (800c95c <prvHeapInit+0xac>)
 800c8e0:	4413      	add	r3, r2
 800c8e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	607b      	str	r3, [r7, #4]
=======
 800c896:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c89a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c89c:	4b27      	ldr	r3, [pc, #156]	@ (800c93c <prvHeapInit+0xac>)
 800c89e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f003 0307 	and.w	r3, r3, #7
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3307      	adds	r3, #7
 800c8ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 0307 	bic.w	r3, r3, #7
 800c8b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	4a1f      	ldr	r2, [pc, #124]	@ (800c93c <prvHeapInit+0xac>)
 800c8c0:	4413      	add	r3, r2
 800c8c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800c8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c960 <prvHeapInit+0xb0>)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c960 <prvHeapInit+0xb0>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	605a      	str	r2, [r3, #4]
=======
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c940 <prvHeapInit+0xb0>)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c940 <prvHeapInit+0xb0>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8fc:	2208      	movs	r2, #8
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	1a9b      	subs	r3, r3, r2
 800c902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4a15      	ldr	r2, [pc, #84]	@ (800c964 <prvHeapInit+0xb4>)
 800c910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c912:	4b14      	ldr	r3, [pc, #80]	@ (800c964 <prvHeapInit+0xb4>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2200      	movs	r2, #0
 800c918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c91a:	4b12      	ldr	r3, [pc, #72]	@ (800c964 <prvHeapInit+0xb4>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]
=======
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	4413      	add	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8dc:	2208      	movs	r2, #8
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	1a9b      	subs	r3, r3, r2
 800c8e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0307 	bic.w	r3, r3, #7
 800c8ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4a15      	ldr	r2, [pc, #84]	@ (800c944 <prvHeapInit+0xb4>)
 800c8f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8f2:	4b14      	ldr	r3, [pc, #80]	@ (800c944 <prvHeapInit+0xb4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8fa:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <prvHeapInit+0xb4>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	1ad2      	subs	r2, r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c930:	4b0c      	ldr	r3, [pc, #48]	@ (800c964 <prvHeapInit+0xb4>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	4a0a      	ldr	r2, [pc, #40]	@ (800c968 <prvHeapInit+0xb8>)
 800c93e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	4a09      	ldr	r2, [pc, #36]	@ (800c96c <prvHeapInit+0xbc>)
 800c946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c948:	4b09      	ldr	r3, [pc, #36]	@ (800c970 <prvHeapInit+0xc0>)
 800c94a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c94e:	601a      	str	r2, [r3, #0]
}
 800c950:	bf00      	nop
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	200017cc 	.word	0x200017cc
 800c960:	200023cc 	.word	0x200023cc
 800c964:	200023d4 	.word	0x200023d4
 800c968:	200023dc 	.word	0x200023dc
 800c96c:	200023d8 	.word	0x200023d8
 800c970:	200023e8 	.word	0x200023e8

0800c974 <prvInsertBlockIntoFreeList>:
=======
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	1ad2      	subs	r2, r2, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c910:	4b0c      	ldr	r3, [pc, #48]	@ (800c944 <prvHeapInit+0xb4>)
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	4a0a      	ldr	r2, [pc, #40]	@ (800c948 <prvHeapInit+0xb8>)
 800c91e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	4a09      	ldr	r2, [pc, #36]	@ (800c94c <prvHeapInit+0xbc>)
 800c926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c928:	4b09      	ldr	r3, [pc, #36]	@ (800c950 <prvHeapInit+0xc0>)
 800c92a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c92e:	601a      	str	r2, [r3, #0]
}
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	20001808 	.word	0x20001808
 800c940:	20002408 	.word	0x20002408
 800c944:	20002410 	.word	0x20002410
 800c948:	20002418 	.word	0x20002418
 800c94c:	20002414 	.word	0x20002414
 800c950:	20002424 	.word	0x20002424

0800c954 <prvInsertBlockIntoFreeList>:
>>>>>>> origin/main
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
=======
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800c97c:	4b28      	ldr	r3, [pc, #160]	@ (800ca20 <prvInsertBlockIntoFreeList+0xac>)
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	e002      	b.n	800c988 <prvInsertBlockIntoFreeList+0x14>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d8f7      	bhi.n	800c982 <prvInsertBlockIntoFreeList+0xe>
=======
 800c95c:	4b28      	ldr	r3, [pc, #160]	@ (800ca00 <prvInsertBlockIntoFreeList+0xac>)
 800c95e:	60fb      	str	r3, [r7, #12]
 800c960:	e002      	b.n	800c968 <prvInsertBlockIntoFreeList+0x14>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d8f7      	bhi.n	800c962 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> origin/main
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d108      	bne.n	800c9b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	441a      	add	r2, r3
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	607b      	str	r3, [r7, #4]
=======
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	4413      	add	r3, r2
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	429a      	cmp	r2, r3
 800c982:	d108      	bne.n	800c996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	441a      	add	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	607b      	str	r3, [r7, #4]
>>>>>>> origin/main
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	441a      	add	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d118      	bne.n	800c9fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	4b15      	ldr	r3, [pc, #84]	@ (800ca24 <prvInsertBlockIntoFreeList+0xb0>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d00d      	beq.n	800c9f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	441a      	add	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	e008      	b.n	800ca04 <prvInsertBlockIntoFreeList+0x90>
=======
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	441a      	add	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d118      	bne.n	800c9dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	4b15      	ldr	r3, [pc, #84]	@ (800ca04 <prvInsertBlockIntoFreeList+0xb0>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d00d      	beq.n	800c9d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	441a      	add	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	e008      	b.n	800c9e4 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> origin/main
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800ca24 <prvInsertBlockIntoFreeList+0xb0>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	e003      	b.n	800ca04 <prvInsertBlockIntoFreeList+0x90>
=======
 800c9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800ca04 <prvInsertBlockIntoFreeList+0xb0>)
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	e003      	b.n	800c9e4 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> origin/main
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]
=======
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d002      	beq.n	800ca12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	601a      	str	r2, [r3, #0]
=======
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d002      	beq.n	800c9f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800ca12:	bf00      	nop
 800ca14:	3714      	adds	r7, #20
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	200023cc 	.word	0x200023cc
 800ca24:	200023d4 	.word	0x200023d4

0800ca28 <memset>:
 800ca28:	4402      	add	r2, r0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d100      	bne.n	800ca32 <memset+0xa>
 800ca30:	4770      	bx	lr
 800ca32:	f803 1b01 	strb.w	r1, [r3], #1
 800ca36:	e7f9      	b.n	800ca2c <memset+0x4>

0800ca38 <_reclaim_reent>:
 800ca38:	4b2d      	ldr	r3, [pc, #180]	@ (800caf0 <_reclaim_reent+0xb8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4283      	cmp	r3, r0
 800ca3e:	b570      	push	{r4, r5, r6, lr}
 800ca40:	4604      	mov	r4, r0
 800ca42:	d053      	beq.n	800caec <_reclaim_reent+0xb4>
 800ca44:	69c3      	ldr	r3, [r0, #28]
 800ca46:	b31b      	cbz	r3, 800ca90 <_reclaim_reent+0x58>
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	b163      	cbz	r3, 800ca66 <_reclaim_reent+0x2e>
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	69e3      	ldr	r3, [r4, #28]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	5959      	ldr	r1, [r3, r5]
 800ca54:	b9b1      	cbnz	r1, 800ca84 <_reclaim_reent+0x4c>
 800ca56:	3504      	adds	r5, #4
 800ca58:	2d80      	cmp	r5, #128	@ 0x80
 800ca5a:	d1f8      	bne.n	800ca4e <_reclaim_reent+0x16>
 800ca5c:	69e3      	ldr	r3, [r4, #28]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	68d9      	ldr	r1, [r3, #12]
 800ca62:	f000 f881 	bl	800cb68 <_free_r>
 800ca66:	69e3      	ldr	r3, [r4, #28]
 800ca68:	6819      	ldr	r1, [r3, #0]
 800ca6a:	b111      	cbz	r1, 800ca72 <_reclaim_reent+0x3a>
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 f87b 	bl	800cb68 <_free_r>
 800ca72:	69e3      	ldr	r3, [r4, #28]
 800ca74:	689d      	ldr	r5, [r3, #8]
 800ca76:	b15d      	cbz	r5, 800ca90 <_reclaim_reent+0x58>
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	682d      	ldr	r5, [r5, #0]
 800ca7e:	f000 f873 	bl	800cb68 <_free_r>
 800ca82:	e7f8      	b.n	800ca76 <_reclaim_reent+0x3e>
 800ca84:	680e      	ldr	r6, [r1, #0]
 800ca86:	4620      	mov	r0, r4
 800ca88:	f000 f86e 	bl	800cb68 <_free_r>
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	e7e1      	b.n	800ca54 <_reclaim_reent+0x1c>
 800ca90:	6961      	ldr	r1, [r4, #20]
 800ca92:	b111      	cbz	r1, 800ca9a <_reclaim_reent+0x62>
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 f867 	bl	800cb68 <_free_r>
 800ca9a:	69e1      	ldr	r1, [r4, #28]
 800ca9c:	b111      	cbz	r1, 800caa4 <_reclaim_reent+0x6c>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 f862 	bl	800cb68 <_free_r>
 800caa4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800caa6:	b111      	cbz	r1, 800caae <_reclaim_reent+0x76>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f85d 	bl	800cb68 <_free_r>
 800caae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cab0:	b111      	cbz	r1, 800cab8 <_reclaim_reent+0x80>
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 f858 	bl	800cb68 <_free_r>
 800cab8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800caba:	b111      	cbz	r1, 800cac2 <_reclaim_reent+0x8a>
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 f853 	bl	800cb68 <_free_r>
 800cac2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cac4:	b111      	cbz	r1, 800cacc <_reclaim_reent+0x94>
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 f84e 	bl	800cb68 <_free_r>
 800cacc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cace:	b111      	cbz	r1, 800cad6 <_reclaim_reent+0x9e>
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 f849 	bl	800cb68 <_free_r>
 800cad6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cad8:	b111      	cbz	r1, 800cae0 <_reclaim_reent+0xa8>
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 f844 	bl	800cb68 <_free_r>
 800cae0:	6a23      	ldr	r3, [r4, #32]
 800cae2:	b11b      	cbz	r3, 800caec <_reclaim_reent+0xb4>
 800cae4:	4620      	mov	r0, r4
 800cae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caea:	4718      	bx	r3
 800caec:	bd70      	pop	{r4, r5, r6, pc}
 800caee:	bf00      	nop
 800caf0:	20000204 	.word	0x20000204

0800caf4 <__errno>:
 800caf4:	4b01      	ldr	r3, [pc, #4]	@ (800cafc <__errno+0x8>)
 800caf6:	6818      	ldr	r0, [r3, #0]
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	20000204 	.word	0x20000204

0800cb00 <__libc_init_array>:
 800cb00:	b570      	push	{r4, r5, r6, lr}
 800cb02:	4d0d      	ldr	r5, [pc, #52]	@ (800cb38 <__libc_init_array+0x38>)
 800cb04:	4c0d      	ldr	r4, [pc, #52]	@ (800cb3c <__libc_init_array+0x3c>)
 800cb06:	1b64      	subs	r4, r4, r5
 800cb08:	10a4      	asrs	r4, r4, #2
 800cb0a:	2600      	movs	r6, #0
 800cb0c:	42a6      	cmp	r6, r4
 800cb0e:	d109      	bne.n	800cb24 <__libc_init_array+0x24>
 800cb10:	4d0b      	ldr	r5, [pc, #44]	@ (800cb40 <__libc_init_array+0x40>)
 800cb12:	4c0c      	ldr	r4, [pc, #48]	@ (800cb44 <__libc_init_array+0x44>)
 800cb14:	f000 f8a0 	bl	800cc58 <_init>
 800cb18:	1b64      	subs	r4, r4, r5
 800cb1a:	10a4      	asrs	r4, r4, #2
 800cb1c:	2600      	movs	r6, #0
 800cb1e:	42a6      	cmp	r6, r4
 800cb20:	d105      	bne.n	800cb2e <__libc_init_array+0x2e>
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
 800cb24:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb28:	4798      	blx	r3
 800cb2a:	3601      	adds	r6, #1
 800cb2c:	e7ee      	b.n	800cb0c <__libc_init_array+0xc>
 800cb2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb32:	4798      	blx	r3
 800cb34:	3601      	adds	r6, #1
 800cb36:	e7f2      	b.n	800cb1e <__libc_init_array+0x1e>
 800cb38:	0800cd8c 	.word	0x0800cd8c
 800cb3c:	0800cd8c 	.word	0x0800cd8c
 800cb40:	0800cd8c 	.word	0x0800cd8c
 800cb44:	0800cd90 	.word	0x0800cd90

0800cb48 <__retarget_lock_acquire_recursive>:
 800cb48:	4770      	bx	lr

0800cb4a <__retarget_lock_release_recursive>:
 800cb4a:	4770      	bx	lr

0800cb4c <memcpy>:
 800cb4c:	440a      	add	r2, r1
 800cb4e:	4291      	cmp	r1, r2
 800cb50:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb54:	d100      	bne.n	800cb58 <memcpy+0xc>
 800cb56:	4770      	bx	lr
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb62:	4291      	cmp	r1, r2
 800cb64:	d1f9      	bne.n	800cb5a <memcpy+0xe>
 800cb66:	bd10      	pop	{r4, pc}

0800cb68 <_free_r>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	d041      	beq.n	800cbf4 <_free_r+0x8c>
 800cb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb74:	1f0c      	subs	r4, r1, #4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bfb8      	it	lt
 800cb7a:	18e4      	addlt	r4, r4, r3
 800cb7c:	f000 f83e 	bl	800cbfc <__malloc_lock>
 800cb80:	4a1d      	ldr	r2, [pc, #116]	@ (800cbf8 <_free_r+0x90>)
 800cb82:	6813      	ldr	r3, [r2, #0]
 800cb84:	b933      	cbnz	r3, 800cb94 <_free_r+0x2c>
 800cb86:	6063      	str	r3, [r4, #4]
 800cb88:	6014      	str	r4, [r2, #0]
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb90:	f000 b83a 	b.w	800cc08 <__malloc_unlock>
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	d908      	bls.n	800cbaa <_free_r+0x42>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	1821      	adds	r1, r4, r0
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	bf01      	itttt	eq
 800cba0:	6819      	ldreq	r1, [r3, #0]
 800cba2:	685b      	ldreq	r3, [r3, #4]
 800cba4:	1809      	addeq	r1, r1, r0
 800cba6:	6021      	streq	r1, [r4, #0]
 800cba8:	e7ed      	b.n	800cb86 <_free_r+0x1e>
 800cbaa:	461a      	mov	r2, r3
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	b10b      	cbz	r3, 800cbb4 <_free_r+0x4c>
 800cbb0:	42a3      	cmp	r3, r4
 800cbb2:	d9fa      	bls.n	800cbaa <_free_r+0x42>
 800cbb4:	6811      	ldr	r1, [r2, #0]
 800cbb6:	1850      	adds	r0, r2, r1
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d10b      	bne.n	800cbd4 <_free_r+0x6c>
 800cbbc:	6820      	ldr	r0, [r4, #0]
 800cbbe:	4401      	add	r1, r0
 800cbc0:	1850      	adds	r0, r2, r1
 800cbc2:	4283      	cmp	r3, r0
 800cbc4:	6011      	str	r1, [r2, #0]
 800cbc6:	d1e0      	bne.n	800cb8a <_free_r+0x22>
 800cbc8:	6818      	ldr	r0, [r3, #0]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	6053      	str	r3, [r2, #4]
 800cbce:	4408      	add	r0, r1
 800cbd0:	6010      	str	r0, [r2, #0]
 800cbd2:	e7da      	b.n	800cb8a <_free_r+0x22>
 800cbd4:	d902      	bls.n	800cbdc <_free_r+0x74>
 800cbd6:	230c      	movs	r3, #12
 800cbd8:	602b      	str	r3, [r5, #0]
 800cbda:	e7d6      	b.n	800cb8a <_free_r+0x22>
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	1821      	adds	r1, r4, r0
 800cbe0:	428b      	cmp	r3, r1
 800cbe2:	bf04      	itt	eq
 800cbe4:	6819      	ldreq	r1, [r3, #0]
 800cbe6:	685b      	ldreq	r3, [r3, #4]
 800cbe8:	6063      	str	r3, [r4, #4]
 800cbea:	bf04      	itt	eq
 800cbec:	1809      	addeq	r1, r1, r0
 800cbee:	6021      	streq	r1, [r4, #0]
 800cbf0:	6054      	str	r4, [r2, #4]
 800cbf2:	e7ca      	b.n	800cb8a <_free_r+0x22>
 800cbf4:	bd38      	pop	{r3, r4, r5, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20002528 	.word	0x20002528

0800cbfc <__malloc_lock>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	@ (800cc04 <__malloc_lock+0x8>)
 800cbfe:	f7ff bfa3 	b.w	800cb48 <__retarget_lock_acquire_recursive>
 800cc02:	bf00      	nop
 800cc04:	20002524 	.word	0x20002524

0800cc08 <__malloc_unlock>:
 800cc08:	4801      	ldr	r0, [pc, #4]	@ (800cc10 <__malloc_unlock+0x8>)
 800cc0a:	f7ff bf9e 	b.w	800cb4a <__retarget_lock_release_recursive>
 800cc0e:	bf00      	nop
 800cc10:	20002524 	.word	0x20002524

0800cc14 <sqrtf>:
 800cc14:	b508      	push	{r3, lr}
 800cc16:	ed2d 8b02 	vpush	{d8}
 800cc1a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc1e:	f000 f817 	bl	800cc50 <__ieee754_sqrtf>
 800cc22:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2a:	d60c      	bvs.n	800cc46 <sqrtf+0x32>
 800cc2c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cc4c <sqrtf+0x38>
 800cc30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc38:	d505      	bpl.n	800cc46 <sqrtf+0x32>
 800cc3a:	f7ff ff5b 	bl	800caf4 <__errno>
 800cc3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cc42:	2321      	movs	r3, #33	@ 0x21
 800cc44:	6003      	str	r3, [r0, #0]
 800cc46:	ecbd 8b02 	vpop	{d8}
 800cc4a:	bd08      	pop	{r3, pc}
 800cc4c:	00000000 	.word	0x00000000

0800cc50 <__ieee754_sqrtf>:
 800cc50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc54:	4770      	bx	lr
	...

0800cc58 <_init>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	bf00      	nop
 800cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5e:	bc08      	pop	{r3}
 800cc60:	469e      	mov	lr, r3
 800cc62:	4770      	bx	lr

0800cc64 <_fini>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr
=======
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	20002408 	.word	0x20002408
 800ca04:	20002410 	.word	0x20002410

0800ca08 <memset>:
 800ca08:	4402      	add	r2, r0
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d100      	bne.n	800ca12 <memset+0xa>
 800ca10:	4770      	bx	lr
 800ca12:	f803 1b01 	strb.w	r1, [r3], #1
 800ca16:	e7f9      	b.n	800ca0c <memset+0x4>

0800ca18 <_reclaim_reent>:
 800ca18:	4b2d      	ldr	r3, [pc, #180]	@ (800cad0 <_reclaim_reent+0xb8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4283      	cmp	r3, r0
 800ca1e:	b570      	push	{r4, r5, r6, lr}
 800ca20:	4604      	mov	r4, r0
 800ca22:	d053      	beq.n	800cacc <_reclaim_reent+0xb4>
 800ca24:	69c3      	ldr	r3, [r0, #28]
 800ca26:	b31b      	cbz	r3, 800ca70 <_reclaim_reent+0x58>
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	b163      	cbz	r3, 800ca46 <_reclaim_reent+0x2e>
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	69e3      	ldr	r3, [r4, #28]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	5959      	ldr	r1, [r3, r5]
 800ca34:	b9b1      	cbnz	r1, 800ca64 <_reclaim_reent+0x4c>
 800ca36:	3504      	adds	r5, #4
 800ca38:	2d80      	cmp	r5, #128	@ 0x80
 800ca3a:	d1f8      	bne.n	800ca2e <_reclaim_reent+0x16>
 800ca3c:	69e3      	ldr	r3, [r4, #28]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	68d9      	ldr	r1, [r3, #12]
 800ca42:	f000 f881 	bl	800cb48 <_free_r>
 800ca46:	69e3      	ldr	r3, [r4, #28]
 800ca48:	6819      	ldr	r1, [r3, #0]
 800ca4a:	b111      	cbz	r1, 800ca52 <_reclaim_reent+0x3a>
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 f87b 	bl	800cb48 <_free_r>
 800ca52:	69e3      	ldr	r3, [r4, #28]
 800ca54:	689d      	ldr	r5, [r3, #8]
 800ca56:	b15d      	cbz	r5, 800ca70 <_reclaim_reent+0x58>
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	682d      	ldr	r5, [r5, #0]
 800ca5e:	f000 f873 	bl	800cb48 <_free_r>
 800ca62:	e7f8      	b.n	800ca56 <_reclaim_reent+0x3e>
 800ca64:	680e      	ldr	r6, [r1, #0]
 800ca66:	4620      	mov	r0, r4
 800ca68:	f000 f86e 	bl	800cb48 <_free_r>
 800ca6c:	4631      	mov	r1, r6
 800ca6e:	e7e1      	b.n	800ca34 <_reclaim_reent+0x1c>
 800ca70:	6961      	ldr	r1, [r4, #20]
 800ca72:	b111      	cbz	r1, 800ca7a <_reclaim_reent+0x62>
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 f867 	bl	800cb48 <_free_r>
 800ca7a:	69e1      	ldr	r1, [r4, #28]
 800ca7c:	b111      	cbz	r1, 800ca84 <_reclaim_reent+0x6c>
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 f862 	bl	800cb48 <_free_r>
 800ca84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ca86:	b111      	cbz	r1, 800ca8e <_reclaim_reent+0x76>
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 f85d 	bl	800cb48 <_free_r>
 800ca8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca90:	b111      	cbz	r1, 800ca98 <_reclaim_reent+0x80>
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 f858 	bl	800cb48 <_free_r>
 800ca98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca9a:	b111      	cbz	r1, 800caa2 <_reclaim_reent+0x8a>
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f000 f853 	bl	800cb48 <_free_r>
 800caa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800caa4:	b111      	cbz	r1, 800caac <_reclaim_reent+0x94>
 800caa6:	4620      	mov	r0, r4
 800caa8:	f000 f84e 	bl	800cb48 <_free_r>
 800caac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800caae:	b111      	cbz	r1, 800cab6 <_reclaim_reent+0x9e>
 800cab0:	4620      	mov	r0, r4
 800cab2:	f000 f849 	bl	800cb48 <_free_r>
 800cab6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cab8:	b111      	cbz	r1, 800cac0 <_reclaim_reent+0xa8>
 800caba:	4620      	mov	r0, r4
 800cabc:	f000 f844 	bl	800cb48 <_free_r>
 800cac0:	6a23      	ldr	r3, [r4, #32]
 800cac2:	b11b      	cbz	r3, 800cacc <_reclaim_reent+0xb4>
 800cac4:	4620      	mov	r0, r4
 800cac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caca:	4718      	bx	r3
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	bf00      	nop
 800cad0:	2000023c 	.word	0x2000023c

0800cad4 <__errno>:
 800cad4:	4b01      	ldr	r3, [pc, #4]	@ (800cadc <__errno+0x8>)
 800cad6:	6818      	ldr	r0, [r3, #0]
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	2000023c 	.word	0x2000023c

0800cae0 <__libc_init_array>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4d0d      	ldr	r5, [pc, #52]	@ (800cb18 <__libc_init_array+0x38>)
 800cae4:	4c0d      	ldr	r4, [pc, #52]	@ (800cb1c <__libc_init_array+0x3c>)
 800cae6:	1b64      	subs	r4, r4, r5
 800cae8:	10a4      	asrs	r4, r4, #2
 800caea:	2600      	movs	r6, #0
 800caec:	42a6      	cmp	r6, r4
 800caee:	d109      	bne.n	800cb04 <__libc_init_array+0x24>
 800caf0:	4d0b      	ldr	r5, [pc, #44]	@ (800cb20 <__libc_init_array+0x40>)
 800caf2:	4c0c      	ldr	r4, [pc, #48]	@ (800cb24 <__libc_init_array+0x44>)
 800caf4:	f000 f8a0 	bl	800cc38 <_init>
 800caf8:	1b64      	subs	r4, r4, r5
 800cafa:	10a4      	asrs	r4, r4, #2
 800cafc:	2600      	movs	r6, #0
 800cafe:	42a6      	cmp	r6, r4
 800cb00:	d105      	bne.n	800cb0e <__libc_init_array+0x2e>
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb08:	4798      	blx	r3
 800cb0a:	3601      	adds	r6, #1
 800cb0c:	e7ee      	b.n	800caec <__libc_init_array+0xc>
 800cb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb12:	4798      	blx	r3
 800cb14:	3601      	adds	r6, #1
 800cb16:	e7f2      	b.n	800cafe <__libc_init_array+0x1e>
 800cb18:	0800cd6c 	.word	0x0800cd6c
 800cb1c:	0800cd6c 	.word	0x0800cd6c
 800cb20:	0800cd6c 	.word	0x0800cd6c
 800cb24:	0800cd70 	.word	0x0800cd70

0800cb28 <__retarget_lock_acquire_recursive>:
 800cb28:	4770      	bx	lr

0800cb2a <__retarget_lock_release_recursive>:
 800cb2a:	4770      	bx	lr

0800cb2c <memcpy>:
 800cb2c:	440a      	add	r2, r1
 800cb2e:	4291      	cmp	r1, r2
 800cb30:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb34:	d100      	bne.n	800cb38 <memcpy+0xc>
 800cb36:	4770      	bx	lr
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb42:	4291      	cmp	r1, r2
 800cb44:	d1f9      	bne.n	800cb3a <memcpy+0xe>
 800cb46:	bd10      	pop	{r4, pc}

0800cb48 <_free_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	d041      	beq.n	800cbd4 <_free_r+0x8c>
 800cb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb54:	1f0c      	subs	r4, r1, #4
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	bfb8      	it	lt
 800cb5a:	18e4      	addlt	r4, r4, r3
 800cb5c:	f000 f83e 	bl	800cbdc <__malloc_lock>
 800cb60:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd8 <_free_r+0x90>)
 800cb62:	6813      	ldr	r3, [r2, #0]
 800cb64:	b933      	cbnz	r3, 800cb74 <_free_r+0x2c>
 800cb66:	6063      	str	r3, [r4, #4]
 800cb68:	6014      	str	r4, [r2, #0]
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb70:	f000 b83a 	b.w	800cbe8 <__malloc_unlock>
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	d908      	bls.n	800cb8a <_free_r+0x42>
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	1821      	adds	r1, r4, r0
 800cb7c:	428b      	cmp	r3, r1
 800cb7e:	bf01      	itttt	eq
 800cb80:	6819      	ldreq	r1, [r3, #0]
 800cb82:	685b      	ldreq	r3, [r3, #4]
 800cb84:	1809      	addeq	r1, r1, r0
 800cb86:	6021      	streq	r1, [r4, #0]
 800cb88:	e7ed      	b.n	800cb66 <_free_r+0x1e>
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	b10b      	cbz	r3, 800cb94 <_free_r+0x4c>
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d9fa      	bls.n	800cb8a <_free_r+0x42>
 800cb94:	6811      	ldr	r1, [r2, #0]
 800cb96:	1850      	adds	r0, r2, r1
 800cb98:	42a0      	cmp	r0, r4
 800cb9a:	d10b      	bne.n	800cbb4 <_free_r+0x6c>
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	4401      	add	r1, r0
 800cba0:	1850      	adds	r0, r2, r1
 800cba2:	4283      	cmp	r3, r0
 800cba4:	6011      	str	r1, [r2, #0]
 800cba6:	d1e0      	bne.n	800cb6a <_free_r+0x22>
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	6053      	str	r3, [r2, #4]
 800cbae:	4408      	add	r0, r1
 800cbb0:	6010      	str	r0, [r2, #0]
 800cbb2:	e7da      	b.n	800cb6a <_free_r+0x22>
 800cbb4:	d902      	bls.n	800cbbc <_free_r+0x74>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	602b      	str	r3, [r5, #0]
 800cbba:	e7d6      	b.n	800cb6a <_free_r+0x22>
 800cbbc:	6820      	ldr	r0, [r4, #0]
 800cbbe:	1821      	adds	r1, r4, r0
 800cbc0:	428b      	cmp	r3, r1
 800cbc2:	bf04      	itt	eq
 800cbc4:	6819      	ldreq	r1, [r3, #0]
 800cbc6:	685b      	ldreq	r3, [r3, #4]
 800cbc8:	6063      	str	r3, [r4, #4]
 800cbca:	bf04      	itt	eq
 800cbcc:	1809      	addeq	r1, r1, r0
 800cbce:	6021      	streq	r1, [r4, #0]
 800cbd0:	6054      	str	r4, [r2, #4]
 800cbd2:	e7ca      	b.n	800cb6a <_free_r+0x22>
 800cbd4:	bd38      	pop	{r3, r4, r5, pc}
 800cbd6:	bf00      	nop
 800cbd8:	20002564 	.word	0x20002564

0800cbdc <__malloc_lock>:
 800cbdc:	4801      	ldr	r0, [pc, #4]	@ (800cbe4 <__malloc_lock+0x8>)
 800cbde:	f7ff bfa3 	b.w	800cb28 <__retarget_lock_acquire_recursive>
 800cbe2:	bf00      	nop
 800cbe4:	20002560 	.word	0x20002560

0800cbe8 <__malloc_unlock>:
 800cbe8:	4801      	ldr	r0, [pc, #4]	@ (800cbf0 <__malloc_unlock+0x8>)
 800cbea:	f7ff bf9e 	b.w	800cb2a <__retarget_lock_release_recursive>
 800cbee:	bf00      	nop
 800cbf0:	20002560 	.word	0x20002560

0800cbf4 <sqrtf>:
 800cbf4:	b508      	push	{r3, lr}
 800cbf6:	ed2d 8b02 	vpush	{d8}
 800cbfa:	eeb0 8a40 	vmov.f32	s16, s0
 800cbfe:	f000 f817 	bl	800cc30 <__ieee754_sqrtf>
 800cc02:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0a:	d60c      	bvs.n	800cc26 <sqrtf+0x32>
 800cc0c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cc2c <sqrtf+0x38>
 800cc10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	d505      	bpl.n	800cc26 <sqrtf+0x32>
 800cc1a:	f7ff ff5b 	bl	800cad4 <__errno>
 800cc1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cc22:	2321      	movs	r3, #33	@ 0x21
 800cc24:	6003      	str	r3, [r0, #0]
 800cc26:	ecbd 8b02 	vpop	{d8}
 800cc2a:	bd08      	pop	{r3, pc}
 800cc2c:	00000000 	.word	0x00000000

0800cc30 <__ieee754_sqrtf>:
 800cc30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc34:	4770      	bx	lr
	...

0800cc38 <_init>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	bf00      	nop
 800cc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc3e:	bc08      	pop	{r3}
 800cc40:	469e      	mov	lr, r3
 800cc42:	4770      	bx	lr

0800cc44 <_fini>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	bf00      	nop
 800cc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4a:	bc08      	pop	{r3}
 800cc4c:	469e      	mov	lr, r3
 800cc4e:	4770      	bx	lr
>>>>>>> origin/main
