
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800c050  0800c050  0000d050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c150  0800c150  0000e6e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c150  0800c150  0000d150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c158  0800c158  0000e6e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c158  0800c158  0000d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c15c  0800c15c  0000d15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006e8  20000000  0800c160  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b0  200006e8  0800c848  0000e6e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002898  0800c848  0000e898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e6e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033b64  00000000  00000000  0000e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072a9  00000000  00000000  0004227c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026d8  00000000  00000000  00049528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de2  00000000  00000000  0004bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac31  00000000  00000000  0004d9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000374f0  00000000  00000000  00078613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f36be  00000000  00000000  000afb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a31c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6c4  00000000  00000000  001a3204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001ad8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006e8 	.word	0x200006e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c038 	.word	0x0800c038

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006ec 	.word	0x200006ec
 800021c:	0800c038 	.word	0x0800c038

08000220 <__aeabi_dmul>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000226:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800022a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800022e:	bf1d      	ittte	ne
 8000230:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000234:	ea94 0f0c 	teqne	r4, ip
 8000238:	ea95 0f0c 	teqne	r5, ip
 800023c:	f000 f8de 	bleq	80003fc <__aeabi_dmul+0x1dc>
 8000240:	442c      	add	r4, r5
 8000242:	ea81 0603 	eor.w	r6, r1, r3
 8000246:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800024a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800024e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000252:	bf18      	it	ne
 8000254:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000258:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000260:	d038      	beq.n	80002d4 <__aeabi_dmul+0xb4>
 8000262:	fba0 ce02 	umull	ip, lr, r0, r2
 8000266:	f04f 0500 	mov.w	r5, #0
 800026a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800026e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000272:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000276:	f04f 0600 	mov.w	r6, #0
 800027a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800027e:	f09c 0f00 	teq	ip, #0
 8000282:	bf18      	it	ne
 8000284:	f04e 0e01 	orrne.w	lr, lr, #1
 8000288:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800028c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000290:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000294:	d204      	bcs.n	80002a0 <__aeabi_dmul+0x80>
 8000296:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800029a:	416d      	adcs	r5, r5
 800029c:	eb46 0606 	adc.w	r6, r6, r6
 80002a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b8:	bf88      	it	hi
 80002ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002be:	d81e      	bhi.n	80002fe <__aeabi_dmul+0xde>
 80002c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002c4:	bf08      	it	eq
 80002c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ca:	f150 0000 	adcs.w	r0, r0, #0
 80002ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d8:	ea46 0101 	orr.w	r1, r6, r1
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	ea81 0103 	eor.w	r1, r1, r3
 80002e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e8:	bfc2      	ittt	gt
 80002ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002f2:	bd70      	popgt	{r4, r5, r6, pc}
 80002f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f8:	f04f 0e00 	mov.w	lr, #0
 80002fc:	3c01      	subs	r4, #1
 80002fe:	f300 80ab 	bgt.w	8000458 <__aeabi_dmul+0x238>
 8000302:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000306:	bfde      	ittt	le
 8000308:	2000      	movle	r0, #0
 800030a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800030e:	bd70      	pople	{r4, r5, r6, pc}
 8000310:	f1c4 0400 	rsb	r4, r4, #0
 8000314:	3c20      	subs	r4, #32
 8000316:	da35      	bge.n	8000384 <__aeabi_dmul+0x164>
 8000318:	340c      	adds	r4, #12
 800031a:	dc1b      	bgt.n	8000354 <__aeabi_dmul+0x134>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f305 	lsl.w	r3, r0, r5
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f205 	lsl.w	r2, r1, r5
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000338:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	fa21 f604 	lsr.w	r6, r1, r4
 8000344:	eb42 0106 	adc.w	r1, r2, r6
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 040c 	rsb	r4, r4, #12
 8000358:	f1c4 0520 	rsb	r5, r4, #32
 800035c:	fa00 f304 	lsl.w	r3, r0, r4
 8000360:	fa20 f005 	lsr.w	r0, r0, r5
 8000364:	fa01 f204 	lsl.w	r2, r1, r4
 8000368:	ea40 0002 	orr.w	r0, r0, r2
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f205 	lsl.w	r2, r0, r5
 800038c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000390:	fa20 f304 	lsr.w	r3, r0, r4
 8000394:	fa01 f205 	lsl.w	r2, r1, r5
 8000398:	ea43 0302 	orr.w	r3, r3, r2
 800039c:	fa21 f004 	lsr.w	r0, r1, r4
 80003a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	fa21 f204 	lsr.w	r2, r1, r4
 80003a8:	ea20 0002 	bic.w	r0, r0, r2
 80003ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b4:	bf08      	it	eq
 80003b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f094 0f00 	teq	r4, #0
 80003c0:	d10f      	bne.n	80003e2 <__aeabi_dmul+0x1c2>
 80003c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003c6:	0040      	lsls	r0, r0, #1
 80003c8:	eb41 0101 	adc.w	r1, r1, r1
 80003cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3c01      	subeq	r4, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1a6>
 80003d6:	ea41 0106 	orr.w	r1, r1, r6
 80003da:	f095 0f00 	teq	r5, #0
 80003de:	bf18      	it	ne
 80003e0:	4770      	bxne	lr
 80003e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003e6:	0052      	lsls	r2, r2, #1
 80003e8:	eb43 0303 	adc.w	r3, r3, r3
 80003ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f0:	bf08      	it	eq
 80003f2:	3d01      	subeq	r5, #1
 80003f4:	d0f7      	beq.n	80003e6 <__aeabi_dmul+0x1c6>
 80003f6:	ea43 0306 	orr.w	r3, r3, r6
 80003fa:	4770      	bx	lr
 80003fc:	ea94 0f0c 	teq	r4, ip
 8000400:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000404:	bf18      	it	ne
 8000406:	ea95 0f0c 	teqne	r5, ip
 800040a:	d00c      	beq.n	8000426 <__aeabi_dmul+0x206>
 800040c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000410:	bf18      	it	ne
 8000412:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000416:	d1d1      	bne.n	80003bc <__aeabi_dmul+0x19c>
 8000418:	ea81 0103 	eor.w	r1, r1, r3
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd70      	pop	{r4, r5, r6, pc}
 8000426:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042a:	bf06      	itte	eq
 800042c:	4610      	moveq	r0, r2
 800042e:	4619      	moveq	r1, r3
 8000430:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000434:	d019      	beq.n	800046a <__aeabi_dmul+0x24a>
 8000436:	ea94 0f0c 	teq	r4, ip
 800043a:	d102      	bne.n	8000442 <__aeabi_dmul+0x222>
 800043c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000440:	d113      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000442:	ea95 0f0c 	teq	r5, ip
 8000446:	d105      	bne.n	8000454 <__aeabi_dmul+0x234>
 8000448:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800044c:	bf1c      	itt	ne
 800044e:	4610      	movne	r0, r2
 8000450:	4619      	movne	r1, r3
 8000452:	d10a      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000454:	ea81 0103 	eor.w	r1, r1, r3
 8000458:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800046e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000472:	bd70      	pop	{r4, r5, r6, pc}

08000474 <__aeabi_drsub>:
 8000474:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e002      	b.n	8000480 <__adddf3>
 800047a:	bf00      	nop

0800047c <__aeabi_dsub>:
 800047c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000480 <__adddf3>:
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000486:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048a:	ea94 0f05 	teq	r4, r5
 800048e:	bf08      	it	eq
 8000490:	ea90 0f02 	teqeq	r0, r2
 8000494:	bf1f      	itttt	ne
 8000496:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800049e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a6:	f000 80e2 	beq.w	800066e <__adddf3+0x1ee>
 80004aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b2:	bfb8      	it	lt
 80004b4:	426d      	neglt	r5, r5
 80004b6:	dd0c      	ble.n	80004d2 <__adddf3+0x52>
 80004b8:	442c      	add	r4, r5
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	ea82 0000 	eor.w	r0, r2, r0
 80004c6:	ea83 0101 	eor.w	r1, r3, r1
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	2d36      	cmp	r5, #54	@ 0x36
 80004d4:	bf88      	it	hi
 80004d6:	bd30      	pophi	{r4, r5, pc}
 80004d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e8:	d002      	beq.n	80004f0 <__adddf3+0x70>
 80004ea:	4240      	negs	r0, r0
 80004ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004fc:	d002      	beq.n	8000504 <__adddf3+0x84>
 80004fe:	4252      	negs	r2, r2
 8000500:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000504:	ea94 0f05 	teq	r4, r5
 8000508:	f000 80a7 	beq.w	800065a <__adddf3+0x1da>
 800050c:	f1a4 0401 	sub.w	r4, r4, #1
 8000510:	f1d5 0e20 	rsbs	lr, r5, #32
 8000514:	db0d      	blt.n	8000532 <__adddf3+0xb2>
 8000516:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051a:	fa22 f205 	lsr.w	r2, r2, r5
 800051e:	1880      	adds	r0, r0, r2
 8000520:	f141 0100 	adc.w	r1, r1, #0
 8000524:	fa03 f20e 	lsl.w	r2, r3, lr
 8000528:	1880      	adds	r0, r0, r2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	4159      	adcs	r1, r3
 8000530:	e00e      	b.n	8000550 <__adddf3+0xd0>
 8000532:	f1a5 0520 	sub.w	r5, r5, #32
 8000536:	f10e 0e20 	add.w	lr, lr, #32
 800053a:	2a01      	cmp	r2, #1
 800053c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000540:	bf28      	it	cs
 8000542:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000546:	fa43 f305 	asr.w	r3, r3, r5
 800054a:	18c0      	adds	r0, r0, r3
 800054c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	d507      	bpl.n	8000566 <__adddf3+0xe6>
 8000556:	f04f 0e00 	mov.w	lr, #0
 800055a:	f1dc 0c00 	rsbs	ip, ip, #0
 800055e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000562:	eb6e 0101 	sbc.w	r1, lr, r1
 8000566:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800056a:	d31b      	bcc.n	80005a4 <__adddf3+0x124>
 800056c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000570:	d30c      	bcc.n	800058c <__adddf3+0x10c>
 8000572:	0849      	lsrs	r1, r1, #1
 8000574:	ea5f 0030 	movs.w	r0, r0, rrx
 8000578:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800057c:	f104 0401 	add.w	r4, r4, #1
 8000580:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000584:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000588:	f080 809a 	bcs.w	80006c0 <__adddf3+0x240>
 800058c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	ea41 0105 	orr.w	r1, r1, r5
 80005a2:	bd30      	pop	{r4, r5, pc}
 80005a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a8:	4140      	adcs	r0, r0
 80005aa:	eb41 0101 	adc.w	r1, r1, r1
 80005ae:	3c01      	subs	r4, #1
 80005b0:	bf28      	it	cs
 80005b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005b6:	d2e9      	bcs.n	800058c <__adddf3+0x10c>
 80005b8:	f091 0f00 	teq	r1, #0
 80005bc:	bf04      	itt	eq
 80005be:	4601      	moveq	r1, r0
 80005c0:	2000      	moveq	r0, #0
 80005c2:	fab1 f381 	clz	r3, r1
 80005c6:	bf08      	it	eq
 80005c8:	3320      	addeq	r3, #32
 80005ca:	f1a3 030b 	sub.w	r3, r3, #11
 80005ce:	f1b3 0220 	subs.w	r2, r3, #32
 80005d2:	da0c      	bge.n	80005ee <__adddf3+0x16e>
 80005d4:	320c      	adds	r2, #12
 80005d6:	dd08      	ble.n	80005ea <__adddf3+0x16a>
 80005d8:	f102 0c14 	add.w	ip, r2, #20
 80005dc:	f1c2 020c 	rsb	r2, r2, #12
 80005e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e4:	fa21 f102 	lsr.w	r1, r1, r2
 80005e8:	e00c      	b.n	8000604 <__adddf3+0x184>
 80005ea:	f102 0214 	add.w	r2, r2, #20
 80005ee:	bfd8      	it	le
 80005f0:	f1c2 0c20 	rsble	ip, r2, #32
 80005f4:	fa01 f102 	lsl.w	r1, r1, r2
 80005f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005fc:	bfdc      	itt	le
 80005fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000602:	4090      	lslle	r0, r2
 8000604:	1ae4      	subs	r4, r4, r3
 8000606:	bfa2      	ittt	ge
 8000608:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800060c:	4329      	orrge	r1, r5
 800060e:	bd30      	popge	{r4, r5, pc}
 8000610:	ea6f 0404 	mvn.w	r4, r4
 8000614:	3c1f      	subs	r4, #31
 8000616:	da1c      	bge.n	8000652 <__adddf3+0x1d2>
 8000618:	340c      	adds	r4, #12
 800061a:	dc0e      	bgt.n	800063a <__adddf3+0x1ba>
 800061c:	f104 0414 	add.w	r4, r4, #20
 8000620:	f1c4 0220 	rsb	r2, r4, #32
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f302 	lsl.w	r3, r1, r2
 800062c:	ea40 0003 	orr.w	r0, r0, r3
 8000630:	fa21 f304 	lsr.w	r3, r1, r4
 8000634:	ea45 0103 	orr.w	r1, r5, r3
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f1c4 040c 	rsb	r4, r4, #12
 800063e:	f1c4 0220 	rsb	r2, r4, #32
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 f304 	lsl.w	r3, r1, r4
 800064a:	ea40 0003 	orr.w	r0, r0, r3
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	fa21 f004 	lsr.w	r0, r1, r4
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	f094 0f00 	teq	r4, #0
 800065e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000662:	bf06      	itte	eq
 8000664:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000668:	3401      	addeq	r4, #1
 800066a:	3d01      	subne	r5, #1
 800066c:	e74e      	b.n	800050c <__adddf3+0x8c>
 800066e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000672:	bf18      	it	ne
 8000674:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000678:	d029      	beq.n	80006ce <__adddf3+0x24e>
 800067a:	ea94 0f05 	teq	r4, r5
 800067e:	bf08      	it	eq
 8000680:	ea90 0f02 	teqeq	r0, r2
 8000684:	d005      	beq.n	8000692 <__adddf3+0x212>
 8000686:	ea54 0c00 	orrs.w	ip, r4, r0
 800068a:	bf04      	itt	eq
 800068c:	4619      	moveq	r1, r3
 800068e:	4610      	moveq	r0, r2
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	ea91 0f03 	teq	r1, r3
 8000696:	bf1e      	ittt	ne
 8000698:	2100      	movne	r1, #0
 800069a:	2000      	movne	r0, #0
 800069c:	bd30      	popne	{r4, r5, pc}
 800069e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a2:	d105      	bne.n	80006b0 <__adddf3+0x230>
 80006a4:	0040      	lsls	r0, r0, #1
 80006a6:	4149      	adcs	r1, r1
 80006a8:	bf28      	it	cs
 80006aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006b4:	bf3c      	itt	cc
 80006b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ba:	bd30      	popcc	{r4, r5, pc}
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf1a      	itte	ne
 80006d4:	4619      	movne	r1, r3
 80006d6:	4610      	movne	r0, r2
 80006d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006dc:	bf1c      	itt	ne
 80006de:	460b      	movne	r3, r1
 80006e0:	4602      	movne	r2, r0
 80006e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006e6:	bf06      	itte	eq
 80006e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ec:	ea91 0f03 	teqeq	r1, r3
 80006f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	bf00      	nop

080006f8 <__aeabi_ui2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070c:	f04f 0500 	mov.w	r5, #0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e750      	b.n	80005b8 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_i2d>:
 8000718:	f090 0f00 	teq	r0, #0
 800071c:	bf04      	itt	eq
 800071e:	2100      	moveq	r1, #0
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000728:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800072c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000730:	bf48      	it	mi
 8000732:	4240      	negmi	r0, r0
 8000734:	f04f 0100 	mov.w	r1, #0
 8000738:	e73e      	b.n	80005b8 <__adddf3+0x138>
 800073a:	bf00      	nop

0800073c <__aeabi_f2d>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000742:	ea4f 0131 	mov.w	r1, r1, rrx
 8000746:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074a:	bf1f      	itttt	ne
 800074c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000750:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000754:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000758:	4770      	bxne	lr
 800075a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800075e:	bf08      	it	eq
 8000760:	4770      	bxeq	lr
 8000762:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000766:	bf04      	itt	eq
 8000768:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	e71c      	b.n	80005b8 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_ul2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f04f 0500 	mov.w	r5, #0
 800078e:	e00a      	b.n	80007a6 <__aeabi_l2d+0x16>

08000790 <__aeabi_l2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800079e:	d502      	bpl.n	80007a6 <__aeabi_l2d+0x16>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b2:	f43f aed8 	beq.w	8000566 <__adddf3+0xe6>
 80007b6:	f04f 0203 	mov.w	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ce:	f1c2 0320 	rsb	r3, r2, #32
 80007d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d6:	fa20 f002 	lsr.w	r0, r0, r2
 80007da:	fa01 fe03 	lsl.w	lr, r1, r3
 80007de:	ea40 000e 	orr.w	r0, r0, lr
 80007e2:	fa21 f102 	lsr.w	r1, r1, r2
 80007e6:	4414      	add	r4, r2
 80007e8:	e6bd      	b.n	8000566 <__adddf3+0xe6>
 80007ea:	bf00      	nop

080007ec <__gedf2>:
 80007ec:	f04f 3cff 	mov.w	ip, #4294967295
 80007f0:	e006      	b.n	8000800 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__ledf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	e002      	b.n	8000800 <__cmpdf2+0x4>
 80007fa:	bf00      	nop

080007fc <__cmpdf2>:
 80007fc:	f04f 0c01 	mov.w	ip, #1
 8000800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800080c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000816:	d01b      	beq.n	8000850 <__cmpdf2+0x54>
 8000818:	b001      	add	sp, #4
 800081a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800081e:	bf0c      	ite	eq
 8000820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000824:	ea91 0f03 	teqne	r1, r3
 8000828:	bf02      	ittt	eq
 800082a:	ea90 0f02 	teqeq	r0, r2
 800082e:	2000      	moveq	r0, #0
 8000830:	4770      	bxeq	lr
 8000832:	f110 0f00 	cmn.w	r0, #0
 8000836:	ea91 0f03 	teq	r1, r3
 800083a:	bf58      	it	pl
 800083c:	4299      	cmppl	r1, r3
 800083e:	bf08      	it	eq
 8000840:	4290      	cmpeq	r0, r2
 8000842:	bf2c      	ite	cs
 8000844:	17d8      	asrcs	r0, r3, #31
 8000846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800084a:	f040 0001 	orr.w	r0, r0, #1
 800084e:	4770      	bx	lr
 8000850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000858:	d102      	bne.n	8000860 <__cmpdf2+0x64>
 800085a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800085e:	d107      	bne.n	8000870 <__cmpdf2+0x74>
 8000860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d1d6      	bne.n	8000818 <__cmpdf2+0x1c>
 800086a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800086e:	d0d3      	beq.n	8000818 <__cmpdf2+0x1c>
 8000870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <__aeabi_cdrcmple>:
 8000878:	4684      	mov	ip, r0
 800087a:	4610      	mov	r0, r2
 800087c:	4662      	mov	r2, ip
 800087e:	468c      	mov	ip, r1
 8000880:	4619      	mov	r1, r3
 8000882:	4663      	mov	r3, ip
 8000884:	e000      	b.n	8000888 <__aeabi_cdcmpeq>
 8000886:	bf00      	nop

08000888 <__aeabi_cdcmpeq>:
 8000888:	b501      	push	{r0, lr}
 800088a:	f7ff ffb7 	bl	80007fc <__cmpdf2>
 800088e:	2800      	cmp	r0, #0
 8000890:	bf48      	it	mi
 8000892:	f110 0f00 	cmnmi.w	r0, #0
 8000896:	bd01      	pop	{r0, pc}

08000898 <__aeabi_dcmpeq>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff fff4 	bl	8000888 <__aeabi_cdcmpeq>
 80008a0:	bf0c      	ite	eq
 80008a2:	2001      	moveq	r0, #1
 80008a4:	2000      	movne	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_dcmplt>:
 80008ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b0:	f7ff ffea 	bl	8000888 <__aeabi_cdcmpeq>
 80008b4:	bf34      	ite	cc
 80008b6:	2001      	movcc	r0, #1
 80008b8:	2000      	movcs	r0, #0
 80008ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80008be:	bf00      	nop

080008c0 <__aeabi_dcmple>:
 80008c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c4:	f7ff ffe0 	bl	8000888 <__aeabi_cdcmpeq>
 80008c8:	bf94      	ite	ls
 80008ca:	2001      	movls	r0, #1
 80008cc:	2000      	movhi	r0, #0
 80008ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80008d2:	bf00      	nop

080008d4 <__aeabi_dcmpge>:
 80008d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d8:	f7ff ffce 	bl	8000878 <__aeabi_cdrcmple>
 80008dc:	bf94      	ite	ls
 80008de:	2001      	movls	r0, #1
 80008e0:	2000      	movhi	r0, #0
 80008e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e6:	bf00      	nop

080008e8 <__aeabi_dcmpgt>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff ffc4 	bl	8000878 <__aeabi_cdrcmple>
 80008f0:	bf34      	ite	cc
 80008f2:	2001      	movcc	r0, #1
 80008f4:	2000      	movcs	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b988 	b.w	8000cc4 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	468e      	mov	lr, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	4688      	mov	r8, r1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d14a      	bne.n	8000a72 <__udivmoddi4+0xa6>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d962      	bls.n	8000aa8 <__udivmoddi4+0xdc>
 80009e2:	fab2 f682 	clz	r6, r2
 80009e6:	b14e      	cbz	r6, 80009fc <__udivmoddi4+0x30>
 80009e8:	f1c6 0320 	rsb	r3, r6, #32
 80009ec:	fa01 f806 	lsl.w	r8, r1, r6
 80009f0:	fa20 f303 	lsr.w	r3, r0, r3
 80009f4:	40b7      	lsls	r7, r6
 80009f6:	ea43 0808 	orr.w	r8, r3, r8
 80009fa:	40b4      	lsls	r4, r6
 80009fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a00:	fa1f fc87 	uxth.w	ip, r7
 8000a04:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a08:	0c23      	lsrs	r3, r4, #16
 8000a0a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a12:	fb01 f20c 	mul.w	r2, r1, ip
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d909      	bls.n	8000a2e <__udivmoddi4+0x62>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a20:	f080 80ea 	bcs.w	8000bf8 <__udivmoddi4+0x22c>
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f240 80e7 	bls.w	8000bf8 <__udivmoddi4+0x22c>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	443b      	add	r3, r7
 8000a2e:	1a9a      	subs	r2, r3, r2
 8000a30:	b2a3      	uxth	r3, r4
 8000a32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a42:	459c      	cmp	ip, r3
 8000a44:	d909      	bls.n	8000a5a <__udivmoddi4+0x8e>
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a4c:	f080 80d6 	bcs.w	8000bfc <__udivmoddi4+0x230>
 8000a50:	459c      	cmp	ip, r3
 8000a52:	f240 80d3 	bls.w	8000bfc <__udivmoddi4+0x230>
 8000a56:	443b      	add	r3, r7
 8000a58:	3802      	subs	r0, #2
 8000a5a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5e:	eba3 030c 	sub.w	r3, r3, ip
 8000a62:	2100      	movs	r1, #0
 8000a64:	b11d      	cbz	r5, 8000a6e <__udivmoddi4+0xa2>
 8000a66:	40f3      	lsrs	r3, r6
 8000a68:	2200      	movs	r2, #0
 8000a6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d905      	bls.n	8000a82 <__udivmoddi4+0xb6>
 8000a76:	b10d      	cbz	r5, 8000a7c <__udivmoddi4+0xb0>
 8000a78:	e9c5 0100 	strd	r0, r1, [r5]
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	e7f5      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000a82:	fab3 f183 	clz	r1, r3
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d146      	bne.n	8000b18 <__udivmoddi4+0x14c>
 8000a8a:	4573      	cmp	r3, lr
 8000a8c:	d302      	bcc.n	8000a94 <__udivmoddi4+0xc8>
 8000a8e:	4282      	cmp	r2, r0
 8000a90:	f200 8105 	bhi.w	8000c9e <__udivmoddi4+0x2d2>
 8000a94:	1a84      	subs	r4, r0, r2
 8000a96:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d0e5      	beq.n	8000a6e <__udivmoddi4+0xa2>
 8000aa2:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa6:	e7e2      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	f000 8090 	beq.w	8000bce <__udivmoddi4+0x202>
 8000aae:	fab2 f682 	clz	r6, r2
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	f040 80a4 	bne.w	8000c00 <__udivmoddi4+0x234>
 8000ab8:	1a8a      	subs	r2, r1, r2
 8000aba:	0c03      	lsrs	r3, r0, #16
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	b280      	uxth	r0, r0
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000aca:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ad2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d907      	bls.n	8000aea <__udivmoddi4+0x11e>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x11c>
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	f200 80e0 	bhi.w	8000ca8 <__udivmoddi4+0x2dc>
 8000ae8:	46c4      	mov	ip, r8
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af8:	fb02 f404 	mul.w	r4, r2, r4
 8000afc:	429c      	cmp	r4, r3
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x144>
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x142>
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	f200 80ca 	bhi.w	8000ca2 <__udivmoddi4+0x2d6>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	1b1b      	subs	r3, r3, r4
 8000b12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b16:	e7a5      	b.n	8000a64 <__udivmoddi4+0x98>
 8000b18:	f1c1 0620 	rsb	r6, r1, #32
 8000b1c:	408b      	lsls	r3, r1
 8000b1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b22:	431f      	orrs	r7, r3
 8000b24:	fa0e f401 	lsl.w	r4, lr, r1
 8000b28:	fa20 f306 	lsr.w	r3, r0, r6
 8000b2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b34:	4323      	orrs	r3, r4
 8000b36:	fa00 f801 	lsl.w	r8, r0, r1
 8000b3a:	fa1f fc87 	uxth.w	ip, r7
 8000b3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b42:	0c1c      	lsrs	r4, r3, #16
 8000b44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	fa02 f201 	lsl.w	r2, r2, r1
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x1a0>
 8000b58:	193c      	adds	r4, r7, r4
 8000b5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5e:	f080 809c 	bcs.w	8000c9a <__udivmoddi4+0x2ce>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f240 8099 	bls.w	8000c9a <__udivmoddi4+0x2ce>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	fa1f fe83 	uxth.w	lr, r3
 8000b74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b78:	fb09 4413 	mls	r4, r9, r3, r4
 8000b7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b84:	45a4      	cmp	ip, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x1ce>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8e:	f080 8082 	bcs.w	8000c96 <__udivmoddi4+0x2ca>
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d97f      	bls.n	8000c96 <__udivmoddi4+0x2ca>
 8000b96:	3b02      	subs	r3, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ba2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba6:	4564      	cmp	r4, ip
 8000ba8:	4673      	mov	r3, lr
 8000baa:	46e1      	mov	r9, ip
 8000bac:	d362      	bcc.n	8000c74 <__udivmoddi4+0x2a8>
 8000bae:	d05f      	beq.n	8000c70 <__udivmoddi4+0x2a4>
 8000bb0:	b15d      	cbz	r5, 8000bca <__udivmoddi4+0x1fe>
 8000bb2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bba:	fa04 f606 	lsl.w	r6, r4, r6
 8000bbe:	fa22 f301 	lsr.w	r3, r2, r1
 8000bc2:	431e      	orrs	r6, r3
 8000bc4:	40cc      	lsrs	r4, r1
 8000bc6:	e9c5 6400 	strd	r6, r4, [r5]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	e74f      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000bce:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bd2:	0c01      	lsrs	r1, r0, #16
 8000bd4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd8:	b280      	uxth	r0, r0
 8000bda:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bde:	463b      	mov	r3, r7
 8000be0:	4638      	mov	r0, r7
 8000be2:	463c      	mov	r4, r7
 8000be4:	46b8      	mov	r8, r7
 8000be6:	46be      	mov	lr, r7
 8000be8:	2620      	movs	r6, #32
 8000bea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bee:	eba2 0208 	sub.w	r2, r2, r8
 8000bf2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf6:	e766      	b.n	8000ac6 <__udivmoddi4+0xfa>
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	e718      	b.n	8000a2e <__udivmoddi4+0x62>
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	e72c      	b.n	8000a5a <__udivmoddi4+0x8e>
 8000c00:	f1c6 0220 	rsb	r2, r6, #32
 8000c04:	fa2e f302 	lsr.w	r3, lr, r2
 8000c08:	40b7      	lsls	r7, r6
 8000c0a:	40b1      	lsls	r1, r6
 8000c0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	430a      	orrs	r2, r1
 8000c16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c1a:	b2bc      	uxth	r4, r7
 8000c1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c26:	fb08 f904 	mul.w	r9, r8, r4
 8000c2a:	40b0      	lsls	r0, r6
 8000c2c:	4589      	cmp	r9, r1
 8000c2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c32:	b280      	uxth	r0, r0
 8000c34:	d93e      	bls.n	8000cb4 <__udivmoddi4+0x2e8>
 8000c36:	1879      	adds	r1, r7, r1
 8000c38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c3c:	d201      	bcs.n	8000c42 <__udivmoddi4+0x276>
 8000c3e:	4589      	cmp	r9, r1
 8000c40:	d81f      	bhi.n	8000c82 <__udivmoddi4+0x2b6>
 8000c42:	eba1 0109 	sub.w	r1, r1, r9
 8000c46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c4a:	fb09 f804 	mul.w	r8, r9, r4
 8000c4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c52:	b292      	uxth	r2, r2
 8000c54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c58:	4542      	cmp	r2, r8
 8000c5a:	d229      	bcs.n	8000cb0 <__udivmoddi4+0x2e4>
 8000c5c:	18ba      	adds	r2, r7, r2
 8000c5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c62:	d2c4      	bcs.n	8000bee <__udivmoddi4+0x222>
 8000c64:	4542      	cmp	r2, r8
 8000c66:	d2c2      	bcs.n	8000bee <__udivmoddi4+0x222>
 8000c68:	f1a9 0102 	sub.w	r1, r9, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	e7be      	b.n	8000bee <__udivmoddi4+0x222>
 8000c70:	45f0      	cmp	r8, lr
 8000c72:	d29d      	bcs.n	8000bb0 <__udivmoddi4+0x1e4>
 8000c74:	ebbe 0302 	subs.w	r3, lr, r2
 8000c78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	46e1      	mov	r9, ip
 8000c80:	e796      	b.n	8000bb0 <__udivmoddi4+0x1e4>
 8000c82:	eba7 0909 	sub.w	r9, r7, r9
 8000c86:	4449      	add	r1, r9
 8000c88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c90:	fb09 f804 	mul.w	r8, r9, r4
 8000c94:	e7db      	b.n	8000c4e <__udivmoddi4+0x282>
 8000c96:	4673      	mov	r3, lr
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1ce>
 8000c9a:	4650      	mov	r0, sl
 8000c9c:	e766      	b.n	8000b6c <__udivmoddi4+0x1a0>
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e6fd      	b.n	8000a9e <__udivmoddi4+0xd2>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3a02      	subs	r2, #2
 8000ca6:	e733      	b.n	8000b10 <__udivmoddi4+0x144>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	443b      	add	r3, r7
 8000cae:	e71c      	b.n	8000aea <__udivmoddi4+0x11e>
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x222>
 8000cb4:	eba1 0109 	sub.w	r1, r1, r9
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fb09 f804 	mul.w	r8, r9, r4
 8000cc2:	e7c4      	b.n	8000c4e <__udivmoddi4+0x282>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00b f811 	bl	800bd08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000ce8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cee:	4b3d      	ldr	r3, [pc, #244]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000cf0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cfc:	4b39      	ldr	r3, [pc, #228]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d02:	4b38      	ldr	r3, [pc, #224]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d08:	4b36      	ldr	r3, [pc, #216]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0e:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d14:	4b33      	ldr	r3, [pc, #204]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d1a:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000d20:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d30:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 8000d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d54:	4823      	ldr	r0, [pc, #140]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d56:	f002 fc1f 	bl	8003598 <HAL_ADC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000d60:	f000 fbb6 	bl	80014d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d70:	f003 fb98 	bl	80044a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000d7a:	f000 fba9 	bl	80014d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_ADC1_Init+0x120>)
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2306      	movs	r3, #6
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8a:	237f      	movs	r3, #127	@ 0x7f
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000d9c:	f002 fe52 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000da6:	f000 fb93 	bl	80014d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000daa:	230c      	movs	r3, #12
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000db4:	f002 fe46 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000dbe:	f000 fb87 	bl	80014d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_ADC1_Init+0x11c>)
 8000dcc:	f002 fe3a 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000dd6:	f000 fb7b 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	@ 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000704 	.word	0x20000704
 8000de8:	2e300800 	.word	0x2e300800

08000dec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09a      	sub	sp, #104	@ 0x68
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2244      	movs	r2, #68	@ 0x44
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00a ff7b 	bl	800bd08 <memset>
  if(adcHandle->Instance==ADC1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1a:	d160      	bne.n	8000ede <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 fd6b 	bl	8006908 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e38:	f000 fb4a 	bl	80014d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <HAL_ADC_MspInit+0xfc>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	4a29      	ldr	r2, [pc, #164]	@ (8000ee8 <HAL_ADC_MspInit+0xfc>)
 8000e42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <HAL_ADC_MspInit+0xfc>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <HAL_ADC_MspInit+0xfc>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <HAL_ADC_MspInit+0xfc>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_ADC_MspInit+0xfc>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000e6c:	f641 0302 	movw	r3, #6146	@ 0x1802
 8000e70:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481a      	ldr	r0, [pc, #104]	@ (8000eec <HAL_ADC_MspInit+0x100>)
 8000e82:	f004 fc49 	bl	8005718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000e88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_ADC_MspInit+0x108>)
 8000e8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000e8e:	2205      	movs	r2, #5
 8000e90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000ea6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec2:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000ec4:	f003 fca4 	bl	8004810 <HAL_DMA_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000ece:	f000 faff 	bl	80014d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000ed6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ed8:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <HAL_ADC_MspInit+0x104>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3768      	adds	r7, #104	@ 0x68
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	20000770 	.word	0x20000770
 8000ef4:	40020408 	.word	0x40020408

08000ef8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <MX_FREERTOS_Init+0x38>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <MX_FREERTOS_Init+0x3c>)
 8000f02:	f008 f8b4 	bl	800906e <osThreadNew>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <MX_FREERTOS_Init+0x40>)
 8000f0a:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <MX_FREERTOS_Init+0x44>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <MX_FREERTOS_Init+0x48>)
 8000f12:	f008 f8ac 	bl	800906e <osThreadNew>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <MX_FREERTOS_Init+0x4c>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <MX_FREERTOS_Init+0x50>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <MX_FREERTOS_Init+0x54>)
 8000f22:	f008 f8a4 	bl	800906e <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a09      	ldr	r2, [pc, #36]	@ (8000f50 <MX_FREERTOS_Init+0x58>)
 8000f2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800c088 	.word	0x0800c088
 8000f34:	08001f15 	.word	0x08001f15
 8000f38:	200007d0 	.word	0x200007d0
 8000f3c:	0800c0ac 	.word	0x0800c0ac
 8000f40:	08002acd 	.word	0x08002acd
 8000f44:	200007d4 	.word	0x200007d4
 8000f48:	0800c0d0 	.word	0x0800c0d0
 8000f4c:	08001ae5 	.word	0x08001ae5
 8000f50:	200007d8 	.word	0x200007d8

08000f54 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_CORDIC_Init+0x20>)
 8000f5a:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <MX_CORDIC_Init+0x24>)
 8000f5c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_CORDIC_Init+0x20>)
 8000f60:	f003 fb44 	bl	80045ec <HAL_CORDIC_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000f6a:	f000 fab1 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200007dc 	.word	0x200007dc
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_CORDIC_MspInit+0x38>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_CORDIC_MspInit+0x3c>)
 8000f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_CORDIC_MspInit+0x3c>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_CORDIC_MspInit+0x3c>)
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000

08000fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_DMA_Init+0x50>)
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc6:	4a11      	ldr	r2, [pc, #68]	@ (800100c <MX_DMA_Init+0x50>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_DMA_Init+0x50>)
 8000fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_DMA_Init+0x50>)
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fde:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <MX_DMA_Init+0x50>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_DMA_Init+0x50>)
 8000fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2038      	movs	r0, #56	@ 0x38
 8000ff8:	f003 fbe2 	bl	80047c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000ffc:	2038      	movs	r0, #56	@ 0x38
 8000ffe:	f003 fbf9 	bl	80047f4 <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001016:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <MX_FDCAN1_Init+0x88>)
 8001018:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800102e:	2200      	movs	r2, #0
 8001030:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001034:	2200      	movs	r2, #0
 8001036:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800103a:	2200      	movs	r2, #0
 800103c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001040:	2214      	movs	r2, #20
 8001042:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001046:	2201      	movs	r2, #1
 8001048:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800104c:	220e      	movs	r2, #14
 800104e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001050:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001052:	2202      	movs	r2, #2
 8001054:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001058:	2202      	movs	r2, #2
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800105e:	2201      	movs	r2, #1
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001064:	220e      	movs	r2, #14
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800106a:	2202      	movs	r2, #2
 800106c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001070:	2202      	movs	r2, #2
 8001072:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001076:	2200      	movs	r2, #0
 8001078:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 800107c:	2200      	movs	r2, #0
 800107e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	@ (8001094 <MX_FDCAN1_Init+0x84>)
 8001082:	f003 fe99 	bl	8004db8 <HAL_FDCAN_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800108c:	f000 fa20 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000804 	.word	0x20000804
 8001098:	40006400 	.word	0x40006400

0800109c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09a      	sub	sp, #104	@ 0x68
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2244      	movs	r2, #68	@ 0x44
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00a fe23 	bl	800bd08 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a28      	ldr	r2, [pc, #160]	@ (8001168 <HAL_FDCAN_MspInit+0xcc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d149      	bne.n	8001160 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010d6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 fc13 	bl	8006908 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010e8:	f000 f9f2 	bl	80014d0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <HAL_FDCAN_MspInit+0xd0>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	4a1e      	ldr	r2, [pc, #120]	@ (800116c <HAL_FDCAN_MspInit+0xd0>)
 80010f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_FDCAN_MspInit+0xd0>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <HAL_FDCAN_MspInit+0xd0>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a18      	ldr	r2, [pc, #96]	@ (800116c <HAL_FDCAN_MspInit+0xd0>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_FDCAN_MspInit+0xd0>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800111c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001120:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800112e:	2309      	movs	r3, #9
 8001130:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f004 faec 	bl	8005718 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	2015      	movs	r0, #21
 8001146:	f003 fb3b 	bl	80047c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800114a:	2015      	movs	r0, #21
 800114c:	f003 fb52 	bl	80047f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	2016      	movs	r0, #22
 8001156:	f003 fb33 	bl	80047c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800115a:	2016      	movs	r0, #22
 800115c:	f003 fb4a 	bl	80047f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001160:	bf00      	nop
 8001162:	3768      	adds	r7, #104	@ 0x68
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40006400 	.word	0x40006400
 800116c:	40021000 	.word	0x40021000

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <MX_GPIO_Init+0xac>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a24      	ldr	r2, [pc, #144]	@ (800121c <MX_GPIO_Init+0xac>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b22      	ldr	r3, [pc, #136]	@ (800121c <MX_GPIO_Init+0xac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <MX_GPIO_Init+0xac>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a1e      	ldr	r2, [pc, #120]	@ (800121c <MX_GPIO_Init+0xac>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <MX_GPIO_Init+0xac>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <MX_GPIO_Init+0xac>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a18      	ldr	r2, [pc, #96]	@ (800121c <MX_GPIO_Init+0xac>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_GPIO_Init+0xac>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_GPIO_Init+0xac>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <MX_GPIO_Init+0xac>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_GPIO_Init+0xac>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011e6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	@ (8001220 <MX_GPIO_Init+0xb0>)
 80011fe:	f004 fa8b 	bl	8005718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2105      	movs	r1, #5
 8001206:	2028      	movs	r0, #40	@ 0x28
 8001208:	f003 fada 	bl	80047c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f003 faf1 	bl	80047f4 <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	@ 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	48000800 	.word	0x48000800

08001224 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	@ (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f004 fc0c 	bl	8005a7c <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 f931 	bl	80014d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f004 fc9e 	bl	8005bb2 <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 f928 	bl	80014d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f004 fce0 	bl	8005c48 <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f91f 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000868 	.word	0x20000868
 800129c:	40005400 	.word	0x40005400
 80012a0:	40b285c2 	.word	0x40b285c2

080012a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b09c      	sub	sp, #112	@ 0x70
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2244      	movs	r2, #68	@ 0x44
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00a fd1f 	bl	800bd08 <memset>
  if(i2cHandle->Instance==I2C1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001384 <HAL_I2C_MspInit+0xe0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d153      	bne.n	800137c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012d4:	2340      	movs	r3, #64	@ 0x40
 80012d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 fb11 	bl	8006908 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012ec:	f000 f8f0 	bl	80014d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	4a24      	ldr	r2, [pc, #144]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a1e      	ldr	r2, [pc, #120]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001324:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001332:	2304      	movs	r3, #4
 8001334:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f004 f9ea 	bl	8005718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001354:	2304      	movs	r3, #4
 8001356:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	@ (800138c <HAL_I2C_MspInit+0xe8>)
 8001360:	f004 f9da 	bl	8005718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_I2C_MspInit+0xe4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800137c:	bf00      	nop
 800137e:	3770      	adds	r7, #112	@ 0x70
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001394:	f001 feac 	bl	80030f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f83a 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f7ff fee8 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a0:	f7ff fe0c 	bl	8000fbc <MX_DMA_Init>
  MX_ADC1_Init();
 80013a4:	f7ff fc90 	bl	8000cc8 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80013a8:	f7ff fe32 	bl	8001010 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80013ac:	f000 f9a0 	bl	80016f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013b0:	f7ff ff38 	bl	8001224 <MX_I2C1_Init>
  MX_TIM2_Init();
 80013b4:	f000 fa4a 	bl	800184c <MX_TIM2_Init>
  MX_CORDIC_Init();
 80013b8:	f7ff fdcc 	bl	8000f54 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013bc:	f007 fdf8 	bl	8008fb0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013c0:	f7ff fd9a 	bl	8000ef8 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f001 fd1b 	bl	8002e00 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80013ca:	2101      	movs	r1, #1
 80013cc:	2000      	movs	r0, #0
 80013ce:	f001 fd4d 	bl	8002e6c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <main+0x7c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <main+0x7c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <main+0x7c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <main+0x7c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <main+0x7c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80013f2:	4906      	ldr	r1, [pc, #24]	@ (800140c <main+0x7c>)
 80013f4:	2000      	movs	r0, #0
 80013f6:	f001 fdc5 	bl	8002f84 <BSP_COM_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <main+0x74>
  {
    Error_Handler();
 8001400:	f000 f866 	bl	80014d0 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8001404:	f007 fdf8 	bl	8008ff8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <main+0x78>
 800140c:	200008bc 	.word	0x200008bc

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	@ 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2238      	movs	r2, #56	@ 0x38
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f00a fc72 	bl	800bd08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001432:	2000      	movs	r0, #0
 8001434:	f004 fc54 	bl	8005ce0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001442:	2340      	movs	r3, #64	@ 0x40
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144a:	2302      	movs	r3, #2
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800144e:	2304      	movs	r3, #4
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001452:	2355      	movs	r3, #85	@ 0x55
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fcee 	bl	8005e48 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001472:	f000 f82d 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2303      	movs	r3, #3
 800147c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2104      	movs	r1, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f004 ffec 	bl	800646c <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800149a:	f000 f819 	bl	80014d0 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3750      	adds	r7, #80	@ 0x50
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ba:	f001 fe31 	bl	8003120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fd14 	bl	8001eec <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40001000 	.word	0x40001000

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <Error_Handler+0x8>

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_MspInit+0x50>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e6:	4a11      	ldr	r2, [pc, #68]	@ (800152c <HAL_MspInit+0x50>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_MspInit+0x50>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_MspInit+0x50>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_MspInit+0x50>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001504:	6593      	str	r3, [r2, #88]	@ 0x58
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_MspInit+0x50>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	210f      	movs	r1, #15
 8001516:	f06f 0001 	mvn.w	r0, #1
 800151a:	f003 f951 	bl	80047c0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800151e:	f004 fc83 	bl	8005e28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	@ 0x30
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <HAL_InitTick+0xc4>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	4a2b      	ldr	r2, [pc, #172]	@ (80015f4 <HAL_InitTick+0xc4>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6593      	str	r3, [r2, #88]	@ 0x58
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <HAL_InitTick+0xc4>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001558:	f107 020c 	add.w	r2, r7, #12
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f005 f958 	bl	8006818 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001568:	f005 f92a 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 800156c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <HAL_InitTick+0xc8>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	3b01      	subs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <HAL_InitTick+0xcc>)
 800157e:	4a20      	ldr	r2, [pc, #128]	@ (8001600 <HAL_InitTick+0xd0>)
 8001580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <HAL_InitTick+0xcc>)
 8001584:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001588:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800158a:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <HAL_InitTick+0xcc>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001590:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_InitTick+0xcc>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_InitTick+0xcc>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800159c:	4817      	ldr	r0, [pc, #92]	@ (80015fc <HAL_InitTick+0xcc>)
 800159e:	f005 fba3 	bl	8006ce8 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11b      	bne.n	80015e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015b0:	4812      	ldr	r0, [pc, #72]	@ (80015fc <HAL_InitTick+0xcc>)
 80015b2:	f005 fc5d 	bl	8006e70 <HAL_TIM_Base_Start_IT>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d111      	bne.n	80015e8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c4:	2036      	movs	r0, #54	@ 0x36
 80015c6:	f003 f915 	bl	80047f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d808      	bhi.n	80015e2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	2036      	movs	r0, #54	@ 0x36
 80015d6:	f003 f8f3 	bl	80047c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_InitTick+0xd4>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e002      	b.n	80015e8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3730      	adds	r7, #48	@ 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	200008cc 	.word	0x200008cc
 8001600:	40001000 	.word	0x40001000
 8001604:	2000068c 	.word	0x2000068c

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <FDCAN1_IT0_IRQHandler+0x10>)
 8001646:	f003 fea1 	bl	800538c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000804 	.word	0x20000804

08001654 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <FDCAN1_IT1_IRQHandler+0x10>)
 800165a:	f003 fe97 	bl	800538c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000804 	.word	0x20000804

08001668 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800166e:	f005 fe17 	bl	80072a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000918 	.word	0x20000918

0800167c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001680:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001684:	f004 f9e2 	bl	8005a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001688:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800168c:	f004 f9de 	bl	8005a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001690:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001694:	f004 f9da 	bl	8005a4c <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8001698:	2000      	movs	r0, #0
 800169a:	f001 fc55 	bl	8002f48 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <TIM6_DAC_IRQHandler+0x10>)
 80016aa:	f005 fdf9 	bl	80072a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200008cc 	.word	0x200008cc

080016b8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <DMA2_Channel1_IRQHandler+0x10>)
 80016be:	f003 f9ca 	bl	8004a56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000770 	.word	0x20000770

080016cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b098      	sub	sp, #96	@ 0x60
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2234      	movs	r2, #52	@ 0x34
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00a faf3 	bl	800bd08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001722:	4b48      	ldr	r3, [pc, #288]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001724:	4a48      	ldr	r2, [pc, #288]	@ (8001848 <MX_TIM1_Init+0x158>)
 8001726:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001728:	4b46      	ldr	r3, [pc, #280]	@ (8001844 <MX_TIM1_Init+0x154>)
 800172a:	2210      	movs	r2, #16
 800172c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800172e:	4b45      	ldr	r3, [pc, #276]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001730:	2220      	movs	r2, #32
 8001732:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8001734:	4b43      	ldr	r3, [pc, #268]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001736:	22fa      	movs	r2, #250	@ 0xfa
 8001738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b42      	ldr	r3, [pc, #264]	@ (8001844 <MX_TIM1_Init+0x154>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001740:	4b40      	ldr	r3, [pc, #256]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800174c:	483d      	ldr	r0, [pc, #244]	@ (8001844 <MX_TIM1_Init+0x154>)
 800174e:	f005 fc50 	bl	8006ff2 <HAL_TIM_PWM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001758:	f7ff feba 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8001760:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001764:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800176e:	4619      	mov	r1, r3
 8001770:	4834      	ldr	r0, [pc, #208]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001772:	f006 fd07 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800177c:	f7ff fea8 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	@ 0x60
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001788:	2302      	movs	r3, #2
 800178a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4827      	ldr	r0, [pc, #156]	@ (8001844 <MX_TIM1_Init+0x154>)
 80017a6:	f005 ff45 	bl	8007634 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017b0:	f7ff fe8e 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017b8:	2204      	movs	r2, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4821      	ldr	r0, [pc, #132]	@ (8001844 <MX_TIM1_Init+0x154>)
 80017be:	f005 ff39 	bl	8007634 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80017c8:	f7ff fe82 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017d0:	2208      	movs	r2, #8
 80017d2:	4619      	mov	r1, r3
 80017d4:	481b      	ldr	r0, [pc, #108]	@ (8001844 <MX_TIM1_Init+0x154>)
 80017d6:	f005 ff2d 	bl	8007634 <HAL_TIM_PWM_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80017e0:	f7ff fe76 	bl	80014d0 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80017e4:	4817      	ldr	r0, [pc, #92]	@ (8001844 <MX_TIM1_Init+0x154>)
 80017e6:	f006 fddb 	bl	80083a0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80017f6:	2322      	movs	r3, #34	@ 0x22
 80017f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001802:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001810:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4807      	ldr	r0, [pc, #28]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001828:	f006 fd2e 	bl	8008288 <HAL_TIMEx_ConfigBreakDeadTime>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001832:	f7ff fe4d 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <MX_TIM1_Init+0x154>)
 8001838:	f000 f8a2 	bl	8001980 <HAL_TIM_MspPostInit>

}
 800183c:	bf00      	nop
 800183e:	3760      	adds	r7, #96	@ 0x60
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000918 	.word	0x20000918
 8001848:	40012c00 	.word	0x40012c00

0800184c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]
 800186e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001870:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 8001872:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 800187a:	2210      	movs	r2, #16
 800187c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 8001886:	f04f 32ff 	mov.w	r2, #4294967295
 800188a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001898:	4816      	ldr	r0, [pc, #88]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 800189a:	f005 fb53 	bl	8006f44 <HAL_TIM_OC_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f7ff fe14 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	480f      	ldr	r0, [pc, #60]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 80018b8:	f006 fc64 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018c2:	f7ff fe05 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_TIM2_Init+0xa8>)
 80018de:	f005 fe2f 	bl	8007540 <HAL_TIM_OC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80018e8:	f7ff fdf2 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	@ 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000964 	.word	0x20000964

080018f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <HAL_TIM_PWM_MspInit+0x44>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d113      	bne.n	8001932 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_TIM_PWM_MspInit+0x48>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190e:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <HAL_TIM_PWM_MspInit+0x48>)
 8001910:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001914:	6613      	str	r3, [r2, #96]	@ 0x60
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_TIM_PWM_MspInit+0x48>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2105      	movs	r1, #5
 8001926:	2019      	movs	r0, #25
 8001928:	f002 ff4a 	bl	80047c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800192c:	2019      	movs	r0, #25
 800192e:	f002 ff61 	bl	80047f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001954:	d10b      	bne.n	800196e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_TIM_OC_MspInit+0x38>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <HAL_TIM_OC_MspInit+0x38>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6593      	str	r3, [r2, #88]	@ 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_TIM_OC_MspInit+0x38>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a28      	ldr	r2, [pc, #160]	@ (8001a40 <HAL_TIM_MspPostInit+0xc0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d149      	bne.n	8001a36 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ae:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <HAL_TIM_MspPostInit+0xc4>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019d2:	2307      	movs	r3, #7
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019e2:	2302      	movs	r3, #2
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4816      	ldr	r0, [pc, #88]	@ (8001a48 <HAL_TIM_MspPostInit+0xc8>)
 80019ee:	f003 fe93 	bl	8005718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80019f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a04:	2306      	movs	r3, #6
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480f      	ldr	r0, [pc, #60]	@ (8001a4c <HAL_TIM_MspPostInit+0xcc>)
 8001a10:	f003 fe82 	bl	8005718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001a26:	2304      	movs	r3, #4
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <HAL_TIM_MspPostInit+0xcc>)
 8001a32:	f003 fe71 	bl	8005718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000400 	.word	0x48000400

08001a50 <average>:
    }
    return RESULT_OK(NULL);
}

static Result average(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint32_t total = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	83fb      	strh	r3, [r7, #30]
 8001a66:	e00f      	b.n	8001a88 <average+0x38>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001a68:	8bfa      	ldrh	r2, [r7, #30]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	441a      	add	r2, r3
 8001a70:	897b      	ldrh	r3, [r7, #10]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a10      	ldr	r2, [pc, #64]	@ (8001ab8 <average+0x68>)
 8001a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4413      	add	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001a82:	8bfb      	ldrh	r3, [r7, #30]
 8001a84:	3301      	adds	r3, #1
 8001a86:	83fb      	strh	r3, [r7, #30]
 8001a88:	8bfb      	ldrh	r3, [r7, #30]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d9ec      	bls.n	8001a68 <average+0x18>
    }
    *adc_store = (uint16_t)(total / ADC_NEED_LEN);
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <average+0x6c>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	801a      	strh	r2, [r3, #0]
    return RESULT_OK(NULL);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
}
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200009b0 	.word	0x200009b0
 8001abc:	38e38e39 	.word	0x38e38e39

08001ac0 <renew_adc>:

Result renew_adc(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	817b      	strh	r3, [r7, #10]
    return average(adc_id, adc_store);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8979      	ldrh	r1, [r7, #10]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ffbb 	bl	8001a50 <average>
}
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <StartAdcTask>:

void StartAdcTask(void *argument)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
 8001aec:	221b      	movs	r2, #27
 8001aee:	4903      	ldr	r1, [pc, #12]	@ (8001afc <StartAdcTask+0x18>)
 8001af0:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <StartAdcTask+0x1c>)
 8001af2:	f001 fed5 	bl	80038a0 <HAL_ADC_Start_DMA>
    StopTask();
 8001af6:	f007 fb4c 	bl	8009192 <osThreadExit>
 8001afa:	bf00      	nop
 8001afc:	200009b0 	.word	0x200009b0
 8001b00:	20000704 	.word	0x20000704

08001b04 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	7b1b      	ldrb	r3, [r3, #12]
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d308      	bcc.n	8001b30 <fdcan_pkt_get_byte+0x2c>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	2300      	movs	r3, #0
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	6053      	str	r3, [r2, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	711a      	strb	r2, [r3, #4]
 8001b2e:	e00b      	b.n	8001b48 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	791a      	ldrb	r2, [r3, #4]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	605a      	str	r2, [r3, #4]
}
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	3724      	adds	r7, #36	@ 0x24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <fdcan_pkt_pool_alloc+0x64>)
 8001b5e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	6053      	str	r3, [r2, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 8001b76:	e019      	b.n	8001bac <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <fdcan_pkt_pool_alloc+0x64>)
 8001b7a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001b7e:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <fdcan_pkt_pool_alloc+0x64>)
 8001b86:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <fdcan_pkt_pool_alloc+0x64>)
 8001b92:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <fdcan_pkt_pool_alloc+0x64>)
 8001b9c:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	605a      	str	r2, [r3, #4]
}
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	3724      	adds	r7, #36	@ 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	200009e8 	.word	0x200009e8

08001bbc <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	2208      	movs	r2, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00a f89b 	bl	800bd08 <memset>
    pkt->len = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <fdcan_pkt_pool_free+0x48>)
 8001bda:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 8001be2:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <fdcan_pkt_pool_free+0x48>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <fdcan_pkt_pool_free+0x48>)
 8001bec:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <fdcan_pkt_pool_free+0x48>)
 8001bf6:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200009e8 	.word	0x200009e8

08001c08 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b08b      	sub	sp, #44	@ 0x2c
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d308      	bcc.n	8001c32 <fdcan_pkt_buf_push+0x2a>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	461a      	mov	r2, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	6053      	str	r3, [r2, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2206      	movs	r2, #6
 8001c2e:	711a      	strb	r2, [r3, #4]
 8001c30:	e01e      	b.n	8001c70 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	68d2      	ldr	r2, [r2, #12]
 8001c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c44:	fb01 f202 	mul.w	r2, r1, r2
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
    self->len++;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	605a      	str	r2, [r3, #4]
}
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	372c      	adds	r7, #44	@ 0x2c
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <HAL_FDCAN_ErrorStatusCallback+0x30>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d107      	bne.n	8001c9e <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000804 	.word	0x20000804
 8001cb0:	20000c70 	.word	0x20000c70

08001cb4 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f003 fad4 	bl	800527c <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 8001cde:	f7ff fbf7 	bl	80014d0 <Error_Handler>
    }
}
 8001ce2:	bf00      	nop
 8001ce4:	3730      	adds	r7, #48	@ 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d057      	beq.n	8001dc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff1b 	bl	8001b54 <fdcan_pkt_pool_alloc>
 8001d1e:	7e3b      	ldrb	r3, [r7, #24]
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_FDCAN_RxFifo0Callback+0x36>
 8001d2a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	f7ff fbcd 	bl	80014d0 <Error_Handler>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001d40:	2140      	movs	r1, #64	@ 0x40
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f003 f992 	bl	800506c <HAL_FDCAN_GetRxMessage>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_FDCAN_RxFifo0Callback+0x5a>
 8001d56:	f7ff fbbb 	bl	80014d0 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b1f      	cmp	r3, #31
 8001d72:	d90c      	bls.n	8001d8e <HAL_FDCAN_RxFifo0Callback+0x8e>
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b21      	cmp	r3, #33	@ 0x21
 8001d7a:	d808      	bhi.n	8001d8e <HAL_FDCAN_RxFifo0Callback+0x8e>
        {
            instant_recv_proc(pkt);
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f849 	bl	8001e18 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 8001d86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d88:	f7ff ff18 	bl	8001bbc <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001d8c:	e01a      	b.n	8001dc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b21      	cmp	r3, #33	@ 0x21
 8001d94:	d916      	bls.n	8001dc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b23      	cmp	r3, #35	@ 0x23
 8001d9c:	d812      	bhi.n	8001dc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	490b      	ldr	r1, [pc, #44]	@ (8001dd4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff2e 	bl	8001c08 <fdcan_pkt_buf_push>
 8001dac:	7c3b      	ldrb	r3, [r7, #16]
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001db8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	f7ff fb86 	bl	80014d0 <Error_Handler>
}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	@ 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000cc4 	.word	0x20000cc4
 8001dd0:	20000c9c 	.word	0x20000c9c
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	6053      	str	r3, [r2, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2207      	movs	r2, #7
 8001e0a:	711a      	strb	r2, [r3, #4]
}
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 8001e22:	f107 001c 	add.w	r0, r7, #28
 8001e26:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	f7ff fe69 	bl	8001b04 <fdcan_pkt_get_byte>
 8001e32:	7f3b      	ldrb	r3, [r7, #28]
 8001e34:	f083 0301 	eor.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <instant_recv_proc+0x40>
 8001e3e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <instant_recv_proc+0x8c>)
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e52:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 8001e56:	e021      	b.n	8001e9c <instant_recv_proc+0x84>
    switch (code)
 8001e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e5c:	2b11      	cmp	r3, #17
 8001e5e:	d002      	beq.n	8001e66 <instant_recv_proc+0x4e>
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d00a      	beq.n	8001e7a <instant_recv_proc+0x62>
 8001e64:	e013      	b.n	8001e8e <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <instant_recv_proc+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
}
 8001e78:	e010      	b.n	8001e9c <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <instant_recv_proc+0x90>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
}
 8001e8c:	e006      	b.n	8001e9c <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 8001e8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffa9 	bl	8001dee <instant_recv_proc_inner>
}
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000cc4 	.word	0x20000cc4
 8001ea8:	20000c71 	.word	0x20000c71

08001eac <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/it_hall.h"
#include "motor/it_timer.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	81fb      	strh	r3, [r7, #14]
    if (
           (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[0])
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001eb8:	8a1b      	ldrh	r3, [r3, #16]
    if (
 8001eba:	89fa      	ldrh	r2, [r7, #14]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d009      	beq.n	8001ed4 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[1])
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ec2:	8a5b      	ldrh	r3, [r3, #18]
 8001ec4:	89fa      	ldrh	r2, [r7, #14]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d004      	beq.n	8001ed4 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_0.const_h.Hall_GPIO_Pin_x[2])
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ecc:	8a9b      	ldrh	r3, [r3, #20]
 8001ece:	89fa      	ldrh	r2, [r7, #14]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d104      	bne.n	8001ede <HAL_GPIO_EXTI_Callback+0x32>
    ) {
        motor_hall_exti(&motor_0);
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f995 	bl	8002208 <motor_hall_exti>
    }
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000014 	.word	0x20000014

08001eec <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
    if (htim == motor_0.const_h.PWM_htimx[0])
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_TIM_PeriodElapsedCallback_OWN+0x24>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d104      	bne.n	8001f08 <HAL_TIM_PeriodElapsedCallback_OWN+0x1c>
    {
        motor_pwm_pulse(&motor_0);
 8001efe:	463b      	mov	r3, r7
 8001f00:	4903      	ldr	r1, [pc, #12]	@ (8001f10 <HAL_TIM_PeriodElapsedCallback_OWN+0x24>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fc98 	bl	8002838 <motor_pwm_pulse>
    }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000014 	.word	0x20000014

08001f14 <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8001f1c:	2332      	movs	r3, #50	@ 0x32
 8001f1e:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8001f20:	f007 f890 	bl	8009044 <osKernelGetTickCount>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001f2c:	f001 f90a 	bl	8003144 <HAL_GetTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <StartDefaultTask+0x34>)
 8001f34:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f007 f932 	bl	80091a0 <osDelayUntil>
        next_wake += osPeriod;
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8001f44:	bf00      	nop
 8001f46:	e7f1      	b.n	8001f2c <StartDefaultTask+0x18>
 8001f48:	20000cc8 	.word	0x20000cc8

08001f4c <hall_to_angle>:
        .w1 = 1.0f,
    },
};

Result hall_to_angle(uint8_t hall, volatile uint16_t *angle)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	460b      	mov	r3, r1
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d827      	bhi.n	8001fb2 <hall_to_angle+0x66>
 8001f62:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <hall_to_angle+0x1c>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001f89 	.word	0x08001f89
 8001f70:	08001f91 	.word	0x08001f91
 8001f74:	08001fa9 	.word	0x08001fa9
 8001f78:	08001fa1 	.word	0x08001fa1
 8001f7c:	08001f81 	.word	0x08001f81
    {
        case 6:
        {
            *angle = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	801a      	strh	r2, [r3, #0]
            break;
 8001f86:	e01d      	b.n	8001fc4 <hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 60;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	223c      	movs	r2, #60	@ 0x3c
 8001f8c:	801a      	strh	r2, [r3, #0]
            break;
 8001f8e:	e019      	b.n	8001fc4 <hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 120;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2278      	movs	r2, #120	@ 0x78
 8001f94:	801a      	strh	r2, [r3, #0]
            break;
 8001f96:	e015      	b.n	8001fc4 <hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 180;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	22b4      	movs	r2, #180	@ 0xb4
 8001f9c:	801a      	strh	r2, [r3, #0]
            break;
 8001f9e:	e011      	b.n	8001fc4 <hall_to_angle+0x78>
        }
        case 5:
        {
            *angle = 240;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	22f0      	movs	r2, #240	@ 0xf0
 8001fa4:	801a      	strh	r2, [r3, #0]
            break;
 8001fa6:	e00d      	b.n	8001fc4 <hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 300;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fae:	801a      	strh	r2, [r3, #0]
            break;
 8001fb0:	e008      	b.n	8001fc4 <hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	6053      	str	r3, [r2, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 8001fc2:	e005      	b.n	8001fd0 <hall_to_angle+0x84>
    return RESULT_OK(NULL);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
}
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	3724      	adds	r7, #36	@ 0x24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	0000      	movs	r0, r0
	...

08001fe0 <CLARKE_run_ideal>:
#include "motor/clarke.h"

Result CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    clarke->Alpha = clarke->As;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	ed93 7a00 	vldr	s14, [r3]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	ee17 0a90 	vmov	r0, s15
 800200a:	f7fe fb97 	bl	800073c <__aeabi_f2d>
 800200e:	a30c      	add	r3, pc, #48	@ (adr r3, 8002040 <CLARKE_run_ideal+0x60>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe f904 	bl	8000220 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fc6c 	bl	80008fc <__aeabi_d2f>
 8002024:	4602      	mov	r2, r0
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	611a      	str	r2, [r3, #16]
    return RESULT_OK(NULL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
}
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	45903342 	.word	0x45903342
 8002044:	3fe279a7 	.word	0x3fe279a7

08002048 <pos_calculate>:
#include "motor/it_hall.h"
#include "main.h"

// Thread - hallExti - exit
static inline Result pos_calculate(MotorParameter *motor)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    float per_elec_cyc_100ns = (float)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (per_elec_cyc_100ns * (MOTOR_POLE / 2))) / 6 / MOTOR_GEAR;
 8002070:	edd7 7a05 	vldr	s15, [r7, #20]
 8002074:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002078:	ee27 7a87 	vmul.f32	s14, s15, s14
 800207c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80020cc <pos_calculate+0x84>
 8002080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002084:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002088:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800208c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80020d0 <pos_calculate+0x88>
 8002090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 單次PWM中斷時的角度變化 900000 = (1/pwm_freq)*50M*360
    motor->pwm_per_it_angle_itpl = ((180000.0f) / per_elec_cyc_100ns) / 6 ;
 800209a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80020d4 <pos_calculate+0x8c>
 800209e:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a6:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80020aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4

    return RESULT_OK(NULL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
}
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	4ab71b00 	.word	0x4ab71b00
 80020d0:	408ccccd 	.word	0x408ccccd
 80020d4:	482fc800 	.word	0x482fc800

080020d8 <motor_hall_update>:

Result motor_hall_update(MotorParameter *motor)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
    uint8_t hall_last = motor->exti_hall_curt;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80020e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	8a12      	ldrh	r2, [r2, #16]
 80020f6:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <motor_hall_update+0x28>
 80020fc:	2204      	movs	r2, #4
 80020fe:	e000      	b.n	8002102 <motor_hall_update+0x2a>
 8002100:	2200      	movs	r2, #0
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	6839      	ldr	r1, [r7, #0]
 800210a:	8a49      	ldrh	r1, [r1, #18]
 800210c:	400b      	ands	r3, r1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <motor_hall_update+0x3e>
 8002112:	2302      	movs	r3, #2
 8002114:	e000      	b.n	8002118 <motor_hall_update+0x40>
 8002116:	2300      	movs	r3, #0
 8002118:	4313      	orrs	r3, r2
 800211a:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	68d2      	ldr	r2, [r2, #12]
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	6839      	ldr	r1, [r7, #0]
 8002124:	8a89      	ldrh	r1, [r1, #20]
 8002126:	400a      	ands	r2, r1
 8002128:	2a00      	cmp	r2, #0
 800212a:	d001      	beq.n	8002130 <motor_hall_update+0x58>
 800212c:	2201      	movs	r2, #1
 800212e:	e000      	b.n	8002132 <motor_hall_update+0x5a>
 8002130:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002132:	4313      	orrs	r3, r2
 8002134:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    motor->exti_hall_last = hall_last;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800213e:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    motor->exti_hall_curt = hall_current;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002148:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    if (hall_current == 0 || hall_current == 7)
 800214c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <motor_hall_update+0x84>
 8002154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002158:	2b07      	cmp	r3, #7
 800215a:	d105      	bne.n	8002168 <motor_hall_update+0x90>
    {
        return RESULT_ERROR(RES_ERR_FAIL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	6053      	str	r3, [r2, #4]
        // rotated
        motor->hall_angle_acc = 0;
        motor->pwm_it_angle_acc = 0;
    }
    return RESULT_OK(NULL);
}
 8002166:	e044      	b.n	80021f2 <motor_hall_update+0x11a>
    RESULT_CHECK_RET_RES(hall_to_angle(hall_current, &motor->exti_hall_curt_d));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f103 02d6 	add.w	r2, r3, #214	@ 0xd6
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fee8 	bl	8001f4c <hall_to_angle>
 800217c:	7b3b      	ldrb	r3, [r7, #12]
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <motor_hall_update+0xca>
 8002188:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <motor_hall_update+0x124>)
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	e893 0003 	ldmia.w	r3, {r0, r1}
 800219c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80021a0:	e027      	b.n	80021f2 <motor_hall_update+0x11a>
    uint16_t expected = (!motor->reverse)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 80021a8:	f083 0301 	eor.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <motor_hall_update+0xe4>
        ? hall_seq_clw[hall_last]
 80021b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <motor_hall_update+0x128>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
 80021ba:	e003      	b.n	80021c4 <motor_hall_update+0xec>
        : hall_seq_ccw[hall_last];
 80021bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021c0:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <motor_hall_update+0x12c>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
    uint16_t expected = (!motor->reverse)
 80021c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (hall_current == expected)
 80021c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d109      	bne.n	80021e6 <motor_hall_update+0x10e>
        motor->hall_angle_acc = 0;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        motor->pwm_it_angle_acc = 0;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    return RESULT_OK(NULL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
}
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000cc4 	.word	0x20000cc4
 8002200:	0800c10c 	.word	0x0800c10c
 8002204:	0800c114 	.word	0x0800c114

08002208 <motor_hall_exti>:

// Thread - hallExti - entrance
Result motor_hall_exti(MotorParameter *motor)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
    RESULT_CHECK_RET_RES(motor_hall_update(motor));
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <motor_hall_update>
 800221e:	7c3b      	ldrb	r3, [r7, #16]
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <motor_hall_exti+0x3c>
 800222a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <motor_hall_exti+0x5c>)
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	461a      	mov	r2, r3
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800223e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002242:	e00a      	b.n	800225a <motor_hall_exti+0x52>
    pos_calculate(motor);
 8002244:	463b      	mov	r3, r7
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fefd 	bl	8002048 <pos_calculate>
    return RESULT_OK(NULL);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
}
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000cc4 	.word	0x20000cc4

08002268 <pwm_setup>:
#include "motor/trigonometric.h"
#include "analog/adc1/main.h"

// Thread - timer - init
Result pwm_setup(const MotorParameter *motor)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
    const MotorConst* const_h = &motor->const_h;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	617b      	str	r3, [r7, #20]
    HAL_TIM_Base_Start_IT(const_h->PWM_htimx[0]);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fdf8 	bl	8006e70 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(const_h->PWM_htimx[0], const_h->PWM_TIM_CHANNEL_x[0]);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f004 ff08 	bl	80070a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(const_h->PWM_htimx[1], const_h->PWM_TIM_CHANNEL_x[1]);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f004 ff00 	bl	80070a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(const_h->PWM_htimx[2], const_h->PWM_TIM_CHANNEL_x[2]);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f004 fef8 	bl	80070a0 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(const_h->PWM_htimx[0], const_h->PWM_TIM_CHANNEL_x[0]);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f005 feae 	bl	800801c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(const_h->PWM_htimx[1], const_h->PWM_TIM_CHANNEL_x[1]);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f005 fea6 	bl	800801c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(const_h->PWM_htimx[2], const_h->PWM_TIM_CHANNEL_x[2]);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f005 fe9e 	bl	800801c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start(const_h->ELE_htimx);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 fd61 	bl	8006dac <HAL_TIM_Base_Start>
    return RESULT_OK(NULL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
}
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <motor_stop_check>:

// Thread - timer - 1
static inline Result motor_stop_check(MotorParameter *motor)
{
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800230e:	75fb      	strb	r3, [r7, #23]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4413      	add	r3, r2
 8002328:	82bb      	strh	r3, [r7, #20]
    if(hall_total == motor->pwm_hall_acc)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8002330:	b29b      	uxth	r3, r3
 8002332:	8aba      	ldrh	r2, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <motor_stop_check+0x7e>
    {
        motor->spin_stop_acc++;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 800233e:	b29b      	uxth	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
        if (motor->spin_stop_acc >= 3000)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8002350:	b29b      	uxth	r3, r3
 8002352:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002356:	4293      	cmp	r3, r2
 8002358:	d914      	bls.n	8002384 <motor_stop_check+0x86>
        {
            motor->spin_stop_acc = 0;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2200      	movs	r2, #0
 800235e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38
            motor->pi_Iq.Out=0;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	675a      	str	r2, [r3, #116]	@ 0x74
 800237a:	e003      	b.n	8002384 <motor_stop_check+0x86>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    }
    motor->pwm_hall_acc = hall_total;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	8aba      	ldrh	r2, [r7, #20]
 8002388:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    motor->pwm_hall_last = hall_current;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	7dfa      	ldrb	r2, [r7, #23]
 8002390:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    return RESULT_OK(NULL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
}
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	0000      	movs	r0, r0
	...

080023b0 <motor_cal_speed>:

// Thread - timer - 2
static inline Result motor_cal_speed(MotorParameter *motor)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
    // 外部VR轉速設定
    // Speed.Ref= 57 + (glo_ADC0_value[3]/30)*23;
    motor->pwm_count++;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
    // 計算 速度PI (每100個PWM中斷)
    if(motor->pwm_count >= 100)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b63      	cmp	r3, #99	@ 0x63
 80023d6:	d944      	bls.n	8002462 <motor_cal_speed+0xb2>
    {
        // if(Speed.Fbk>0 && stop_flag==0)
        PI_run(&motor->pi_speed);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80023de:	463b      	mov	r3, r7
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fc00 	bl	8002be8 <PI_run>
        motor->pi_speed_cmd = CLAMP((motor->pi_speed_cmd + motor->pi_speed.Out), 0.2, 0.15);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	ee17 0a90 	vmov	r0, s15
 80023fc:	f7fe f99e 	bl	800073c <__aeabi_f2d>
 8002400:	a321      	add	r3, pc, #132	@ (adr r3, 8002488 <motor_cal_speed+0xd8>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe fa6f 	bl	80008e8 <__aeabi_dcmpgt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <motor_cal_speed+0x66>
 8002410:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8002480 <motor_cal_speed+0xd0>
 8002414:	e01e      	b.n	8002454 <motor_cal_speed+0xa4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002426:	ee17 0a90 	vmov	r0, s15
 800242a:	f7fe f987 	bl	800073c <__aeabi_f2d>
 800242e:	a312      	add	r3, pc, #72	@ (adr r3, 8002478 <motor_cal_speed+0xc8>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe fa3a 	bl	80008ac <__aeabi_dcmplt>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <motor_cal_speed+0x94>
 800243e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8002484 <motor_cal_speed+0xd4>
 8002442:	e007      	b.n	8002454 <motor_cal_speed+0xa4>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        // else if(Speed.Fbk==0 | stop_flag==1)
        //     motor->pi_speed_cmd=0.18;
        motor->pwm_count = 0;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
    }
    return RESULT_OK(NULL);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	605a      	str	r2, [r3, #4]
}
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	33333333 	.word	0x33333333
 800247c:	3fc33333 	.word	0x3fc33333
 8002480:	3e4ccccd 	.word	0x3e4ccccd
 8002484:	3e19999a 	.word	0x3e19999a
 8002488:	9999999a 	.word	0x9999999a
 800248c:	3fc99999 	.word	0x3fc99999

08002490 <motor_vec_clarke>:

// Thread - timer - 3
static const float adc_to_current = (3.3f / 4095.0f) / 0.185f; // ~ 0.004356 A/LSB
static inline Result motor_vec_clarke(MotorParameter *motor)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
    // I alpha = 2/3Ia - 1/3Ib - 1/3Ic
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    float adc_zero = (float)(motor->adc_u + motor->adc_v + motor->adc_w) / 3 ;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 80024b4:	b292      	uxth	r2, r2
 80024b6:	4413      	add	r3, r2
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c0:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80024c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c8:	edc7 7a07 	vstr	s15, [r7, #28]
    motor->clarke.As = ((float)motor->adc_u - adc_zero) * adc_to_current;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002564 <motor_vec_clarke+0xd4>
 80024e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    motor->clarke.Bs = ((float)motor->adc_v - adc_zero) * adc_to_current;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002502:	edd7 7a07 	vldr	s15, [r7, #28]
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002564 <motor_vec_clarke+0xd4>
 800250e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
    motor->clarke.Cs = ((float)motor->adc_w - adc_zero) * adc_to_current;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800251e:	b29b      	uxth	r3, r3
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002528:	edd7 7a07 	vldr	s15, [r7, #28]
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002564 <motor_vec_clarke+0xd4>
 8002534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc

    // PeriodStateVar_w += ( ( (float)motor->clarke.Cs - (float)PeriodFilter_w)*(float)PeriodKFilter );
    // PeriodFilter_w = (float)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;
		
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 8002544:	463b      	mov	r3, r7
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd49 	bl	8001fe0 <CLARKE_run_ideal>

    return RESULT_OK(NULL);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	605a      	str	r2, [r3, #4]
}
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	3b8ebcd0 	.word	0x3b8ebcd0

08002568 <motor_vec_park>:

// Thread - timer - 4
#define FOC_CAL_DEG_ADD 270.0f
static inline Result motor_vec_park(MotorParameter *motor)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	ed93 7a39 	vldr	s14, [r3, #228]	@ 0xe4
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
    float foc_cal_deg = fmodf((float)motor->exti_hall_curt_d + motor->pwm_it_angle_acc, 360.0f) + FOC_CAL_DEG_ADD;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 800258e:	b29b      	uxth	r3, r3
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800259e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a2:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8002640 <motor_vec_park+0xd8>
 80025a6:	eeb0 0a67 	vmov.f32	s0, s15
 80025aa:	f009 fca3 	bl	800bef4 <fmodf>
 80025ae:	eef0 7a40 	vmov.f32	s15, s0
 80025b2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002644 <motor_vec_park+0xdc>
 80025b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    motor->park.Beta = motor->clarke.Beta;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

    motor->park.Sine = TableSearch_sin(foc_cal_deg * DEG_TO_RAD);
 80025d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025da:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002648 <motor_vec_park+0xe0>
 80025de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e2:	eeb0 0a67 	vmov.f32	s0, s15
 80025e6:	f000 fb81 	bl	8002cec <TableSearch_sin>
 80025ea:	eef0 7a40 	vmov.f32	s15, s0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
    motor->park.Cosine = TableSearch_sin((foc_cal_deg + 90) * DEG_TO_RAD);
 80025f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800264c <motor_vec_park+0xe4>
 80025fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002600:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002648 <motor_vec_park+0xe0>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	eeb0 0a67 	vmov.f32	s0, s15
 800260c:	f000 fb6e 	bl	8002cec <TableSearch_sin>
 8002610:	eef0 7a40 	vmov.f32	s15, s0
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
    
    PARK_run(&motor->park);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8002620:	463b      	mov	r3, r7
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fa69 	bl	8002afc <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float)motor->park.Qs - (float)PeriodFilter_iq)*(float)PeriodKFilter );
    // PeriodFilter_iq = (float)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	605a      	str	r2, [r3, #4]
}
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	43b40000 	.word	0x43b40000
 8002644:	43870000 	.word	0x43870000
 8002648:	3c8efa35 	.word	0x3c8efa35
 800264c:	42b40000 	.word	0x42b40000

08002650 <motor_vec_pi_id_iq>:

// Thread - timer - 5
#define IQ_REF_ADD 0
static inline Result motor_vec_pi_id_iq(MotorParameter *motor)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	dd6c      	ble.n	8002744 <motor_vec_pi_id_iq+0xf4>
    {
        motor->pi_Id.Ref = 0;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        motor->pi_Id.Fbk = motor->park.Ds;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002686:	463b      	mov	r3, r7
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 faac 	bl	8002be8 <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = CLAMP((motor->pi_Id.Out), 0.01, -0.01);//限制最大與最小參數
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe f850 	bl	800073c <__aeabi_f2d>
 800269c:	a336      	add	r3, pc, #216	@ (adr r3, 8002778 <motor_vec_pi_id_iq+0x128>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fe f921 	bl	80008e8 <__aeabi_dcmpgt>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <motor_vec_pi_id_iq+0x60>
 80026ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002768 <motor_vec_pi_id_iq+0x118>)
 80026ae:	e012      	b.n	80026d6 <motor_vec_pi_id_iq+0x86>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe f840 	bl	800073c <__aeabi_f2d>
 80026bc:	a328      	add	r3, pc, #160	@ (adr r3, 8002760 <motor_vec_pi_id_iq+0x110>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fe f8f3 	bl	80008ac <__aeabi_dcmplt>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <motor_vec_pi_id_iq+0x80>
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <motor_vec_pi_id_iq+0x11c>)
 80026ce:	e002      	b.n	80026d6 <motor_vec_pi_id_iq+0x86>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
        // motor->pi_Iq.Fbk = motor->park.Qs;
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80026e2:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002770 <motor_vec_pi_id_iq+0x120>
 80026e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	671a      	str	r2, [r3, #112]	@ 0x70
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8002700:	463b      	mov	r3, r7
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fa6f 	bl	8002be8 <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = CLAMP(motor->pi_Iq.Out, 0.75f, 0.0f);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8002710:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd02      	ble.n	8002724 <motor_vec_pi_id_iq+0xd4>
 800271e:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8002722:	e00c      	b.n	800273e <motor_vec_pi_id_iq+0xee>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800272a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	d502      	bpl.n	800273a <motor_vec_pi_id_iq+0xea>
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e001      	b.n	800273e <motor_vec_pi_id_iq+0xee>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	6753      	str	r3, [r2, #116]	@ 0x74
 8002742:	e002      	b.n	800274a <motor_vec_pi_id_iq+0xfa>

    }
    else
    {
        motor->pi_Iq.Out = 0.18;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <motor_vec_pi_id_iq+0x124>)
 8002748:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    return RESULT_OK(NULL);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
}
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	47ae147b 	.word	0x47ae147b
 8002764:	bf847ae1 	.word	0xbf847ae1
 8002768:	3c23d70a 	.word	0x3c23d70a
 800276c:	bc23d70a 	.word	0xbc23d70a
 8002770:	00000000 	.word	0x00000000
 8002774:	3e3851ec 	.word	0x3e3851ec
 8002778:	47ae147b 	.word	0x47ae147b
 800277c:	3f847ae1 	.word	0x3f847ae1

08002780 <motor_vec_ipark>:

// Thread - timer - 6
static inline Result motor_vec_ipark(MotorParameter *motor)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)

    //限制最大與最小參數
    // ? motor->ipark.Vdref = CLAMP((motor->ipark.Vdref += motor->pi_Id.Out), 0.06, -0.06);
    motor->ipark.Vdref = CLAMP(motor->pi_Id.Out, 0.06, -0.06);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd ffd3 	bl	800073c <__aeabi_f2d>
 8002796:	a326      	add	r3, pc, #152	@ (adr r3, 8002830 <motor_vec_ipark+0xb0>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fe f8a4 	bl	80008e8 <__aeabi_dcmpgt>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <motor_vec_ipark+0x2a>
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <motor_vec_ipark+0xa8>)
 80027a8:	e012      	b.n	80027d0 <motor_vec_ipark+0x50>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd ffc3 	bl	800073c <__aeabi_f2d>
 80027b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002820 <motor_vec_ipark+0xa0>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f876 	bl	80008ac <__aeabi_dcmplt>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <motor_vec_ipark+0x4a>
 80027c6:	4b19      	ldr	r3, [pc, #100]	@ (800282c <motor_vec_ipark+0xac>)
 80027c8:	e002      	b.n	80027d0 <motor_vec_ipark+0x50>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

    motor->ipark.Vqref = motor->pi_Iq.Out;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    motor->ipark.Sine = motor->park.Sine;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor->ipark.Cosine = motor->park.Cosine;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    IPARK_run(&motor->ipark);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80027fe:	463b      	mov	r3, r7
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f9b5 	bl	8002b72 <IPARK_run>
    return RESULT_OK(NULL);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
}
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	f3af 8000 	nop.w
 8002820:	eb851eb8 	.word	0xeb851eb8
 8002824:	bfaeb851 	.word	0xbfaeb851
 8002828:	3d75c28f 	.word	0x3d75c28f
 800282c:	bd75c28f 	.word	0xbd75c28f
 8002830:	eb851eb8 	.word	0xeb851eb8
 8002834:	3faeb851 	.word	0x3faeb851

08002838 <motor_pwm_pulse>:
}//FOC 計算 END

uint32_t running = 0;
// Thread - timer - 0
Result motor_pwm_pulse(MotorParameter *motor)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b096      	sub	sp, #88	@ 0x58
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
    running++;
 8002842:	4b9e      	ldr	r3, [pc, #632]	@ (8002abc <motor_pwm_pulse+0x284>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	4a9c      	ldr	r2, [pc, #624]	@ (8002abc <motor_pwm_pulse+0x284>)
 800284a:	6013      	str	r3, [r2, #0]
    // ?
    if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8002858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285c:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002ac0 <motor_pwm_pulse+0x288>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	d527      	bpl.n	80028ba <motor_pwm_pulse+0x82>
    {
        motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	ed93 7a39 	vldr	s14, [r3, #228]	@ 0xe4
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
        motor->hall_angle_acc = CLAMP(motor->hall_angle_acc , 60, 0);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002886:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002ac0 <motor_pwm_pulse+0x288>
 800288a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	dd01      	ble.n	8002898 <motor_pwm_pulse+0x60>
 8002894:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac4 <motor_pwm_pulse+0x28c>)
 8002896:	e00d      	b.n	80028b4 <motor_pwm_pulse+0x7c>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800289e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d502      	bpl.n	80028ae <motor_pwm_pulse+0x76>
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e002      	b.n	80028b4 <motor_pwm_pulse+0x7c>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    }
    RESULT_CHECK_RET_RES(renew_adc(motor->const_h.adc_u_id, &motor->adc_u));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f103 02ee 	add.w	r2, r3, #238	@ 0xee
 80028c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f8f8 	bl	8001ac0 <renew_adc>
 80028d0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <motor_pwm_pulse+0xc0>
 80028de:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 80028e2:	4b79      	ldr	r3, [pc, #484]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028f2:	e882 0003 	stmia.w	r2, {r0, r1}
    RESULT_CHECK_RET_RES(motor_vec_pi_id_iq(motor));
    RESULT_CHECK_RET_RES(motor_vec_ipark(motor));
    // RESULT_CHECK_RET_RES(motor_vec_svpwm(motor));

    return RESULT_OK(NULL);
}
 80028f6:	e0dc      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(renew_adc(motor->const_h.adc_v_id, &motor->adc_v));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	4619      	mov	r1, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8002904:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f8d9 	bl	8001ac0 <renew_adc>
 800290e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00c      	beq.n	8002936 <motor_pwm_pulse+0xfe>
 800291c:	f997 2044 	ldrsb.w	r2, [r7, #68]	@ 0x44
 8002920:	4b69      	ldr	r3, [pc, #420]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	461a      	mov	r2, r3
 8002928:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800292c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002930:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002934:	e0bd      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(renew_adc(motor->const_h.adc_w_id, &motor->adc_w));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	4619      	mov	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f103 02f2 	add.w	r2, r3, #242	@ 0xf2
 8002942:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f8ba 	bl	8001ac0 <renew_adc>
 800294c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <motor_pwm_pulse+0x13c>
 800295a:	f997 203c 	ldrsb.w	r2, [r7, #60]	@ 0x3c
 800295e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	461a      	mov	r2, r3
 8002966:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800296a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800296e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002972:	e09e      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(motor_stop_check(motor));
 8002974:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fcbf 	bl	80022fe <motor_stop_check>
 8002980:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002984:	f083 0301 	eor.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <motor_pwm_pulse+0x170>
 800298e:	f997 2034 	ldrsb.w	r2, [r7, #52]	@ 0x34
 8002992:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	461a      	mov	r2, r3
 800299a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800299e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80029a6:	e084      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(motor_cal_speed(motor));
 80029a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fcfe 	bl	80023b0 <motor_cal_speed>
 80029b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00c      	beq.n	80029dc <motor_pwm_pulse+0x1a4>
 80029c2:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 80029c6:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	461a      	mov	r2, r3
 80029ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029d6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80029da:	e06a      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(motor_vec_clarke(motor));
 80029dc:	f107 0320 	add.w	r3, r7, #32
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fd54 	bl	8002490 <motor_vec_clarke>
 80029e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <motor_pwm_pulse+0x1d8>
 80029f6:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 80029fa:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f107 0320 	add.w	r3, r7, #32
 8002a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002a0e:	e050      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(motor_vec_park(motor));
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fda6 	bl	8002568 <motor_vec_park>
 8002a1c:	7e3b      	ldrb	r3, [r7, #24]
 8002a1e:	f083 0301 	eor.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00c      	beq.n	8002a42 <motor_pwm_pulse+0x20a>
 8002a28:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002a2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a3c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002a40:	e037      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(motor_vec_pi_id_iq(motor));
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fe01 	bl	8002650 <motor_vec_pi_id_iq>
 8002a4e:	7c3b      	ldrb	r3, [r7, #16]
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00c      	beq.n	8002a74 <motor_pwm_pulse+0x23c>
 8002a5a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	461a      	mov	r2, r3
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a6e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002a72:	e01e      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    RESULT_CHECK_RET_RES(motor_vec_ipark(motor));
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fe80 	bl	8002780 <motor_vec_ipark>
 8002a80:	7a3b      	ldrb	r3, [r7, #8]
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00c      	beq.n	8002aa6 <motor_pwm_pulse+0x26e>
 8002a8c:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002a90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <motor_pwm_pulse+0x290>)
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002aa0:	e882 0003 	stmia.w	r2, {r0, r1}
 8002aa4:	e005      	b.n	8002ab2 <motor_pwm_pulse+0x27a>
    return RESULT_OK(NULL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]
}
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	3758      	adds	r7, #88	@ 0x58
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000ccc 	.word	0x20000ccc
 8002ac0:	42700000 	.word	0x42700000
 8002ac4:	42700000 	.word	0x42700000
 8002ac8:	20000cc4 	.word	0x20000cc4

08002acc <StartMotorTask>:
#include "motor/it_hall.h"
#include "motor/it_timer.h"
#include "analog/adc1/main.h"

void StartMotorTask(void *argument)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
    motor_hall_update(&motor_0);
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	4907      	ldr	r1, [pc, #28]	@ (8002af4 <StartMotorTask+0x28>)
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fafd 	bl	80020d8 <motor_hall_update>
    pwm_setup(&motor_0);
 8002ade:	463b      	mov	r3, r7
 8002ae0:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <StartMotorTask+0x28>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fbc0 	bl	8002268 <pwm_setup>
    motor_0.pi_speed.Ref = 20.0f;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	@ (8002af4 <StartMotorTask+0x28>)
 8002aea:	4a03      	ldr	r2, [pc, #12]	@ (8002af8 <StartMotorTask+0x2c>)
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34
    StopTask();
 8002aee:	f006 fb50 	bl	8009192 <osThreadExit>
 8002af2:	bf00      	nop
 8002af4:	20000014 	.word	0x20000014
 8002af8:	41a00000 	.word	0x41a00000

08002afc <PARK_run>:
#include "motor/park.h"

Result PARK_run(volatile PARK *park)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	ed93 7a00 	vldr	s14, [r3]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	edd3 6a00 	vldr	s13, [r3]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	edc3 7a04 	vstr	s15, [r3, #16]
    return RESULT_OK(NULL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
}
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <IPARK_run>:

Result IPARK_run(volatile IPARK *ipark)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	edc3 7a01 	vstr	s15, [r3, #4]
    return RESULT_OK(NULL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
}
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <PI_run>:
#include "motor/pi.h"

Result PI_run(volatile PI_CONTROLLER *pi)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	ed93 7a03 	vldr	s14, [r3, #12]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	edd3 6a00 	vldr	s13, [r3]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002c1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d110      	bne.n	8002c4a <PI_run+0x62>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	edc3 7a08 	vstr	s15, [r3, #32]
 8002c48:	e003      	b.n	8002c52 <PI_run+0x6a>
    }
    else
    {
        pi->ui = pi->i1;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28

    pi->v1 = pi->up + pi->ui;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = CLAMP(pi->v1, pi->Umax, pi->Umin);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	dd02      	ble.n	8002c8c <PI_run+0xa4>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	e00f      	b.n	8002cac <PI_run+0xc4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	d502      	bpl.n	8002ca8 <PI_run+0xc0>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	e001      	b.n	8002cac <PI_run+0xc4>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6093      	str	r3, [r2, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002cbc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	d102      	bne.n	8002ccc <PI_run+0xe4>
 8002cc6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cca:	e001      	b.n	8002cd0 <PI_run+0xe8>
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    return RESULT_OK(NULL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	605a      	str	r2, [r3, #4]
}
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <TableSearch_sin>:
    15042,    //0.1499
    15042	 //0.1500
}; // Table_atan END

float TableSearch_sin(float theta)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	ed87 0a01 	vstr	s0, [r7, #4]
    theta = fmodf(theta, MUL_2_PI);
 8002cf6:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002d9c <TableSearch_sin+0xb0>
 8002cfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cfe:	f009 f8f9 	bl	800bef4 <fmodf>
 8002d02:	ed87 0a01 	vstr	s0, [r7, #4]
    if (theta < 0.0f) theta += MUL_2_PI;
 8002d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	d507      	bpl.n	8002d24 <TableSearch_sin+0x38>
 8002d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d18:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002d9c <TableSearch_sin+0xb0>
 8002d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d20:	edc7 7a01 	vstr	s15, [r7, #4]

    bool minus_flag = false;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
    if (theta > PI) {
 8002d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d2c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002da0 <TableSearch_sin+0xb4>
 8002d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	dd09      	ble.n	8002d4e <TableSearch_sin+0x62>
        minus_flag = true;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
        theta -= PI;
 8002d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d42:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002da0 <TableSearch_sin+0xb4>
 8002d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d4a:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    uint16_t idx = (uint16_t)(theta * 100.0f);
 8002d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d52:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002da4 <TableSearch_sin+0xb8>
 8002d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d5e:	ee17 3a90 	vmov	r3, s15
 8002d62:	81bb      	strh	r3, [r7, #12]
    if (idx >= 316) idx = 315;
 8002d64:	89bb      	ldrh	r3, [r7, #12]
 8002d66:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8002d6a:	d302      	bcc.n	8002d72 <TableSearch_sin+0x86>
 8002d6c:	f240 133b 	movw	r3, #315	@ 0x13b
 8002d70:	81bb      	strh	r3, [r7, #12]
    float result = Table_sin[idx];
 8002d72:	89bb      	ldrh	r3, [r7, #12]
 8002d74:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <TableSearch_sin+0xbc>)
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60bb      	str	r3, [r7, #8]
    return minus_flag ? -result : result;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <TableSearch_sin+0xa2>
 8002d84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d88:	eef1 7a67 	vneg.f32	s15, s15
 8002d8c:	e001      	b.n	8002d92 <TableSearch_sin+0xa6>
 8002d8e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40c90fdb 	.word	0x40c90fdb
 8002da0:	40490fdb 	.word	0x40490fdb
 8002da4:	42c80000 	.word	0x42c80000
 8002da8:	20000188 	.word	0x20000188

08002dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dac:	480d      	ldr	r0, [pc, #52]	@ (8002de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002db0:	f7fe fc8c 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db4:	480c      	ldr	r0, [pc, #48]	@ (8002de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002db6:	490d      	ldr	r1, [pc, #52]	@ (8002dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <LoopForever+0xe>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002df8 <LoopForever+0x16>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f009 f801 	bl	800bde0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dde:	f7fe fad7 	bl	8001390 <main>

08002de2 <LoopForever>:

LoopForever:
    b LoopForever
 8002de2:	e7fe      	b.n	8002de2 <LoopForever>
  ldr   r0, =_estack
 8002de4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 8002df0:	0800c160 	.word	0x0800c160
  ldr r2, =_sbss
 8002df4:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 8002df8:	20002898 	.word	0x20002898

08002dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC1_2_IRQHandler>
	...

08002e00 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8002e0a:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <BSP_LED_Init+0x64>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0e:	4a15      	ldr	r2, [pc, #84]	@ (8002e64 <BSP_LED_Init+0x64>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e16:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <BSP_LED_Init+0x64>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8002e22:	2320      	movs	r3, #32
 8002e24:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4a0c      	ldr	r2, [pc, #48]	@ (8002e68 <BSP_LED_Init+0x68>)
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	f107 020c 	add.w	r2, r7, #12
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fc69 	bl	8005718 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4a07      	ldr	r2, [pc, #28]	@ (8002e68 <BSP_LED_Init+0x68>)
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	2120      	movs	r1, #32
 8002e50:	2200      	movs	r2, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fde2 	bl	8005a1c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	20000678 	.word	0x20000678

08002e6c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	460a      	mov	r2, r1
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f30 <BSP_PB_Init+0xc4>)
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e80:	4a2b      	ldr	r2, [pc, #172]	@ (8002f30 <BSP_PB_Init+0xc4>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e88:	4b29      	ldr	r3, [pc, #164]	@ (8002f30 <BSP_PB_Init+0xc4>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002e94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e98:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002ea2:	79bb      	ldrb	r3, [r7, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10c      	bne.n	8002ec2 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <BSP_PB_Init+0xc8>)
 8002eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb4:	f107 020c 	add.w	r2, r7, #12
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 fc2c 	bl	8005718 <HAL_GPIO_Init>
 8002ec0:	e031      	b.n	8002f26 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002ec2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ec6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <BSP_PB_Init+0xc8>)
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	f107 020c 	add.w	r2, r7, #12
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fc1e 	bl	8005718 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4a15      	ldr	r2, [pc, #84]	@ (8002f38 <BSP_PB_Init+0xcc>)
 8002ee2:	441a      	add	r2, r3
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	4915      	ldr	r1, [pc, #84]	@ (8002f3c <BSP_PB_Init+0xd0>)
 8002ee8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f001 ff1d 	bl	8004d2e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f38 <BSP_PB_Init+0xcc>)
 8002efa:	1898      	adds	r0, r3, r2
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <BSP_PB_Init+0xd4>)
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	461a      	mov	r2, r3
 8002f06:	2100      	movs	r1, #0
 8002f08:	f001 fef4 	bl	8004cf4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002f0c:	2028      	movs	r0, #40	@ 0x28
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	@ (8002f44 <BSP_PB_Init+0xd8>)
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f001 fc51 	bl	80047c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002f1e:	2328      	movs	r3, #40	@ 0x28
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fc67 	bl	80047f4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	2000067c 	.word	0x2000067c
 8002f38:	20000cd0 	.word	0x20000cd0
 8002f3c:	0800c11c 	.word	0x0800c11c
 8002f40:	20000684 	.word	0x20000684
 8002f44:	20000688 	.word	0x20000688

08002f48 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <BSP_PB_IRQHandler+0x20>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fefc 	bl	8004d58 <HAL_EXTI_IRQHandler>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000cd0 	.word	0x20000cd0

08002f6c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d903      	bls.n	8002fa2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f9a:	f06f 0301 	mvn.w	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e018      	b.n	8002fd4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2294      	movs	r2, #148	@ 0x94
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <BSP_COM_Init+0x5c>)
 8002fac:	4413      	add	r3, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f852 	bl	8003058 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	2294      	movs	r2, #148	@ 0x94
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <BSP_COM_Init+0x5c>)
 8002fbe:	4413      	add	r3, r2
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f80e 	bl	8002fe4 <MX_LPUART1_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8002fce:	f06f 0303 	mvn.w	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000cd8 	.word	0x20000cd8

08002fe4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <MX_LPUART1_Init+0x60>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	220c      	movs	r2, #12
 8003002:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	895b      	ldrh	r3, [r3, #10]
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	891b      	ldrh	r3, [r3, #8]
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	899b      	ldrh	r3, [r3, #12]
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003030:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f005 fa32 	bl	800849c <HAL_UART_Init>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000680 	.word	0x20000680

08003048 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800304c:	2000      	movs	r0, #0
 800304e:	f7ff ff8d 	bl	8002f6c <BSP_PB_Callback>
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8003060:	4b22      	ldr	r3, [pc, #136]	@ (80030ec <COM1_MspInit+0x94>)
 8003062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003064:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <COM1_MspInit+0x94>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800306c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ec <COM1_MspInit+0x94>)
 800306e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003078:	4b1c      	ldr	r3, [pc, #112]	@ (80030ec <COM1_MspInit+0x94>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	4a1b      	ldr	r2, [pc, #108]	@ (80030ec <COM1_MspInit+0x94>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <COM1_MspInit+0x94>)
 8003086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003090:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <COM1_MspInit+0x94>)
 8003092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003094:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <COM1_MspInit+0x94>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <COM1_MspInit+0x94>)
 800309e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80030a8:	2304      	movs	r3, #4
 80030aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80030b0:	2302      	movs	r3, #2
 80030b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80030b4:	2301      	movs	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80030b8:	230c      	movs	r3, #12
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c6:	f002 fb27 	bl	8005718 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80030ca:	2308      	movs	r3, #8
 80030cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80030d2:	230c      	movs	r3, #12
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e0:	f002 fb1a 	bl	8005718 <HAL_GPIO_Init>
}
 80030e4:	bf00      	nop
 80030e6:	3728      	adds	r7, #40	@ 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030fa:	2003      	movs	r0, #3
 80030fc:	f001 fb55 	bl	80047aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003100:	200f      	movs	r0, #15
 8003102:	f7fe fa15 	bl	8001530 <HAL_InitTick>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	71fb      	strb	r3, [r7, #7]
 8003110:	e001      	b.n	8003116 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003112:	f7fe f9e3 	bl	80014dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003116:	79fb      	ldrb	r3, [r7, #7]

}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_IncTick+0x1c>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <HAL_IncTick+0x20>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4413      	add	r3, r2
 800312e:	4a03      	ldr	r2, [pc, #12]	@ (800313c <HAL_IncTick+0x1c>)
 8003130:	6013      	str	r3, [r2, #0]
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	20000d6c 	.word	0x20000d6c
 8003140:	20000690 	.word	0x20000690

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	@ (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000d6c 	.word	0x20000d6c

0800315c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	609a      	str	r2, [r3, #8]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3360      	adds	r3, #96	@ 0x60
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <LL_ADC_SetOffset+0x44>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	03fff000 	.word	0x03fff000

0800320c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3360      	adds	r3, #96	@ 0x60
 800321a:	461a      	mov	r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3360      	adds	r3, #96	@ 0x60
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	431a      	orrs	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800326e:	b480      	push	{r7}
 8003270:	b087      	sub	sp, #28
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3360      	adds	r3, #96	@ 0x60
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	431a      	orrs	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3360      	adds	r3, #96	@ 0x60
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	615a      	str	r2, [r3, #20]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003326:	b480      	push	{r7}
 8003328:	b087      	sub	sp, #28
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3330      	adds	r3, #48	@ 0x30
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	4413      	add	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	211f      	movs	r1, #31
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	f003 011f 	and.w	r1, r3, #31
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800337e:	b480      	push	{r7}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3314      	adds	r3, #20
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	0e5b      	lsrs	r3, r3, #25
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	4413      	add	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0d1b      	lsrs	r3, r3, #20
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2107      	movs	r1, #7
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0d1b      	lsrs	r3, r3, #20
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	431a      	orrs	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0318 	and.w	r3, r3, #24
 80033f6:	4908      	ldr	r1, [pc, #32]	@ (8003418 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033f8:	40d9      	lsrs	r1, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	400b      	ands	r3, r1
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	0007ffff 	.word	0x0007ffff

0800341c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 031f 	and.w	r3, r3, #31
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6093      	str	r3, [r2, #8]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800346c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003470:	d101      	bne.n	8003476 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003498:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034c0:	d101      	bne.n	80034c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <LL_ADC_IsEnabled+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_IsEnabled+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003532:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d101      	bne.n	8003562 <LL_ADC_REG_IsConversionOngoing+0x18>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d101      	bne.n	8003588 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b089      	sub	sp, #36	@ 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e167      	b.n	8003882 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7fd fc13 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff3f 	bl	800345c <LL_ADC_IsDeepPowerDownEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff25 	bl	8003438 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff5a 	bl	80034ac <LL_ADC_IsInternalRegulatorEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d115      	bne.n	800362a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff3e 	bl	8003484 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003608:	4ba0      	ldr	r3, [pc, #640]	@ (800388c <HAL_ADC_Init+0x2f4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	4aa0      	ldr	r2, [pc, #640]	@ (8003890 <HAL_ADC_Init+0x2f8>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	3301      	adds	r3, #1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800361c:	e002      	b.n	8003624 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b01      	subs	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff3c 	bl	80034ac <LL_ADC_IsInternalRegulatorEnabled>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	f043 0210 	orr.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff75 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 8003660:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 8100 	bne.w	8003870 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 80fc 	bne.w	8003870 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff35 	bl	80034fc <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d111      	bne.n	80036bc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003698:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800369c:	f7ff ff2e 	bl	80034fc <LL_ADC_IsEnabled>
 80036a0:	4604      	mov	r4, r0
 80036a2:	487c      	ldr	r0, [pc, #496]	@ (8003894 <HAL_ADC_Init+0x2fc>)
 80036a4:	f7ff ff2a 	bl	80034fc <LL_ADC_IsEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4323      	orrs	r3, r4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4619      	mov	r1, r3
 80036b6:	4878      	ldr	r0, [pc, #480]	@ (8003898 <HAL_ADC_Init+0x300>)
 80036b8:	f7ff fd50 	bl	800315c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7f5b      	ldrb	r3, [r3, #29]
 80036c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80036cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80036d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	045b      	lsls	r3, r3, #17
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	4b60      	ldr	r3, [pc, #384]	@ (800389c <HAL_ADC_Init+0x304>)
 800371c:	4013      	ands	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	69b9      	ldr	r1, [r7, #24]
 8003724:	430b      	orrs	r3, r1
 8003726:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff14 	bl	8003570 <LL_ADC_INJ_IsConversionOngoing>
 8003748:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d16d      	bne.n	800382c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d16a      	bne.n	800382c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800375a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003762:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003772:	f023 0302 	bic.w	r3, r3, #2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	430b      	orrs	r3, r1
 800377e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003796:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80037a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6911      	ldr	r1, [r2, #16]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80037b6:	e013      	b.n	80037e0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80037c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d118      	bne.n	800381c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800380c:	430a      	orrs	r2, r1
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e007      	b.n	800382c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d10c      	bne.n	800384e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f023 010f 	bic.w	r1, r3, #15
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
 800384c:	e007      	b.n	800385e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 020f 	bic.w	r2, r2, #15
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800386e:	e007      	b.n	8003880 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	f043 0210 	orr.w	r2, r3, #16
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003880:	7ffb      	ldrb	r3, [r7, #31]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	@ 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000
 8003890:	053e2d63 	.word	0x053e2d63
 8003894:	50000100 	.word	0x50000100
 8003898:	50000300 	.word	0x50000300
 800389c:	fff04007 	.word	0xfff04007

080038a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ac:	4851      	ldr	r0, [pc, #324]	@ (80039f4 <HAL_ADC_Start_DMA+0x154>)
 80038ae:	f7ff fdb5 	bl	800341c <LL_ADC_GetMultimode>
 80038b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fe46 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 808f 	bne.w	80039e4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_Start_DMA+0x34>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e08a      	b.n	80039ea <HAL_ADC_Start_DMA+0x14a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d002      	beq.n	80038ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	d173      	bne.n	80039d6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fc98 	bl	8004224 <ADC_Enable>
 80038f4:	4603      	mov	r3, r0
 80038f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d166      	bne.n	80039cc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a38      	ldr	r2, [pc, #224]	@ (80039f8 <HAL_ADC_Start_DMA+0x158>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d002      	beq.n	8003922 <HAL_ADC_Start_DMA+0x82>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	e001      	b.n	8003926 <HAL_ADC_Start_DMA+0x86>
 8003922:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	4293      	cmp	r3, r2
 800392c:	d002      	beq.n	8003934 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003950:	f023 0206 	bic.w	r2, r3, #6
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	661a      	str	r2, [r3, #96]	@ 0x60
 8003958:	e002      	b.n	8003960 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <HAL_ADC_Start_DMA+0x15c>)
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	4a24      	ldr	r2, [pc, #144]	@ (8003a00 <HAL_ADC_Start_DMA+0x160>)
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003974:	4a23      	ldr	r2, [pc, #140]	@ (8003a04 <HAL_ADC_Start_DMA+0x164>)
 8003976:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	221c      	movs	r2, #28
 800397e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0210 	orr.w	r2, r2, #16
 8003996:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3340      	adds	r3, #64	@ 0x40
 80039b2:	4619      	mov	r1, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f000 ffd2 	bl	8004960 <HAL_DMA_Start_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fdac 	bl	8003522 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039ca:	e00d      	b.n	80039e8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80039d4:	e008      	b.n	80039e8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039e2:	e001      	b.n	80039e8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
 80039e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	50000300 	.word	0x50000300
 80039f8:	50000100 	.word	0x50000100
 80039fc:	08004331 	.word	0x08004331
 8003a00:	08004409 	.word	0x08004409
 8003a04:	08004425 	.word	0x08004425

08003a08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0b6      	sub	sp, #216	@ 0xd8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x22>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e3c8      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x7b4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fd69 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 83ad 	bne.w	80041da <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f7ff fc4a 	bl	8003326 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fd57 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 8003a9c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fd63 	bl	8003570 <LL_ADC_INJ_IsConversionOngoing>
 8003aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 81d9 	bne.w	8003e6a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 81d4 	bne.w	8003e6a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aca:	d10f      	bne.n	8003aec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f7ff fc51 	bl	800337e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fbf8 	bl	80032da <LL_ADC_SetSamplingTimeCommonConfig>
 8003aea:	e00e      	b.n	8003b0a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f7ff fc40 	bl	800337e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fbe8 	bl	80032da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	08db      	lsrs	r3, r3, #3
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d022      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6919      	ldr	r1, [r3, #16]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b3c:	f7ff fb42 	bl	80031c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6919      	ldr	r1, [r3, #16]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f7ff fb8e 	bl	800326e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x124>
 8003b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b66:	e000      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x126>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f7ff fb9a 	bl	80032a4 <LL_ADC_SetOffsetSaturation>
 8003b70:	e17b      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fb47 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x15a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fb3c 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	0e9b      	lsrs	r3, r3, #26
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	e01e      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x198>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fb31 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e004      	b.n	8003bda <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003bd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x1b0>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	e018      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x1e2>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e004      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d106      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fb00 	bl	8003238 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fae4 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x220>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fad9 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	f003 021f 	and.w	r2, r3, #31
 8003c62:	e01e      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x25e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff face 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003c92:	2320      	movs	r3, #32
 8003c94:	e004      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003c96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d105      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x276>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	0e9b      	lsrs	r3, r3, #26
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	e018      	b.n	8003cec <HAL_ADC_ConfigChannel+0x2a8>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003cde:	2320      	movs	r3, #32
 8003ce0:	e004      	b.n	8003cec <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d106      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fa9d 	bl	8003238 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fa81 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x2e6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fa76 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	0e9b      	lsrs	r3, r3, #26
 8003d24:	f003 021f 	and.w	r2, r3, #31
 8003d28:	e01e      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x324>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fa6b 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	e004      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x33c>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	e016      	b.n	8003dae <HAL_ADC_ConfigChannel+0x36a>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003d92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003da0:	2320      	movs	r3, #32
 8003da2:	e004      	b.n	8003dae <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d106      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fa3c 	bl	8003238 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fa20 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x3a8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2103      	movs	r1, #3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fa15 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	0e9b      	lsrs	r3, r3, #26
 8003de6:	f003 021f 	and.w	r2, r3, #31
 8003dea:	e017      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3d8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2103      	movs	r1, #3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fa0a 	bl	800320c <LL_ADC_GetOffsetChannel>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003e04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e06:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e003      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x3f0>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	e011      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x414>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e003      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d106      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2103      	movs	r1, #3
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff f9e7 	bl	8003238 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fb44 	bl	80034fc <LL_ADC_IsEnabled>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 8140 	bne.w	80040fc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f7ff faa3 	bl	80033d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4a8f      	ldr	r2, [pc, #572]	@ (80040d0 <HAL_ADC_ConfigChannel+0x68c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	f040 8131 	bne.w	80040fc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x47e>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0e9b      	lsrs	r3, r3, #26
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	bf94      	ite	ls
 8003eba:	2301      	movls	r3, #1
 8003ebc:	2300      	movhi	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	e019      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x4b2>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ed2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003eda:	2320      	movs	r3, #32
 8003edc:	e003      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d079      	beq.n	8003fee <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x4d2>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	0e9b      	lsrs	r3, r3, #26
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	069b      	lsls	r3, r3, #26
 8003f10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f14:	e015      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x4fe>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e003      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	069b      	lsls	r3, r3, #26
 8003f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x51e>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	0e9b      	lsrs	r3, r3, #26
 8003f54:	3301      	adds	r3, #1
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	e017      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x54e>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e003      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	ea42 0103 	orr.w	r1, r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x574>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	0e9b      	lsrs	r3, r3, #26
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f003 021f 	and.w	r2, r3, #31
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	051b      	lsls	r3, r3, #20
 8003fb6:	e018      	b.n	8003fea <HAL_ADC_ConfigChannel+0x5a6>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e003      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f003 021f 	and.w	r2, r3, #31
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4413      	add	r3, r2
 8003fe8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fea:	430b      	orrs	r3, r1
 8003fec:	e081      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_ADC_ConfigChannel+0x5c6>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	3301      	adds	r3, #1
 8004002:	069b      	lsls	r3, r3, #26
 8004004:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004008:	e015      	b.n	8004036 <HAL_ADC_ConfigChannel+0x5f2>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e003      	b.n	800402e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	069b      	lsls	r3, r3, #26
 8004032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x612>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	0e9b      	lsrs	r3, r3, #26
 8004048:	3301      	adds	r3, #1
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2101      	movs	r1, #1
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	e017      	b.n	8004086 <HAL_ADC_ConfigChannel+0x642>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	61fb      	str	r3, [r7, #28]
  return result;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800406e:	2320      	movs	r3, #32
 8004070:	e003      	b.n	800407a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	ea42 0103 	orr.w	r1, r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x66e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	0e9b      	lsrs	r3, r3, #26
 800409c:	3301      	adds	r3, #1
 800409e:	f003 021f 	and.w	r2, r3, #31
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	3b1e      	subs	r3, #30
 80040aa:	051b      	lsls	r3, r3, #20
 80040ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	e01e      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x6ac>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	613b      	str	r3, [r7, #16]
  return result;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80040ca:	2320      	movs	r3, #32
 80040cc:	e006      	b.n	80040dc <HAL_ADC_ConfigChannel+0x698>
 80040ce:	bf00      	nop
 80040d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	3b1e      	subs	r3, #30
 80040ea:	051b      	lsls	r3, r3, #20
 80040ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f6:	4619      	mov	r1, r3
 80040f8:	f7ff f941 	bl	800337e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b3f      	ldr	r3, [pc, #252]	@ (8004200 <HAL_ADC_ConfigChannel+0x7bc>)
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d071      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004108:	483e      	ldr	r0, [pc, #248]	@ (8004204 <HAL_ADC_ConfigChannel+0x7c0>)
 800410a:	f7ff f84d 	bl	80031a8 <LL_ADC_GetCommonPathInternalCh>
 800410e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3c      	ldr	r2, [pc, #240]	@ (8004208 <HAL_ADC_ConfigChannel+0x7c4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_ADC_ConfigChannel+0x6e2>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a3a      	ldr	r2, [pc, #232]	@ (800420c <HAL_ADC_ConfigChannel+0x7c8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d127      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800412a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d121      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800413a:	d157      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800413c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004144:	4619      	mov	r1, r3
 8004146:	482f      	ldr	r0, [pc, #188]	@ (8004204 <HAL_ADC_ConfigChannel+0x7c0>)
 8004148:	f7ff f81b 	bl	8003182 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800414c:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_ADC_ConfigChannel+0x7cc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <HAL_ADC_ConfigChannel+0x7d0>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	099b      	lsrs	r3, r3, #6
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004166:	e002      	b.n	800416e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3b01      	subs	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f9      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004174:	e03a      	b.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a27      	ldr	r2, [pc, #156]	@ (8004218 <HAL_ADC_ConfigChannel+0x7d4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d113      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a22      	ldr	r2, [pc, #136]	@ (800421c <HAL_ADC_ConfigChannel+0x7d8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02a      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800419a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800419e:	4619      	mov	r1, r3
 80041a0:	4818      	ldr	r0, [pc, #96]	@ (8004204 <HAL_ADC_ConfigChannel+0x7c0>)
 80041a2:	f7fe ffee 	bl	8003182 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041a6:	e021      	b.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <HAL_ADC_ConfigChannel+0x7dc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d11c      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_ADC_ConfigChannel+0x7d8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d011      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041d0:	4619      	mov	r1, r3
 80041d2:	480c      	ldr	r0, [pc, #48]	@ (8004204 <HAL_ADC_ConfigChannel+0x7c0>)
 80041d4:	f7fe ffd5 	bl	8003182 <LL_ADC_SetCommonPathInternalCh>
 80041d8:	e008      	b.n	80041ec <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	37d8      	adds	r7, #216	@ 0xd8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	80080000 	.word	0x80080000
 8004204:	50000300 	.word	0x50000300
 8004208:	c3210000 	.word	0xc3210000
 800420c:	90c00010 	.word	0x90c00010
 8004210:	20000000 	.word	0x20000000
 8004214:	053e2d63 	.word	0x053e2d63
 8004218:	c7520000 	.word	0xc7520000
 800421c:	50000100 	.word	0x50000100
 8004220:	cb840000 	.word	0xcb840000

08004224 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f961 	bl	80034fc <LL_ADC_IsEnabled>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d169      	bne.n	8004314 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	4b36      	ldr	r3, [pc, #216]	@ (8004320 <ADC_Enable+0xfc>)
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	f043 0210 	orr.w	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425e:	f043 0201 	orr.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e055      	b.n	8004316 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f930 	bl	80034d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004274:	482b      	ldr	r0, [pc, #172]	@ (8004324 <ADC_Enable+0x100>)
 8004276:	f7fe ff97 	bl	80031a8 <LL_ADC_GetCommonPathInternalCh>
 800427a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800427c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004284:	4b28      	ldr	r3, [pc, #160]	@ (8004328 <ADC_Enable+0x104>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	4a28      	ldr	r2, [pc, #160]	@ (800432c <ADC_Enable+0x108>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800429e:	e002      	b.n	80042a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f9      	bne.n	80042a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042ac:	f7fe ff4a 	bl	8003144 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042b2:	e028      	b.n	8004306 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff f91f 	bl	80034fc <LL_ADC_IsEnabled>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff f903 	bl	80034d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042ce:	f7fe ff39 	bl	8003144 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d914      	bls.n	8004306 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d00d      	beq.n	8004306 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ee:	f043 0210 	orr.w	r2, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fa:	f043 0201 	orr.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e007      	b.n	8004316 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d1cf      	bne.n	80042b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	8000003f 	.word	0x8000003f
 8004324:	50000300 	.word	0x50000300
 8004328:	20000000 	.word	0x20000000
 800432c:	053e2d63 	.word	0x053e2d63

08004330 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004342:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d14b      	bne.n	80043e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d021      	beq.n	80043a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe ffc9 	bl	8003300 <LL_ADC_REG_IsTriggerSourceSWStart>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d032      	beq.n	80043da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d12b      	bne.n	80043da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004386:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11f      	bne.n	80043da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	f043 0201 	orr.w	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043a6:	e018      	b.n	80043da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d111      	bne.n	80043da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d2:	f043 0201 	orr.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fb14 	bl	8003a08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043e0:	e00e      	b.n	8004400 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff fb1e 	bl	8003a30 <HAL_ADC_ErrorCallback>
}
 80043f4:	e004      	b.n	8004400 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fb00 	bl	8003a1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff faf0 	bl	8003a30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <LL_ADC_IsEnabled>:
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <LL_ADC_IsEnabled+0x18>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <LL_ADC_IsEnabled+0x1a>
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <LL_ADC_REG_IsConversionOngoing>:
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d101      	bne.n	8004496 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b0a1      	sub	sp, #132	@ 0x84
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044be:	2302      	movs	r3, #2
 80044c0:	e08b      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80044ca:	2300      	movs	r3, #0
 80044cc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80044ce:	2300      	movs	r3, #0
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044da:	d102      	bne.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044dc:	4b41      	ldr	r3, [pc, #260]	@ (80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e001      	b.n	80044e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e06a      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ffb9 	bl	800447e <LL_ADC_REG_IsConversionOngoing>
 800450c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ffb3 	bl	800447e <LL_ADC_REG_IsConversionOngoing>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d14c      	bne.n	80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800451e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004520:	2b00      	cmp	r3, #0
 8004522:	d149      	bne.n	80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004524:	4b30      	ldr	r3, [pc, #192]	@ (80045e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004526:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d028      	beq.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004530:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004542:	035b      	lsls	r3, r3, #13
 8004544:	430b      	orrs	r3, r1
 8004546:	431a      	orrs	r2, r3
 8004548:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800454a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800454c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004550:	f7ff ff82 	bl	8004458 <LL_ADC_IsEnabled>
 8004554:	4604      	mov	r4, r0
 8004556:	4823      	ldr	r0, [pc, #140]	@ (80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004558:	f7ff ff7e 	bl	8004458 <LL_ADC_IsEnabled>
 800455c:	4603      	mov	r3, r0
 800455e:	4323      	orrs	r3, r4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d133      	bne.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004564:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800456c:	f023 030f 	bic.w	r3, r3, #15
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6811      	ldr	r1, [r2, #0]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	430a      	orrs	r2, r1
 800457a:	431a      	orrs	r2, r3
 800457c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800457e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004580:	e024      	b.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800458a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800458c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800458e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004592:	f7ff ff61 	bl	8004458 <LL_ADC_IsEnabled>
 8004596:	4604      	mov	r4, r0
 8004598:	4812      	ldr	r0, [pc, #72]	@ (80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800459a:	f7ff ff5d 	bl	8004458 <LL_ADC_IsEnabled>
 800459e:	4603      	mov	r3, r0
 80045a0:	4323      	orrs	r3, r4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d112      	bne.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045ae:	f023 030f 	bic.w	r3, r3, #15
 80045b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80045b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045b6:	e009      	b.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80045ca:	e000      	b.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3784      	adds	r7, #132	@ 0x84
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	50000100 	.word	0x50000100
 80045e8:	50000300 	.word	0x50000300

080045ec <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e023      	b.n	8004646 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fcb2 	bl	8000f7c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800467c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004682:	4a04      	ldr	r2, [pc, #16]	@ (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	60d3      	str	r3, [r2, #12]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800469c:	4b04      	ldr	r3, [pc, #16]	@ (80046b0 <__NVIC_GetPriorityGrouping+0x18>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0307 	and.w	r3, r3, #7
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	db0b      	blt.n	80046de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	4907      	ldr	r1, [pc, #28]	@ (80046ec <__NVIC_EnableIRQ+0x38>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2001      	movs	r0, #1
 80046d6:	fa00 f202 	lsl.w	r2, r0, r2
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e100 	.word	0xe000e100

080046f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0a      	blt.n	800471a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	490c      	ldr	r1, [pc, #48]	@ (800473c <__NVIC_SetPriority+0x4c>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	440b      	add	r3, r1
 8004714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004718:	e00a      	b.n	8004730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4908      	ldr	r1, [pc, #32]	@ (8004740 <__NVIC_SetPriority+0x50>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3b04      	subs	r3, #4
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	440b      	add	r3, r1
 800472e:	761a      	strb	r2, [r3, #24]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	@ 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf28      	it	cs
 8004762:	2304      	movcs	r3, #4
 8004764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3304      	adds	r3, #4
 800476a:	2b06      	cmp	r3, #6
 800476c:	d902      	bls.n	8004774 <NVIC_EncodePriority+0x30>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3b03      	subs	r3, #3
 8004772:	e000      	b.n	8004776 <NVIC_EncodePriority+0x32>
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	401a      	ands	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800478c:	f04f 31ff 	mov.w	r1, #4294967295
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43d9      	mvns	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	4313      	orrs	r3, r2
         );
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	@ 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ff4c 	bl	8004650 <__NVIC_SetPriorityGrouping>
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047ce:	f7ff ff63 	bl	8004698 <__NVIC_GetPriorityGrouping>
 80047d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f7ff ffb3 	bl	8004744 <NVIC_EncodePriority>
 80047de:	4602      	mov	r2, r0
 80047e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ff82 	bl	80046f0 <__NVIC_SetPriority>
}
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ff56 	bl	80046b4 <__NVIC_EnableIRQ>
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e08d      	b.n	800493e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_DMA_Init+0x138>)
 800482a:	429a      	cmp	r2, r3
 800482c:	d80f      	bhi.n	800484e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	4b45      	ldr	r3, [pc, #276]	@ (800494c <HAL_DMA_Init+0x13c>)
 8004836:	4413      	add	r3, r2
 8004838:	4a45      	ldr	r2, [pc, #276]	@ (8004950 <HAL_DMA_Init+0x140>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	009a      	lsls	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a42      	ldr	r2, [pc, #264]	@ (8004954 <HAL_DMA_Init+0x144>)
 800484a:	641a      	str	r2, [r3, #64]	@ 0x40
 800484c:	e00e      	b.n	800486c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	4b40      	ldr	r3, [pc, #256]	@ (8004958 <HAL_DMA_Init+0x148>)
 8004856:	4413      	add	r3, r2
 8004858:	4a3d      	ldr	r2, [pc, #244]	@ (8004950 <HAL_DMA_Init+0x140>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	009a      	lsls	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a3c      	ldr	r2, [pc, #240]	@ (800495c <HAL_DMA_Init+0x14c>)
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9b6 	bl	8004c30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048cc:	d102      	bne.n	80048d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d010      	beq.n	8004914 <HAL_DMA_Init+0x104>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d80c      	bhi.n	8004914 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9d6 	bl	8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	e008      	b.n	8004926 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40020407 	.word	0x40020407
 800494c:	bffdfff8 	.word	0xbffdfff8
 8004950:	cccccccd 	.word	0xcccccccd
 8004954:	40020000 	.word	0x40020000
 8004958:	bffdfbf8 	.word	0xbffdfbf8
 800495c:	40020400 	.word	0x40020400

08004960 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Start_IT+0x20>
 800497c:	2302      	movs	r3, #2
 800497e:	e066      	b.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d155      	bne.n	8004a40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8fb 	bl	8004bb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 020e 	orr.w	r2, r2, #14
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e00f      	b.n	80049f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 020a 	orr.w	r2, r2, #10
 80049f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e005      	b.n	8004a4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2204      	movs	r2, #4
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d026      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x7a>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d021      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d107      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0204 	bic.w	r2, r2, #4
 8004aa8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	f003 021f 	and.w	r2, r3, #31
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8004abc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d071      	beq.n	8004baa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ace:	e06c      	b.n	8004baa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2202      	movs	r2, #2
 8004ada:	409a      	lsls	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02e      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d029      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 020a 	bic.w	r2, r2, #10
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b18:	f003 021f 	and.w	r2, r3, #31
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	2102      	movs	r1, #2
 8004b22:	fa01 f202 	lsl.w	r2, r1, r2
 8004b26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d038      	beq.n	8004baa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b40:	e033      	b.n	8004baa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02a      	beq.n	8004bac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d025      	beq.n	8004bac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 020e 	bic.w	r2, r2, #14
 8004b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
}
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f003 021f 	and.w	r2, r3, #31
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d108      	bne.n	8004c14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c12:	e007      	b.n	8004c24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b16      	ldr	r3, [pc, #88]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d802      	bhi.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c44:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e001      	b.n	8004c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c4c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	3b08      	subs	r3, #8
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	009a      	lsls	r2, r3, #2
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2201      	movs	r2, #1
 8004c84:	409a      	lsls	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40020407 	.word	0x40020407
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	40020820 	.word	0x40020820
 8004ca4:	cccccccd 	.word	0xcccccccd
 8004ca8:	40020880 	.word	0x40020880

08004cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a08      	ldr	r2, [pc, #32]	@ (8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2201      	movs	r2, #1
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	1000823f 	.word	0x1000823f
 8004cf0:	40020940 	.word	0x40020940

08004cf4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]
      break;
 8004d12:	e005      	b.n	8004d20 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	bf00      	nop
  }

  return status;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e003      	b.n	8004d4a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	2201      	movs	r2, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <HAL_EXTI_IRQHandler+0x5c>)
 8004d82:	4413      	add	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4798      	blx	r3
    }
  }
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40010414 	.word	0x40010414

08004db8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e147      	b.n	800505a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f95c 	bl	800109c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0210 	bic.w	r2, r2, #16
 8004df2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004df4:	f7fe f9a6 	bl	8003144 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dfa:	e012      	b.n	8004e22 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004dfc:	f7fe f9a2 	bl	8003144 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b0a      	cmp	r3, #10
 8004e08:	d90b      	bls.n	8004e22 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0e:	f043 0201 	orr.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e11b      	b.n	800505a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d0e5      	beq.n	8004dfc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e40:	f7fe f980 	bl	8003144 <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e46:	e012      	b.n	8004e6e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e48:	f7fe f97c 	bl	8003144 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b0a      	cmp	r3, #10
 8004e54:	d90b      	bls.n	8004e6e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2203      	movs	r2, #3
 8004e66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0f5      	b.n	800505a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0e5      	beq.n	8004e48 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0202 	orr.w	r2, r2, #2
 8004e8a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a74      	ldr	r2, [pc, #464]	@ (8005064 <HAL_FDCAN_Init+0x2ac>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d103      	bne.n	8004e9e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004e96:	4a74      	ldr	r2, [pc, #464]	@ (8005068 <HAL_FDCAN_Init+0x2b0>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7c1b      	ldrb	r3, [r3, #16]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d108      	bne.n	8004eb8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb4:	619a      	str	r2, [r3, #24]
 8004eb6:	e007      	b.n	8004ec8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7c5b      	ldrb	r3, [r3, #17]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d108      	bne.n	8004ee2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ede:	619a      	str	r2, [r3, #24]
 8004ee0:	e007      	b.n	8004ef2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ef0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7c9b      	ldrb	r3, [r3, #18]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d108      	bne.n	8004f0c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f08:	619a      	str	r2, [r3, #24]
 8004f0a:	e007      	b.n	8004f1c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f1a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004f40:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0210 	bic.w	r2, r2, #16
 8004f50:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d108      	bne.n	8004f6c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0204 	orr.w	r2, r2, #4
 8004f68:	619a      	str	r2, [r3, #24]
 8004f6a:	e02c      	b.n	8004fc6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d028      	beq.n	8004fc6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d01c      	beq.n	8004fb6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f8a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0210 	orr.w	r2, r2, #16
 8004f9a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d110      	bne.n	8004fc6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0220 	orr.w	r2, r2, #32
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	e007      	b.n	8004fc6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0220 	orr.w	r2, r2, #32
 8004fc4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fd6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fde:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ff0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffa:	d115      	bne.n	8005028 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	3b01      	subs	r3, #1
 8005008:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800500a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	3b01      	subs	r3, #1
 8005012:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005014:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	3b01      	subs	r3, #1
 800501e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005024:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005026:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb14 	bl	800566c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40006400 	.word	0x40006400
 8005068:	40006500 	.word	0x40006500

0800506c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800506c:	b480      	push	{r7}
 800506e:	b08b      	sub	sp, #44	@ 0x2c
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005084:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005086:	7efb      	ldrb	r3, [r7, #27]
 8005088:	2b02      	cmp	r3, #2
 800508a:	f040 80e8 	bne.w	800525e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	d137      	bne.n	8005104 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d107      	bne.n	80050b4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0db      	b.n	800526c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050c4:	d10a      	bne.n	80050dc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d6:	d101      	bne.n	80050dc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80050d8:	2301      	movs	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24
 8005102:	e036      	b.n	8005172 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0a3      	b.n	800526c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800512c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005134:	d10a      	bne.n	800514c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005146:	d101      	bne.n	800514c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005148:	2301      	movs	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	4613      	mov	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	0c9b      	lsrs	r3, r3, #18
 800518c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e005      	b.n	80051a2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	3304      	adds	r3, #4
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0e1b      	lsrs	r3, r3, #24
 80051f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	0fda      	lsrs	r2, r3, #31
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	3304      	adds	r3, #4
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005212:	2300      	movs	r3, #0
 8005214:	623b      	str	r3, [r7, #32]
 8005216:	e00a      	b.n	800522e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	441a      	add	r2, r3
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	440b      	add	r3, r1
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3301      	adds	r3, #1
 800522c:	623b      	str	r3, [r7, #32]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a11      	ldr	r2, [pc, #68]	@ (8005278 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	461a      	mov	r2, r3
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	4293      	cmp	r3, r2
 800523c:	d3ec      	bcc.n	8005218 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d105      	bne.n	8005250 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800524e:	e004      	b.n	800525a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e006      	b.n	800526c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	f043 0208 	orr.w	r2, r3, #8
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	372c      	adds	r7, #44	@ 0x2c
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	0800c120 	.word	0x0800c120

0800527c <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800528c:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d16e      	bne.n	8005372 <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e065      	b.n	8005380 <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052bc:	0a1b      	lsrs	r3, r3, #8
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	0c9b      	lsrs	r3, r3, #18
 80052ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e005      	b.n	8005300 <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3304      	adds	r3, #4
 800531c:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b29a      	uxth	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 020f 	and.w	r2, r3, #15
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0e1a      	lsrs	r2, r3, #24
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e006      	b.n	8005380 <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005376:	f043 0208 	orr.w	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08c      	sub	sp, #48	@ 0x30
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a8:	4013      	ands	r3, r2
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c0:	4013      	ands	r3, r2
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d8:	4013      	ands	r3, r2
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80053e6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	4013      	ands	r3, r2
 80053f2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80053fe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	4013      	ands	r3, r2
 800540a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800541a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	099b      	lsrs	r3, r3, #6
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2240      	movs	r2, #64	@ 0x40
 800543a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f901 	bl	8005644 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01a      	beq.n	8005484 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d014      	beq.n	8005484 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005462:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800547a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800547c:	6939      	ldr	r1, [r7, #16]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8c1 	bl	8005606 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fc fc0d 	bl	8001cb4 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80054a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc fc28 	bl	8001d00 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80054be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fc fc89 	bl	8001dd8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	0a5b      	lsrs	r3, r3, #9
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	0a5b      	lsrs	r3, r3, #9
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f882 	bl	80055f2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d019      	beq.n	800552e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800550e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4013      	ands	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2280      	movs	r2, #128	@ 0x80
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fc fbde 	bl	8001cea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	0b5b      	lsrs	r3, r3, #13
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	0b5b      	lsrs	r3, r3, #13
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800554e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f863 	bl	800561c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	0bdb      	lsrs	r3, r3, #15
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00d      	beq.n	800557e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	0bdb      	lsrs	r3, r3, #15
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005576:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f859 	bl	8005630 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	0b9b      	lsrs	r3, r3, #14
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d010      	beq.n	80055ac <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	0b9b      	lsrs	r3, r3, #14
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800559e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80055ba:	69f9      	ldr	r1, [r7, #28]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fc fb5d 	bl	8001c7c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f837 	bl	8005658 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80055ea:	bf00      	nop
 80055ec:	3730      	adds	r7, #48	@ 0x30
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005674:	4b27      	ldr	r3, [pc, #156]	@ (8005714 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005676:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005686:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568e:	041a      	lsls	r2, r3, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b4:	061a      	lsls	r2, r3, #24
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e005      	b.n	80056fa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3304      	adds	r3, #4
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	429a      	cmp	r2, r3
 8005704:	d3f3      	bcc.n	80056ee <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	4000a400 	.word	0x4000a400

08005718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005726:	e15a      	b.n	80059de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	2101      	movs	r1, #1
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 814c 	beq.w	80059d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d005      	beq.n	8005758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005754:	2b02      	cmp	r3, #2
 8005756:	d130      	bne.n	80057ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2203      	movs	r2, #3
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4013      	ands	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800578e:	2201      	movs	r2, #1
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	f003 0201 	and.w	r2, r3, #1
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d017      	beq.n	80057f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	2203      	movs	r2, #3
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4013      	ands	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d123      	bne.n	800584a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	08da      	lsrs	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3208      	adds	r2, #8
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	220f      	movs	r2, #15
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43db      	mvns	r3, r3
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4013      	ands	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	08da      	lsrs	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3208      	adds	r2, #8
 8005844:	6939      	ldr	r1, [r7, #16]
 8005846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	2203      	movs	r2, #3
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0203 	and.w	r2, r3, #3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80a6 	beq.w	80059d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588c:	4b5b      	ldr	r3, [pc, #364]	@ (80059fc <HAL_GPIO_Init+0x2e4>)
 800588e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005890:	4a5a      	ldr	r2, [pc, #360]	@ (80059fc <HAL_GPIO_Init+0x2e4>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6613      	str	r3, [r2, #96]	@ 0x60
 8005898:	4b58      	ldr	r3, [pc, #352]	@ (80059fc <HAL_GPIO_Init+0x2e4>)
 800589a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a4:	4a56      	ldr	r2, [pc, #344]	@ (8005a00 <HAL_GPIO_Init+0x2e8>)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	3302      	adds	r3, #2
 80058ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	220f      	movs	r2, #15
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4013      	ands	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058ce:	d01f      	beq.n	8005910 <HAL_GPIO_Init+0x1f8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005a04 <HAL_GPIO_Init+0x2ec>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d019      	beq.n	800590c <HAL_GPIO_Init+0x1f4>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a4b      	ldr	r2, [pc, #300]	@ (8005a08 <HAL_GPIO_Init+0x2f0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_GPIO_Init+0x1f0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a4a      	ldr	r2, [pc, #296]	@ (8005a0c <HAL_GPIO_Init+0x2f4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00d      	beq.n	8005904 <HAL_GPIO_Init+0x1ec>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a49      	ldr	r2, [pc, #292]	@ (8005a10 <HAL_GPIO_Init+0x2f8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <HAL_GPIO_Init+0x1e8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a48      	ldr	r2, [pc, #288]	@ (8005a14 <HAL_GPIO_Init+0x2fc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_GPIO_Init+0x1e4>
 80058f8:	2305      	movs	r3, #5
 80058fa:	e00a      	b.n	8005912 <HAL_GPIO_Init+0x1fa>
 80058fc:	2306      	movs	r3, #6
 80058fe:	e008      	b.n	8005912 <HAL_GPIO_Init+0x1fa>
 8005900:	2304      	movs	r3, #4
 8005902:	e006      	b.n	8005912 <HAL_GPIO_Init+0x1fa>
 8005904:	2303      	movs	r3, #3
 8005906:	e004      	b.n	8005912 <HAL_GPIO_Init+0x1fa>
 8005908:	2302      	movs	r3, #2
 800590a:	e002      	b.n	8005912 <HAL_GPIO_Init+0x1fa>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <HAL_GPIO_Init+0x1fa>
 8005910:	2300      	movs	r3, #0
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	f002 0203 	and.w	r2, r2, #3
 8005918:	0092      	lsls	r2, r2, #2
 800591a:	4093      	lsls	r3, r2
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005922:	4937      	ldr	r1, [pc, #220]	@ (8005a00 <HAL_GPIO_Init+0x2e8>)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	089b      	lsrs	r3, r3, #2
 8005928:	3302      	adds	r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005930:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	43db      	mvns	r3, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4013      	ands	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005954:	4a30      	ldr	r2, [pc, #192]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800595a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	43db      	mvns	r3, r3
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4013      	ands	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800597e:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005984:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	43db      	mvns	r3, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	43db      	mvns	r3, r3
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4013      	ands	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059d2:	4a11      	ldr	r2, [pc, #68]	@ (8005a18 <HAL_GPIO_Init+0x300>)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f ae9d 	bne.w	8005728 <HAL_GPIO_Init+0x10>
  }
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40010000 	.word	0x40010000
 8005a04:	48000400 	.word	0x48000400
 8005a08:	48000800 	.word	0x48000800
 8005a0c:	48000c00 	.word	0x48000c00
 8005a10:	48001000 	.word	0x48001000
 8005a14:	48001400 	.word	0x48001400
 8005a18:	40010400 	.word	0x40010400

08005a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a2c:	787b      	ldrb	r3, [r7, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a38:	e002      	b.n	8005a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a56:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a62:	4a05      	ldr	r2, [pc, #20]	@ (8005a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc fa1e 	bl	8001eac <HAL_GPIO_EXTI_Callback>
  }
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40010400 	.word	0x40010400

08005a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e08d      	b.n	8005baa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb fbfe 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	@ 0x24
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005acc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005adc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	e006      	b.n	8005b04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d108      	bne.n	8005b1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	e007      	b.n	8005b2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69d9      	ldr	r1, [r3, #28]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d138      	bne.n	8005c3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e032      	b.n	8005c3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2224      	movs	r2, #36	@ 0x24
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d139      	bne.n	8005cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e033      	b.n	8005cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	@ 0x24
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e000      	b.n	8005cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
  }
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d141      	bne.n	8005d72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cee:	4b4b      	ldr	r3, [pc, #300]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfa:	d131      	bne.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cfc:	4b47      	ldr	r3, [pc, #284]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d02:	4a46      	ldr	r2, [pc, #280]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d0c:	4b43      	ldr	r3, [pc, #268]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d14:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d1c:	4b40      	ldr	r3, [pc, #256]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2232      	movs	r2, #50	@ 0x32
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a3f      	ldr	r2, [pc, #252]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	0c9b      	lsrs	r3, r3, #18
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d32:	e002      	b.n	8005d3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d3a:	4b38      	ldr	r3, [pc, #224]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d46:	d102      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f2      	bne.n	8005d34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d4e:	4b33      	ldr	r3, [pc, #204]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5a:	d158      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e057      	b.n	8005e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d60:	4b2e      	ldr	r3, [pc, #184]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d66:	4a2d      	ldr	r2, [pc, #180]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d70:	e04d      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d78:	d141      	bne.n	8005dfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d7a:	4b28      	ldr	r3, [pc, #160]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d86:	d131      	bne.n	8005dec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d88:	4b24      	ldr	r3, [pc, #144]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8e:	4a23      	ldr	r2, [pc, #140]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d98:	4b20      	ldr	r3, [pc, #128]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005da0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2232      	movs	r2, #50	@ 0x32
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	0c9b      	lsrs	r3, r3, #18
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbe:	e002      	b.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc6:	4b15      	ldr	r3, [pc, #84]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d102      	bne.n	8005dda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f2      	bne.n	8005dc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dda:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de6:	d112      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e011      	b.n	8005e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005dfc:	e007      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e06:	4a05      	ldr	r2, [pc, #20]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	20000000 	.word	0x20000000
 8005e24:	431bde83 	.word	0x431bde83

08005e28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e2c:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e36:	6093      	str	r3, [r2, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40007000 	.word	0x40007000

08005e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e2fe      	b.n	8006458 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d075      	beq.n	8005f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e66:	4b97      	ldr	r3, [pc, #604]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e70:	4b94      	ldr	r3, [pc, #592]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_OscConfig+0x3e>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d002      	beq.n	8005e8c <HAL_RCC_OscConfig+0x44>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e8c:	4b8d      	ldr	r3, [pc, #564]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05b      	beq.n	8005f50 <HAL_RCC_OscConfig+0x108>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d157      	bne.n	8005f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e2d9      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eac:	d106      	bne.n	8005ebc <HAL_RCC_OscConfig+0x74>
 8005eae:	4b85      	ldr	r3, [pc, #532]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a84      	ldr	r2, [pc, #528]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e01d      	b.n	8005ef8 <HAL_RCC_OscConfig+0xb0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x98>
 8005ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a7e      	ldr	r2, [pc, #504]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a7b      	ldr	r2, [pc, #492]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCC_OscConfig+0xb0>
 8005ee0:	4b78      	ldr	r3, [pc, #480]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a77      	ldr	r2, [pc, #476]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b75      	ldr	r3, [pc, #468]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a74      	ldr	r2, [pc, #464]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d013      	beq.n	8005f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fd f920 	bl	8003144 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f08:	f7fd f91c 	bl	8003144 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	@ 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e29e      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0xc0>
 8005f26:	e014      	b.n	8005f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fd f90c 	bl	8003144 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f30:	f7fd f908 	bl	8003144 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	@ 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e28a      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f42:	4b60      	ldr	r3, [pc, #384]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0xe8>
 8005f4e:	e000      	b.n	8005f52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d075      	beq.n	800604a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5e:	4b59      	ldr	r3, [pc, #356]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f68:	4b56      	ldr	r3, [pc, #344]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d102      	bne.n	8005f7e <HAL_RCC_OscConfig+0x136>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_OscConfig+0x13c>
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11f      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f84:	4b4f      	ldr	r3, [pc, #316]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_RCC_OscConfig+0x154>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e25d      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b49      	ldr	r3, [pc, #292]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	4946      	ldr	r1, [pc, #280]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fb0:	4b45      	ldr	r3, [pc, #276]	@ (80060c8 <HAL_RCC_OscConfig+0x280>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fb fabb 	bl	8001530 <HAL_InitTick>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d043      	beq.n	8006048 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e249      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d023      	beq.n	8006014 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd8:	f7fd f8b4 	bl	8003144 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe0:	f7fd f8b0 	bl	8003144 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e232      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ff2:	4b34      	ldr	r3, [pc, #208]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	492d      	ldr	r1, [pc, #180]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
 8006012:	e01a      	b.n	800604a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006014:	4b2b      	ldr	r3, [pc, #172]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800601a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800601e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fd f890 	bl	8003144 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006028:	f7fd f88c 	bl	8003144 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e20e      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800603a:	4b22      	ldr	r3, [pc, #136]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x1e0>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d041      	beq.n	80060da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01c      	beq.n	8006098 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800605e:	4b19      	ldr	r3, [pc, #100]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006064:	4a17      	ldr	r2, [pc, #92]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606e:	f7fd f869 	bl	8003144 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006076:	f7fd f865 	bl	8003144 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e1e7      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006088:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ef      	beq.n	8006076 <HAL_RCC_OscConfig+0x22e>
 8006096:	e020      	b.n	80060da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006098:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800609a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800609e:	4a09      	ldr	r2, [pc, #36]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fd f84c 	bl	8003144 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060ae:	e00d      	b.n	80060cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b0:	f7fd f848 	bl	8003144 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d906      	bls.n	80060cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e1ca      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
 80060c2:	bf00      	nop
 80060c4:	40021000 	.word	0x40021000
 80060c8:	2000068c 	.word	0x2000068c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80060ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1ea      	bne.n	80060b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80a6 	beq.w	8006234 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060e8:	2300      	movs	r3, #0
 80060ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060ec:	4b84      	ldr	r3, [pc, #528]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_RCC_OscConfig+0x2b4>
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <HAL_RCC_OscConfig+0x2b6>
 80060fc:	2300      	movs	r3, #0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006102:	4b7f      	ldr	r3, [pc, #508]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	4a7e      	ldr	r2, [pc, #504]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610c:	6593      	str	r3, [r2, #88]	@ 0x58
 800610e:	4b7c      	ldr	r3, [pc, #496]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800611a:	2301      	movs	r3, #1
 800611c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611e:	4b79      	ldr	r3, [pc, #484]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d118      	bne.n	800615c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800612a:	4b76      	ldr	r3, [pc, #472]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a75      	ldr	r2, [pc, #468]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 8006130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006136:	f7fd f805 	bl	8003144 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613e:	f7fd f801 	bl	8003144 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e183      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006150:	4b6c      	ldr	r3, [pc, #432]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d108      	bne.n	8006176 <HAL_RCC_OscConfig+0x32e>
 8006164:	4b66      	ldr	r3, [pc, #408]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	4a65      	ldr	r2, [pc, #404]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006174:	e024      	b.n	80061c0 <HAL_RCC_OscConfig+0x378>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b05      	cmp	r3, #5
 800617c:	d110      	bne.n	80061a0 <HAL_RCC_OscConfig+0x358>
 800617e:	4b60      	ldr	r3, [pc, #384]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	4a5e      	ldr	r2, [pc, #376]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	f043 0304 	orr.w	r3, r3, #4
 800618a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800618e:	4b5c      	ldr	r3, [pc, #368]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	4a5a      	ldr	r2, [pc, #360]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800619e:	e00f      	b.n	80061c0 <HAL_RCC_OscConfig+0x378>
 80061a0:	4b57      	ldr	r3, [pc, #348]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a6:	4a56      	ldr	r2, [pc, #344]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061b0:	4b53      	ldr	r3, [pc, #332]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	4a52      	ldr	r2, [pc, #328]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d016      	beq.n	80061f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fc ffbc 	bl	8003144 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ce:	e00a      	b.n	80061e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d0:	f7fc ffb8 	bl	8003144 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e138      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e6:	4b46      	ldr	r3, [pc, #280]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0ed      	beq.n	80061d0 <HAL_RCC_OscConfig+0x388>
 80061f4:	e015      	b.n	8006222 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f6:	f7fc ffa5 	bl	8003144 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061fc:	e00a      	b.n	8006214 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fc ffa1 	bl	8003144 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e121      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006214:	4b3a      	ldr	r3, [pc, #232]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1ed      	bne.n	80061fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006222:	7ffb      	ldrb	r3, [r7, #31]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006228:	4b35      	ldr	r3, [pc, #212]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	4a34      	ldr	r2, [pc, #208]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800622e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006232:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03c      	beq.n	80062ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01c      	beq.n	8006282 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006248:	4b2d      	ldr	r3, [pc, #180]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800624a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800624e:	4a2c      	ldr	r2, [pc, #176]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006258:	f7fc ff74 	bl	8003144 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006260:	f7fc ff70 	bl	8003144 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0f2      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006272:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0ef      	beq.n	8006260 <HAL_RCC_OscConfig+0x418>
 8006280:	e01b      	b.n	80062ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006282:	4b1f      	ldr	r3, [pc, #124]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fc ff57 	bl	8003144 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800629a:	f7fc ff53 	bl	8003144 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0d5      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062ac:	4b14      	ldr	r3, [pc, #80]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ef      	bne.n	800629a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80c9 	beq.w	8006456 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 030c 	and.w	r3, r3, #12
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	f000 8083 	beq.w	80063d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d15e      	bne.n	8006398 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a08      	ldr	r2, [pc, #32]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fc ff2d 	bl	8003144 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ec:	e00c      	b.n	8006308 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ee:	f7fc ff29 	bl	8003144 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d905      	bls.n	8006308 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e0ab      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
 8006300:	40021000 	.word	0x40021000
 8006304:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	4b55      	ldr	r3, [pc, #340]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ec      	bne.n	80062ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006314:	4b52      	ldr	r3, [pc, #328]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	4b52      	ldr	r3, [pc, #328]	@ (8006464 <HAL_RCC_OscConfig+0x61c>)
 800631a:	4013      	ands	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6a11      	ldr	r1, [r2, #32]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006324:	3a01      	subs	r2, #1
 8006326:	0112      	lsls	r2, r2, #4
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800632e:	0212      	lsls	r2, r2, #8
 8006330:	4311      	orrs	r1, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006336:	0852      	lsrs	r2, r2, #1
 8006338:	3a01      	subs	r2, #1
 800633a:	0552      	lsls	r2, r2, #21
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006342:	0852      	lsrs	r2, r2, #1
 8006344:	3a01      	subs	r2, #1
 8006346:	0652      	lsls	r2, r2, #25
 8006348:	4311      	orrs	r1, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800634e:	06d2      	lsls	r2, r2, #27
 8006350:	430a      	orrs	r2, r1
 8006352:	4943      	ldr	r1, [pc, #268]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 8006354:	4313      	orrs	r3, r2
 8006356:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006358:	4b41      	ldr	r3, [pc, #260]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a40      	ldr	r2, [pc, #256]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006364:	4b3e      	ldr	r3, [pc, #248]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4a3d      	ldr	r2, [pc, #244]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800636a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800636e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fc fee8 	bl	8003144 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006378:	f7fc fee4 	bl	8003144 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e066      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638a:	4b35      	ldr	r3, [pc, #212]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x530>
 8006396:	e05e      	b.n	8006456 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006398:	4b31      	ldr	r3, [pc, #196]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a30      	ldr	r2, [pc, #192]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800639e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fc fece 	bl	8003144 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fc feca 	bl	8003144 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e04c      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063be:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063ca:	4b25      	ldr	r3, [pc, #148]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	4924      	ldr	r1, [pc, #144]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063d0:	4b25      	ldr	r3, [pc, #148]	@ (8006468 <HAL_RCC_OscConfig+0x620>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	60cb      	str	r3, [r1, #12]
 80063d6:	e03e      	b.n	8006456 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e039      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f003 0203 	and.w	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d12c      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	3b01      	subs	r3, #1
 8006404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	429a      	cmp	r2, r3
 8006408:	d123      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d11b      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d113      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d109      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	3b01      	subs	r3, #1
 800644c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d001      	beq.n	8006456 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40021000 	.word	0x40021000
 8006464:	019f800c 	.word	0x019f800c
 8006468:	feeefffc 	.word	0xfeeefffc

0800646c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e11e      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006484:	4b91      	ldr	r3, [pc, #580]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d910      	bls.n	80064b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b8e      	ldr	r3, [pc, #568]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 020f 	bic.w	r2, r3, #15
 800649a:	498c      	ldr	r1, [pc, #560]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a2:	4b8a      	ldr	r3, [pc, #552]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e106      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d073      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d129      	bne.n	800651c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c8:	4b81      	ldr	r3, [pc, #516]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0f4      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064d8:	f000 f9d0 	bl	800687c <RCC_GetSysClockFreqFromPLLSource>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4a7c      	ldr	r2, [pc, #496]	@ (80066d4 <HAL_RCC_ClockConfig+0x268>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d93f      	bls.n	8006566 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064e6:	4b7a      	ldr	r3, [pc, #488]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d033      	beq.n	8006566 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12f      	bne.n	8006566 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006506:	4b72      	ldr	r3, [pc, #456]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800650e:	4a70      	ldr	r2, [pc, #448]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006514:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e024      	b.n	8006566 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d107      	bne.n	8006534 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006524:	4b6a      	ldr	r3, [pc, #424]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0c6      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006534:	4b66      	ldr	r3, [pc, #408]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0be      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006544:	f000 f8ce 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 8006548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4a61      	ldr	r2, [pc, #388]	@ (80066d4 <HAL_RCC_ClockConfig+0x268>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d909      	bls.n	8006566 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006552:	4b5f      	ldr	r3, [pc, #380]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800655a:	4a5d      	ldr	r2, [pc, #372]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 800655c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006560:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006562:	2380      	movs	r3, #128	@ 0x80
 8006564:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006566:	4b5a      	ldr	r3, [pc, #360]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 0203 	bic.w	r2, r3, #3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4957      	ldr	r1, [pc, #348]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006578:	f7fc fde4 	bl	8003144 <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657e:	e00a      	b.n	8006596 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006580:	f7fc fde0 	bl	8003144 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e095      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006596:	4b4e      	ldr	r3, [pc, #312]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 020c 	and.w	r2, r3, #12
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1eb      	bne.n	8006580 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d023      	beq.n	80065fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4a42      	ldr	r2, [pc, #264]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065d8:	4b3d      	ldr	r3, [pc, #244]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065e0:	4a3b      	ldr	r2, [pc, #236]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e8:	4b39      	ldr	r3, [pc, #228]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4936      	ldr	r1, [pc, #216]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	608b      	str	r3, [r1, #8]
 80065fa:	e008      	b.n	800660e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b80      	cmp	r3, #128	@ 0x80
 8006600:	d105      	bne.n	800660e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006602:	4b33      	ldr	r3, [pc, #204]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	4a32      	ldr	r2, [pc, #200]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800660c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800660e:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d21d      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661c:	4b2b      	ldr	r3, [pc, #172]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 020f 	bic.w	r2, r3, #15
 8006624:	4929      	ldr	r1, [pc, #164]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800662c:	f7fc fd8a 	bl	8003144 <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006632:	e00a      	b.n	800664a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006634:	f7fc fd86 	bl	8003144 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e03b      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664a:	4b20      	ldr	r3, [pc, #128]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d1ed      	bne.n	8006634 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4917      	ldr	r1, [pc, #92]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006682:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	490f      	ldr	r1, [pc, #60]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006696:	f000 f825 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490c      	ldr	r1, [pc, #48]	@ (80066d8 <HAL_RCC_ClockConfig+0x26c>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	4a0a      	ldr	r2, [pc, #40]	@ (80066dc <HAL_RCC_ClockConfig+0x270>)
 80066b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <HAL_RCC_ClockConfig+0x274>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fa ff38 	bl	8001530 <HAL_InitTick>
 80066c0:	4603      	mov	r3, r0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40022000 	.word	0x40022000
 80066d0:	40021000 	.word	0x40021000
 80066d4:	04c4b400 	.word	0x04c4b400
 80066d8:	0800c0f4 	.word	0x0800c0f4
 80066dc:	20000000 	.word	0x20000000
 80066e0:	2000068c 	.word	0x2000068c

080066e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066ea:	4b2c      	ldr	r3, [pc, #176]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 030c 	and.w	r3, r3, #12
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d102      	bne.n	80066fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066f6:	4b2a      	ldr	r3, [pc, #168]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	e047      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066fc:	4b27      	ldr	r3, [pc, #156]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b08      	cmp	r3, #8
 8006706:	d102      	bne.n	800670e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006708:	4b26      	ldr	r3, [pc, #152]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	e03e      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800670e:	4b23      	ldr	r3, [pc, #140]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
 8006716:	2b0c      	cmp	r3, #12
 8006718:	d136      	bne.n	8006788 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800671a:	4b20      	ldr	r3, [pc, #128]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006724:	4b1d      	ldr	r3, [pc, #116]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	3301      	adds	r3, #1
 8006730:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d10c      	bne.n	8006752 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006738:	4a1a      	ldr	r2, [pc, #104]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	4a16      	ldr	r2, [pc, #88]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006742:	68d2      	ldr	r2, [r2, #12]
 8006744:	0a12      	lsrs	r2, r2, #8
 8006746:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	617b      	str	r3, [r7, #20]
      break;
 8006750:	e00c      	b.n	800676c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006752:	4a13      	ldr	r2, [pc, #76]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	fbb2 f3f3 	udiv	r3, r2, r3
 800675a:	4a10      	ldr	r2, [pc, #64]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 800675c:	68d2      	ldr	r2, [r2, #12]
 800675e:	0a12      	lsrs	r2, r2, #8
 8006760:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
      break;
 800676a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800676c:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <HAL_RCC_GetSysClockFreq+0xb8>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	0e5b      	lsrs	r3, r3, #25
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	3301      	adds	r3, #1
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	fbb2 f3f3 	udiv	r3, r2, r3
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	e001      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800678c:	693b      	ldr	r3, [r7, #16]
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000
 80067a0:	00f42400 	.word	0x00f42400
 80067a4:	016e3600 	.word	0x016e3600

080067a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067ac:	4b03      	ldr	r3, [pc, #12]	@ (80067bc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000000 	.word	0x20000000

080067c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067c4:	f7ff fff0 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	4904      	ldr	r1, [pc, #16]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067d6:	5ccb      	ldrb	r3, [r1, r3]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40021000 	.word	0x40021000
 80067e8:	0800c104 	.word	0x0800c104

080067ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067f0:	f7ff ffda 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	0adb      	lsrs	r3, r3, #11
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	4904      	ldr	r1, [pc, #16]	@ (8006814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006802:	5ccb      	ldrb	r3, [r1, r3]
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000
 8006814:	0800c104 	.word	0x0800c104

08006818 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	220f      	movs	r2, #15
 8006826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006828:	4b12      	ldr	r3, [pc, #72]	@ (8006874 <HAL_RCC_GetClockConfig+0x5c>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0203 	and.w	r2, r3, #3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006834:	4b0f      	ldr	r3, [pc, #60]	@ (8006874 <HAL_RCC_GetClockConfig+0x5c>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006840:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <HAL_RCC_GetClockConfig+0x5c>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800684c:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <HAL_RCC_GetClockConfig+0x5c>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	08db      	lsrs	r3, r3, #3
 8006852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800685a:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <HAL_RCC_GetClockConfig+0x60>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	601a      	str	r2, [r3, #0]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40021000 	.word	0x40021000
 8006878:	40022000 	.word	0x40022000

0800687c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006882:	4b1e      	ldr	r3, [pc, #120]	@ (80068fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800688c:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d10c      	bne.n	80068ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068a0:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a8:	4a14      	ldr	r2, [pc, #80]	@ (80068fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068aa:	68d2      	ldr	r2, [r2, #12]
 80068ac:	0a12      	lsrs	r2, r2, #8
 80068ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	617b      	str	r3, [r7, #20]
    break;
 80068b8:	e00c      	b.n	80068d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068ba:	4a12      	ldr	r2, [pc, #72]	@ (8006904 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	4a0e      	ldr	r2, [pc, #56]	@ (80068fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068c4:	68d2      	ldr	r2, [r2, #12]
 80068c6:	0a12      	lsrs	r2, r2, #8
 80068c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	617b      	str	r3, [r7, #20]
    break;
 80068d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068d4:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	0e5b      	lsrs	r3, r3, #25
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	3301      	adds	r3, #1
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80068ee:	687b      	ldr	r3, [r7, #4]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40021000 	.word	0x40021000
 8006900:	016e3600 	.word	0x016e3600
 8006904:	00f42400 	.word	0x00f42400

08006908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006910:	2300      	movs	r3, #0
 8006912:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006914:	2300      	movs	r3, #0
 8006916:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8098 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006926:	2300      	movs	r3, #0
 8006928:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692a:	4b43      	ldr	r3, [pc, #268]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006936:	4b40      	ldr	r3, [pc, #256]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6593      	str	r3, [r2, #88]	@ 0x58
 8006942:	4b3d      	ldr	r3, [pc, #244]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800694e:	2301      	movs	r3, #1
 8006950:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006952:	4b3a      	ldr	r3, [pc, #232]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a39      	ldr	r2, [pc, #228]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800695c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800695e:	f7fc fbf1 	bl	8003144 <HAL_GetTick>
 8006962:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006964:	e009      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006966:	f7fc fbed 	bl	8003144 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d902      	bls.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	74fb      	strb	r3, [r7, #19]
        break;
 8006978:	e005      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800697a:	4b30      	ldr	r3, [pc, #192]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ef      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006986:	7cfb      	ldrb	r3, [r7, #19]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d159      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800698c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006996:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01e      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d019      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069a8:	4b23      	ldr	r3, [pc, #140]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069b4:	4b20      	ldr	r3, [pc, #128]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069d4:	4a18      	ldr	r2, [pc, #96]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d016      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e6:	f7fc fbad 	bl	8003144 <HAL_GetTick>
 80069ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ec:	e00b      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fc fba9 	bl	8003144 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d902      	bls.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	74fb      	strb	r3, [r7, #19]
            break;
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a06:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0ec      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a14:	7cfb      	ldrb	r3, [r7, #19]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a1a:	4b07      	ldr	r3, [pc, #28]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a28:	4903      	ldr	r1, [pc, #12]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006a30:	e008      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a32:	7cfb      	ldrb	r3, [r7, #19]
 8006a34:	74bb      	strb	r3, [r7, #18]
 8006a36:	e005      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a40:	7cfb      	ldrb	r3, [r7, #19]
 8006a42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a44:	7c7b      	ldrb	r3, [r7, #17]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d105      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a4a:	4ba6      	ldr	r3, [pc, #664]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4e:	4aa5      	ldr	r2, [pc, #660]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a62:	4ba0      	ldr	r3, [pc, #640]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a68:	f023 0203 	bic.w	r2, r3, #3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	499c      	ldr	r1, [pc, #624]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a84:	4b97      	ldr	r3, [pc, #604]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8a:	f023 020c 	bic.w	r2, r3, #12
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	4994      	ldr	r1, [pc, #592]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	498b      	ldr	r1, [pc, #556]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ac8:	4b86      	ldr	r3, [pc, #536]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ace:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	4983      	ldr	r1, [pc, #524]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aea:	4b7e      	ldr	r3, [pc, #504]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	497a      	ldr	r1, [pc, #488]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b0c:	4b75      	ldr	r3, [pc, #468]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	4972      	ldr	r1, [pc, #456]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4969      	ldr	r1, [pc, #420]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b50:	4b64      	ldr	r3, [pc, #400]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	4961      	ldr	r1, [pc, #388]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b72:	4b5c      	ldr	r3, [pc, #368]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	4958      	ldr	r1, [pc, #352]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b94:	4b53      	ldr	r3, [pc, #332]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba2:	4950      	ldr	r1, [pc, #320]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bbe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bcc:	4b45      	ldr	r3, [pc, #276]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	4942      	ldr	r1, [pc, #264]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bea:	d105      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c04:	4b37      	ldr	r3, [pc, #220]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c12:	4934      	ldr	r1, [pc, #208]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a2e      	ldr	r2, [pc, #184]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c3c:	4b29      	ldr	r3, [pc, #164]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4a:	4926      	ldr	r1, [pc, #152]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c5a:	d105      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c5c:	4b21      	ldr	r3, [pc, #132]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4a20      	ldr	r2, [pc, #128]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d015      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	4918      	ldr	r1, [pc, #96]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c94:	4b13      	ldr	r3, [pc, #76]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	4a12      	ldr	r2, [pc, #72]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d015      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cba:	490a      	ldr	r1, [pc, #40]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cca:	d105      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4a04      	ldr	r2, [pc, #16]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40021000 	.word	0x40021000

08006ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e049      	b.n	8006d8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f841 	bl	8006d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f000 fdc0 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d001      	beq.n	8006dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e042      	b.n	8006e4a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a21      	ldr	r2, [pc, #132]	@ (8006e58 <HAL_TIM_Base_Start+0xac>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d018      	beq.n	8006e08 <HAL_TIM_Base_Start+0x5c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	d013      	beq.n	8006e08 <HAL_TIM_Base_Start+0x5c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e5c <HAL_TIM_Base_Start+0xb0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00e      	beq.n	8006e08 <HAL_TIM_Base_Start+0x5c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1c      	ldr	r2, [pc, #112]	@ (8006e60 <HAL_TIM_Base_Start+0xb4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d009      	beq.n	8006e08 <HAL_TIM_Base_Start+0x5c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e64 <HAL_TIM_Base_Start+0xb8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d004      	beq.n	8006e08 <HAL_TIM_Base_Start+0x5c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a19      	ldr	r2, [pc, #100]	@ (8006e68 <HAL_TIM_Base_Start+0xbc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d115      	bne.n	8006e34 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	4b17      	ldr	r3, [pc, #92]	@ (8006e6c <HAL_TIM_Base_Start+0xc0>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b06      	cmp	r3, #6
 8006e18:	d015      	beq.n	8006e46 <HAL_TIM_Base_Start+0x9a>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e20:	d011      	beq.n	8006e46 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e32:	e008      	b.n	8006e46 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e000      	b.n	8006e48 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40000400 	.word	0x40000400
 8006e60:	40000800 	.word	0x40000800
 8006e64:	40013400 	.word	0x40013400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	00010007 	.word	0x00010007

08006e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d001      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e04a      	b.n	8006f1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a21      	ldr	r2, [pc, #132]	@ (8006f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x6c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb2:	d013      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x6c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x6c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x6c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x6c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a19      	ldr	r2, [pc, #100]	@ (8006f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d115      	bne.n	8006f08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	4b17      	ldr	r3, [pc, #92]	@ (8006f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d015      	beq.n	8006f1a <HAL_TIM_Base_Start_IT+0xaa>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef4:	d011      	beq.n	8006f1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f06:	e008      	b.n	8006f1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	e000      	b.n	8006f1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40013400 	.word	0x40013400
 8006f3c:	40014000 	.word	0x40014000
 8006f40:	00010007 	.word	0x00010007

08006f44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e049      	b.n	8006fea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fa fcea 	bl	8001944 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f000 fc92 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e049      	b.n	8007098 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fa fc6d 	bl	80018f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f000 fc3b 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <HAL_TIM_PWM_Start+0x24>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e03c      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d109      	bne.n	80070de <HAL_TIM_PWM_Start+0x3e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	bf14      	ite	ne
 80070d6:	2301      	movne	r3, #1
 80070d8:	2300      	moveq	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	e02f      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d109      	bne.n	80070f8 <HAL_TIM_PWM_Start+0x58>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	bf14      	ite	ne
 80070f0:	2301      	movne	r3, #1
 80070f2:	2300      	moveq	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	e022      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b0c      	cmp	r3, #12
 80070fc:	d109      	bne.n	8007112 <HAL_TIM_PWM_Start+0x72>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	bf14      	ite	ne
 800710a:	2301      	movne	r3, #1
 800710c:	2300      	moveq	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	e015      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b10      	cmp	r3, #16
 8007116:	d109      	bne.n	800712c <HAL_TIM_PWM_Start+0x8c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	e008      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e097      	b.n	8007276 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <HAL_TIM_PWM_Start+0xb6>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007154:	e023      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d104      	bne.n	8007166 <HAL_TIM_PWM_Start+0xc6>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007164:	e01b      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d104      	bne.n	8007176 <HAL_TIM_PWM_Start+0xd6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007174:	e013      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b0c      	cmp	r3, #12
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Start+0xe6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007184:	e00b      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b10      	cmp	r3, #16
 800718a:	d104      	bne.n	8007196 <HAL_TIM_PWM_Start+0xf6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007194:	e003      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 ff12 	bl	8007fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a33      	ldr	r2, [pc, #204]	@ (8007280 <HAL_TIM_PWM_Start+0x1e0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a32      	ldr	r2, [pc, #200]	@ (8007284 <HAL_TIM_PWM_Start+0x1e4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a30      	ldr	r2, [pc, #192]	@ (8007288 <HAL_TIM_PWM_Start+0x1e8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2f      	ldr	r2, [pc, #188]	@ (800728c <HAL_TIM_PWM_Start+0x1ec>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007290 <HAL_TIM_PWM_Start+0x1f0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_PWM_Start+0x142>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <HAL_TIM_PWM_Start+0x144>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a20      	ldr	r2, [pc, #128]	@ (8007280 <HAL_TIM_PWM_Start+0x1e0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_TIM_PWM_Start+0x194>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720a:	d013      	beq.n	8007234 <HAL_TIM_PWM_Start+0x194>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a20      	ldr	r2, [pc, #128]	@ (8007294 <HAL_TIM_PWM_Start+0x1f4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_TIM_PWM_Start+0x194>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1f      	ldr	r2, [pc, #124]	@ (8007298 <HAL_TIM_PWM_Start+0x1f8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_TIM_PWM_Start+0x194>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a17      	ldr	r2, [pc, #92]	@ (8007284 <HAL_TIM_PWM_Start+0x1e4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIM_PWM_Start+0x194>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a16      	ldr	r2, [pc, #88]	@ (8007288 <HAL_TIM_PWM_Start+0x1e8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d115      	bne.n	8007260 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	4b18      	ldr	r3, [pc, #96]	@ (800729c <HAL_TIM_PWM_Start+0x1fc>)
 800723c:	4013      	ands	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b06      	cmp	r3, #6
 8007244:	d015      	beq.n	8007272 <HAL_TIM_PWM_Start+0x1d2>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800724c:	d011      	beq.n	8007272 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0201 	orr.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725e:	e008      	b.n	8007272 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e000      	b.n	8007274 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40012c00 	.word	0x40012c00
 8007284:	40013400 	.word	0x40013400
 8007288:	40014000 	.word	0x40014000
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800
 8007294:	40000400 	.word	0x40000400
 8007298:	40000800 	.word	0x40000800
 800729c:	00010007 	.word	0x00010007

080072a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d020      	beq.n	8007304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01b      	beq.n	8007304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f06f 0202 	mvn.w	r2, #2
 80072d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fac0 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 80072f0:	e005      	b.n	80072fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fab2 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fac3 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d020      	beq.n	8007350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01b      	beq.n	8007350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0204 	mvn.w	r2, #4
 8007320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa9a 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 800733c:	e005      	b.n	800734a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa8c 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa9d 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d020      	beq.n	800739c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01b      	beq.n	800739c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0208 	mvn.w	r2, #8
 800736c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2204      	movs	r2, #4
 8007372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa74 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 8007388:	e005      	b.n	8007396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa66 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa77 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d020      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01b      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0210 	mvn.w	r2, #16
 80073b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2208      	movs	r2, #8
 80073be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa4e 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 80073d4:	e005      	b.n	80073e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa40 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa51 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00c      	beq.n	800740c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0201 	mvn.w	r2, #1
 8007404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fa f84e 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007412:	2b00      	cmp	r3, #0
 8007414:	d104      	bne.n	8007420 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 ffd0 	bl	80083da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ffc8 	bl	80083ee <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800747a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa0b 	bl	8007898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f06f 0220 	mvn.w	r2, #32
 800749e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 ff90 	bl	80083c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 ff9c 	bl	8008402 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80074e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff94 	bl	8008416 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800750a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 ff8c 	bl	800842a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 ff84 	bl	800843e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_TIM_OC_ConfigChannel+0x1e>
 800755a:	2302      	movs	r3, #2
 800755c:	e066      	b.n	800762c <HAL_TIM_OC_ConfigChannel+0xec>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b14      	cmp	r3, #20
 800756a:	d857      	bhi.n	800761c <HAL_TIM_OC_ConfigChannel+0xdc>
 800756c:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <HAL_TIM_OC_ConfigChannel+0x34>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	080075c9 	.word	0x080075c9
 8007578:	0800761d 	.word	0x0800761d
 800757c:	0800761d 	.word	0x0800761d
 8007580:	0800761d 	.word	0x0800761d
 8007584:	080075d7 	.word	0x080075d7
 8007588:	0800761d 	.word	0x0800761d
 800758c:	0800761d 	.word	0x0800761d
 8007590:	0800761d 	.word	0x0800761d
 8007594:	080075e5 	.word	0x080075e5
 8007598:	0800761d 	.word	0x0800761d
 800759c:	0800761d 	.word	0x0800761d
 80075a0:	0800761d 	.word	0x0800761d
 80075a4:	080075f3 	.word	0x080075f3
 80075a8:	0800761d 	.word	0x0800761d
 80075ac:	0800761d 	.word	0x0800761d
 80075b0:	0800761d 	.word	0x0800761d
 80075b4:	08007601 	.word	0x08007601
 80075b8:	0800761d 	.word	0x0800761d
 80075bc:	0800761d 	.word	0x0800761d
 80075c0:	0800761d 	.word	0x0800761d
 80075c4:	0800760f 	.word	0x0800760f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fa08 	bl	80079e4 <TIM_OC1_SetConfig>
      break;
 80075d4:	e025      	b.n	8007622 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fa91 	bl	8007b04 <TIM_OC2_SetConfig>
      break;
 80075e2:	e01e      	b.n	8007622 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb14 	bl	8007c18 <TIM_OC3_SetConfig>
      break;
 80075f0:	e017      	b.n	8007622 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fb95 	bl	8007d28 <TIM_OC4_SetConfig>
      break;
 80075fe:	e010      	b.n	8007622 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fc18 	bl	8007e3c <TIM_OC5_SetConfig>
      break;
 800760c:	e009      	b.n	8007622 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fc75 	bl	8007f04 <TIM_OC6_SetConfig>
      break;
 800761a:	e002      	b.n	8007622 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
      break;
 8007620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800762a:	7dfb      	ldrb	r3, [r7, #23]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800764e:	2302      	movs	r3, #2
 8007650:	e0ff      	b.n	8007852 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b14      	cmp	r3, #20
 800765e:	f200 80f0 	bhi.w	8007842 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007662:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	080076bd 	.word	0x080076bd
 800766c:	08007843 	.word	0x08007843
 8007670:	08007843 	.word	0x08007843
 8007674:	08007843 	.word	0x08007843
 8007678:	080076fd 	.word	0x080076fd
 800767c:	08007843 	.word	0x08007843
 8007680:	08007843 	.word	0x08007843
 8007684:	08007843 	.word	0x08007843
 8007688:	0800773f 	.word	0x0800773f
 800768c:	08007843 	.word	0x08007843
 8007690:	08007843 	.word	0x08007843
 8007694:	08007843 	.word	0x08007843
 8007698:	0800777f 	.word	0x0800777f
 800769c:	08007843 	.word	0x08007843
 80076a0:	08007843 	.word	0x08007843
 80076a4:	08007843 	.word	0x08007843
 80076a8:	080077c1 	.word	0x080077c1
 80076ac:	08007843 	.word	0x08007843
 80076b0:	08007843 	.word	0x08007843
 80076b4:	08007843 	.word	0x08007843
 80076b8:	08007801 	.word	0x08007801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 f98e 	bl	80079e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0208 	orr.w	r2, r2, #8
 80076d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0204 	bic.w	r2, r2, #4
 80076e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6999      	ldr	r1, [r3, #24]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	619a      	str	r2, [r3, #24]
      break;
 80076fa:	e0a5      	b.n	8007848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f9fe 	bl	8007b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6999      	ldr	r1, [r3, #24]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	021a      	lsls	r2, r3, #8
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	619a      	str	r2, [r3, #24]
      break;
 800773c:	e084      	b.n	8007848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fa67 	bl	8007c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0208 	orr.w	r2, r2, #8
 8007758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0204 	bic.w	r2, r2, #4
 8007768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69d9      	ldr	r1, [r3, #28]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	61da      	str	r2, [r3, #28]
      break;
 800777c:	e064      	b.n	8007848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 facf 	bl	8007d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69d9      	ldr	r1, [r3, #28]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	021a      	lsls	r2, r3, #8
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	61da      	str	r2, [r3, #28]
      break;
 80077be:	e043      	b.n	8007848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fb38 	bl	8007e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0208 	orr.w	r2, r2, #8
 80077da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0204 	bic.w	r2, r2, #4
 80077ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	691a      	ldr	r2, [r3, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077fe:	e023      	b.n	8007848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fb7c 	bl	8007f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800781a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800782a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	021a      	lsls	r2, r3, #8
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007840:	e002      	b.n	8007848 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
      break;
 8007846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop

0800785c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a42      	ldr	r2, [pc, #264]	@ (80079c8 <TIM_Base_SetConfig+0x11c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00f      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ca:	d00b      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a3f      	ldr	r2, [pc, #252]	@ (80079cc <TIM_Base_SetConfig+0x120>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a3e      	ldr	r2, [pc, #248]	@ (80079d0 <TIM_Base_SetConfig+0x124>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_Base_SetConfig+0x38>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a3d      	ldr	r2, [pc, #244]	@ (80079d4 <TIM_Base_SetConfig+0x128>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d108      	bne.n	80078f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a33      	ldr	r2, [pc, #204]	@ (80079c8 <TIM_Base_SetConfig+0x11c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d01b      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007904:	d017      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a30      	ldr	r2, [pc, #192]	@ (80079cc <TIM_Base_SetConfig+0x120>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d013      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a2f      	ldr	r2, [pc, #188]	@ (80079d0 <TIM_Base_SetConfig+0x124>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00f      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a2e      	ldr	r2, [pc, #184]	@ (80079d4 <TIM_Base_SetConfig+0x128>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00b      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a2d      	ldr	r2, [pc, #180]	@ (80079d8 <TIM_Base_SetConfig+0x12c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d007      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a2c      	ldr	r2, [pc, #176]	@ (80079dc <TIM_Base_SetConfig+0x130>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d003      	beq.n	8007936 <TIM_Base_SetConfig+0x8a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2b      	ldr	r2, [pc, #172]	@ (80079e0 <TIM_Base_SetConfig+0x134>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d108      	bne.n	8007948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800793c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a16      	ldr	r2, [pc, #88]	@ (80079c8 <TIM_Base_SetConfig+0x11c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00f      	beq.n	8007994 <TIM_Base_SetConfig+0xe8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a17      	ldr	r2, [pc, #92]	@ (80079d4 <TIM_Base_SetConfig+0x128>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00b      	beq.n	8007994 <TIM_Base_SetConfig+0xe8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a16      	ldr	r2, [pc, #88]	@ (80079d8 <TIM_Base_SetConfig+0x12c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_Base_SetConfig+0xe8>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <TIM_Base_SetConfig+0x130>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_Base_SetConfig+0xe8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <TIM_Base_SetConfig+0x134>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d103      	bne.n	800799c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	691a      	ldr	r2, [r3, #16]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d105      	bne.n	80079ba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	611a      	str	r2, [r3, #16]
  }
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40000400 	.word	0x40000400
 80079d0:	40000800 	.word	0x40000800
 80079d4:	40013400 	.word	0x40013400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800

080079e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	f023 0201 	bic.w	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 0302 	bic.w	r3, r3, #2
 8007a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8007af0 <TIM_OC1_SetConfig+0x10c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00f      	beq.n	8007a64 <TIM_OC1_SetConfig+0x80>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a2b      	ldr	r2, [pc, #172]	@ (8007af4 <TIM_OC1_SetConfig+0x110>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_OC1_SetConfig+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8007af8 <TIM_OC1_SetConfig+0x114>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_OC1_SetConfig+0x80>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a29      	ldr	r2, [pc, #164]	@ (8007afc <TIM_OC1_SetConfig+0x118>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_OC1_SetConfig+0x80>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a28      	ldr	r2, [pc, #160]	@ (8007b00 <TIM_OC1_SetConfig+0x11c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d10c      	bne.n	8007a7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f023 0308 	bic.w	r3, r3, #8
 8007a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 0304 	bic.w	r3, r3, #4
 8007a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a1b      	ldr	r2, [pc, #108]	@ (8007af0 <TIM_OC1_SetConfig+0x10c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00f      	beq.n	8007aa6 <TIM_OC1_SetConfig+0xc2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a1a      	ldr	r2, [pc, #104]	@ (8007af4 <TIM_OC1_SetConfig+0x110>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00b      	beq.n	8007aa6 <TIM_OC1_SetConfig+0xc2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a19      	ldr	r2, [pc, #100]	@ (8007af8 <TIM_OC1_SetConfig+0x114>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <TIM_OC1_SetConfig+0xc2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <TIM_OC1_SetConfig+0x118>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d003      	beq.n	8007aa6 <TIM_OC1_SetConfig+0xc2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a17      	ldr	r2, [pc, #92]	@ (8007b00 <TIM_OC1_SetConfig+0x11c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d111      	bne.n	8007aca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40012c00 	.word	0x40012c00
 8007af4:	40013400 	.word	0x40013400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800

08007b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f023 0210 	bic.w	r2, r3, #16
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f023 0320 	bic.w	r3, r3, #32
 8007b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a28      	ldr	r2, [pc, #160]	@ (8007c04 <TIM_OC2_SetConfig+0x100>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC2_SetConfig+0x6c>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a27      	ldr	r2, [pc, #156]	@ (8007c08 <TIM_OC2_SetConfig+0x104>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10d      	bne.n	8007b8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007c04 <TIM_OC2_SetConfig+0x100>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00f      	beq.n	8007bb4 <TIM_OC2_SetConfig+0xb0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	@ (8007c08 <TIM_OC2_SetConfig+0x104>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00b      	beq.n	8007bb4 <TIM_OC2_SetConfig+0xb0>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8007c0c <TIM_OC2_SetConfig+0x108>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d007      	beq.n	8007bb4 <TIM_OC2_SetConfig+0xb0>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c10 <TIM_OC2_SetConfig+0x10c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d003      	beq.n	8007bb4 <TIM_OC2_SetConfig+0xb0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a19      	ldr	r2, [pc, #100]	@ (8007c14 <TIM_OC2_SetConfig+0x110>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d113      	bne.n	8007bdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	621a      	str	r2, [r3, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40013400 	.word	0x40013400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800

08007c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	021b      	lsls	r3, r3, #8
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a27      	ldr	r2, [pc, #156]	@ (8007d14 <TIM_OC3_SetConfig+0xfc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC3_SetConfig+0x6a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a26      	ldr	r2, [pc, #152]	@ (8007d18 <TIM_OC3_SetConfig+0x100>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10d      	bne.n	8007c9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d14 <TIM_OC3_SetConfig+0xfc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00f      	beq.n	8007cc6 <TIM_OC3_SetConfig+0xae>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <TIM_OC3_SetConfig+0x100>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00b      	beq.n	8007cc6 <TIM_OC3_SetConfig+0xae>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8007d1c <TIM_OC3_SetConfig+0x104>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d007      	beq.n	8007cc6 <TIM_OC3_SetConfig+0xae>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a19      	ldr	r2, [pc, #100]	@ (8007d20 <TIM_OC3_SetConfig+0x108>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d003      	beq.n	8007cc6 <TIM_OC3_SetConfig+0xae>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a18      	ldr	r2, [pc, #96]	@ (8007d24 <TIM_OC3_SetConfig+0x10c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d113      	bne.n	8007cee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	621a      	str	r2, [r3, #32]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	40013400 	.word	0x40013400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800

08007d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	031b      	lsls	r3, r3, #12
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a28      	ldr	r2, [pc, #160]	@ (8007e28 <TIM_OC4_SetConfig+0x100>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_OC4_SetConfig+0x6c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a27      	ldr	r2, [pc, #156]	@ (8007e2c <TIM_OC4_SetConfig+0x104>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d10d      	bne.n	8007db0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	031b      	lsls	r3, r3, #12
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	@ (8007e28 <TIM_OC4_SetConfig+0x100>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00f      	beq.n	8007dd8 <TIM_OC4_SetConfig+0xb0>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1c      	ldr	r2, [pc, #112]	@ (8007e2c <TIM_OC4_SetConfig+0x104>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00b      	beq.n	8007dd8 <TIM_OC4_SetConfig+0xb0>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007e30 <TIM_OC4_SetConfig+0x108>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d007      	beq.n	8007dd8 <TIM_OC4_SetConfig+0xb0>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1a      	ldr	r2, [pc, #104]	@ (8007e34 <TIM_OC4_SetConfig+0x10c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_OC4_SetConfig+0xb0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a19      	ldr	r2, [pc, #100]	@ (8007e38 <TIM_OC4_SetConfig+0x110>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d113      	bne.n	8007e00 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007de6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	019b      	lsls	r3, r3, #6
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	019b      	lsls	r3, r3, #6
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40013400 	.word	0x40013400
 8007e30:	40014000 	.word	0x40014000
 8007e34:	40014400 	.word	0x40014400
 8007e38:	40014800 	.word	0x40014800

08007e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a17      	ldr	r2, [pc, #92]	@ (8007ef0 <TIM_OC5_SetConfig+0xb4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00f      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x7a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a16      	ldr	r2, [pc, #88]	@ (8007ef4 <TIM_OC5_SetConfig+0xb8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x7a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a15      	ldr	r2, [pc, #84]	@ (8007ef8 <TIM_OC5_SetConfig+0xbc>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x7a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a14      	ldr	r2, [pc, #80]	@ (8007efc <TIM_OC5_SetConfig+0xc0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_OC5_SetConfig+0x7a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a13      	ldr	r2, [pc, #76]	@ (8007f00 <TIM_OC5_SetConfig+0xc4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d109      	bne.n	8007eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	621a      	str	r2, [r3, #32]
}
 8007ee4:	bf00      	nop
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40013400 	.word	0x40013400
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	40014800 	.word	0x40014800

08007f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	051b      	lsls	r3, r3, #20
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a18      	ldr	r2, [pc, #96]	@ (8007fbc <TIM_OC6_SetConfig+0xb8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00f      	beq.n	8007f80 <TIM_OC6_SetConfig+0x7c>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a17      	ldr	r2, [pc, #92]	@ (8007fc0 <TIM_OC6_SetConfig+0xbc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00b      	beq.n	8007f80 <TIM_OC6_SetConfig+0x7c>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a16      	ldr	r2, [pc, #88]	@ (8007fc4 <TIM_OC6_SetConfig+0xc0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d007      	beq.n	8007f80 <TIM_OC6_SetConfig+0x7c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a15      	ldr	r2, [pc, #84]	@ (8007fc8 <TIM_OC6_SetConfig+0xc4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d003      	beq.n	8007f80 <TIM_OC6_SetConfig+0x7c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a14      	ldr	r2, [pc, #80]	@ (8007fcc <TIM_OC6_SetConfig+0xc8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d109      	bne.n	8007f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	029b      	lsls	r3, r3, #10
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40014400 	.word	0x40014400
 8007fcc:	40014800 	.word	0x40014800

08007fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 031f 	and.w	r3, r3, #31
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1a      	ldr	r2, [r3, #32]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	401a      	ands	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1a      	ldr	r2, [r3, #32]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 031f 	and.w	r3, r3, #31
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	431a      	orrs	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	621a      	str	r2, [r3, #32]
}
 800800e:	bf00      	nop
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <HAL_TIMEx_PWMN_Start+0x24>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	bf14      	ite	ne
 8008038:	2301      	movne	r3, #1
 800803a:	2300      	moveq	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	e022      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0x6a>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b04      	cmp	r3, #4
 8008044:	d109      	bne.n	800805a <HAL_TIMEx_PWMN_Start+0x3e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b01      	cmp	r3, #1
 8008050:	bf14      	ite	ne
 8008052:	2301      	movne	r3, #1
 8008054:	2300      	moveq	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	e015      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0x6a>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d109      	bne.n	8008074 <HAL_TIMEx_PWMN_Start+0x58>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b01      	cmp	r3, #1
 800806a:	bf14      	ite	ne
 800806c:	2301      	movne	r3, #1
 800806e:	2300      	moveq	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	e008      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0x6a>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	bf14      	ite	ne
 8008080:	2301      	movne	r3, #1
 8008082:	2300      	moveq	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e069      	b.n	8008162 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <HAL_TIMEx_PWMN_Start+0x82>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800809c:	e013      	b.n	80080c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d104      	bne.n	80080ae <HAL_TIMEx_PWMN_Start+0x92>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080ac:	e00b      	b.n	80080c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d104      	bne.n	80080be <HAL_TIMEx_PWMN_Start+0xa2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080bc:	e003      	b.n	80080c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2204      	movs	r2, #4
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f9bf 	bl	8008452 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a20      	ldr	r2, [pc, #128]	@ (800816c <HAL_TIMEx_PWMN_Start+0x150>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d018      	beq.n	8008120 <HAL_TIMEx_PWMN_Start+0x104>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f6:	d013      	beq.n	8008120 <HAL_TIMEx_PWMN_Start+0x104>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008170 <HAL_TIMEx_PWMN_Start+0x154>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00e      	beq.n	8008120 <HAL_TIMEx_PWMN_Start+0x104>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1b      	ldr	r2, [pc, #108]	@ (8008174 <HAL_TIMEx_PWMN_Start+0x158>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d009      	beq.n	8008120 <HAL_TIMEx_PWMN_Start+0x104>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a19      	ldr	r2, [pc, #100]	@ (8008178 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d004      	beq.n	8008120 <HAL_TIMEx_PWMN_Start+0x104>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a18      	ldr	r2, [pc, #96]	@ (800817c <HAL_TIMEx_PWMN_Start+0x160>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d115      	bne.n	800814c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	4b16      	ldr	r3, [pc, #88]	@ (8008180 <HAL_TIMEx_PWMN_Start+0x164>)
 8008128:	4013      	ands	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b06      	cmp	r3, #6
 8008130:	d015      	beq.n	800815e <HAL_TIMEx_PWMN_Start+0x142>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008138:	d011      	beq.n	800815e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0201 	orr.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814a:	e008      	b.n	800815e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e000      	b.n	8008160 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40012c00 	.word	0x40012c00
 8008170:	40000400 	.word	0x40000400
 8008174:	40000800 	.word	0x40000800
 8008178:	40013400 	.word	0x40013400
 800817c:	40014000 	.word	0x40014000
 8008180:	00010007 	.word	0x00010007

08008184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e065      	b.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d108      	bne.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80081e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d018      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008212:	d013      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a18      	ldr	r2, [pc, #96]	@ (800827c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00e      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a17      	ldr	r2, [pc, #92]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d009      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a12      	ldr	r2, [pc, #72]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a13      	ldr	r2, [pc, #76]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d10c      	bne.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	4313      	orrs	r3, r2
 800824c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40012c00 	.word	0x40012c00
 8008278:	40013400 	.word	0x40013400
 800827c:	40000400 	.word	0x40000400
 8008280:	40000800 	.word	0x40000800
 8008284:	40014000 	.word	0x40014000

08008288 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e073      	b.n	800838c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a19      	ldr	r2, [pc, #100]	@ (8008398 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d004      	beq.n	8008340 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a18      	ldr	r2, [pc, #96]	@ (800839c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d11c      	bne.n	800837a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834a:	051b      	lsls	r3, r3, #20
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	40012c00 	.word	0x40012c00
 800839c:	40013400 	.word	0x40013400

080083a0 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80083b6:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	2204      	movs	r2, #4
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a1a      	ldr	r2, [r3, #32]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	43db      	mvns	r3, r3
 8008474:	401a      	ands	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1a      	ldr	r2, [r3, #32]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	fa01 f303 	lsl.w	r3, r1, r3
 800848a:	431a      	orrs	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	621a      	str	r2, [r3, #32]
}
 8008490:	bf00      	nop
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e042      	b.n	8008534 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f83b 	bl	800853c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2224      	movs	r2, #36	@ 0x24
 80084ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fafe 	bl	8008ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f82f 	bl	8008550 <UART_SetConfig>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e01b      	b.n	8008534 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800850a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800851a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fb7d 	bl	8008c2c <UART_CheckIdleState>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008554:	b08c      	sub	sp, #48	@ 0x30
 8008556:	af00      	add	r7, sp, #0
 8008558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	431a      	orrs	r2, r3
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	431a      	orrs	r2, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4313      	orrs	r3, r2
 8008576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	4bab      	ldr	r3, [pc, #684]	@ (800882c <UART_SetConfig+0x2dc>)
 8008580:	4013      	ands	r3, r2
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008588:	430b      	orrs	r3, r1
 800858a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4aa0      	ldr	r2, [pc, #640]	@ (8008830 <UART_SetConfig+0x2e0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d004      	beq.n	80085bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b8:	4313      	orrs	r3, r2
 80085ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80085c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085d0:	430b      	orrs	r3, r1
 80085d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	f023 010f 	bic.w	r1, r3, #15
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a91      	ldr	r2, [pc, #580]	@ (8008834 <UART_SetConfig+0x2e4>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d125      	bne.n	8008640 <UART_SetConfig+0xf0>
 80085f4:	4b90      	ldr	r3, [pc, #576]	@ (8008838 <UART_SetConfig+0x2e8>)
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d81a      	bhi.n	8008638 <UART_SetConfig+0xe8>
 8008602:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <UART_SetConfig+0xb8>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008619 	.word	0x08008619
 800860c:	08008629 	.word	0x08008629
 8008610:	08008621 	.word	0x08008621
 8008614:	08008631 	.word	0x08008631
 8008618:	2301      	movs	r3, #1
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861e:	e0d6      	b.n	80087ce <UART_SetConfig+0x27e>
 8008620:	2302      	movs	r3, #2
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008626:	e0d2      	b.n	80087ce <UART_SetConfig+0x27e>
 8008628:	2304      	movs	r3, #4
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800862e:	e0ce      	b.n	80087ce <UART_SetConfig+0x27e>
 8008630:	2308      	movs	r3, #8
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008636:	e0ca      	b.n	80087ce <UART_SetConfig+0x27e>
 8008638:	2310      	movs	r3, #16
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800863e:	e0c6      	b.n	80087ce <UART_SetConfig+0x27e>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a7d      	ldr	r2, [pc, #500]	@ (800883c <UART_SetConfig+0x2ec>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d138      	bne.n	80086bc <UART_SetConfig+0x16c>
 800864a:	4b7b      	ldr	r3, [pc, #492]	@ (8008838 <UART_SetConfig+0x2e8>)
 800864c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008650:	f003 030c 	and.w	r3, r3, #12
 8008654:	2b0c      	cmp	r3, #12
 8008656:	d82d      	bhi.n	80086b4 <UART_SetConfig+0x164>
 8008658:	a201      	add	r2, pc, #4	@ (adr r2, 8008660 <UART_SetConfig+0x110>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008695 	.word	0x08008695
 8008664:	080086b5 	.word	0x080086b5
 8008668:	080086b5 	.word	0x080086b5
 800866c:	080086b5 	.word	0x080086b5
 8008670:	080086a5 	.word	0x080086a5
 8008674:	080086b5 	.word	0x080086b5
 8008678:	080086b5 	.word	0x080086b5
 800867c:	080086b5 	.word	0x080086b5
 8008680:	0800869d 	.word	0x0800869d
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086b5 	.word	0x080086b5
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086ad 	.word	0x080086ad
 8008694:	2300      	movs	r3, #0
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800869a:	e098      	b.n	80087ce <UART_SetConfig+0x27e>
 800869c:	2302      	movs	r3, #2
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086a2:	e094      	b.n	80087ce <UART_SetConfig+0x27e>
 80086a4:	2304      	movs	r3, #4
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086aa:	e090      	b.n	80087ce <UART_SetConfig+0x27e>
 80086ac:	2308      	movs	r3, #8
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086b2:	e08c      	b.n	80087ce <UART_SetConfig+0x27e>
 80086b4:	2310      	movs	r3, #16
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ba:	e088      	b.n	80087ce <UART_SetConfig+0x27e>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a5f      	ldr	r2, [pc, #380]	@ (8008840 <UART_SetConfig+0x2f0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d125      	bne.n	8008712 <UART_SetConfig+0x1c2>
 80086c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008838 <UART_SetConfig+0x2e8>)
 80086c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086d0:	2b30      	cmp	r3, #48	@ 0x30
 80086d2:	d016      	beq.n	8008702 <UART_SetConfig+0x1b2>
 80086d4:	2b30      	cmp	r3, #48	@ 0x30
 80086d6:	d818      	bhi.n	800870a <UART_SetConfig+0x1ba>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d00a      	beq.n	80086f2 <UART_SetConfig+0x1a2>
 80086dc:	2b20      	cmp	r3, #32
 80086de:	d814      	bhi.n	800870a <UART_SetConfig+0x1ba>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <UART_SetConfig+0x19a>
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d008      	beq.n	80086fa <UART_SetConfig+0x1aa>
 80086e8:	e00f      	b.n	800870a <UART_SetConfig+0x1ba>
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f0:	e06d      	b.n	80087ce <UART_SetConfig+0x27e>
 80086f2:	2302      	movs	r3, #2
 80086f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f8:	e069      	b.n	80087ce <UART_SetConfig+0x27e>
 80086fa:	2304      	movs	r3, #4
 80086fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008700:	e065      	b.n	80087ce <UART_SetConfig+0x27e>
 8008702:	2308      	movs	r3, #8
 8008704:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008708:	e061      	b.n	80087ce <UART_SetConfig+0x27e>
 800870a:	2310      	movs	r3, #16
 800870c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008710:	e05d      	b.n	80087ce <UART_SetConfig+0x27e>
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a4b      	ldr	r2, [pc, #300]	@ (8008844 <UART_SetConfig+0x2f4>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d125      	bne.n	8008768 <UART_SetConfig+0x218>
 800871c:	4b46      	ldr	r3, [pc, #280]	@ (8008838 <UART_SetConfig+0x2e8>)
 800871e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008722:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008726:	2bc0      	cmp	r3, #192	@ 0xc0
 8008728:	d016      	beq.n	8008758 <UART_SetConfig+0x208>
 800872a:	2bc0      	cmp	r3, #192	@ 0xc0
 800872c:	d818      	bhi.n	8008760 <UART_SetConfig+0x210>
 800872e:	2b80      	cmp	r3, #128	@ 0x80
 8008730:	d00a      	beq.n	8008748 <UART_SetConfig+0x1f8>
 8008732:	2b80      	cmp	r3, #128	@ 0x80
 8008734:	d814      	bhi.n	8008760 <UART_SetConfig+0x210>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <UART_SetConfig+0x1f0>
 800873a:	2b40      	cmp	r3, #64	@ 0x40
 800873c:	d008      	beq.n	8008750 <UART_SetConfig+0x200>
 800873e:	e00f      	b.n	8008760 <UART_SetConfig+0x210>
 8008740:	2300      	movs	r3, #0
 8008742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008746:	e042      	b.n	80087ce <UART_SetConfig+0x27e>
 8008748:	2302      	movs	r3, #2
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874e:	e03e      	b.n	80087ce <UART_SetConfig+0x27e>
 8008750:	2304      	movs	r3, #4
 8008752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008756:	e03a      	b.n	80087ce <UART_SetConfig+0x27e>
 8008758:	2308      	movs	r3, #8
 800875a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875e:	e036      	b.n	80087ce <UART_SetConfig+0x27e>
 8008760:	2310      	movs	r3, #16
 8008762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008766:	e032      	b.n	80087ce <UART_SetConfig+0x27e>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a30      	ldr	r2, [pc, #192]	@ (8008830 <UART_SetConfig+0x2e0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d12a      	bne.n	80087c8 <UART_SetConfig+0x278>
 8008772:	4b31      	ldr	r3, [pc, #196]	@ (8008838 <UART_SetConfig+0x2e8>)
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800877c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008780:	d01a      	beq.n	80087b8 <UART_SetConfig+0x268>
 8008782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008786:	d81b      	bhi.n	80087c0 <UART_SetConfig+0x270>
 8008788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800878c:	d00c      	beq.n	80087a8 <UART_SetConfig+0x258>
 800878e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008792:	d815      	bhi.n	80087c0 <UART_SetConfig+0x270>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <UART_SetConfig+0x250>
 8008798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800879c:	d008      	beq.n	80087b0 <UART_SetConfig+0x260>
 800879e:	e00f      	b.n	80087c0 <UART_SetConfig+0x270>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a6:	e012      	b.n	80087ce <UART_SetConfig+0x27e>
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	e00e      	b.n	80087ce <UART_SetConfig+0x27e>
 80087b0:	2304      	movs	r3, #4
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e00a      	b.n	80087ce <UART_SetConfig+0x27e>
 80087b8:	2308      	movs	r3, #8
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e006      	b.n	80087ce <UART_SetConfig+0x27e>
 80087c0:	2310      	movs	r3, #16
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	e002      	b.n	80087ce <UART_SetConfig+0x27e>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a17      	ldr	r2, [pc, #92]	@ (8008830 <UART_SetConfig+0x2e0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	f040 80a8 	bne.w	800892a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d834      	bhi.n	800884c <UART_SetConfig+0x2fc>
 80087e2:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <UART_SetConfig+0x298>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	0800880d 	.word	0x0800880d
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	08008815 	.word	0x08008815
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	0800881b 	.word	0x0800881b
 80087fc:	0800884d 	.word	0x0800884d
 8008800:	0800884d 	.word	0x0800884d
 8008804:	0800884d 	.word	0x0800884d
 8008808:	08008823 	.word	0x08008823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800880c:	f7fd ffd8 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 8008810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008812:	e021      	b.n	8008858 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008814:	4b0c      	ldr	r3, [pc, #48]	@ (8008848 <UART_SetConfig+0x2f8>)
 8008816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008818:	e01e      	b.n	8008858 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800881a:	f7fd ff63 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 800881e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008820:	e01a      	b.n	8008858 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008828:	e016      	b.n	8008858 <UART_SetConfig+0x308>
 800882a:	bf00      	nop
 800882c:	cfff69f3 	.word	0xcfff69f3
 8008830:	40008000 	.word	0x40008000
 8008834:	40013800 	.word	0x40013800
 8008838:	40021000 	.word	0x40021000
 800883c:	40004400 	.word	0x40004400
 8008840:	40004800 	.word	0x40004800
 8008844:	40004c00 	.word	0x40004c00
 8008848:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800884c:	2300      	movs	r3, #0
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008856:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 812a 	beq.w	8008ab4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008864:	4a9e      	ldr	r2, [pc, #632]	@ (8008ae0 <UART_SetConfig+0x590>)
 8008866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800886a:	461a      	mov	r2, r3
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008872:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	4613      	mov	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	4413      	add	r3, r2
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	429a      	cmp	r2, r3
 8008882:	d305      	bcc.n	8008890 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	d903      	bls.n	8008898 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008896:	e10d      	b.n	8008ab4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	2200      	movs	r2, #0
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	60fa      	str	r2, [r7, #12]
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a4:	4a8e      	ldr	r2, [pc, #568]	@ (8008ae0 <UART_SetConfig+0x590>)
 80088a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2200      	movs	r2, #0
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088ba:	f7f8 f86f 	bl	800099c <__aeabi_uldivmod>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4610      	mov	r0, r2
 80088c4:	4619      	mov	r1, r3
 80088c6:	f04f 0200 	mov.w	r2, #0
 80088ca:	f04f 0300 	mov.w	r3, #0
 80088ce:	020b      	lsls	r3, r1, #8
 80088d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088d4:	0202      	lsls	r2, r0, #8
 80088d6:	6979      	ldr	r1, [r7, #20]
 80088d8:	6849      	ldr	r1, [r1, #4]
 80088da:	0849      	lsrs	r1, r1, #1
 80088dc:	2000      	movs	r0, #0
 80088de:	460c      	mov	r4, r1
 80088e0:	4605      	mov	r5, r0
 80088e2:	eb12 0804 	adds.w	r8, r2, r4
 80088e6:	eb43 0905 	adc.w	r9, r3, r5
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	469a      	mov	sl, r3
 80088f2:	4693      	mov	fp, r2
 80088f4:	4652      	mov	r2, sl
 80088f6:	465b      	mov	r3, fp
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f8 f84e 	bl	800099c <__aeabi_uldivmod>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4613      	mov	r3, r2
 8008906:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800890e:	d308      	bcc.n	8008922 <UART_SetConfig+0x3d2>
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008916:	d204      	bcs.n	8008922 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6a3a      	ldr	r2, [r7, #32]
 800891e:	60da      	str	r2, [r3, #12]
 8008920:	e0c8      	b.n	8008ab4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008928:	e0c4      	b.n	8008ab4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008932:	d167      	bne.n	8008a04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008934:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008938:	2b08      	cmp	r3, #8
 800893a:	d828      	bhi.n	800898e <UART_SetConfig+0x43e>
 800893c:	a201      	add	r2, pc, #4	@ (adr r2, 8008944 <UART_SetConfig+0x3f4>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008969 	.word	0x08008969
 8008948:	08008971 	.word	0x08008971
 800894c:	08008979 	.word	0x08008979
 8008950:	0800898f 	.word	0x0800898f
 8008954:	0800897f 	.word	0x0800897f
 8008958:	0800898f 	.word	0x0800898f
 800895c:	0800898f 	.word	0x0800898f
 8008960:	0800898f 	.word	0x0800898f
 8008964:	08008987 	.word	0x08008987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008968:	f7fd ff2a 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 800896c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800896e:	e014      	b.n	800899a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008970:	f7fd ff3c 	bl	80067ec <HAL_RCC_GetPCLK2Freq>
 8008974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008976:	e010      	b.n	800899a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008978:	4b5a      	ldr	r3, [pc, #360]	@ (8008ae4 <UART_SetConfig+0x594>)
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800897c:	e00d      	b.n	800899a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897e:	f7fd feb1 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 8008982:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008984:	e009      	b.n	800899a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800898a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800898c:	e005      	b.n	800899a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8089 	beq.w	8008ab4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a6:	4a4e      	ldr	r2, [pc, #312]	@ (8008ae0 <UART_SetConfig+0x590>)
 80089a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b4:	005a      	lsls	r2, r3, #1
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	441a      	add	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	2b0f      	cmp	r3, #15
 80089cc:	d916      	bls.n	80089fc <UART_SetConfig+0x4ac>
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d4:	d212      	bcs.n	80089fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f023 030f 	bic.w	r3, r3, #15
 80089de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	8bfb      	ldrh	r3, [r7, #30]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	8bfa      	ldrh	r2, [r7, #30]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	e05b      	b.n	8008ab4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a02:	e057      	b.n	8008ab4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d828      	bhi.n	8008a5e <UART_SetConfig+0x50e>
 8008a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a14 <UART_SetConfig+0x4c4>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a49 	.word	0x08008a49
 8008a20:	08008a5f 	.word	0x08008a5f
 8008a24:	08008a4f 	.word	0x08008a4f
 8008a28:	08008a5f 	.word	0x08008a5f
 8008a2c:	08008a5f 	.word	0x08008a5f
 8008a30:	08008a5f 	.word	0x08008a5f
 8008a34:	08008a57 	.word	0x08008a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7fd fec2 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 8008a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a3e:	e014      	b.n	8008a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a40:	f7fd fed4 	bl	80067ec <HAL_RCC_GetPCLK2Freq>
 8008a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a46:	e010      	b.n	8008a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a48:	4b26      	ldr	r3, [pc, #152]	@ (8008ae4 <UART_SetConfig+0x594>)
 8008a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a4c:	e00d      	b.n	8008a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4e:	f7fd fe49 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 8008a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a54:	e009      	b.n	8008a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a5c:	e005      	b.n	8008a6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a68:	bf00      	nop
    }

    if (pclk != 0U)
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d021      	beq.n	8008ab4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a74:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae0 <UART_SetConfig+0x590>)
 8008a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	441a      	add	r2, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d909      	bls.n	8008aae <UART_SetConfig+0x55e>
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aa0:	d205      	bcs.n	8008aae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60da      	str	r2, [r3, #12]
 8008aac:	e002      	b.n	8008ab4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2200      	movs	r2, #0
 8008ace:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	@ 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800c130 	.word	0x0800c130
 8008ae4:	00f42400 	.word	0x00f42400

08008ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5a:	f003 0304 	and.w	r3, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01a      	beq.n	8008bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be6:	d10a      	bne.n	8008bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	605a      	str	r2, [r3, #4]
  }
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b098      	sub	sp, #96	@ 0x60
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c3c:	f7fa fa82 	bl	8003144 <HAL_GetTick>
 8008c40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d12f      	bne.n	8008cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f88e 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d022      	beq.n	8008cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c90:	e841 2300 	strex	r3, r2, [r1]
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e6      	bne.n	8008c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e063      	b.n	8008d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0304 	and.w	r3, r3, #4
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d149      	bne.n	8008d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f857 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d03c      	beq.n	8008d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e6      	bne.n	8008cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2a:	61fa      	str	r2, [r7, #28]
 8008d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	617b      	str	r3, [r7, #20]
   return(result);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e5      	bne.n	8008d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e012      	b.n	8008d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3758      	adds	r7, #88	@ 0x58
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d90:	e04f      	b.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d04b      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9a:	f7fa f9d3 	bl	8003144 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d302      	bcc.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e04e      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d037      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b80      	cmp	r3, #128	@ 0x80
 8008dc6:	d034      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b40      	cmp	r3, #64	@ 0x40
 8008dcc:	d031      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d110      	bne.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2208      	movs	r2, #8
 8008de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f838 	bl	8008e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2208      	movs	r2, #8
 8008dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e029      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0c:	d111      	bne.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f81e 	bl	8008e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e00f      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	461a      	mov	r2, r3
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d0a0      	beq.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b095      	sub	sp, #84	@ 0x54
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e6      	bne.n	8008e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e3      	bne.n	8008e94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d118      	bne.n	8008f06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f023 0310 	bic.w	r3, r3, #16
 8008ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6979      	ldr	r1, [r7, #20]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	613b      	str	r3, [r7, #16]
   return(result);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e6      	bne.n	8008ed4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f1a:	bf00      	nop
 8008f1c:	3754      	adds	r7, #84	@ 0x54
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
	...

08008f28 <__NVIC_SetPriority>:
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	db0a      	blt.n	8008f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	490c      	ldr	r1, [pc, #48]	@ (8008f74 <__NVIC_SetPriority+0x4c>)
 8008f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f46:	0112      	lsls	r2, r2, #4
 8008f48:	b2d2      	uxtb	r2, r2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008f50:	e00a      	b.n	8008f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4908      	ldr	r1, [pc, #32]	@ (8008f78 <__NVIC_SetPriority+0x50>)
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	3b04      	subs	r3, #4
 8008f60:	0112      	lsls	r2, r2, #4
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	440b      	add	r3, r1
 8008f66:	761a      	strb	r2, [r3, #24]
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	e000e100 	.word	0xe000e100
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f80:	4b05      	ldr	r3, [pc, #20]	@ (8008f98 <SysTick_Handler+0x1c>)
 8008f82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f84:	f001 fe44 	bl	800ac10 <xTaskGetSchedulerState>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d001      	beq.n	8008f92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f8e:	f002 fc3b 	bl	800b808 <xPortSysTickHandler>
  }
}
 8008f92:	bf00      	nop
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	e000e010 	.word	0xe000e010

08008f9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f06f 0004 	mvn.w	r0, #4
 8008fa6:	f7ff ffbf 	bl	8008f28 <__NVIC_SetPriority>
#endif
}
 8008faa:	bf00      	nop
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb6:	f3ef 8305 	mrs	r3, IPSR
 8008fba:	603b      	str	r3, [r7, #0]
  return(result);
 8008fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fc2:	f06f 0305 	mvn.w	r3, #5
 8008fc6:	607b      	str	r3, [r7, #4]
 8008fc8:	e00c      	b.n	8008fe4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff4 <osKernelInitialize+0x44>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fd2:	4b08      	ldr	r3, [pc, #32]	@ (8008ff4 <osKernelInitialize+0x44>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	e002      	b.n	8008fe4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fe4:	687b      	ldr	r3, [r7, #4]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000d70 	.word	0x20000d70

08008ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ffe:	f3ef 8305 	mrs	r3, IPSR
 8009002:	603b      	str	r3, [r7, #0]
  return(result);
 8009004:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <osKernelStart+0x1a>
    stat = osErrorISR;
 800900a:	f06f 0305 	mvn.w	r3, #5
 800900e:	607b      	str	r3, [r7, #4]
 8009010:	e010      	b.n	8009034 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009012:	4b0b      	ldr	r3, [pc, #44]	@ (8009040 <osKernelStart+0x48>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d109      	bne.n	800902e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800901a:	f7ff ffbf 	bl	8008f9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800901e:	4b08      	ldr	r3, [pc, #32]	@ (8009040 <osKernelStart+0x48>)
 8009020:	2202      	movs	r2, #2
 8009022:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009024:	f001 f97e 	bl	800a324 <vTaskStartScheduler>
      stat = osOK;
 8009028:	2300      	movs	r3, #0
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	e002      	b.n	8009034 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009034:	687b      	ldr	r3, [r7, #4]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000d70 	.word	0x20000d70

08009044 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800904a:	f3ef 8305 	mrs	r3, IPSR
 800904e:	603b      	str	r3, [r7, #0]
  return(result);
 8009050:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009056:	f001 fa91 	bl	800a57c <xTaskGetTickCountFromISR>
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	e002      	b.n	8009064 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800905e:	f001 fa7d 	bl	800a55c <xTaskGetTickCount>
 8009062:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009064:	687b      	ldr	r3, [r7, #4]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800906e:	b580      	push	{r7, lr}
 8009070:	b08e      	sub	sp, #56	@ 0x38
 8009072:	af04      	add	r7, sp, #16
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800907e:	f3ef 8305 	mrs	r3, IPSR
 8009082:	617b      	str	r3, [r7, #20]
  return(result);
 8009084:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009086:	2b00      	cmp	r3, #0
 8009088:	d17e      	bne.n	8009188 <osThreadNew+0x11a>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d07b      	beq.n	8009188 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009090:	2380      	movs	r3, #128	@ 0x80
 8009092:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009094:	2318      	movs	r3, #24
 8009096:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009098:	2300      	movs	r3, #0
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800909c:	f04f 33ff 	mov.w	r3, #4294967295
 80090a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d045      	beq.n	8009134 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <osThreadNew+0x48>
        name = attr->name;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <osThreadNew+0x6e>
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	2b38      	cmp	r3, #56	@ 0x38
 80090ce:	d805      	bhi.n	80090dc <osThreadNew+0x6e>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <osThreadNew+0x72>
        return (NULL);
 80090dc:	2300      	movs	r3, #0
 80090de:	e054      	b.n	800918a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	089b      	lsrs	r3, r3, #2
 80090ee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00e      	beq.n	8009116 <osThreadNew+0xa8>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2ba7      	cmp	r3, #167	@ 0xa7
 80090fe:	d90a      	bls.n	8009116 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <osThreadNew+0xa8>
        mem = 1;
 8009110:	2301      	movs	r3, #1
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	e010      	b.n	8009138 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10c      	bne.n	8009138 <osThreadNew+0xca>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d108      	bne.n	8009138 <osThreadNew+0xca>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <osThreadNew+0xca>
          mem = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	e001      	b.n	8009138 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d110      	bne.n	8009160 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009146:	9202      	str	r2, [sp, #8]
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	6a3a      	ldr	r2, [r7, #32]
 8009152:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fe33 	bl	8009dc0 <xTaskCreateStatic>
 800915a:	4603      	mov	r3, r0
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	e013      	b.n	8009188 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d110      	bne.n	8009188 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	b29a      	uxth	r2, r3
 800916a:	f107 0310 	add.w	r3, r7, #16
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 fe81 	bl	8009e80 <xTaskCreate>
 800917e:	4603      	mov	r3, r0
 8009180:	2b01      	cmp	r3, #1
 8009182:	d001      	beq.n	8009188 <osThreadNew+0x11a>
            hTask = NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009188:	693b      	ldr	r3, [r7, #16]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3728      	adds	r7, #40	@ 0x28
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8009192:	b580      	push	{r7, lr}
 8009194:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009196:	2000      	movs	r0, #0
 8009198:	f000 ffd0 	bl	800a13c <vTaskDelete>
#endif
  for (;;);
 800919c:	bf00      	nop
 800919e:	e7fd      	b.n	800919c <osThreadExit+0xa>

080091a0 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a8:	f3ef 8305 	mrs	r3, IPSR
 80091ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80091ae:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <osDelayUntil+0x1c>
    stat = osErrorISR;
 80091b4:	f06f 0305 	mvn.w	r3, #5
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e019      	b.n	80091f0 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80091c0:	f001 f9cc 	bl	800a55c <xTaskGetTickCount>
 80091c4:	4603      	mov	r3, r0
 80091c6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <osDelayUntil+0x4a>
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	db06      	blt.n	80091ea <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80091dc:	f107 0308 	add.w	r3, r7, #8
 80091e0:	6939      	ldr	r1, [r7, #16]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 f81e 	bl	800a224 <vTaskDelayUntil>
 80091e8:	e002      	b.n	80091f0 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80091ea:	f06f 0303 	mvn.w	r3, #3
 80091ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80091f0:	697b      	ldr	r3, [r7, #20]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a07      	ldr	r2, [pc, #28]	@ (8009228 <vApplicationGetIdleTaskMemory+0x2c>)
 800920c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	4a06      	ldr	r2, [pc, #24]	@ (800922c <vApplicationGetIdleTaskMemory+0x30>)
 8009212:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2280      	movs	r2, #128	@ 0x80
 8009218:	601a      	str	r2, [r3, #0]
}
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20000d74 	.word	0x20000d74
 800922c:	20000e1c 	.word	0x20000e1c

08009230 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4a07      	ldr	r2, [pc, #28]	@ (800925c <vApplicationGetTimerTaskMemory+0x2c>)
 8009240:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4a06      	ldr	r2, [pc, #24]	@ (8009260 <vApplicationGetTimerTaskMemory+0x30>)
 8009246:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800924e:	601a      	str	r2, [r3, #0]
}
 8009250:	bf00      	nop
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	2000101c 	.word	0x2000101c
 8009260:	200010c4 	.word	0x200010c4

08009264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f103 0208 	add.w	r2, r3, #8
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f04f 32ff 	mov.w	r2, #4294967295
 800927c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f103 0208 	add.w	r2, r3, #8
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f103 0208 	add.w	r2, r3, #8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d103      	bne.n	8009326 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e00c      	b.n	8009340 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3308      	adds	r3, #8
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e002      	b.n	8009334 <vListInsert+0x2e>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	429a      	cmp	r2, r3
 800933e:	d2f6      	bcs.n	800932e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]
}
 800936c:	bf00      	nop
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6892      	ldr	r2, [r2, #8]
 800938e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6852      	ldr	r2, [r2, #4]
 8009398:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d103      	bne.n	80093ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	1e5a      	subs	r2, r3, #1
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10b      	bne.n	80093f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80093f8:	f002 f976 	bl	800b6e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	441a      	add	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009428:	3b01      	subs	r3, #1
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800942e:	fb01 f303 	mul.w	r3, r1, r3
 8009432:	441a      	add	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	22ff      	movs	r2, #255	@ 0xff
 800943c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	22ff      	movs	r2, #255	@ 0xff
 8009444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d114      	bne.n	8009478 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01a      	beq.n	800948c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3310      	adds	r3, #16
 800945a:	4618      	mov	r0, r3
 800945c:	f001 fa12 	bl	800a884 <xTaskRemoveFromEventList>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d012      	beq.n	800948c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <xQueueGenericReset+0xd0>)
 8009468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	e009      	b.n	800948c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3310      	adds	r3, #16
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff fef1 	bl	8009264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3324      	adds	r3, #36	@ 0x24
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff feec 	bl	8009264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800948c:	f002 f95e 	bl	800b74c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009490:	2301      	movs	r3, #1
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08e      	sub	sp, #56	@ 0x38
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10b      	bne.n	80094ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	e7fd      	b.n	80094e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <xQueueGenericCreateStatic+0x56>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <xQueueGenericCreateStatic+0x5a>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <xQueueGenericCreateStatic+0x5c>
 80094fa:	2300      	movs	r3, #0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10b      	bne.n	8009518 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	623b      	str	r3, [r7, #32]
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	e7fd      	b.n	8009514 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <xQueueGenericCreateStatic+0x84>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <xQueueGenericCreateStatic+0x88>
 8009524:	2301      	movs	r3, #1
 8009526:	e000      	b.n	800952a <xQueueGenericCreateStatic+0x8a>
 8009528:	2300      	movs	r3, #0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	61fb      	str	r3, [r7, #28]
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	e7fd      	b.n	8009542 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009546:	2350      	movs	r3, #80	@ 0x50
 8009548:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b50      	cmp	r3, #80	@ 0x50
 800954e:	d00b      	beq.n	8009568 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	61bb      	str	r3, [r7, #24]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009568:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00d      	beq.n	8009590 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800957c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4613      	mov	r3, r2
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68b9      	ldr	r1, [r7, #8]
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f805 	bl	800959a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009592:	4618      	mov	r0, r3
 8009594:	3730      	adds	r7, #48	@ 0x30
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
 80095a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d103      	bne.n	80095b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e002      	b.n	80095bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095c8:	2101      	movs	r1, #1
 80095ca:	69b8      	ldr	r0, [r7, #24]
 80095cc:	f7ff fefe 	bl	80093cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08e      	sub	sp, #56	@ 0x38
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095ee:	2300      	movs	r3, #0
 80095f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10b      	bne.n	8009614 <xQueueGenericSend+0x34>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <xQueueGenericSend+0x42>
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <xQueueGenericSend+0x46>
 8009622:	2301      	movs	r3, #1
 8009624:	e000      	b.n	8009628 <xQueueGenericSend+0x48>
 8009626:	2300      	movs	r3, #0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10b      	bne.n	8009644 <xQueueGenericSend+0x64>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	e7fd      	b.n	8009640 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d103      	bne.n	8009652 <xQueueGenericSend+0x72>
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800964e:	2b01      	cmp	r3, #1
 8009650:	d101      	bne.n	8009656 <xQueueGenericSend+0x76>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <xQueueGenericSend+0x78>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <xQueueGenericSend+0x94>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	623b      	str	r3, [r7, #32]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009674:	f001 facc 	bl	800ac10 <xTaskGetSchedulerState>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <xQueueGenericSend+0xa4>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <xQueueGenericSend+0xa8>
 8009684:	2301      	movs	r3, #1
 8009686:	e000      	b.n	800968a <xQueueGenericSend+0xaa>
 8009688:	2300      	movs	r3, #0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	61fb      	str	r3, [r7, #28]
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	e7fd      	b.n	80096a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096a6:	f002 f81f 	bl	800b6e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d302      	bcc.n	80096bc <xQueueGenericSend+0xdc>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d129      	bne.n	8009710 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096c2:	f000 fa0f 	bl	8009ae4 <prvCopyDataToQueue>
 80096c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d010      	beq.n	80096f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	3324      	adds	r3, #36	@ 0x24
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 f8d5 	bl	800a884 <xTaskRemoveFromEventList>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d013      	beq.n	8009708 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096e0:	4b3f      	ldr	r3, [pc, #252]	@ (80097e0 <xQueueGenericSend+0x200>)
 80096e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	e00a      	b.n	8009708 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096f8:	4b39      	ldr	r3, [pc, #228]	@ (80097e0 <xQueueGenericSend+0x200>)
 80096fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009708:	f002 f820 	bl	800b74c <vPortExitCritical>
				return pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	e063      	b.n	80097d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d103      	bne.n	800971e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009716:	f002 f819 	bl	800b74c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800971a:	2300      	movs	r3, #0
 800971c:	e05c      	b.n	80097d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800971e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009720:	2b00      	cmp	r3, #0
 8009722:	d106      	bne.n	8009732 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009724:	f107 0314 	add.w	r3, r7, #20
 8009728:	4618      	mov	r0, r3
 800972a:	f001 f90f 	bl	800a94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800972e:	2301      	movs	r3, #1
 8009730:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009732:	f002 f80b 	bl	800b74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009736:	f000 fe65 	bl	800a404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800973a:	f001 ffd5 	bl	800b6e8 <vPortEnterCritical>
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009744:	b25b      	sxtb	r3, r3
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d103      	bne.n	8009754 <xQueueGenericSend+0x174>
 800974c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800975a:	b25b      	sxtb	r3, r3
 800975c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009760:	d103      	bne.n	800976a <xQueueGenericSend+0x18a>
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800976a:	f001 ffef 	bl	800b74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800976e:	1d3a      	adds	r2, r7, #4
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f001 f8fe 	bl	800a978 <xTaskCheckForTimeOut>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d124      	bne.n	80097cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009782:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009784:	f000 faa6 	bl	8009cd4 <prvIsQueueFull>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d018      	beq.n	80097c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	3310      	adds	r3, #16
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4611      	mov	r1, r2
 8009796:	4618      	mov	r0, r3
 8009798:	f001 f822 	bl	800a7e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800979c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800979e:	f000 fa31 	bl	8009c04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097a2:	f000 fe3d 	bl	800a420 <xTaskResumeAll>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f47f af7c 	bne.w	80096a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80097ae:	4b0c      	ldr	r3, [pc, #48]	@ (80097e0 <xQueueGenericSend+0x200>)
 80097b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	e772      	b.n	80096a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097c2:	f000 fa1f 	bl	8009c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097c6:	f000 fe2b 	bl	800a420 <xTaskResumeAll>
 80097ca:	e76c      	b.n	80096a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097ce:	f000 fa19 	bl	8009c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097d2:	f000 fe25 	bl	800a420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3738      	adds	r7, #56	@ 0x38
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	e000ed04 	.word	0xe000ed04

080097e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b090      	sub	sp, #64	@ 0x40
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80097f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10b      	bne.n	8009814 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800980e:	bf00      	nop
 8009810:	bf00      	nop
 8009812:	e7fd      	b.n	8009810 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <xQueueGenericSendFromISR+0x3e>
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <xQueueGenericSendFromISR+0x42>
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <xQueueGenericSendFromISR+0x44>
 8009826:	2300      	movs	r3, #0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d103      	bne.n	8009852 <xQueueGenericSendFromISR+0x6e>
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <xQueueGenericSendFromISR+0x72>
 8009852:	2301      	movs	r3, #1
 8009854:	e000      	b.n	8009858 <xQueueGenericSendFromISR+0x74>
 8009856:	2300      	movs	r3, #0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10b      	bne.n	8009874 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	623b      	str	r3, [r7, #32]
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009874:	f002 f818 	bl	800b8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009878:	f3ef 8211 	mrs	r2, BASEPRI
 800987c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	61fa      	str	r2, [r7, #28]
 800988e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009890:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009892:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989c:	429a      	cmp	r2, r3
 800989e:	d302      	bcc.n	80098a6 <xQueueGenericSendFromISR+0xc2>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d12f      	bne.n	8009906 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098bc:	f000 f912 	bl	8009ae4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d112      	bne.n	80098f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d016      	beq.n	8009900 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	3324      	adds	r3, #36	@ 0x24
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 ffd4 	bl	800a884 <xTaskRemoveFromEventList>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00e      	beq.n	8009900 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00b      	beq.n	8009900 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e007      	b.n	8009900 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80098f4:	3301      	adds	r3, #1
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	b25a      	sxtb	r2, r3
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009900:	2301      	movs	r3, #1
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009904:	e001      	b.n	800990a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009906:	2300      	movs	r3, #0
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009914:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009918:	4618      	mov	r0, r3
 800991a:	3740      	adds	r7, #64	@ 0x40
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08c      	sub	sp, #48	@ 0x30
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800992c:	2300      	movs	r3, #0
 800992e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10b      	bne.n	8009952 <xQueueReceive+0x32>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	623b      	str	r3, [r7, #32]
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	e7fd      	b.n	800994e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <xQueueReceive+0x40>
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <xQueueReceive+0x44>
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <xQueueReceive+0x46>
 8009964:	2300      	movs	r3, #0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <xQueueReceive+0x62>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	61fb      	str	r3, [r7, #28]
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	e7fd      	b.n	800997e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009982:	f001 f945 	bl	800ac10 <xTaskGetSchedulerState>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d102      	bne.n	8009992 <xQueueReceive+0x72>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <xQueueReceive+0x76>
 8009992:	2301      	movs	r3, #1
 8009994:	e000      	b.n	8009998 <xQueueReceive+0x78>
 8009996:	2300      	movs	r3, #0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10b      	bne.n	80099b4 <xQueueReceive+0x94>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	61bb      	str	r3, [r7, #24]
}
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	e7fd      	b.n	80099b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099b4:	f001 fe98 	bl	800b6e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d01f      	beq.n	8009a04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099c8:	f000 f8f6 	bl	8009bb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	1e5a      	subs	r2, r3, #1
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00f      	beq.n	80099fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099de:	3310      	adds	r3, #16
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 ff4f 	bl	800a884 <xTaskRemoveFromEventList>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099ec:	4b3c      	ldr	r3, [pc, #240]	@ (8009ae0 <xQueueReceive+0x1c0>)
 80099ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099fc:	f001 fea6 	bl	800b74c <vPortExitCritical>
				return pdPASS;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e069      	b.n	8009ad8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d103      	bne.n	8009a12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a0a:	f001 fe9f 	bl	800b74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e062      	b.n	8009ad8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a18:	f107 0310 	add.w	r3, r7, #16
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 ff95 	bl	800a94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a22:	2301      	movs	r3, #1
 8009a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a26:	f001 fe91 	bl	800b74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a2a:	f000 fceb 	bl	800a404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a2e:	f001 fe5b 	bl	800b6e8 <vPortEnterCritical>
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a38:	b25b      	sxtb	r3, r3
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d103      	bne.n	8009a48 <xQueueReceive+0x128>
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a4e:	b25b      	sxtb	r3, r3
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d103      	bne.n	8009a5e <xQueueReceive+0x13e>
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a5e:	f001 fe75 	bl	800b74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a62:	1d3a      	adds	r2, r7, #4
 8009a64:	f107 0310 	add.w	r3, r7, #16
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 ff84 	bl	800a978 <xTaskCheckForTimeOut>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d123      	bne.n	8009abe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a78:	f000 f916 	bl	8009ca8 <prvIsQueueEmpty>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d017      	beq.n	8009ab2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	3324      	adds	r3, #36	@ 0x24
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fea8 	bl	800a7e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a92:	f000 f8b7 	bl	8009c04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a96:	f000 fcc3 	bl	800a420 <xTaskResumeAll>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d189      	bne.n	80099b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae0 <xQueueReceive+0x1c0>)
 8009aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	e780      	b.n	80099b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ab4:	f000 f8a6 	bl	8009c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ab8:	f000 fcb2 	bl	800a420 <xTaskResumeAll>
 8009abc:	e77a      	b.n	80099b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ac0:	f000 f8a0 	bl	8009c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ac4:	f000 fcac 	bl	800a420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aca:	f000 f8ed 	bl	8009ca8 <prvIsQueueEmpty>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f43f af6f 	beq.w	80099b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ad6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3730      	adds	r7, #48	@ 0x30
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10d      	bne.n	8009b1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d14d      	bne.n	8009ba6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 f89c 	bl	800ac4c <xTaskPriorityDisinherit>
 8009b14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	609a      	str	r2, [r3, #8]
 8009b1c:	e043      	b.n	8009ba6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d119      	bne.n	8009b58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6858      	ldr	r0, [r3, #4]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	f002 f97c 	bl	800be2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3c:	441a      	add	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d32b      	bcc.n	8009ba6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	605a      	str	r2, [r3, #4]
 8009b56:	e026      	b.n	8009ba6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68d8      	ldr	r0, [r3, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b60:	461a      	mov	r2, r3
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	f002 f962 	bl	800be2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b70:	425b      	negs	r3, r3
 8009b72:	441a      	add	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d207      	bcs.n	8009b94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8c:	425b      	negs	r3, r3
 8009b8e:	441a      	add	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d105      	bne.n	8009ba6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009bae:	697b      	ldr	r3, [r7, #20]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d018      	beq.n	8009bfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd2:	441a      	add	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d303      	bcc.n	8009bec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68d9      	ldr	r1, [r3, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	6838      	ldr	r0, [r7, #0]
 8009bf8:	f002 f918 	bl	800be2c <memcpy>
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c0c:	f001 fd6c 	bl	800b6e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c18:	e011      	b.n	8009c3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d012      	beq.n	8009c48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3324      	adds	r3, #36	@ 0x24
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fe2c 	bl	800a884 <xTaskRemoveFromEventList>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c32:	f000 ff05 	bl	800aa40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dce9      	bgt.n	8009c1a <prvUnlockQueue+0x16>
 8009c46:	e000      	b.n	8009c4a <prvUnlockQueue+0x46>
					break;
 8009c48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	22ff      	movs	r2, #255	@ 0xff
 8009c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009c52:	f001 fd7b 	bl	800b74c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c56:	f001 fd47 	bl	800b6e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c62:	e011      	b.n	8009c88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d012      	beq.n	8009c92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3310      	adds	r3, #16
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fe07 	bl	800a884 <xTaskRemoveFromEventList>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c7c:	f000 fee0 	bl	800aa40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dce9      	bgt.n	8009c64 <prvUnlockQueue+0x60>
 8009c90:	e000      	b.n	8009c94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	22ff      	movs	r2, #255	@ 0xff
 8009c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009c9c:	f001 fd56 	bl	800b74c <vPortExitCritical>
}
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cb0:	f001 fd1a 	bl	800b6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	e001      	b.n	8009cc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cc6:	f001 fd41 	bl	800b74c <vPortExitCritical>

	return xReturn;
 8009cca:	68fb      	ldr	r3, [r7, #12]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cdc:	f001 fd04 	bl	800b6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d102      	bne.n	8009cf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cec:	2301      	movs	r3, #1
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	e001      	b.n	8009cf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cf6:	f001 fd29 	bl	800b74c <vPortExitCritical>

	return xReturn;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	e014      	b.n	8009d3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d14:	4a0f      	ldr	r2, [pc, #60]	@ (8009d54 <vQueueAddToRegistry+0x50>)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10b      	bne.n	8009d38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d20:	490c      	ldr	r1, [pc, #48]	@ (8009d54 <vQueueAddToRegistry+0x50>)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d54 <vQueueAddToRegistry+0x50>)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	4413      	add	r3, r2
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d36:	e006      	b.n	8009d46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b07      	cmp	r3, #7
 8009d42:	d9e7      	bls.n	8009d14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	200014c4 	.word	0x200014c4

08009d58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d68:	f001 fcbe 	bl	800b6e8 <vPortEnterCritical>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d72:	b25b      	sxtb	r3, r3
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	d103      	bne.n	8009d82 <vQueueWaitForMessageRestricted+0x2a>
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d88:	b25b      	sxtb	r3, r3
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d103      	bne.n	8009d98 <vQueueWaitForMessageRestricted+0x40>
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d98:	f001 fcd8 	bl	800b74c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d106      	bne.n	8009db2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	3324      	adds	r3, #36	@ 0x24
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fd3d 	bl	800a82c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009db2:	6978      	ldr	r0, [r7, #20]
 8009db4:	f7ff ff26 	bl	8009c04 <prvUnlockQueue>
	}
 8009db8:	bf00      	nop
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	@ 0x38
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <xTaskCreateStatic+0x2c>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	623b      	str	r3, [r7, #32]
}
 8009de6:	bf00      	nop
 8009de8:	bf00      	nop
 8009dea:	e7fd      	b.n	8009de8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	61fb      	str	r3, [r7, #28]
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	e7fd      	b.n	8009e06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e0a:	23a8      	movs	r3, #168	@ 0xa8
 8009e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2ba8      	cmp	r3, #168	@ 0xa8
 8009e12:	d00b      	beq.n	8009e2c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	61bb      	str	r3, [r7, #24]
}
 8009e26:	bf00      	nop
 8009e28:	bf00      	nop
 8009e2a:	e7fd      	b.n	8009e28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01e      	beq.n	8009e72 <xTaskCreateStatic+0xb2>
 8009e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01b      	beq.n	8009e72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	f107 0314 	add.w	r3, r7, #20
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	68b9      	ldr	r1, [r7, #8]
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f851 	bl	8009f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e6c:	f000 f8f6 	bl	800a05c <prvAddNewTaskToReadyList>
 8009e70:	e001      	b.n	8009e76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e76:	697b      	ldr	r3, [r7, #20]
	}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3728      	adds	r7, #40	@ 0x28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08c      	sub	sp, #48	@ 0x30
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e90:	88fb      	ldrh	r3, [r7, #6]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 fd49 	bl	800b92c <pvPortMalloc>
 8009e9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00e      	beq.n	8009ec0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ea2:	20a8      	movs	r0, #168	@ 0xa8
 8009ea4:	f001 fd42 	bl	800b92c <pvPortMalloc>
 8009ea8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8009eb6:	e005      	b.n	8009ec4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009eb8:	6978      	ldr	r0, [r7, #20]
 8009eba:	f001 fe05 	bl	800bac8 <vPortFree>
 8009ebe:	e001      	b.n	8009ec4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d017      	beq.n	8009efa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ed2:	88fa      	ldrh	r2, [r7, #6]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9303      	str	r3, [sp, #12]
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	9302      	str	r3, [sp, #8]
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f80f 	bl	8009f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eee:	69f8      	ldr	r0, [r7, #28]
 8009ef0:	f000 f8b4 	bl	800a05c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	e002      	b.n	8009f00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009efa:	f04f 33ff 	mov.w	r3, #4294967295
 8009efe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f00:	69bb      	ldr	r3, [r7, #24]
	}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	461a      	mov	r2, r3
 8009f24:	21a5      	movs	r1, #165	@ 0xa5
 8009f26:	f001 feef 	bl	800bd08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f34:	3b01      	subs	r3, #1
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f023 0307 	bic.w	r3, r3, #7
 8009f42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	617b      	str	r3, [r7, #20]
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	e7fd      	b.n	8009f62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01f      	beq.n	8009fac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	e012      	b.n	8009f98 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	4413      	add	r3, r2
 8009f78:	7819      	ldrb	r1, [r3, #0]
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	3334      	adds	r3, #52	@ 0x34
 8009f82:	460a      	mov	r2, r1
 8009f84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	3301      	adds	r3, #1
 8009f96:	61fb      	str	r3, [r7, #28]
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	2b0f      	cmp	r3, #15
 8009f9c:	d9e9      	bls.n	8009f72 <prvInitialiseNewTask+0x66>
 8009f9e:	e000      	b.n	8009fa2 <prvInitialiseNewTask+0x96>
			{
				break;
 8009fa0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009faa:	e003      	b.n	8009fb4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	2b37      	cmp	r3, #55	@ 0x37
 8009fb8:	d901      	bls.n	8009fbe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fba:	2337      	movs	r3, #55	@ 0x37
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	2200      	movs	r2, #0
 8009fce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff f965 	bl	80092a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	3318      	adds	r3, #24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff f960 	bl	80092a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ff8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	2200      	movs	r2, #0
 800a006:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	3354      	adds	r3, #84	@ 0x54
 800a00e:	224c      	movs	r2, #76	@ 0x4c
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fe78 	bl	800bd08 <memset>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	4a0d      	ldr	r2, [pc, #52]	@ (800a050 <prvInitialiseNewTask+0x144>)
 800a01c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	4a0c      	ldr	r2, [pc, #48]	@ (800a054 <prvInitialiseNewTask+0x148>)
 800a022:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	4a0c      	ldr	r2, [pc, #48]	@ (800a058 <prvInitialiseNewTask+0x14c>)
 800a028:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	68f9      	ldr	r1, [r7, #12]
 800a02e:	69b8      	ldr	r0, [r7, #24]
 800a030:	f001 fa2a 	bl	800b488 <pxPortInitialiseStack>
 800a034:	4602      	mov	r2, r0
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a046:	bf00      	nop
 800a048:	3720      	adds	r7, #32
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20002758 	.word	0x20002758
 800a054:	200027c0 	.word	0x200027c0
 800a058:	20002828 	.word	0x20002828

0800a05c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a064:	f001 fb40 	bl	800b6e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a068:	4b2d      	ldr	r3, [pc, #180]	@ (800a120 <prvAddNewTaskToReadyList+0xc4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3301      	adds	r3, #1
 800a06e:	4a2c      	ldr	r2, [pc, #176]	@ (800a120 <prvAddNewTaskToReadyList+0xc4>)
 800a070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a072:	4b2c      	ldr	r3, [pc, #176]	@ (800a124 <prvAddNewTaskToReadyList+0xc8>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d109      	bne.n	800a08e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a07a:	4a2a      	ldr	r2, [pc, #168]	@ (800a124 <prvAddNewTaskToReadyList+0xc8>)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a080:	4b27      	ldr	r3, [pc, #156]	@ (800a120 <prvAddNewTaskToReadyList+0xc4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d110      	bne.n	800a0aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a088:	f000 fcfe 	bl	800aa88 <prvInitialiseTaskLists>
 800a08c:	e00d      	b.n	800a0aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a08e:	4b26      	ldr	r3, [pc, #152]	@ (800a128 <prvAddNewTaskToReadyList+0xcc>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d109      	bne.n	800a0aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a096:	4b23      	ldr	r3, [pc, #140]	@ (800a124 <prvAddNewTaskToReadyList+0xc8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d802      	bhi.n	800a0aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a124 <prvAddNewTaskToReadyList+0xc8>)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0aa:	4b20      	ldr	r3, [pc, #128]	@ (800a12c <prvAddNewTaskToReadyList+0xd0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a12c <prvAddNewTaskToReadyList+0xd0>)
 800a0b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a12c <prvAddNewTaskToReadyList+0xd0>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a130 <prvAddNewTaskToReadyList+0xd4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d903      	bls.n	800a0d0 <prvAddNewTaskToReadyList+0x74>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0cc:	4a18      	ldr	r2, [pc, #96]	@ (800a130 <prvAddNewTaskToReadyList+0xd4>)
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4a15      	ldr	r2, [pc, #84]	@ (800a134 <prvAddNewTaskToReadyList+0xd8>)
 800a0de:	441a      	add	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7ff f8e9 	bl	80092be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0ec:	f001 fb2e 	bl	800b74c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a128 <prvAddNewTaskToReadyList+0xcc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00e      	beq.n	800a116 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a124 <prvAddNewTaskToReadyList+0xc8>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a102:	429a      	cmp	r2, r3
 800a104:	d207      	bcs.n	800a116 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a106:	4b0c      	ldr	r3, [pc, #48]	@ (800a138 <prvAddNewTaskToReadyList+0xdc>)
 800a108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200019d8 	.word	0x200019d8
 800a124:	20001504 	.word	0x20001504
 800a128:	200019e4 	.word	0x200019e4
 800a12c:	200019f4 	.word	0x200019f4
 800a130:	200019e0 	.word	0x200019e0
 800a134:	20001508 	.word	0x20001508
 800a138:	e000ed04 	.word	0xe000ed04

0800a13c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a144:	f001 fad0 	bl	800b6e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <vTaskDelete+0x18>
 800a14e:	4b2d      	ldr	r3, [pc, #180]	@ (800a204 <vTaskDelete+0xc8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	e000      	b.n	800a156 <vTaskDelete+0x1a>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3304      	adds	r3, #4
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff f90b 	bl	8009378 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a166:	2b00      	cmp	r3, #0
 800a168:	d004      	beq.n	800a174 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3318      	adds	r3, #24
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff f902 	bl	8009378 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a174:	4b24      	ldr	r3, [pc, #144]	@ (800a208 <vTaskDelete+0xcc>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3301      	adds	r3, #1
 800a17a:	4a23      	ldr	r2, [pc, #140]	@ (800a208 <vTaskDelete+0xcc>)
 800a17c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a17e:	4b21      	ldr	r3, [pc, #132]	@ (800a204 <vTaskDelete+0xc8>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	429a      	cmp	r2, r3
 800a186:	d10b      	bne.n	800a1a0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4619      	mov	r1, r3
 800a18e:	481f      	ldr	r0, [pc, #124]	@ (800a20c <vTaskDelete+0xd0>)
 800a190:	f7ff f895 	bl	80092be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a194:	4b1e      	ldr	r3, [pc, #120]	@ (800a210 <vTaskDelete+0xd4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3301      	adds	r3, #1
 800a19a:	4a1d      	ldr	r2, [pc, #116]	@ (800a210 <vTaskDelete+0xd4>)
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	e009      	b.n	800a1b4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a214 <vTaskDelete+0xd8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a214 <vTaskDelete+0xd8>)
 800a1a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 fcda 	bl	800ab64 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a1b0:	f000 fd0e 	bl	800abd0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800a1b4:	f001 faca 	bl	800b74c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a1b8:	4b17      	ldr	r3, [pc, #92]	@ (800a218 <vTaskDelete+0xdc>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d01c      	beq.n	800a1fa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800a1c0:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <vTaskDelete+0xc8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d117      	bne.n	800a1fa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a1ca:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <vTaskDelete+0xe0>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00b      	beq.n	800a1ea <vTaskDelete+0xae>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	60bb      	str	r3, [r7, #8]
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop
 800a1e8:	e7fd      	b.n	800a1e6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <vTaskDelete+0xe4>)
 800a1ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20001504 	.word	0x20001504
 800a208:	200019f4 	.word	0x200019f4
 800a20c:	200019ac 	.word	0x200019ac
 800a210:	200019c0 	.word	0x200019c0
 800a214:	200019d8 	.word	0x200019d8
 800a218:	200019e4 	.word	0x200019e4
 800a21c:	20001a00 	.word	0x20001a00
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08a      	sub	sp, #40	@ 0x28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10b      	bne.n	800a250 <vTaskDelayUntil+0x2c>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	617b      	str	r3, [r7, #20]
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	e7fd      	b.n	800a24c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10b      	bne.n	800a26e <vTaskDelayUntil+0x4a>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	613b      	str	r3, [r7, #16]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800a26e:	4b2a      	ldr	r3, [pc, #168]	@ (800a318 <vTaskDelayUntil+0xf4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00b      	beq.n	800a28e <vTaskDelayUntil+0x6a>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800a28e:	f000 f8b9 	bl	800a404 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a292:	4b22      	ldr	r3, [pc, #136]	@ (800a31c <vTaskDelayUntil+0xf8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	4413      	add	r3, r2
 800a2a0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6a3a      	ldr	r2, [r7, #32]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d20b      	bcs.n	800a2c4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d211      	bcs.n	800a2da <vTaskDelayUntil+0xb6>
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d90d      	bls.n	800a2da <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2c2:	e00a      	b.n	800a2da <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d303      	bcc.n	800a2d6 <vTaskDelayUntil+0xb2>
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d901      	bls.n	800a2da <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 fd1c 	bl	800ad2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a2f4:	f000 f894 	bl	800a420 <xTaskResumeAll>
 800a2f8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d107      	bne.n	800a310 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800a300:	4b07      	ldr	r3, [pc, #28]	@ (800a320 <vTaskDelayUntil+0xfc>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a310:	bf00      	nop
 800a312:	3728      	adds	r7, #40	@ 0x28
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20001a00 	.word	0x20001a00
 800a31c:	200019dc 	.word	0x200019dc
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	@ 0x28
 800a328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a332:	463a      	mov	r2, r7
 800a334:	1d39      	adds	r1, r7, #4
 800a336:	f107 0308 	add.w	r3, r7, #8
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe ff5e 	bl	80091fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	9202      	str	r2, [sp, #8]
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	2300      	movs	r3, #0
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	2300      	movs	r3, #0
 800a350:	460a      	mov	r2, r1
 800a352:	4924      	ldr	r1, [pc, #144]	@ (800a3e4 <vTaskStartScheduler+0xc0>)
 800a354:	4824      	ldr	r0, [pc, #144]	@ (800a3e8 <vTaskStartScheduler+0xc4>)
 800a356:	f7ff fd33 	bl	8009dc0 <xTaskCreateStatic>
 800a35a:	4603      	mov	r3, r0
 800a35c:	4a23      	ldr	r2, [pc, #140]	@ (800a3ec <vTaskStartScheduler+0xc8>)
 800a35e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a360:	4b22      	ldr	r3, [pc, #136]	@ (800a3ec <vTaskStartScheduler+0xc8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a368:	2301      	movs	r3, #1
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	e001      	b.n	800a372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a36e:	2300      	movs	r3, #0
 800a370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d102      	bne.n	800a37e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a378:	f000 fd2c 	bl	800add4 <xTimerCreateTimerTask>
 800a37c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d11b      	bne.n	800a3bc <vTaskStartScheduler+0x98>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	613b      	str	r3, [r7, #16]
}
 800a396:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a398:	4b15      	ldr	r3, [pc, #84]	@ (800a3f0 <vTaskStartScheduler+0xcc>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3354      	adds	r3, #84	@ 0x54
 800a39e:	4a15      	ldr	r2, [pc, #84]	@ (800a3f4 <vTaskStartScheduler+0xd0>)
 800a3a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3a2:	4b15      	ldr	r3, [pc, #84]	@ (800a3f8 <vTaskStartScheduler+0xd4>)
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3aa:	4b14      	ldr	r3, [pc, #80]	@ (800a3fc <vTaskStartScheduler+0xd8>)
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3b0:	4b13      	ldr	r3, [pc, #76]	@ (800a400 <vTaskStartScheduler+0xdc>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3b6:	f001 f8f3 	bl	800b5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3ba:	e00f      	b.n	800a3dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d10b      	bne.n	800a3dc <vTaskStartScheduler+0xb8>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	e7fd      	b.n	800a3d8 <vTaskStartScheduler+0xb4>
}
 800a3dc:	bf00      	nop
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	0800c070 	.word	0x0800c070
 800a3e8:	0800aa59 	.word	0x0800aa59
 800a3ec:	200019fc 	.word	0x200019fc
 800a3f0:	20001504 	.word	0x20001504
 800a3f4:	20000698 	.word	0x20000698
 800a3f8:	200019f8 	.word	0x200019f8
 800a3fc:	200019e4 	.word	0x200019e4
 800a400:	200019dc 	.word	0x200019dc

0800a404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a408:	4b04      	ldr	r3, [pc, #16]	@ (800a41c <vTaskSuspendAll+0x18>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a03      	ldr	r2, [pc, #12]	@ (800a41c <vTaskSuspendAll+0x18>)
 800a410:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a412:	bf00      	nop
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20001a00 	.word	0x20001a00

0800a420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a42e:	4b42      	ldr	r3, [pc, #264]	@ (800a538 <xTaskResumeAll+0x118>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10b      	bne.n	800a44e <xTaskResumeAll+0x2e>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	603b      	str	r3, [r7, #0]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a44e:	f001 f94b 	bl	800b6e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a452:	4b39      	ldr	r3, [pc, #228]	@ (800a538 <xTaskResumeAll+0x118>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3b01      	subs	r3, #1
 800a458:	4a37      	ldr	r2, [pc, #220]	@ (800a538 <xTaskResumeAll+0x118>)
 800a45a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45c:	4b36      	ldr	r3, [pc, #216]	@ (800a538 <xTaskResumeAll+0x118>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d162      	bne.n	800a52a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a464:	4b35      	ldr	r3, [pc, #212]	@ (800a53c <xTaskResumeAll+0x11c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05e      	beq.n	800a52a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a46c:	e02f      	b.n	800a4ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a46e:	4b34      	ldr	r3, [pc, #208]	@ (800a540 <xTaskResumeAll+0x120>)
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3318      	adds	r3, #24
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe ff7c 	bl	8009378 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3304      	adds	r3, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe ff77 	bl	8009378 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a48e:	4b2d      	ldr	r3, [pc, #180]	@ (800a544 <xTaskResumeAll+0x124>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	d903      	bls.n	800a49e <xTaskResumeAll+0x7e>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <xTaskResumeAll+0x124>)
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4a27      	ldr	r2, [pc, #156]	@ (800a548 <xTaskResumeAll+0x128>)
 800a4ac:	441a      	add	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7fe ff02 	bl	80092be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4be:	4b23      	ldr	r3, [pc, #140]	@ (800a54c <xTaskResumeAll+0x12c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d302      	bcc.n	800a4ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a4c8:	4b21      	ldr	r3, [pc, #132]	@ (800a550 <xTaskResumeAll+0x130>)
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a540 <xTaskResumeAll+0x120>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1cb      	bne.n	800a46e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4dc:	f000 fb78 	bl	800abd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a554 <xTaskResumeAll+0x134>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d010      	beq.n	800a50e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4ec:	f000 f858 	bl	800a5a0 <xTaskIncrementTick>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d002      	beq.n	800a4fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a4f6:	4b16      	ldr	r3, [pc, #88]	@ (800a550 <xTaskResumeAll+0x130>)
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1f1      	bne.n	800a4ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a508:	4b12      	ldr	r3, [pc, #72]	@ (800a554 <xTaskResumeAll+0x134>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a50e:	4b10      	ldr	r3, [pc, #64]	@ (800a550 <xTaskResumeAll+0x130>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d009      	beq.n	800a52a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a516:	2301      	movs	r3, #1
 800a518:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a51a:	4b0f      	ldr	r3, [pc, #60]	@ (800a558 <xTaskResumeAll+0x138>)
 800a51c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a52a:	f001 f90f 	bl	800b74c <vPortExitCritical>

	return xAlreadyYielded;
 800a52e:	68bb      	ldr	r3, [r7, #8]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20001a00 	.word	0x20001a00
 800a53c:	200019d8 	.word	0x200019d8
 800a540:	20001998 	.word	0x20001998
 800a544:	200019e0 	.word	0x200019e0
 800a548:	20001508 	.word	0x20001508
 800a54c:	20001504 	.word	0x20001504
 800a550:	200019ec 	.word	0x200019ec
 800a554:	200019e8 	.word	0x200019e8
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a562:	4b05      	ldr	r3, [pc, #20]	@ (800a578 <xTaskGetTickCount+0x1c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a568:	687b      	ldr	r3, [r7, #4]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	200019dc 	.word	0x200019dc

0800a57c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a582:	f001 f991 	bl	800b8a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a586:	2300      	movs	r3, #0
 800a588:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a58a:	4b04      	ldr	r3, [pc, #16]	@ (800a59c <xTaskGetTickCountFromISR+0x20>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a590:	683b      	ldr	r3, [r7, #0]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	200019dc 	.word	0x200019dc

0800a5a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a6e8 <xTaskIncrementTick+0x148>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f040 8090 	bne.w	800a6d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5b4:	4b4d      	ldr	r3, [pc, #308]	@ (800a6ec <xTaskIncrementTick+0x14c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5bc:	4a4b      	ldr	r2, [pc, #300]	@ (800a6ec <xTaskIncrementTick+0x14c>)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d121      	bne.n	800a60c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5c8:	4b49      	ldr	r3, [pc, #292]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00b      	beq.n	800a5ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	603b      	str	r3, [r7, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xTaskIncrementTick+0x46>
 800a5ea:	4b41      	ldr	r3, [pc, #260]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	4b40      	ldr	r3, [pc, #256]	@ (800a6f4 <xTaskIncrementTick+0x154>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6f4 <xTaskIncrementTick+0x154>)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f8 <xTaskIncrementTick+0x158>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3301      	adds	r3, #1
 800a604:	4a3c      	ldr	r2, [pc, #240]	@ (800a6f8 <xTaskIncrementTick+0x158>)
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	f000 fae2 	bl	800abd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a60c:	4b3b      	ldr	r3, [pc, #236]	@ (800a6fc <xTaskIncrementTick+0x15c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	429a      	cmp	r2, r3
 800a614:	d349      	bcc.n	800a6aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a616:	4b36      	ldr	r3, [pc, #216]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d104      	bne.n	800a62a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a620:	4b36      	ldr	r3, [pc, #216]	@ (800a6fc <xTaskIncrementTick+0x15c>)
 800a622:	f04f 32ff 	mov.w	r2, #4294967295
 800a626:	601a      	str	r2, [r3, #0]
					break;
 800a628:	e03f      	b.n	800a6aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62a:	4b31      	ldr	r3, [pc, #196]	@ (800a6f0 <xTaskIncrementTick+0x150>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d203      	bcs.n	800a64a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a642:	4a2e      	ldr	r2, [pc, #184]	@ (800a6fc <xTaskIncrementTick+0x15c>)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a648:	e02f      	b.n	800a6aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fe92 	bl	8009378 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	3318      	adds	r3, #24
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fe89 	bl	8009378 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4b25      	ldr	r3, [pc, #148]	@ (800a700 <xTaskIncrementTick+0x160>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d903      	bls.n	800a67a <xTaskIncrementTick+0xda>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a676:	4a22      	ldr	r2, [pc, #136]	@ (800a700 <xTaskIncrementTick+0x160>)
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4a1f      	ldr	r2, [pc, #124]	@ (800a704 <xTaskIncrementTick+0x164>)
 800a688:	441a      	add	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fe fe14 	bl	80092be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a69a:	4b1b      	ldr	r3, [pc, #108]	@ (800a708 <xTaskIncrementTick+0x168>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d3b8      	bcc.n	800a616 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6a8:	e7b5      	b.n	800a616 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6aa:	4b17      	ldr	r3, [pc, #92]	@ (800a708 <xTaskIncrementTick+0x168>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b0:	4914      	ldr	r1, [pc, #80]	@ (800a704 <xTaskIncrementTick+0x164>)
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d901      	bls.n	800a6c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6c6:	4b11      	ldr	r3, [pc, #68]	@ (800a70c <xTaskIncrementTick+0x16c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	e004      	b.n	800a6de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a710 <xTaskIncrementTick+0x170>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	4a0d      	ldr	r2, [pc, #52]	@ (800a710 <xTaskIncrementTick+0x170>)
 800a6dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6de:	697b      	ldr	r3, [r7, #20]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20001a00 	.word	0x20001a00
 800a6ec:	200019dc 	.word	0x200019dc
 800a6f0:	20001990 	.word	0x20001990
 800a6f4:	20001994 	.word	0x20001994
 800a6f8:	200019f0 	.word	0x200019f0
 800a6fc:	200019f8 	.word	0x200019f8
 800a700:	200019e0 	.word	0x200019e0
 800a704:	20001508 	.word	0x20001508
 800a708:	20001504 	.word	0x20001504
 800a70c:	200019ec 	.word	0x200019ec
 800a710:	200019e8 	.word	0x200019e8

0800a714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a71a:	4b2b      	ldr	r3, [pc, #172]	@ (800a7c8 <vTaskSwitchContext+0xb4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a722:	4b2a      	ldr	r3, [pc, #168]	@ (800a7cc <vTaskSwitchContext+0xb8>)
 800a724:	2201      	movs	r2, #1
 800a726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a728:	e047      	b.n	800a7ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a72a:	4b28      	ldr	r3, [pc, #160]	@ (800a7cc <vTaskSwitchContext+0xb8>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a730:	4b27      	ldr	r3, [pc, #156]	@ (800a7d0 <vTaskSwitchContext+0xbc>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e011      	b.n	800a75c <vTaskSwitchContext+0x48>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <vTaskSwitchContext+0x42>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	607b      	str	r3, [r7, #4]
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	e7fd      	b.n	800a752 <vTaskSwitchContext+0x3e>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3b01      	subs	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	491d      	ldr	r1, [pc, #116]	@ (800a7d4 <vTaskSwitchContext+0xc0>)
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0e3      	beq.n	800a738 <vTaskSwitchContext+0x24>
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4a16      	ldr	r2, [pc, #88]	@ (800a7d4 <vTaskSwitchContext+0xc0>)
 800a77c:	4413      	add	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	3308      	adds	r3, #8
 800a792:	429a      	cmp	r2, r3
 800a794:	d104      	bne.n	800a7a0 <vTaskSwitchContext+0x8c>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	605a      	str	r2, [r3, #4]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d8 <vTaskSwitchContext+0xc4>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4a09      	ldr	r2, [pc, #36]	@ (800a7d0 <vTaskSwitchContext+0xbc>)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7b0:	4b09      	ldr	r3, [pc, #36]	@ (800a7d8 <vTaskSwitchContext+0xc4>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3354      	adds	r3, #84	@ 0x54
 800a7b6:	4a09      	ldr	r2, [pc, #36]	@ (800a7dc <vTaskSwitchContext+0xc8>)
 800a7b8:	6013      	str	r3, [r2, #0]
}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20001a00 	.word	0x20001a00
 800a7cc:	200019ec 	.word	0x200019ec
 800a7d0:	200019e0 	.word	0x200019e0
 800a7d4:	20001508 	.word	0x20001508
 800a7d8:	20001504 	.word	0x20001504
 800a7dc:	20000698 	.word	0x20000698

0800a7e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10b      	bne.n	800a808 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a808:	4b07      	ldr	r3, [pc, #28]	@ (800a828 <vTaskPlaceOnEventList+0x48>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3318      	adds	r3, #24
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fe fd78 	bl	8009306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a816:	2101      	movs	r1, #1
 800a818:	6838      	ldr	r0, [r7, #0]
 800a81a:	f000 fa87 	bl	800ad2c <prvAddCurrentTaskToDelayedList>
}
 800a81e:	bf00      	nop
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20001504 	.word	0x20001504

0800a82c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10b      	bne.n	800a856 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	617b      	str	r3, [r7, #20]
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a856:	4b0a      	ldr	r3, [pc, #40]	@ (800a880 <vTaskPlaceOnEventListRestricted+0x54>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3318      	adds	r3, #24
 800a85c:	4619      	mov	r1, r3
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7fe fd2d 	bl	80092be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	68b8      	ldr	r0, [r7, #8]
 800a874:	f000 fa5a 	bl	800ad2c <prvAddCurrentTaskToDelayedList>
	}
 800a878:	bf00      	nop
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20001504 	.word	0x20001504

0800a884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	60fb      	str	r3, [r7, #12]
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	e7fd      	b.n	800a8ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3318      	adds	r3, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fd5e 	bl	8009378 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a934 <xTaskRemoveFromEventList+0xb0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11d      	bne.n	800a900 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fd55 	bl	8009378 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d2:	4b19      	ldr	r3, [pc, #100]	@ (800a938 <xTaskRemoveFromEventList+0xb4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d903      	bls.n	800a8e2 <xTaskRemoveFromEventList+0x5e>
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8de:	4a16      	ldr	r2, [pc, #88]	@ (800a938 <xTaskRemoveFromEventList+0xb4>)
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4a13      	ldr	r2, [pc, #76]	@ (800a93c <xTaskRemoveFromEventList+0xb8>)
 800a8f0:	441a      	add	r2, r3
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	f7fe fce0 	bl	80092be <vListInsertEnd>
 800a8fe:	e005      	b.n	800a90c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	3318      	adds	r3, #24
 800a904:	4619      	mov	r1, r3
 800a906:	480e      	ldr	r0, [pc, #56]	@ (800a940 <xTaskRemoveFromEventList+0xbc>)
 800a908:	f7fe fcd9 	bl	80092be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a910:	4b0c      	ldr	r3, [pc, #48]	@ (800a944 <xTaskRemoveFromEventList+0xc0>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a916:	429a      	cmp	r2, r3
 800a918:	d905      	bls.n	800a926 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a91a:	2301      	movs	r3, #1
 800a91c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a91e:	4b0a      	ldr	r3, [pc, #40]	@ (800a948 <xTaskRemoveFromEventList+0xc4>)
 800a920:	2201      	movs	r2, #1
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	e001      	b.n	800a92a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a92a:	697b      	ldr	r3, [r7, #20]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20001a00 	.word	0x20001a00
 800a938:	200019e0 	.word	0x200019e0
 800a93c:	20001508 	.word	0x20001508
 800a940:	20001998 	.word	0x20001998
 800a944:	20001504 	.word	0x20001504
 800a948:	200019ec 	.word	0x200019ec

0800a94c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a954:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <vTaskInternalSetTimeOutState+0x24>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a95c:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <vTaskInternalSetTimeOutState+0x28>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	605a      	str	r2, [r3, #4]
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	200019f0 	.word	0x200019f0
 800a974:	200019dc 	.word	0x200019dc

0800a978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10b      	bne.n	800a9a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	613b      	str	r3, [r7, #16]
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	e7fd      	b.n	800a99c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	60fb      	str	r3, [r7, #12]
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	e7fd      	b.n	800a9ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a9be:	f000 fe93 	bl	800b6e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9c2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa38 <xTaskCheckForTimeOut+0xc0>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d102      	bne.n	800a9e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e023      	b.n	800aa2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	4b15      	ldr	r3, [pc, #84]	@ (800aa3c <xTaskCheckForTimeOut+0xc4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d007      	beq.n	800a9fe <xTaskCheckForTimeOut+0x86>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d302      	bcc.n	800a9fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	e015      	b.n	800aa2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d20b      	bcs.n	800aa20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	1ad2      	subs	r2, r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7ff ff99 	bl	800a94c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61fb      	str	r3, [r7, #28]
 800aa1e:	e004      	b.n	800aa2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa26:	2301      	movs	r3, #1
 800aa28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa2a:	f000 fe8f 	bl	800b74c <vPortExitCritical>

	return xReturn;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	200019dc 	.word	0x200019dc
 800aa3c:	200019f0 	.word	0x200019f0

0800aa40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa44:	4b03      	ldr	r3, [pc, #12]	@ (800aa54 <vTaskMissedYield+0x14>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	601a      	str	r2, [r3, #0]
}
 800aa4a:	bf00      	nop
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	200019ec 	.word	0x200019ec

0800aa58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa60:	f000 f852 	bl	800ab08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa64:	4b06      	ldr	r3, [pc, #24]	@ (800aa80 <prvIdleTask+0x28>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d9f9      	bls.n	800aa60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <prvIdleTask+0x2c>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa7c:	e7f0      	b.n	800aa60 <prvIdleTask+0x8>
 800aa7e:	bf00      	nop
 800aa80:	20001508 	.word	0x20001508
 800aa84:	e000ed04 	.word	0xe000ed04

0800aa88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa8e:	2300      	movs	r3, #0
 800aa90:	607b      	str	r3, [r7, #4]
 800aa92:	e00c      	b.n	800aaae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4a12      	ldr	r2, [pc, #72]	@ (800aae8 <prvInitialiseTaskLists+0x60>)
 800aaa0:	4413      	add	r3, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fbde 	bl	8009264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	607b      	str	r3, [r7, #4]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b37      	cmp	r3, #55	@ 0x37
 800aab2:	d9ef      	bls.n	800aa94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aab4:	480d      	ldr	r0, [pc, #52]	@ (800aaec <prvInitialiseTaskLists+0x64>)
 800aab6:	f7fe fbd5 	bl	8009264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aaba:	480d      	ldr	r0, [pc, #52]	@ (800aaf0 <prvInitialiseTaskLists+0x68>)
 800aabc:	f7fe fbd2 	bl	8009264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aac0:	480c      	ldr	r0, [pc, #48]	@ (800aaf4 <prvInitialiseTaskLists+0x6c>)
 800aac2:	f7fe fbcf 	bl	8009264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aac6:	480c      	ldr	r0, [pc, #48]	@ (800aaf8 <prvInitialiseTaskLists+0x70>)
 800aac8:	f7fe fbcc 	bl	8009264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aacc:	480b      	ldr	r0, [pc, #44]	@ (800aafc <prvInitialiseTaskLists+0x74>)
 800aace:	f7fe fbc9 	bl	8009264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aad2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab00 <prvInitialiseTaskLists+0x78>)
 800aad4:	4a05      	ldr	r2, [pc, #20]	@ (800aaec <prvInitialiseTaskLists+0x64>)
 800aad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aad8:	4b0a      	ldr	r3, [pc, #40]	@ (800ab04 <prvInitialiseTaskLists+0x7c>)
 800aada:	4a05      	ldr	r2, [pc, #20]	@ (800aaf0 <prvInitialiseTaskLists+0x68>)
 800aadc:	601a      	str	r2, [r3, #0]
}
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20001508 	.word	0x20001508
 800aaec:	20001968 	.word	0x20001968
 800aaf0:	2000197c 	.word	0x2000197c
 800aaf4:	20001998 	.word	0x20001998
 800aaf8:	200019ac 	.word	0x200019ac
 800aafc:	200019c4 	.word	0x200019c4
 800ab00:	20001990 	.word	0x20001990
 800ab04:	20001994 	.word	0x20001994

0800ab08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab0e:	e019      	b.n	800ab44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab10:	f000 fdea 	bl	800b6e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab14:	4b10      	ldr	r3, [pc, #64]	@ (800ab58 <prvCheckTasksWaitingTermination+0x50>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fe fc29 	bl	8009378 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <prvCheckTasksWaitingTermination+0x54>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	4a0b      	ldr	r2, [pc, #44]	@ (800ab5c <prvCheckTasksWaitingTermination+0x54>)
 800ab2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab30:	4b0b      	ldr	r3, [pc, #44]	@ (800ab60 <prvCheckTasksWaitingTermination+0x58>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	4a0a      	ldr	r2, [pc, #40]	@ (800ab60 <prvCheckTasksWaitingTermination+0x58>)
 800ab38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab3a:	f000 fe07 	bl	800b74c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f810 	bl	800ab64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab44:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <prvCheckTasksWaitingTermination+0x58>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e1      	bne.n	800ab10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	200019ac 	.word	0x200019ac
 800ab5c:	200019d8 	.word	0x200019d8
 800ab60:	200019c0 	.word	0x200019c0

0800ab64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3354      	adds	r3, #84	@ 0x54
 800ab70:	4618      	mov	r0, r3
 800ab72:	f001 f8d1 	bl	800bd18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d108      	bne.n	800ab92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 ff9f 	bl	800bac8 <vPortFree>
				vPortFree( pxTCB );
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 ff9c 	bl	800bac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab90:	e019      	b.n	800abc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d103      	bne.n	800aba4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 ff93 	bl	800bac8 <vPortFree>
	}
 800aba2:	e010      	b.n	800abc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d00b      	beq.n	800abc6 <prvDeleteTCB+0x62>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	60fb      	str	r3, [r7, #12]
}
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <prvDeleteTCB+0x5e>
	}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <prvResetNextTaskUnblockTime+0x38>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abe0:	4b0a      	ldr	r3, [pc, #40]	@ (800ac0c <prvResetNextTaskUnblockTime+0x3c>)
 800abe2:	f04f 32ff 	mov.w	r2, #4294967295
 800abe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abe8:	e008      	b.n	800abfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abea:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <prvResetNextTaskUnblockTime+0x38>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	4a04      	ldr	r2, [pc, #16]	@ (800ac0c <prvResetNextTaskUnblockTime+0x3c>)
 800abfa:	6013      	str	r3, [r2, #0]
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	20001990 	.word	0x20001990
 800ac0c:	200019f8 	.word	0x200019f8

0800ac10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <xTaskGetSchedulerState+0x34>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e008      	b.n	800ac36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac24:	4b08      	ldr	r3, [pc, #32]	@ (800ac48 <xTaskGetSchedulerState+0x38>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	607b      	str	r3, [r7, #4]
 800ac30:	e001      	b.n	800ac36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac36:	687b      	ldr	r3, [r7, #4]
	}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	200019e4 	.word	0x200019e4
 800ac48:	20001a00 	.word	0x20001a00

0800ac4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d058      	beq.n	800ad14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac62:	4b2f      	ldr	r3, [pc, #188]	@ (800ad20 <xTaskPriorityDisinherit+0xd4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d00b      	beq.n	800ac84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60fb      	str	r3, [r7, #12]
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	e7fd      	b.n	800ac80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10b      	bne.n	800aca4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	60bb      	str	r3, [r7, #8]
}
 800ac9e:	bf00      	nop
 800aca0:	bf00      	nop
 800aca2:	e7fd      	b.n	800aca0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca8:	1e5a      	subs	r2, r3, #1
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d02c      	beq.n	800ad14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d128      	bne.n	800ad14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3304      	adds	r3, #4
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fb56 	bl	8009378 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace4:	4b0f      	ldr	r3, [pc, #60]	@ (800ad24 <xTaskPriorityDisinherit+0xd8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d903      	bls.n	800acf4 <xTaskPriorityDisinherit+0xa8>
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf0:	4a0c      	ldr	r2, [pc, #48]	@ (800ad24 <xTaskPriorityDisinherit+0xd8>)
 800acf2:	6013      	str	r3, [r2, #0]
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4a09      	ldr	r2, [pc, #36]	@ (800ad28 <xTaskPriorityDisinherit+0xdc>)
 800ad02:	441a      	add	r2, r3
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	3304      	adds	r3, #4
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	f7fe fad7 	bl	80092be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad10:	2301      	movs	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad14:	697b      	ldr	r3, [r7, #20]
	}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001504 	.word	0x20001504
 800ad24:	200019e0 	.word	0x200019e0
 800ad28:	20001508 	.word	0x20001508

0800ad2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad36:	4b21      	ldr	r3, [pc, #132]	@ (800adbc <prvAddCurrentTaskToDelayedList+0x90>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad3c:	4b20      	ldr	r3, [pc, #128]	@ (800adc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fb18 	bl	8009378 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4e:	d10a      	bne.n	800ad66 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d007      	beq.n	800ad66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad56:	4b1a      	ldr	r3, [pc, #104]	@ (800adc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4819      	ldr	r0, [pc, #100]	@ (800adc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad60:	f7fe faad 	bl	80092be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad64:	e026      	b.n	800adb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad6e:	4b14      	ldr	r3, [pc, #80]	@ (800adc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d209      	bcs.n	800ad92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad7e:	4b12      	ldr	r3, [pc, #72]	@ (800adc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4b0f      	ldr	r3, [pc, #60]	@ (800adc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7fe fabb 	bl	8009306 <vListInsert>
}
 800ad90:	e010      	b.n	800adb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad92:	4b0e      	ldr	r3, [pc, #56]	@ (800adcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	4b0a      	ldr	r3, [pc, #40]	@ (800adc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f7fe fab1 	bl	8009306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ada4:	4b0a      	ldr	r3, [pc, #40]	@ (800add0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d202      	bcs.n	800adb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adae:	4a08      	ldr	r2, [pc, #32]	@ (800add0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	6013      	str	r3, [r2, #0]
}
 800adb4:	bf00      	nop
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	200019dc 	.word	0x200019dc
 800adc0:	20001504 	.word	0x20001504
 800adc4:	200019c4 	.word	0x200019c4
 800adc8:	20001994 	.word	0x20001994
 800adcc:	20001990 	.word	0x20001990
 800add0:	200019f8 	.word	0x200019f8

0800add4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b08a      	sub	sp, #40	@ 0x28
 800add8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adde:	f000 fb13 	bl	800b408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ade2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae58 <xTimerCreateTimerTask+0x84>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d021      	beq.n	800ae2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adf2:	1d3a      	adds	r2, r7, #4
 800adf4:	f107 0108 	add.w	r1, r7, #8
 800adf8:	f107 030c 	add.w	r3, r7, #12
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fa17 	bl	8009230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	9202      	str	r2, [sp, #8]
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	2300      	movs	r3, #0
 800ae12:	460a      	mov	r2, r1
 800ae14:	4911      	ldr	r1, [pc, #68]	@ (800ae5c <xTimerCreateTimerTask+0x88>)
 800ae16:	4812      	ldr	r0, [pc, #72]	@ (800ae60 <xTimerCreateTimerTask+0x8c>)
 800ae18:	f7fe ffd2 	bl	8009dc0 <xTaskCreateStatic>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	4a11      	ldr	r2, [pc, #68]	@ (800ae64 <xTimerCreateTimerTask+0x90>)
 800ae20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae22:	4b10      	ldr	r3, [pc, #64]	@ (800ae64 <xTimerCreateTimerTask+0x90>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10b      	bne.n	800ae4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	613b      	str	r3, [r7, #16]
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	e7fd      	b.n	800ae48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae4c:	697b      	ldr	r3, [r7, #20]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20001a34 	.word	0x20001a34
 800ae5c:	0800c078 	.word	0x0800c078
 800ae60:	0800afa1 	.word	0x0800afa1
 800ae64:	20001a38 	.word	0x20001a38

0800ae68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	@ 0x28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10b      	bne.n	800ae98 <xTimerGenericCommand+0x30>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	623b      	str	r3, [r7, #32]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae98:	4b19      	ldr	r3, [pc, #100]	@ (800af00 <xTimerGenericCommand+0x98>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d02a      	beq.n	800aef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b05      	cmp	r3, #5
 800aeb0:	dc18      	bgt.n	800aee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aeb2:	f7ff fead 	bl	800ac10 <xTaskGetSchedulerState>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d109      	bne.n	800aed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aebc:	4b10      	ldr	r3, [pc, #64]	@ (800af00 <xTimerGenericCommand+0x98>)
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	f107 0110 	add.w	r1, r7, #16
 800aec4:	2300      	movs	r3, #0
 800aec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aec8:	f7fe fb8a 	bl	80095e0 <xQueueGenericSend>
 800aecc:	6278      	str	r0, [r7, #36]	@ 0x24
 800aece:	e012      	b.n	800aef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aed0:	4b0b      	ldr	r3, [pc, #44]	@ (800af00 <xTimerGenericCommand+0x98>)
 800aed2:	6818      	ldr	r0, [r3, #0]
 800aed4:	f107 0110 	add.w	r1, r7, #16
 800aed8:	2300      	movs	r3, #0
 800aeda:	2200      	movs	r2, #0
 800aedc:	f7fe fb80 	bl	80095e0 <xQueueGenericSend>
 800aee0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aee2:	e008      	b.n	800aef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aee4:	4b06      	ldr	r3, [pc, #24]	@ (800af00 <xTimerGenericCommand+0x98>)
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	f107 0110 	add.w	r1, r7, #16
 800aeec:	2300      	movs	r3, #0
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	f7fe fc78 	bl	80097e4 <xQueueGenericSendFromISR>
 800aef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3728      	adds	r7, #40	@ 0x28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20001a34 	.word	0x20001a34

0800af04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af02      	add	r7, sp, #8
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af0e:	4b23      	ldr	r3, [pc, #140]	@ (800af9c <prvProcessExpiredTimer+0x98>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe fa2b 	bl	8009378 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d023      	beq.n	800af78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	699a      	ldr	r2, [r3, #24]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	18d1      	adds	r1, r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	6978      	ldr	r0, [r7, #20]
 800af3e:	f000 f8d5 	bl	800b0ec <prvInsertTimerInActiveList>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d020      	beq.n	800af8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af48:	2300      	movs	r3, #0
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	2300      	movs	r3, #0
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	2100      	movs	r1, #0
 800af52:	6978      	ldr	r0, [r7, #20]
 800af54:	f7ff ff88 	bl	800ae68 <xTimerGenericCommand>
 800af58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d114      	bne.n	800af8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	60fb      	str	r3, [r7, #12]
}
 800af72:	bf00      	nop
 800af74:	bf00      	nop
 800af76:	e7fd      	b.n	800af74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af7e:	f023 0301 	bic.w	r3, r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	6978      	ldr	r0, [r7, #20]
 800af90:	4798      	blx	r3
}
 800af92:	bf00      	nop
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20001a2c 	.word	0x20001a2c

0800afa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afa8:	f107 0308 	add.w	r3, r7, #8
 800afac:	4618      	mov	r0, r3
 800afae:	f000 f859 	bl	800b064 <prvGetNextExpireTime>
 800afb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	4619      	mov	r1, r3
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f000 f805 	bl	800afc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afbe:	f000 f8d7 	bl	800b170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afc2:	bf00      	nop
 800afc4:	e7f0      	b.n	800afa8 <prvTimerTask+0x8>
	...

0800afc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afd2:	f7ff fa17 	bl	800a404 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afd6:	f107 0308 	add.w	r3, r7, #8
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f866 	bl	800b0ac <prvSampleTimeNow>
 800afe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d130      	bne.n	800b04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <prvProcessTimerOrBlockTask+0x3c>
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d806      	bhi.n	800b004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aff6:	f7ff fa13 	bl	800a420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ff81 	bl	800af04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b002:	e024      	b.n	800b04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d008      	beq.n	800b01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b00a:	4b13      	ldr	r3, [pc, #76]	@ (800b058 <prvProcessTimerOrBlockTask+0x90>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <prvProcessTimerOrBlockTask+0x50>
 800b014:	2301      	movs	r3, #1
 800b016:	e000      	b.n	800b01a <prvProcessTimerOrBlockTask+0x52>
 800b018:	2300      	movs	r3, #0
 800b01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b01c:	4b0f      	ldr	r3, [pc, #60]	@ (800b05c <prvProcessTimerOrBlockTask+0x94>)
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	4619      	mov	r1, r3
 800b02a:	f7fe fe95 	bl	8009d58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b02e:	f7ff f9f7 	bl	800a420 <xTaskResumeAll>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b038:	4b09      	ldr	r3, [pc, #36]	@ (800b060 <prvProcessTimerOrBlockTask+0x98>)
 800b03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	f3bf 8f6f 	isb	sy
}
 800b048:	e001      	b.n	800b04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b04a:	f7ff f9e9 	bl	800a420 <xTaskResumeAll>
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20001a30 	.word	0x20001a30
 800b05c:	20001a34 	.word	0x20001a34
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b06c:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a8 <prvGetNextExpireTime+0x44>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <prvGetNextExpireTime+0x16>
 800b076:	2201      	movs	r2, #1
 800b078:	e000      	b.n	800b07c <prvGetNextExpireTime+0x18>
 800b07a:	2200      	movs	r2, #0
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d105      	bne.n	800b094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b088:	4b07      	ldr	r3, [pc, #28]	@ (800b0a8 <prvGetNextExpireTime+0x44>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e001      	b.n	800b098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b098:	68fb      	ldr	r3, [r7, #12]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20001a2c 	.word	0x20001a2c

0800b0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0b4:	f7ff fa52 	bl	800a55c <xTaskGetTickCount>
 800b0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e8 <prvSampleTimeNow+0x3c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d205      	bcs.n	800b0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0c4:	f000 f93a 	bl	800b33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	e002      	b.n	800b0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0d6:	4a04      	ldr	r2, [pc, #16]	@ (800b0e8 <prvSampleTimeNow+0x3c>)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20001a3c 	.word	0x20001a3c

0800b0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d812      	bhi.n	800b138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d302      	bcc.n	800b126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e01b      	b.n	800b15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b126:	4b10      	ldr	r3, [pc, #64]	@ (800b168 <prvInsertTimerInActiveList+0x7c>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe f8e8 	bl	8009306 <vListInsert>
 800b136:	e012      	b.n	800b15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d206      	bcs.n	800b14e <prvInsertTimerInActiveList+0x62>
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d302      	bcc.n	800b14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b148:	2301      	movs	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e007      	b.n	800b15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b14e:	4b07      	ldr	r3, [pc, #28]	@ (800b16c <prvInsertTimerInActiveList+0x80>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3304      	adds	r3, #4
 800b156:	4619      	mov	r1, r3
 800b158:	4610      	mov	r0, r2
 800b15a:	f7fe f8d4 	bl	8009306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b15e:	697b      	ldr	r3, [r7, #20]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	20001a30 	.word	0x20001a30
 800b16c:	20001a2c 	.word	0x20001a2c

0800b170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	@ 0x38
 800b174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b176:	e0ce      	b.n	800b316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	da19      	bge.n	800b1b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b17e:	1d3b      	adds	r3, r7, #4
 800b180:	3304      	adds	r3, #4
 800b182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	61fb      	str	r3, [r7, #28]
}
 800b19c:	bf00      	nop
 800b19e:	bf00      	nop
 800b1a0:	e7fd      	b.n	800b19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1a8:	6850      	ldr	r0, [r2, #4]
 800b1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ac:	6892      	ldr	r2, [r2, #8]
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f2c0 80ae 	blt.w	800b316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d004      	beq.n	800b1d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe f8d4 	bl	8009378 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff ff6a 	bl	800b0ac <prvSampleTimeNow>
 800b1d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	f200 8097 	bhi.w	800b310 <prvProcessReceivedCommands+0x1a0>
 800b1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e8 <prvProcessReceivedCommands+0x78>)
 800b1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e8:	0800b211 	.word	0x0800b211
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b211 	.word	0x0800b211
 800b1f4:	0800b287 	.word	0x0800b287
 800b1f8:	0800b29b 	.word	0x0800b29b
 800b1fc:	0800b2e7 	.word	0x0800b2e7
 800b200:	0800b211 	.word	0x0800b211
 800b204:	0800b211 	.word	0x0800b211
 800b208:	0800b287 	.word	0x0800b287
 800b20c:	0800b29b 	.word	0x0800b29b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b216:	f043 0301 	orr.w	r3, r3, #1
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	18d1      	adds	r1, r2, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b22e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b230:	f7ff ff5c 	bl	800b0ec <prvInsertTimerInActiveList>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d06c      	beq.n	800b314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d061      	beq.n	800b314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	441a      	add	r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	2300      	movs	r3, #0
 800b25e:	2100      	movs	r1, #0
 800b260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b262:	f7ff fe01 	bl	800ae68 <xTimerGenericCommand>
 800b266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d152      	bne.n	800b314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	61bb      	str	r3, [r7, #24]
}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	e7fd      	b.n	800b282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b28c:	f023 0301 	bic.w	r3, r3, #1
 800b290:	b2da      	uxtb	r2, r3
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b298:	e03d      	b.n	800b316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2a0:	f043 0301 	orr.w	r3, r3, #1
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10b      	bne.n	800b2d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	617b      	str	r3, [r7, #20]
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	18d1      	adds	r1, r2, r3
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2e0:	f7ff ff04 	bl	800b0ec <prvInsertTimerInActiveList>
					break;
 800b2e4:	e017      	b.n	800b316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2ec:	f003 0302 	and.w	r3, r3, #2
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d103      	bne.n	800b2fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b2f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2f6:	f000 fbe7 	bl	800bac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2fa:	e00c      	b.n	800b316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b302:	f023 0301 	bic.w	r3, r3, #1
 800b306:	b2da      	uxtb	r2, r3
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b30e:	e002      	b.n	800b316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b310:	bf00      	nop
 800b312:	e000      	b.n	800b316 <prvProcessReceivedCommands+0x1a6>
					break;
 800b314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b316:	4b08      	ldr	r3, [pc, #32]	@ (800b338 <prvProcessReceivedCommands+0x1c8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1d39      	adds	r1, r7, #4
 800b31c:	2200      	movs	r2, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe fafe 	bl	8009920 <xQueueReceive>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	f47f af26 	bne.w	800b178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b32c:	bf00      	nop
 800b32e:	bf00      	nop
 800b330:	3730      	adds	r7, #48	@ 0x30
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20001a34 	.word	0x20001a34

0800b33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b342:	e049      	b.n	800b3d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b344:	4b2e      	ldr	r3, [pc, #184]	@ (800b400 <prvSwitchTimerLists+0xc4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34e:	4b2c      	ldr	r3, [pc, #176]	@ (800b400 <prvSwitchTimerLists+0xc4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe f80b 	bl	8009378 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d02f      	beq.n	800b3d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4413      	add	r3, r2
 800b380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	429a      	cmp	r2, r3
 800b388:	d90e      	bls.n	800b3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b396:	4b1a      	ldr	r3, [pc, #104]	@ (800b400 <prvSwitchTimerLists+0xc4>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fd ffb0 	bl	8009306 <vListInsert>
 800b3a6:	e017      	b.n	800b3d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff fd58 	bl	800ae68 <xTimerGenericCommand>
 800b3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10b      	bne.n	800b3d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	603b      	str	r3, [r7, #0]
}
 800b3d2:	bf00      	nop
 800b3d4:	bf00      	nop
 800b3d6:	e7fd      	b.n	800b3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3d8:	4b09      	ldr	r3, [pc, #36]	@ (800b400 <prvSwitchTimerLists+0xc4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1b0      	bne.n	800b344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3e2:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <prvSwitchTimerLists+0xc4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3e8:	4b06      	ldr	r3, [pc, #24]	@ (800b404 <prvSwitchTimerLists+0xc8>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a04      	ldr	r2, [pc, #16]	@ (800b400 <prvSwitchTimerLists+0xc4>)
 800b3ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3f0:	4a04      	ldr	r2, [pc, #16]	@ (800b404 <prvSwitchTimerLists+0xc8>)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	6013      	str	r3, [r2, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20001a2c 	.word	0x20001a2c
 800b404:	20001a30 	.word	0x20001a30

0800b408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b40e:	f000 f96b 	bl	800b6e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b412:	4b15      	ldr	r3, [pc, #84]	@ (800b468 <prvCheckForValidListAndQueue+0x60>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d120      	bne.n	800b45c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b41a:	4814      	ldr	r0, [pc, #80]	@ (800b46c <prvCheckForValidListAndQueue+0x64>)
 800b41c:	f7fd ff22 	bl	8009264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b420:	4813      	ldr	r0, [pc, #76]	@ (800b470 <prvCheckForValidListAndQueue+0x68>)
 800b422:	f7fd ff1f 	bl	8009264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b426:	4b13      	ldr	r3, [pc, #76]	@ (800b474 <prvCheckForValidListAndQueue+0x6c>)
 800b428:	4a10      	ldr	r2, [pc, #64]	@ (800b46c <prvCheckForValidListAndQueue+0x64>)
 800b42a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b42c:	4b12      	ldr	r3, [pc, #72]	@ (800b478 <prvCheckForValidListAndQueue+0x70>)
 800b42e:	4a10      	ldr	r2, [pc, #64]	@ (800b470 <prvCheckForValidListAndQueue+0x68>)
 800b430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b432:	2300      	movs	r3, #0
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	4b11      	ldr	r3, [pc, #68]	@ (800b47c <prvCheckForValidListAndQueue+0x74>)
 800b438:	4a11      	ldr	r2, [pc, #68]	@ (800b480 <prvCheckForValidListAndQueue+0x78>)
 800b43a:	2110      	movs	r1, #16
 800b43c:	200a      	movs	r0, #10
 800b43e:	f7fe f82f 	bl	80094a0 <xQueueGenericCreateStatic>
 800b442:	4603      	mov	r3, r0
 800b444:	4a08      	ldr	r2, [pc, #32]	@ (800b468 <prvCheckForValidListAndQueue+0x60>)
 800b446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b448:	4b07      	ldr	r3, [pc, #28]	@ (800b468 <prvCheckForValidListAndQueue+0x60>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b450:	4b05      	ldr	r3, [pc, #20]	@ (800b468 <prvCheckForValidListAndQueue+0x60>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	490b      	ldr	r1, [pc, #44]	@ (800b484 <prvCheckForValidListAndQueue+0x7c>)
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fc54 	bl	8009d04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b45c:	f000 f976 	bl	800b74c <vPortExitCritical>
}
 800b460:	bf00      	nop
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20001a34 	.word	0x20001a34
 800b46c:	20001a04 	.word	0x20001a04
 800b470:	20001a18 	.word	0x20001a18
 800b474:	20001a2c 	.word	0x20001a2c
 800b478:	20001a30 	.word	0x20001a30
 800b47c:	20001ae0 	.word	0x20001ae0
 800b480:	20001a40 	.word	0x20001a40
 800b484:	0800c080 	.word	0x0800c080

0800b488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3b04      	subs	r3, #4
 800b498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f023 0201 	bic.w	r2, r3, #1
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b04      	subs	r3, #4
 800b4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4b8:	4a0c      	ldr	r2, [pc, #48]	@ (800b4ec <pxPortInitialiseStack+0x64>)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3b14      	subs	r3, #20
 800b4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3b04      	subs	r3, #4
 800b4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f06f 0202 	mvn.w	r2, #2
 800b4d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3b20      	subs	r3, #32
 800b4dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4de:	68fb      	ldr	r3, [r7, #12]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	0800b4f1 	.word	0x0800b4f1

0800b4f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4fa:	4b13      	ldr	r3, [pc, #76]	@ (800b548 <prvTaskExitError+0x58>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d00b      	beq.n	800b51c <prvTaskExitError+0x2c>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	60fb      	str	r3, [r7, #12]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <prvTaskExitError+0x28>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60bb      	str	r3, [r7, #8]
}
 800b52e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b530:	bf00      	nop
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0fc      	beq.n	800b532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20000694 	.word	0x20000694
 800b54c:	00000000 	.word	0x00000000

0800b550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b550:	4b07      	ldr	r3, [pc, #28]	@ (800b570 <pxCurrentTCBConst2>)
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f380 8809 	msr	PSP, r0
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8811 	msr	BASEPRI, r0
 800b56a:	4770      	bx	lr
 800b56c:	f3af 8000 	nop.w

0800b570 <pxCurrentTCBConst2>:
 800b570:	20001504 	.word	0x20001504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b578:	4808      	ldr	r0, [pc, #32]	@ (800b59c <prvPortStartFirstTask+0x24>)
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f380 8808 	msr	MSP, r0
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8814 	msr	CONTROL, r0
 800b58a:	b662      	cpsie	i
 800b58c:	b661      	cpsie	f
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	df00      	svc	0
 800b598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b59a:	bf00      	nop
 800b59c:	e000ed08 	.word	0xe000ed08

0800b5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5a6:	4b47      	ldr	r3, [pc, #284]	@ (800b6c4 <xPortStartScheduler+0x124>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a47      	ldr	r2, [pc, #284]	@ (800b6c8 <xPortStartScheduler+0x128>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10b      	bne.n	800b5c8 <xPortStartScheduler+0x28>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	bf00      	nop
 800b5c6:	e7fd      	b.n	800b5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5c8:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c4 <xPortStartScheduler+0x124>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a3f      	ldr	r2, [pc, #252]	@ (800b6cc <xPortStartScheduler+0x12c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d10b      	bne.n	800b5ea <xPortStartScheduler+0x4a>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	613b      	str	r3, [r7, #16]
}
 800b5e4:	bf00      	nop
 800b5e6:	bf00      	nop
 800b5e8:	e7fd      	b.n	800b5e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5ea:	4b39      	ldr	r3, [pc, #228]	@ (800b6d0 <xPortStartScheduler+0x130>)
 800b5ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	22ff      	movs	r2, #255	@ 0xff
 800b5fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	b2db      	uxtb	r3, r3
 800b602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b604:	78fb      	ldrb	r3, [r7, #3]
 800b606:	b2db      	uxtb	r3, r3
 800b608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	4b31      	ldr	r3, [pc, #196]	@ (800b6d4 <xPortStartScheduler+0x134>)
 800b610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b612:	4b31      	ldr	r3, [pc, #196]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b614:	2207      	movs	r2, #7
 800b616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b618:	e009      	b.n	800b62e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b61a:	4b2f      	ldr	r3, [pc, #188]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3b01      	subs	r3, #1
 800b620:	4a2d      	ldr	r2, [pc, #180]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	b2db      	uxtb	r3, r3
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	b2db      	uxtb	r3, r3
 800b632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b636:	2b80      	cmp	r3, #128	@ 0x80
 800b638:	d0ef      	beq.n	800b61a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b63a:	4b27      	ldr	r3, [pc, #156]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f1c3 0307 	rsb	r3, r3, #7
 800b642:	2b04      	cmp	r3, #4
 800b644:	d00b      	beq.n	800b65e <xPortStartScheduler+0xbe>
	__asm volatile
 800b646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	60bb      	str	r3, [r7, #8]
}
 800b658:	bf00      	nop
 800b65a:	bf00      	nop
 800b65c:	e7fd      	b.n	800b65a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b65e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	4a1c      	ldr	r2, [pc, #112]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b668:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b670:	4a19      	ldr	r2, [pc, #100]	@ (800b6d8 <xPortStartScheduler+0x138>)
 800b672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	b2da      	uxtb	r2, r3
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b67c:	4b17      	ldr	r3, [pc, #92]	@ (800b6dc <xPortStartScheduler+0x13c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a16      	ldr	r2, [pc, #88]	@ (800b6dc <xPortStartScheduler+0x13c>)
 800b682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b688:	4b14      	ldr	r3, [pc, #80]	@ (800b6dc <xPortStartScheduler+0x13c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a13      	ldr	r2, [pc, #76]	@ (800b6dc <xPortStartScheduler+0x13c>)
 800b68e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b694:	f000 f8da 	bl	800b84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b698:	4b11      	ldr	r3, [pc, #68]	@ (800b6e0 <xPortStartScheduler+0x140>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b69e:	f000 f8f9 	bl	800b894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6a2:	4b10      	ldr	r3, [pc, #64]	@ (800b6e4 <xPortStartScheduler+0x144>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b6e4 <xPortStartScheduler+0x144>)
 800b6a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b6ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6ae:	f7ff ff63 	bl	800b578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6b2:	f7ff f82f 	bl	800a714 <vTaskSwitchContext>
	prvTaskExitError();
 800b6b6:	f7ff ff1b 	bl	800b4f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	e000ed00 	.word	0xe000ed00
 800b6c8:	410fc271 	.word	0x410fc271
 800b6cc:	410fc270 	.word	0x410fc270
 800b6d0:	e000e400 	.word	0xe000e400
 800b6d4:	20001b30 	.word	0x20001b30
 800b6d8:	20001b34 	.word	0x20001b34
 800b6dc:	e000ed20 	.word	0xe000ed20
 800b6e0:	20000694 	.word	0x20000694
 800b6e4:	e000ef34 	.word	0xe000ef34

0800b6e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	607b      	str	r3, [r7, #4]
}
 800b700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b702:	4b10      	ldr	r3, [pc, #64]	@ (800b744 <vPortEnterCritical+0x5c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3301      	adds	r3, #1
 800b708:	4a0e      	ldr	r2, [pc, #56]	@ (800b744 <vPortEnterCritical+0x5c>)
 800b70a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b70c:	4b0d      	ldr	r3, [pc, #52]	@ (800b744 <vPortEnterCritical+0x5c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d110      	bne.n	800b736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b714:	4b0c      	ldr	r3, [pc, #48]	@ (800b748 <vPortEnterCritical+0x60>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <vPortEnterCritical+0x4e>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	603b      	str	r3, [r7, #0]
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	e7fd      	b.n	800b732 <vPortEnterCritical+0x4a>
	}
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20000694 	.word	0x20000694
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b752:	4b12      	ldr	r3, [pc, #72]	@ (800b79c <vPortExitCritical+0x50>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10b      	bne.n	800b772 <vPortExitCritical+0x26>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	607b      	str	r3, [r7, #4]
}
 800b76c:	bf00      	nop
 800b76e:	bf00      	nop
 800b770:	e7fd      	b.n	800b76e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b772:	4b0a      	ldr	r3, [pc, #40]	@ (800b79c <vPortExitCritical+0x50>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3b01      	subs	r3, #1
 800b778:	4a08      	ldr	r2, [pc, #32]	@ (800b79c <vPortExitCritical+0x50>)
 800b77a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b77c:	4b07      	ldr	r3, [pc, #28]	@ (800b79c <vPortExitCritical+0x50>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d105      	bne.n	800b790 <vPortExitCritical+0x44>
 800b784:	2300      	movs	r3, #0
 800b786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	f383 8811 	msr	BASEPRI, r3
}
 800b78e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20000694 	.word	0x20000694

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	@ (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7fe ffa0 	bl	800a714 <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20001504 	.word	0x20001504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b822:	f7fe febd 	bl	800a5a0 <xTaskIncrementTick>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82c:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <xPortSysTickHandler+0x40>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f383 8811 	msr	BASEPRI, r3
}
 800b83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b850:	4b0b      	ldr	r3, [pc, #44]	@ (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b856:	4b0b      	ldr	r3, [pc, #44]	@ (800b884 <vPortSetupTimerInterrupt+0x38>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	@ (800b888 <vPortSetupTimerInterrupt+0x3c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a0a      	ldr	r2, [pc, #40]	@ (800b88c <vPortSetupTimerInterrupt+0x40>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	4a09      	ldr	r2, [pc, #36]	@ (800b890 <vPortSetupTimerInterrupt+0x44>)
 800b86a:	3b01      	subs	r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86e:	4b04      	ldr	r3, [pc, #16]	@ (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b870:	2207      	movs	r2, #7
 800b872:	601a      	str	r2, [r3, #0]
}
 800b874:	bf00      	nop
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	e000e010 	.word	0xe000e010
 800b884:	e000e018 	.word	0xe000e018
 800b888:	20000000 	.word	0x20000000
 800b88c:	10624dd3 	.word	0x10624dd3
 800b890:	e000e014 	.word	0xe000e014

0800b894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b8a4 <vPortEnableVFP+0x10>
 800b898:	6801      	ldr	r1, [r0, #0]
 800b89a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b89e:	6001      	str	r1, [r0, #0]
 800b8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8a2:	bf00      	nop
 800b8a4:	e000ed88 	.word	0xe000ed88

0800b8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d915      	bls.n	800b8e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ba:	4a18      	ldr	r2, [pc, #96]	@ (800b91c <vPortValidateInterruptPriority+0x74>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c4:	4b16      	ldr	r3, [pc, #88]	@ (800b920 <vPortValidateInterruptPriority+0x78>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	7afa      	ldrb	r2, [r7, #11]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d20b      	bcs.n	800b8e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b924 <vPortValidateInterruptPriority+0x7c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <vPortValidateInterruptPriority+0x80>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d90b      	bls.n	800b90e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	603b      	str	r3, [r7, #0]
}
 800b908:	bf00      	nop
 800b90a:	bf00      	nop
 800b90c:	e7fd      	b.n	800b90a <vPortValidateInterruptPriority+0x62>
	}
 800b90e:	bf00      	nop
 800b910:	3714      	adds	r7, #20
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	e000e3f0 	.word	0xe000e3f0
 800b920:	20001b30 	.word	0x20001b30
 800b924:	e000ed0c 	.word	0xe000ed0c
 800b928:	20001b34 	.word	0x20001b34

0800b92c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	@ 0x28
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b934:	2300      	movs	r3, #0
 800b936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b938:	f7fe fd64 	bl	800a404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b93c:	4b5c      	ldr	r3, [pc, #368]	@ (800bab0 <pvPortMalloc+0x184>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b944:	f000 f924 	bl	800bb90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b948:	4b5a      	ldr	r3, [pc, #360]	@ (800bab4 <pvPortMalloc+0x188>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4013      	ands	r3, r2
 800b950:	2b00      	cmp	r3, #0
 800b952:	f040 8095 	bne.w	800ba80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01e      	beq.n	800b99a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b95c:	2208      	movs	r2, #8
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4413      	add	r3, r2
 800b962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d015      	beq.n	800b99a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f023 0307 	bic.w	r3, r3, #7
 800b974:	3308      	adds	r3, #8
 800b976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f003 0307 	and.w	r3, r3, #7
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00b      	beq.n	800b99a <pvPortMalloc+0x6e>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	617b      	str	r3, [r7, #20]
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	e7fd      	b.n	800b996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d06f      	beq.n	800ba80 <pvPortMalloc+0x154>
 800b9a0:	4b45      	ldr	r3, [pc, #276]	@ (800bab8 <pvPortMalloc+0x18c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d86a      	bhi.n	800ba80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9aa:	4b44      	ldr	r3, [pc, #272]	@ (800babc <pvPortMalloc+0x190>)
 800b9ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9ae:	4b43      	ldr	r3, [pc, #268]	@ (800babc <pvPortMalloc+0x190>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9b4:	e004      	b.n	800b9c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d903      	bls.n	800b9d2 <pvPortMalloc+0xa6>
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1f1      	bne.n	800b9b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9d2:	4b37      	ldr	r3, [pc, #220]	@ (800bab0 <pvPortMalloc+0x184>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d051      	beq.n	800ba80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	4413      	add	r3, r2
 800b9e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	1ad2      	subs	r2, r2, r3
 800b9f6:	2308      	movs	r3, #8
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d920      	bls.n	800ba40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4413      	add	r3, r2
 800ba04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	f003 0307 	and.w	r3, r3, #7
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <pvPortMalloc+0xfc>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	613b      	str	r3, [r7, #16]
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	e7fd      	b.n	800ba24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	1ad2      	subs	r2, r2, r3
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba3a:	69b8      	ldr	r0, [r7, #24]
 800ba3c:	f000 f90a 	bl	800bc54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba40:	4b1d      	ldr	r3, [pc, #116]	@ (800bab8 <pvPortMalloc+0x18c>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bab8 <pvPortMalloc+0x18c>)
 800ba4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba4e:	4b1a      	ldr	r3, [pc, #104]	@ (800bab8 <pvPortMalloc+0x18c>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b1b      	ldr	r3, [pc, #108]	@ (800bac0 <pvPortMalloc+0x194>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d203      	bcs.n	800ba62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba5a:	4b17      	ldr	r3, [pc, #92]	@ (800bab8 <pvPortMalloc+0x18c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a18      	ldr	r2, [pc, #96]	@ (800bac0 <pvPortMalloc+0x194>)
 800ba60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4b13      	ldr	r3, [pc, #76]	@ (800bab4 <pvPortMalloc+0x188>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba76:	4b13      	ldr	r3, [pc, #76]	@ (800bac4 <pvPortMalloc+0x198>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	4a11      	ldr	r2, [pc, #68]	@ (800bac4 <pvPortMalloc+0x198>)
 800ba7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba80:	f7fe fcce 	bl	800a420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00b      	beq.n	800baa6 <pvPortMalloc+0x17a>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	60fb      	str	r3, [r7, #12]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <pvPortMalloc+0x176>
	return pvReturn;
 800baa6:	69fb      	ldr	r3, [r7, #28]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3728      	adds	r7, #40	@ 0x28
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20002740 	.word	0x20002740
 800bab4:	20002754 	.word	0x20002754
 800bab8:	20002744 	.word	0x20002744
 800babc:	20002738 	.word	0x20002738
 800bac0:	20002748 	.word	0x20002748
 800bac4:	2000274c 	.word	0x2000274c

0800bac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d04f      	beq.n	800bb7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bada:	2308      	movs	r3, #8
 800badc:	425b      	negs	r3, r3
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	4413      	add	r3, r2
 800bae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	4b25      	ldr	r3, [pc, #148]	@ (800bb84 <vPortFree+0xbc>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4013      	ands	r3, r2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10b      	bne.n	800bb0e <vPortFree+0x46>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	60fb      	str	r3, [r7, #12]
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	e7fd      	b.n	800bb0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00b      	beq.n	800bb2e <vPortFree+0x66>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60bb      	str	r3, [r7, #8]
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	e7fd      	b.n	800bb2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	4b14      	ldr	r3, [pc, #80]	@ (800bb84 <vPortFree+0xbc>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4013      	ands	r3, r2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01e      	beq.n	800bb7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11a      	bne.n	800bb7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	4b0e      	ldr	r3, [pc, #56]	@ (800bb84 <vPortFree+0xbc>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	43db      	mvns	r3, r3
 800bb4e:	401a      	ands	r2, r3
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb54:	f7fe fc56 	bl	800a404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb88 <vPortFree+0xc0>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4413      	add	r3, r2
 800bb62:	4a09      	ldr	r2, [pc, #36]	@ (800bb88 <vPortFree+0xc0>)
 800bb64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb66:	6938      	ldr	r0, [r7, #16]
 800bb68:	f000 f874 	bl	800bc54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb6c:	4b07      	ldr	r3, [pc, #28]	@ (800bb8c <vPortFree+0xc4>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	4a06      	ldr	r2, [pc, #24]	@ (800bb8c <vPortFree+0xc4>)
 800bb74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb76:	f7fe fc53 	bl	800a420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb7a:	bf00      	nop
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20002754 	.word	0x20002754
 800bb88:	20002744 	.word	0x20002744
 800bb8c:	20002750 	.word	0x20002750

0800bb90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bb9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb9c:	4b27      	ldr	r3, [pc, #156]	@ (800bc3c <prvHeapInit+0xac>)
 800bb9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f003 0307 	and.w	r3, r3, #7
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00c      	beq.n	800bbc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3307      	adds	r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f023 0307 	bic.w	r3, r3, #7
 800bbb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	4a1f      	ldr	r2, [pc, #124]	@ (800bc3c <prvHeapInit+0xac>)
 800bbc0:	4413      	add	r3, r2
 800bbc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbc8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc40 <prvHeapInit+0xb0>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbce:	4b1c      	ldr	r3, [pc, #112]	@ (800bc40 <prvHeapInit+0xb0>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	4413      	add	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbdc:	2208      	movs	r2, #8
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	1a9b      	subs	r3, r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 0307 	bic.w	r3, r3, #7
 800bbea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4a15      	ldr	r2, [pc, #84]	@ (800bc44 <prvHeapInit+0xb4>)
 800bbf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbf2:	4b14      	ldr	r3, [pc, #80]	@ (800bc44 <prvHeapInit+0xb4>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbfa:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <prvHeapInit+0xb4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	1ad2      	subs	r2, r2, r3
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc10:	4b0c      	ldr	r3, [pc, #48]	@ (800bc44 <prvHeapInit+0xb4>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	4a0a      	ldr	r2, [pc, #40]	@ (800bc48 <prvHeapInit+0xb8>)
 800bc1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	4a09      	ldr	r2, [pc, #36]	@ (800bc4c <prvHeapInit+0xbc>)
 800bc26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc28:	4b09      	ldr	r3, [pc, #36]	@ (800bc50 <prvHeapInit+0xc0>)
 800bc2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bc2e:	601a      	str	r2, [r3, #0]
}
 800bc30:	bf00      	nop
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	20001b38 	.word	0x20001b38
 800bc40:	20002738 	.word	0x20002738
 800bc44:	20002740 	.word	0x20002740
 800bc48:	20002748 	.word	0x20002748
 800bc4c:	20002744 	.word	0x20002744
 800bc50:	20002754 	.word	0x20002754

0800bc54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc5c:	4b28      	ldr	r3, [pc, #160]	@ (800bd00 <prvInsertBlockIntoFreeList+0xac>)
 800bc5e:	60fb      	str	r3, [r7, #12]
 800bc60:	e002      	b.n	800bc68 <prvInsertBlockIntoFreeList+0x14>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d8f7      	bhi.n	800bc62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d108      	bne.n	800bc96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	441a      	add	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	441a      	add	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d118      	bne.n	800bcdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b15      	ldr	r3, [pc, #84]	@ (800bd04 <prvInsertBlockIntoFreeList+0xb0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d00d      	beq.n	800bcd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	441a      	add	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	e008      	b.n	800bce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd04 <prvInsertBlockIntoFreeList+0xb0>)
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	e003      	b.n	800bce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d002      	beq.n	800bcf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcf2:	bf00      	nop
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	20002738 	.word	0x20002738
 800bd04:	20002740 	.word	0x20002740

0800bd08 <memset>:
 800bd08:	4402      	add	r2, r0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d100      	bne.n	800bd12 <memset+0xa>
 800bd10:	4770      	bx	lr
 800bd12:	f803 1b01 	strb.w	r1, [r3], #1
 800bd16:	e7f9      	b.n	800bd0c <memset+0x4>

0800bd18 <_reclaim_reent>:
 800bd18:	4b2d      	ldr	r3, [pc, #180]	@ (800bdd0 <_reclaim_reent+0xb8>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4283      	cmp	r3, r0
 800bd1e:	b570      	push	{r4, r5, r6, lr}
 800bd20:	4604      	mov	r4, r0
 800bd22:	d053      	beq.n	800bdcc <_reclaim_reent+0xb4>
 800bd24:	69c3      	ldr	r3, [r0, #28]
 800bd26:	b31b      	cbz	r3, 800bd70 <_reclaim_reent+0x58>
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	b163      	cbz	r3, 800bd46 <_reclaim_reent+0x2e>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	69e3      	ldr	r3, [r4, #28]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	5959      	ldr	r1, [r3, r5]
 800bd34:	b9b1      	cbnz	r1, 800bd64 <_reclaim_reent+0x4c>
 800bd36:	3504      	adds	r5, #4
 800bd38:	2d80      	cmp	r5, #128	@ 0x80
 800bd3a:	d1f8      	bne.n	800bd2e <_reclaim_reent+0x16>
 800bd3c:	69e3      	ldr	r3, [r4, #28]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	68d9      	ldr	r1, [r3, #12]
 800bd42:	f000 f881 	bl	800be48 <_free_r>
 800bd46:	69e3      	ldr	r3, [r4, #28]
 800bd48:	6819      	ldr	r1, [r3, #0]
 800bd4a:	b111      	cbz	r1, 800bd52 <_reclaim_reent+0x3a>
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 f87b 	bl	800be48 <_free_r>
 800bd52:	69e3      	ldr	r3, [r4, #28]
 800bd54:	689d      	ldr	r5, [r3, #8]
 800bd56:	b15d      	cbz	r5, 800bd70 <_reclaim_reent+0x58>
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	682d      	ldr	r5, [r5, #0]
 800bd5e:	f000 f873 	bl	800be48 <_free_r>
 800bd62:	e7f8      	b.n	800bd56 <_reclaim_reent+0x3e>
 800bd64:	680e      	ldr	r6, [r1, #0]
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 f86e 	bl	800be48 <_free_r>
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	e7e1      	b.n	800bd34 <_reclaim_reent+0x1c>
 800bd70:	6961      	ldr	r1, [r4, #20]
 800bd72:	b111      	cbz	r1, 800bd7a <_reclaim_reent+0x62>
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 f867 	bl	800be48 <_free_r>
 800bd7a:	69e1      	ldr	r1, [r4, #28]
 800bd7c:	b111      	cbz	r1, 800bd84 <_reclaim_reent+0x6c>
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 f862 	bl	800be48 <_free_r>
 800bd84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd86:	b111      	cbz	r1, 800bd8e <_reclaim_reent+0x76>
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 f85d 	bl	800be48 <_free_r>
 800bd8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd90:	b111      	cbz	r1, 800bd98 <_reclaim_reent+0x80>
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 f858 	bl	800be48 <_free_r>
 800bd98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd9a:	b111      	cbz	r1, 800bda2 <_reclaim_reent+0x8a>
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f000 f853 	bl	800be48 <_free_r>
 800bda2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bda4:	b111      	cbz	r1, 800bdac <_reclaim_reent+0x94>
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f84e 	bl	800be48 <_free_r>
 800bdac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bdae:	b111      	cbz	r1, 800bdb6 <_reclaim_reent+0x9e>
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 f849 	bl	800be48 <_free_r>
 800bdb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bdb8:	b111      	cbz	r1, 800bdc0 <_reclaim_reent+0xa8>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 f844 	bl	800be48 <_free_r>
 800bdc0:	6a23      	ldr	r3, [r4, #32]
 800bdc2:	b11b      	cbz	r3, 800bdcc <_reclaim_reent+0xb4>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdca:	4718      	bx	r3
 800bdcc:	bd70      	pop	{r4, r5, r6, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000698 	.word	0x20000698

0800bdd4 <__errno>:
 800bdd4:	4b01      	ldr	r3, [pc, #4]	@ (800bddc <__errno+0x8>)
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	20000698 	.word	0x20000698

0800bde0 <__libc_init_array>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	4d0d      	ldr	r5, [pc, #52]	@ (800be18 <__libc_init_array+0x38>)
 800bde4:	4c0d      	ldr	r4, [pc, #52]	@ (800be1c <__libc_init_array+0x3c>)
 800bde6:	1b64      	subs	r4, r4, r5
 800bde8:	10a4      	asrs	r4, r4, #2
 800bdea:	2600      	movs	r6, #0
 800bdec:	42a6      	cmp	r6, r4
 800bdee:	d109      	bne.n	800be04 <__libc_init_array+0x24>
 800bdf0:	4d0b      	ldr	r5, [pc, #44]	@ (800be20 <__libc_init_array+0x40>)
 800bdf2:	4c0c      	ldr	r4, [pc, #48]	@ (800be24 <__libc_init_array+0x44>)
 800bdf4:	f000 f920 	bl	800c038 <_init>
 800bdf8:	1b64      	subs	r4, r4, r5
 800bdfa:	10a4      	asrs	r4, r4, #2
 800bdfc:	2600      	movs	r6, #0
 800bdfe:	42a6      	cmp	r6, r4
 800be00:	d105      	bne.n	800be0e <__libc_init_array+0x2e>
 800be02:	bd70      	pop	{r4, r5, r6, pc}
 800be04:	f855 3b04 	ldr.w	r3, [r5], #4
 800be08:	4798      	blx	r3
 800be0a:	3601      	adds	r6, #1
 800be0c:	e7ee      	b.n	800bdec <__libc_init_array+0xc>
 800be0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be12:	4798      	blx	r3
 800be14:	3601      	adds	r6, #1
 800be16:	e7f2      	b.n	800bdfe <__libc_init_array+0x1e>
 800be18:	0800c158 	.word	0x0800c158
 800be1c:	0800c158 	.word	0x0800c158
 800be20:	0800c158 	.word	0x0800c158
 800be24:	0800c15c 	.word	0x0800c15c

0800be28 <__retarget_lock_acquire_recursive>:
 800be28:	4770      	bx	lr

0800be2a <__retarget_lock_release_recursive>:
 800be2a:	4770      	bx	lr

0800be2c <memcpy>:
 800be2c:	440a      	add	r2, r1
 800be2e:	4291      	cmp	r1, r2
 800be30:	f100 33ff 	add.w	r3, r0, #4294967295
 800be34:	d100      	bne.n	800be38 <memcpy+0xc>
 800be36:	4770      	bx	lr
 800be38:	b510      	push	{r4, lr}
 800be3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be42:	4291      	cmp	r1, r2
 800be44:	d1f9      	bne.n	800be3a <memcpy+0xe>
 800be46:	bd10      	pop	{r4, pc}

0800be48 <_free_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4605      	mov	r5, r0
 800be4c:	2900      	cmp	r1, #0
 800be4e:	d041      	beq.n	800bed4 <_free_r+0x8c>
 800be50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be54:	1f0c      	subs	r4, r1, #4
 800be56:	2b00      	cmp	r3, #0
 800be58:	bfb8      	it	lt
 800be5a:	18e4      	addlt	r4, r4, r3
 800be5c:	f000 f83e 	bl	800bedc <__malloc_lock>
 800be60:	4a1d      	ldr	r2, [pc, #116]	@ (800bed8 <_free_r+0x90>)
 800be62:	6813      	ldr	r3, [r2, #0]
 800be64:	b933      	cbnz	r3, 800be74 <_free_r+0x2c>
 800be66:	6063      	str	r3, [r4, #4]
 800be68:	6014      	str	r4, [r2, #0]
 800be6a:	4628      	mov	r0, r5
 800be6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be70:	f000 b83a 	b.w	800bee8 <__malloc_unlock>
 800be74:	42a3      	cmp	r3, r4
 800be76:	d908      	bls.n	800be8a <_free_r+0x42>
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	1821      	adds	r1, r4, r0
 800be7c:	428b      	cmp	r3, r1
 800be7e:	bf01      	itttt	eq
 800be80:	6819      	ldreq	r1, [r3, #0]
 800be82:	685b      	ldreq	r3, [r3, #4]
 800be84:	1809      	addeq	r1, r1, r0
 800be86:	6021      	streq	r1, [r4, #0]
 800be88:	e7ed      	b.n	800be66 <_free_r+0x1e>
 800be8a:	461a      	mov	r2, r3
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	b10b      	cbz	r3, 800be94 <_free_r+0x4c>
 800be90:	42a3      	cmp	r3, r4
 800be92:	d9fa      	bls.n	800be8a <_free_r+0x42>
 800be94:	6811      	ldr	r1, [r2, #0]
 800be96:	1850      	adds	r0, r2, r1
 800be98:	42a0      	cmp	r0, r4
 800be9a:	d10b      	bne.n	800beb4 <_free_r+0x6c>
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	4401      	add	r1, r0
 800bea0:	1850      	adds	r0, r2, r1
 800bea2:	4283      	cmp	r3, r0
 800bea4:	6011      	str	r1, [r2, #0]
 800bea6:	d1e0      	bne.n	800be6a <_free_r+0x22>
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	6053      	str	r3, [r2, #4]
 800beae:	4408      	add	r0, r1
 800beb0:	6010      	str	r0, [r2, #0]
 800beb2:	e7da      	b.n	800be6a <_free_r+0x22>
 800beb4:	d902      	bls.n	800bebc <_free_r+0x74>
 800beb6:	230c      	movs	r3, #12
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	e7d6      	b.n	800be6a <_free_r+0x22>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	1821      	adds	r1, r4, r0
 800bec0:	428b      	cmp	r3, r1
 800bec2:	bf04      	itt	eq
 800bec4:	6819      	ldreq	r1, [r3, #0]
 800bec6:	685b      	ldreq	r3, [r3, #4]
 800bec8:	6063      	str	r3, [r4, #4]
 800beca:	bf04      	itt	eq
 800becc:	1809      	addeq	r1, r1, r0
 800bece:	6021      	streq	r1, [r4, #0]
 800bed0:	6054      	str	r4, [r2, #4]
 800bed2:	e7ca      	b.n	800be6a <_free_r+0x22>
 800bed4:	bd38      	pop	{r3, r4, r5, pc}
 800bed6:	bf00      	nop
 800bed8:	20002894 	.word	0x20002894

0800bedc <__malloc_lock>:
 800bedc:	4801      	ldr	r0, [pc, #4]	@ (800bee4 <__malloc_lock+0x8>)
 800bede:	f7ff bfa3 	b.w	800be28 <__retarget_lock_acquire_recursive>
 800bee2:	bf00      	nop
 800bee4:	20002890 	.word	0x20002890

0800bee8 <__malloc_unlock>:
 800bee8:	4801      	ldr	r0, [pc, #4]	@ (800bef0 <__malloc_unlock+0x8>)
 800beea:	f7ff bf9e 	b.w	800be2a <__retarget_lock_release_recursive>
 800beee:	bf00      	nop
 800bef0:	20002890 	.word	0x20002890

0800bef4 <fmodf>:
 800bef4:	b508      	push	{r3, lr}
 800bef6:	ed2d 8b02 	vpush	{d8}
 800befa:	eef0 8a40 	vmov.f32	s17, s0
 800befe:	eeb0 8a60 	vmov.f32	s16, s1
 800bf02:	f000 f817 	bl	800bf34 <__ieee754_fmodf>
 800bf06:	eef4 8a48 	vcmp.f32	s17, s16
 800bf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0e:	d60c      	bvs.n	800bf2a <fmodf+0x36>
 800bf10:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bf30 <fmodf+0x3c>
 800bf14:	eeb4 8a68 	vcmp.f32	s16, s17
 800bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1c:	d105      	bne.n	800bf2a <fmodf+0x36>
 800bf1e:	f7ff ff59 	bl	800bdd4 <__errno>
 800bf22:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf26:	2321      	movs	r3, #33	@ 0x21
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	ecbd 8b02 	vpop	{d8}
 800bf2e:	bd08      	pop	{r3, pc}
 800bf30:	00000000 	.word	0x00000000

0800bf34 <__ieee754_fmodf>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	ee10 6a90 	vmov	r6, s1
 800bf3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bf3e:	1e5a      	subs	r2, r3, #1
 800bf40:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf44:	d206      	bcs.n	800bf54 <__ieee754_fmodf+0x20>
 800bf46:	ee10 4a10 	vmov	r4, s0
 800bf4a:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800bf4e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bf52:	d304      	bcc.n	800bf5e <__ieee754_fmodf+0x2a>
 800bf54:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bf58:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	4299      	cmp	r1, r3
 800bf60:	dbfc      	blt.n	800bf5c <__ieee754_fmodf+0x28>
 800bf62:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800bf66:	d105      	bne.n	800bf74 <__ieee754_fmodf+0x40>
 800bf68:	4b32      	ldr	r3, [pc, #200]	@ (800c034 <__ieee754_fmodf+0x100>)
 800bf6a:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800bf6e:	ed93 0a00 	vldr	s0, [r3]
 800bf72:	e7f3      	b.n	800bf5c <__ieee754_fmodf+0x28>
 800bf74:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800bf78:	d146      	bne.n	800c008 <__ieee754_fmodf+0xd4>
 800bf7a:	020a      	lsls	r2, r1, #8
 800bf7c:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800bf80:	2a00      	cmp	r2, #0
 800bf82:	dc3e      	bgt.n	800c002 <__ieee754_fmodf+0xce>
 800bf84:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bf88:	bf01      	itttt	eq
 800bf8a:	021a      	lsleq	r2, r3, #8
 800bf8c:	fab2 f282 	clzeq	r2, r2
 800bf90:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800bf94:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800bf98:	bf16      	itet	ne
 800bf9a:	15da      	asrne	r2, r3, #23
 800bf9c:	3282      	addeq	r2, #130	@ 0x82
 800bf9e:	3a7f      	subne	r2, #127	@ 0x7f
 800bfa0:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800bfa4:	bfbb      	ittet	lt
 800bfa6:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800bfaa:	1a24      	sublt	r4, r4, r0
 800bfac:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800bfb0:	40a1      	lsllt	r1, r4
 800bfb2:	bfa8      	it	ge
 800bfb4:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800bfb8:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800bfbc:	bfb5      	itete	lt
 800bfbe:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800bfc2:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800bfc6:	1aa4      	sublt	r4, r4, r2
 800bfc8:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800bfcc:	bfb8      	it	lt
 800bfce:	fa03 f404 	lsllt.w	r4, r3, r4
 800bfd2:	1a80      	subs	r0, r0, r2
 800bfd4:	1b0b      	subs	r3, r1, r4
 800bfd6:	b9d0      	cbnz	r0, 800c00e <__ieee754_fmodf+0xda>
 800bfd8:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800bfdc:	bf28      	it	cs
 800bfde:	460b      	movcs	r3, r1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0c1      	beq.n	800bf68 <__ieee754_fmodf+0x34>
 800bfe4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfe8:	db19      	blt.n	800c01e <__ieee754_fmodf+0xea>
 800bfea:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800bfee:	db19      	blt.n	800c024 <__ieee754_fmodf+0xf0>
 800bff0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800bff4:	327f      	adds	r2, #127	@ 0x7f
 800bff6:	432b      	orrs	r3, r5
 800bff8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bffc:	ee00 3a10 	vmov	s0, r3
 800c000:	e7ac      	b.n	800bf5c <__ieee754_fmodf+0x28>
 800c002:	3801      	subs	r0, #1
 800c004:	0052      	lsls	r2, r2, #1
 800c006:	e7bb      	b.n	800bf80 <__ieee754_fmodf+0x4c>
 800c008:	15c8      	asrs	r0, r1, #23
 800c00a:	387f      	subs	r0, #127	@ 0x7f
 800c00c:	e7ba      	b.n	800bf84 <__ieee754_fmodf+0x50>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da02      	bge.n	800c018 <__ieee754_fmodf+0xe4>
 800c012:	0049      	lsls	r1, r1, #1
 800c014:	3801      	subs	r0, #1
 800c016:	e7dd      	b.n	800bfd4 <__ieee754_fmodf+0xa0>
 800c018:	d0a6      	beq.n	800bf68 <__ieee754_fmodf+0x34>
 800c01a:	0059      	lsls	r1, r3, #1
 800c01c:	e7fa      	b.n	800c014 <__ieee754_fmodf+0xe0>
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	3a01      	subs	r2, #1
 800c022:	e7df      	b.n	800bfe4 <__ieee754_fmodf+0xb0>
 800c024:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c028:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c02c:	3282      	adds	r2, #130	@ 0x82
 800c02e:	4113      	asrs	r3, r2
 800c030:	432b      	orrs	r3, r5
 800c032:	e7e3      	b.n	800bffc <__ieee754_fmodf+0xc8>
 800c034:	0800c148 	.word	0x0800c148

0800c038 <_init>:
 800c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03a:	bf00      	nop
 800c03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03e:	bc08      	pop	{r3}
 800c040:	469e      	mov	lr, r3
 800c042:	4770      	bx	lr

0800c044 <_fini>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	bf00      	nop
 800c048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c04a:	bc08      	pop	{r3}
 800c04c:	469e      	mov	lr, r3
 800c04e:	4770      	bx	lr
