
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad50  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800af30  0800af30  0000bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b034  0800b034  0000d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b034  0800b034  0000c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b03c  0800b03c  0000d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b03c  0800b03c  0000c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b040  0800b040  0000c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800b044  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021ac  20000210  0800b254  0000d210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023bc  0800b254  0000d3bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003211b  00000000  00000000  0000d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b9d  00000000  00000000  0003f35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e8  00000000  00000000  00045ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d3a  00000000  00000000  000484e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296cc  00000000  00000000  0004a21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003368c  00000000  00000000  000738e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3591  00000000  00000000  000a6f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1fc  00000000  00000000  0019a548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001a4744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800af18 	.word	0x0800af18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	0800af18 	.word	0x0800af18

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f00a fbe7 	bl	800ad38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005b4:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005da:	f001 ff01 	bl	80023e0 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005e4:	f000 fbcc 	bl	8000d80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005f4:	f002 fe7a 	bl	80032ec <HAL_ADCEx_MultiModeConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005fe:	f000 fbbf 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_ADC1_Init+0x120>)
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2306      	movs	r3, #6
 8000608:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060e:	237f      	movs	r3, #127	@ 0x7f
 8000610:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000612:	2304      	movs	r3, #4
 8000614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000620:	f002 f934 	bl	800288c <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800062a:	f000 fba9 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000638:	f002 f928 	bl	800288c <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fb9d 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000646:	2312      	movs	r3, #18
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000650:	f002 f91c 	bl	800288c <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800065a:	f000 fb91 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	@ 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000022c 	.word	0x2000022c
 800066c:	2e300800 	.word	0x2e300800

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	@ 0x68
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00a fb51 	bl	800ad38 <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800069e:	d160      	bne.n	8000762 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 f84d 	bl	8005750 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006bc:	f000 fb60 	bl	8000d80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80006f0:	f641 0302 	movw	r3, #6146	@ 0x1802
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	@ (8000770 <HAL_ADC_MspInit+0x100>)
 8000706:	f003 ff2b 	bl	8004560 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <HAL_ADC_MspInit+0x108>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000712:	2205      	movs	r2, #5
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800072a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800073a:	2220      	movs	r2, #32
 800073c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000748:	f002 ff86 	bl	8003658 <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000752:	f000 fb15 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075a:	655a      	str	r2, [r3, #84]	@ 0x54
 800075c:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3768      	adds	r7, #104	@ 0x68
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	20000298 	.word	0x20000298
 8000778:	40020408 	.word	0x40020408

0800077c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <MX_FREERTOS_Init+0x38>)
 8000782:	2100      	movs	r1, #0
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_FREERTOS_Init+0x3c>)
 8000786:	f007 fc8a 	bl	800809e <osThreadNew>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <MX_FREERTOS_Init+0x40>)
 800078e:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_FREERTOS_Init+0x44>)
 8000792:	2100      	movs	r1, #0
 8000794:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <MX_FREERTOS_Init+0x48>)
 8000796:	f007 fc82 	bl	800809e <osThreadNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <MX_FREERTOS_Init+0x4c>)
 800079e:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 80007a0:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <MX_FREERTOS_Init+0x50>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <MX_FREERTOS_Init+0x54>)
 80007a6:	f007 fc7a 	bl	800809e <osThreadNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <MX_FREERTOS_Init+0x58>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	0800af68 	.word	0x0800af68
 80007b8:	08001731 	.word	0x08001731
 80007bc:	200002f8 	.word	0x200002f8
 80007c0:	0800af8c 	.word	0x0800af8c
 80007c4:	08001bc1 	.word	0x08001bc1
 80007c8:	200002fc 	.word	0x200002fc
 80007cc:	0800afb0 	.word	0x0800afb0
 80007d0:	08001309 	.word	0x08001309
 80007d4:	20000300 	.word	0x20000300

080007d8 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <MX_CORDIC_Init+0x24>)
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007e4:	f002 fe26 	bl	8003434 <HAL_CORDIC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80007ee:	f000 fac7 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000304 	.word	0x20000304
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <HAL_CORDIC_MspInit+0x38>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10b      	bne.n	800082a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_CORDIC_MspInit+0x3c>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000816:	4a09      	ldr	r2, [pc, #36]	@ (800083c <HAL_CORDIC_MspInit+0x3c>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6493      	str	r3, [r2, #72]	@ 0x48
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <HAL_CORDIC_MspInit+0x3c>)
 8000820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40021000 	.word	0x40021000

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_DMA_Init+0x50>)
 8000848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <MX_DMA_Init+0x50>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6493      	str	r3, [r2, #72]	@ 0x48
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_DMA_Init+0x50>)
 8000854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_DMA_Init+0x50>)
 8000860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <MX_DMA_Init+0x50>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6493      	str	r3, [r2, #72]	@ 0x48
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_DMA_Init+0x50>)
 800086c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2105      	movs	r1, #5
 800087a:	2038      	movs	r0, #56	@ 0x38
 800087c:	f002 fec4 	bl	8003608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000880:	2038      	movs	r0, #56	@ 0x38
 8000882:	f002 fedb 	bl	800363c <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 800089a:	4a20      	ldr	r2, [pc, #128]	@ (800091c <MX_FDCAN1_Init+0x88>)
 800089c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800089e:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008be:	2200      	movs	r2, #0
 80008c0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008c4:	2214      	movs	r2, #20
 80008c6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008c8:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008d0:	220e      	movs	r2, #14
 80008d2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008dc:	2202      	movs	r2, #2
 80008de:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008e8:	220e      	movs	r2, #14
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 8000900:	2200      	movs	r2, #0
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_FDCAN1_Init+0x84>)
 8000906:	f003 f97b 	bl	8003c00 <HAL_FDCAN_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000910:	f000 fa36 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000032c 	.word	0x2000032c
 800091c:	40006400 	.word	0x40006400

08000920 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b09a      	sub	sp, #104	@ 0x68
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	2244      	movs	r2, #68	@ 0x44
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f00a f9f9 	bl	800ad38 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a28      	ldr	r2, [pc, #160]	@ (80009ec <HAL_FDCAN_MspInit+0xcc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d149      	bne.n	80009e4 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000954:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fef5 	bl	8005750 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800096c:	f000 fa08 	bl	8000d80 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <HAL_FDCAN_MspInit+0xd0>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000974:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <HAL_FDCAN_MspInit+0xd0>)
 8000976:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097a:	6593      	str	r3, [r2, #88]	@ 0x58
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <HAL_FDCAN_MspInit+0xd0>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_FDCAN_MspInit+0xd0>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <HAL_FDCAN_MspInit+0xd0>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_FDCAN_MspInit+0xd0>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009b2:	2309      	movs	r3, #9
 80009b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c0:	f003 fdce 	bl	8004560 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2105      	movs	r1, #5
 80009c8:	2015      	movs	r0, #21
 80009ca:	f002 fe1d 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009ce:	2015      	movs	r0, #21
 80009d0:	f002 fe34 	bl	800363c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2105      	movs	r1, #5
 80009d8:	2016      	movs	r0, #22
 80009da:	f002 fe15 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80009de:	2016      	movs	r0, #22
 80009e0:	f002 fe2c 	bl	800363c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80009e4:	bf00      	nop
 80009e6:	3768      	adds	r7, #104	@ 0x68
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40006400 	.word	0x40006400
 80009f0:	40021000 	.word	0x40021000

080009f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a28      	ldr	r2, [pc, #160]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_GPIO_Init+0xd4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000a70:	4816      	ldr	r0, [pc, #88]	@ (8000acc <MX_GPIO_Init+0xd8>)
 8000a72:	f003 fef7 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000a76:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480f      	ldr	r0, [pc, #60]	@ (8000acc <MX_GPIO_Init+0xd8>)
 8000a90:	f003 fd66 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a94:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a9a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000aac:	f003 fd58 	bl	8004560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	2028      	movs	r0, #40	@ 0x28
 8000ab6:	f002 fda7 	bl	8003608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aba:	2028      	movs	r0, #40	@ 0x28
 8000abc:	f002 fdbe 	bl	800363c <HAL_NVIC_EnableIRQ>

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	@ 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	48000800 	.word	0x48000800

08000ad4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <MX_I2C1_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b10:	f003 fed8 	bl	80048c4 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 f931 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b22:	f003 ff6a 	bl	80049fa <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 f928 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b34:	f003 ffac 	bl	8004a90 <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 f91f 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000390 	.word	0x20000390
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40b285c2 	.word	0x40b285c2

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09c      	sub	sp, #112	@ 0x70
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	2244      	movs	r2, #68	@ 0x44
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00a f8df 	bl	800ad38 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d153      	bne.n	8000c2c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b84:	2340      	movs	r3, #64	@ 0x40
 8000b86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f107 0318 	add.w	r3, r7, #24
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fddd 	bl	8005750 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b9c:	f000 f8f0 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a24      	ldr	r2, [pc, #144]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f003 fcb6 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf8:	2312      	movs	r3, #18
 8000bfa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c04:	2304      	movs	r3, #4
 8000c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <HAL_I2C_MspInit+0xe8>)
 8000c10:	f003 fca6 	bl	8004560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c18:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_I2C_MspInit+0xe4>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3770      	adds	r7, #112	@ 0x70
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f001 f978 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f83a 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f7ff fed2 	bl	80009f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c50:	f7ff fdf6 	bl	8000840 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fc7a 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000c58:	f7ff fe1c 	bl	8000894 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000c5c:	f000 f9a0 	bl	8000fa0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000c60:	f7ff ff38 	bl	8000ad4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c64:	f000 fa4e 	bl	8001104 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000c68:	f7ff fdb6 	bl	80007d8 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c6c:	f007 f9b8 	bl	8007fe0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c70:	f7ff fd84 	bl	800077c <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 ffe7 	bl	8001c48 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f001 f819 	bl	8001cb4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <main+0x7c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c88:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <main+0x7c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <main+0x7c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <main+0x7c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <main+0x7c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ca2:	4906      	ldr	r1, [pc, #24]	@ (8000cbc <main+0x7c>)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f001 f891 	bl	8001dcc <BSP_COM_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <main+0x74>
  {
    Error_Handler();
 8000cb0:	f000 f866 	bl	8000d80 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f007 f9b8 	bl	8008028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <main+0x78>
 8000cbc:	200003e4 	.word	0x200003e4

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	2238      	movs	r2, #56	@ 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00a f832 	bl	800ad38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f003 ff20 	bl	8004b28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2340      	movs	r3, #64	@ 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d02:	2355      	movs	r3, #85	@ 0x55
 8000d04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 ffba 	bl	8004c90 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d22:	f000 f82d 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fab8 	bl	80052b4 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d4a:	f000 f819 	bl	8000d80 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	@ 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6a:	f001 f8fd 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 fccc 	bl	800170c <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_MspInit+0x50>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	4a11      	ldr	r2, [pc, #68]	@ (8000ddc <HAL_MspInit+0x50>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_MspInit+0x50>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x50>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <HAL_MspInit+0x50>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_MspInit+0x50>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f002 fc1d 	bl	8003608 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dce:	f003 ff4f 	bl	8004c70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 fc24 	bl	8005660 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e18:	f004 fbf6 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8000e1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xc8>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e2e:	4a20      	ldr	r2, [pc, #128]	@ (8000eb0 <HAL_InitTick+0xd0>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e4e:	f004 fe6f 	bl	8005b30 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d11b      	bne.n	8000e98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e62:	f004 ff29 	bl	8005cb8 <HAL_TIM_Base_Start_IT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d111      	bne.n	8000e98 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e74:	2036      	movs	r0, #54	@ 0x36
 8000e76:	f002 fbe1 	bl	800363c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d808      	bhi.n	8000e92 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2036      	movs	r0, #54	@ 0x36
 8000e86:	f002 fbbf 	bl	8003608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_InitTick+0xd4>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e002      	b.n	8000e98 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3730      	adds	r7, #48	@ 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	200003f4 	.word	0x200003f4
 8000eb0:	40001000 	.word	0x40001000
 8000eb4:	200001b4 	.word	0x200001b4

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <FDCAN1_IT0_IRQHandler+0x10>)
 8000ef6:	f003 f96d 	bl	80041d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000032c 	.word	0x2000032c

08000f04 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f0a:	f003 f963 	bl	80041d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000032c 	.word	0x2000032c

08000f18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f1e:	f005 f979 	bl	8006214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000440 	.word	0x20000440

08000f2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f34:	f003 fcae 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f3c:	f003 fcaa 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f40:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f44:	f003 fca6 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 ff21 	bl	8001d90 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <TIM6_DAC_IRQHandler+0x10>)
 8000f5a:	f005 f95b 	bl	8006214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200003f4 	.word	0x200003f4

08000f68 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA2_Channel1_IRQHandler+0x10>)
 8000f6e:	f002 fc96 	bl	800389e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000298 	.word	0x20000298

08000f7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b098      	sub	sp, #96	@ 0x60
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	615a      	str	r2, [r3, #20]
 8000fc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2234      	movs	r2, #52	@ 0x34
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f009 feb3 	bl	800ad38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001100 <MX_TIM1_Init+0x160>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8000fd8:	4b48      	ldr	r3, [pc, #288]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000fda:	2210      	movs	r2, #16
 8000fdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fde:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8000fe4:	4b45      	ldr	r3, [pc, #276]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000fe6:	22fa      	movs	r2, #250	@ 0xfa
 8000fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b44      	ldr	r3, [pc, #272]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff0:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b41      	ldr	r3, [pc, #260]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ffc:	483f      	ldr	r0, [pc, #252]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8000ffe:	f004 ff1c 	bl	8005e3a <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001008:	f7ff feba 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8001010:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001014:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800101a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800101e:	4619      	mov	r1, r3
 8001020:	4836      	ldr	r0, [pc, #216]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8001022:	f006 f8c7 	bl	80071b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800102c:	f7ff fea8 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001030:	2360      	movs	r3, #96	@ 0x60
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001038:	2302      	movs	r3, #2
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103c:	2300      	movs	r3, #0
 800103e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4829      	ldr	r0, [pc, #164]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8001056:	f005 faa7 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001060:	f7ff fe8e 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001064:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001068:	2204      	movs	r2, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4823      	ldr	r0, [pc, #140]	@ (80010fc <MX_TIM1_Init+0x15c>)
 800106e:	f005 fa9b 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001078:	f7ff fe82 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	481d      	ldr	r0, [pc, #116]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8001086:	f005 fa8f 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001090:	f7ff fe76 	bl	8000d80 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001094:	4819      	ldr	r0, [pc, #100]	@ (80010fc <MX_TIM1_Init+0x15c>)
 8001096:	f006 f99b 	bl	80073d0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800109a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800109e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80010a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80010aa:	2322      	movs	r3, #34	@ 0x22
 80010ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80010ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80010d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM1_Init+0x15c>)
 80010de:	f006 f8eb 	bl	80072b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80010e8:	f7ff fe4a 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM1_Init+0x15c>)
 80010ee:	f000 f8a3 	bl	8001238 <HAL_TIM_MspPostInit>

}
 80010f2:	bf00      	nop
 80010f4:	3760      	adds	r7, #96	@ 0x60
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000440 	.word	0x20000440
 8001100:	40012c00 	.word	0x40012c00

08001104 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001128:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <MX_TIM2_Init+0xa8>)
 800112a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_TIM2_Init+0xa8>)
 8001132:	2210      	movs	r2, #16
 8001134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <MX_TIM2_Init+0xa8>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_TIM2_Init+0xa8>)
 800113e:	f04f 32ff 	mov.w	r2, #4294967295
 8001142:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_TIM2_Init+0xa8>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_TIM2_Init+0xa8>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001150:	4816      	ldr	r0, [pc, #88]	@ (80011ac <MX_TIM2_Init+0xa8>)
 8001152:	f004 fe1b 	bl	8005d8c <HAL_TIM_OC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800115c:	f7ff fe10 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	480f      	ldr	r0, [pc, #60]	@ (80011ac <MX_TIM2_Init+0xa8>)
 8001170:	f006 f820 	bl	80071b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800117a:	f7ff fe01 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_TIM2_Init+0xa8>)
 8001196:	f005 f98d 	bl	80064b4 <HAL_TIM_OC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011a0:	f7ff fdee 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	@ 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000048c 	.word	0x2000048c

080011b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <HAL_TIM_PWM_MspInit+0x44>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d113      	bne.n	80011ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_TIM_PWM_MspInit+0x48>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c6:	4a0c      	ldr	r2, [pc, #48]	@ (80011f8 <HAL_TIM_PWM_MspInit+0x48>)
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_TIM_PWM_MspInit+0x48>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	2019      	movs	r0, #25
 80011e0:	f002 fa12 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011e4:	2019      	movs	r0, #25
 80011e6:	f002 fa29 	bl	800363c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40012c00 	.word	0x40012c00
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800120c:	d10b      	bne.n	8001226 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_TIM_OC_MspInit+0x38>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <HAL_TIM_OC_MspInit+0x38>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6593      	str	r3, [r2, #88]	@ 0x58
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_TIM_OC_MspInit+0x38>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a28      	ldr	r2, [pc, #160]	@ (80012f8 <HAL_TIM_MspPostInit+0xc0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d149      	bne.n	80012ee <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <HAL_TIM_MspPostInit+0xc4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_TIM_MspPostInit+0xc4>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <HAL_TIM_MspPostInit+0xc4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <HAL_TIM_MspPostInit+0xc4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <HAL_TIM_MspPostInit+0xc4>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <HAL_TIM_MspPostInit+0xc4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800128a:	2307      	movs	r3, #7
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800129a:	2302      	movs	r3, #2
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	@ (8001300 <HAL_TIM_MspPostInit+0xc8>)
 80012a6:	f003 f95b 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012bc:	2306      	movs	r3, #6
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	@ (8001304 <HAL_TIM_MspPostInit+0xcc>)
 80012c8:	f003 f94a 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80012de:	2304      	movs	r3, #4
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <HAL_TIM_MspPostInit+0xcc>)
 80012ea:	f003 f939 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	@ 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40012c00 	.word	0x40012c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800
 8001304:	48000400 	.word	0x48000400

08001308 <StartAdcTask>:
{
    return average(adc_id, adc_store);
}

void StartAdcTask(void *argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
 8001310:	221b      	movs	r2, #27
 8001312:	4903      	ldr	r1, [pc, #12]	@ (8001320 <StartAdcTask+0x18>)
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <StartAdcTask+0x1c>)
 8001316:	f001 f9e7 	bl	80026e8 <HAL_ADC_Start_DMA>
    StopTask();
 800131a:	f006 ff52 	bl	80081c2 <osThreadExit>
 800131e:	bf00      	nop
 8001320:	200004d8 	.word	0x200004d8
 8001324:	2000022c 	.word	0x2000022c

08001328 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	7b1b      	ldrb	r3, [r3, #12]
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	429a      	cmp	r2, r3
 8001340:	d308      	bcc.n	8001354 <fdcan_pkt_get_byte+0x2c>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	461a      	mov	r2, r3
 8001346:	2300      	movs	r3, #0
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	6053      	str	r3, [r2, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2207      	movs	r2, #7
 8001350:	711a      	strb	r2, [r3, #4]
 8001352:	e00b      	b.n	800136c <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	791a      	ldrb	r2, [r3, #4]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	605a      	str	r2, [r3, #4]
}
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	3724      	adds	r7, #36	@ 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <fdcan_pkt_pool_alloc+0x64>)
 8001382:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	461a      	mov	r2, r3
 800138e:	2300      	movs	r3, #0
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	6053      	str	r3, [r2, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2204      	movs	r2, #4
 8001398:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 800139a:	e019      	b.n	80013d0 <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <fdcan_pkt_pool_alloc+0x64>)
 800139e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80013a2:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <fdcan_pkt_pool_alloc+0x64>)
 80013aa:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <fdcan_pkt_pool_alloc+0x64>)
 80013b6:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <fdcan_pkt_pool_alloc+0x64>)
 80013c0:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	605a      	str	r2, [r3, #4]
}
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	3724      	adds	r7, #36	@ 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	20000510 	.word	0x20000510

080013e0 <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	2208      	movs	r2, #8
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f009 fca1 	bl	800ad38 <memset>
    pkt->len = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <fdcan_pkt_pool_free+0x48>)
 80013fe:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 8001406:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <fdcan_pkt_pool_free+0x48>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <fdcan_pkt_pool_free+0x48>)
 8001410:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <fdcan_pkt_pool_free+0x48>)
 800141a:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000510 	.word	0x20000510

0800142c <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 800142c:	b480      	push	{r7}
 800142e:	b08b      	sub	sp, #44	@ 0x2c
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d308      	bcc.n	8001456 <fdcan_pkt_buf_push+0x2a>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	461a      	mov	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	6053      	str	r3, [r2, #4]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2206      	movs	r2, #6
 8001452:	711a      	strb	r2, [r3, #4]
 8001454:	e01e      	b.n	8001494 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4413      	add	r3, r2
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	68d2      	ldr	r2, [r2, #12]
 8001464:	fbb3 f1f2 	udiv	r1, r3, r2
 8001468:	fb01 f202 	mul.w	r2, r1, r2
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
    self->len++;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	605a      	str	r2, [r3, #4]
}
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	372c      	adds	r7, #44	@ 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_FDCAN_ErrorStatusCallback+0x30>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d107      	bne.n	80014c2 <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000032c 	.word	0x2000032c
 80014d4:	20000798 	.word	0x20000798

080014d8 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f002 fde6 	bl	80040c4 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 8001502:	f7ff fc3d 	bl	8000d80 <Error_Handler>
    }
}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	@ 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d057      	beq.n	80015e8 <HAL_FDCAN_RxFifo0Callback+0xc4>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff1b 	bl	8001378 <fdcan_pkt_pool_alloc>
 8001542:	7e3b      	ldrb	r3, [r7, #24]
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_FDCAN_RxFifo0Callback+0x36>
 800154e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001552:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	f7ff fc13 	bl	8000d80 <Error_Handler>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	3304      	adds	r3, #4
 8001562:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001564:	2140      	movs	r1, #64	@ 0x40
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f002 fca4 	bl	8003eb4 <HAL_FDCAN_GetRxMessage>
 800156c:	4603      	mov	r3, r0
 800156e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001572:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_FDCAN_RxFifo0Callback+0x5a>
 800157a:	f7ff fc01 	bl	8000d80 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b1f      	cmp	r3, #31
 8001596:	d90c      	bls.n	80015b2 <HAL_FDCAN_RxFifo0Callback+0x8e>
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b21      	cmp	r3, #33	@ 0x21
 800159e:	d808      	bhi.n	80015b2 <HAL_FDCAN_RxFifo0Callback+0x8e>
        {
            instant_recv_proc(pkt);
 80015a0:	463b      	mov	r3, r7
 80015a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f849 	bl	800163c <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 80015aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015ac:	f7ff ff18 	bl	80013e0 <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 80015b0:	e01a      	b.n	80015e8 <HAL_FDCAN_RxFifo0Callback+0xc4>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b21      	cmp	r3, #33	@ 0x21
 80015b8:	d916      	bls.n	80015e8 <HAL_FDCAN_RxFifo0Callback+0xc4>
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b23      	cmp	r3, #35	@ 0x23
 80015c0:	d812      	bhi.n	80015e8 <HAL_FDCAN_RxFifo0Callback+0xc4>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c8:	490b      	ldr	r1, [pc, #44]	@ (80015f8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff2e 	bl	800142c <fdcan_pkt_buf_push>
 80015d0:	7c3b      	ldrb	r3, [r7, #16]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_FDCAN_RxFifo0Callback+0xc4>
 80015dc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	f7ff fbcc 	bl	8000d80 <Error_Handler>
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	@ 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200007ec 	.word	0x200007ec
 80015f4:	200007c4 	.word	0x200007c4
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 8001612:	b480      	push	{r7}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	4613      	mov	r3, r2
 800161e:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	461a      	mov	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	6053      	str	r3, [r2, #4]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2207      	movs	r2, #7
 800162e:	711a      	strb	r2, [r3, #4]
}
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 8001646:	f107 001c 	add.w	r0, r7, #28
 800164a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800164e:	2200      	movs	r2, #0
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	f7ff fe69 	bl	8001328 <fdcan_pkt_get_byte>
 8001656:	7f3b      	ldrb	r3, [r7, #28]
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <instant_recv_proc+0x40>
 8001662:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <instant_recv_proc+0x8c>)
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	461a      	mov	r2, r3
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001676:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 800167a:	e021      	b.n	80016c0 <instant_recv_proc+0x84>
    switch (code)
 800167c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001680:	2b11      	cmp	r3, #17
 8001682:	d002      	beq.n	800168a <instant_recv_proc+0x4e>
 8001684:	2b12      	cmp	r3, #18
 8001686:	d00a      	beq.n	800169e <instant_recv_proc+0x62>
 8001688:	e013      	b.n	80016b2 <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <instant_recv_proc+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	e010      	b.n	80016c0 <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <instant_recv_proc+0x90>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
}
 80016b0:	e006      	b.n	80016c0 <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 80016b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffa9 	bl	8001612 <instant_recv_proc_inner>
}
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200007ec 	.word	0x200007ec
 80016cc:	20000799 	.word	0x20000799

080016d0 <HAL_GPIO_EXTI_Callback>:
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x38>)
 80016dc:	8a1b      	ldrh	r3, [r3, #16]
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d009      	beq.n	80016f8 <HAL_GPIO_EXTI_Callback+0x28>
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x38>)
 80016e6:	8a5b      	ldrh	r3, [r3, #18]
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d004      	beq.n	80016f8 <HAL_GPIO_EXTI_Callback+0x28>
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x38>)
 80016f0:	8a9b      	ldrh	r3, [r3, #20]
 80016f2:	88fa      	ldrh	r2, [r7, #6]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d102      	bne.n	80016fe <HAL_GPIO_EXTI_Callback+0x2e>
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x38>)
 80016fa:	f000 f9de 	bl	8001aba <motor_hall_exti>
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000014 	.word	0x20000014

0800170c <HAL_TIM_PeriodElapsedCallback_OWN>:
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d102      	bne.n	8001724 <HAL_TIM_PeriodElapsedCallback_OWN+0x18>
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001720:	f000 fa44 	bl	8001bac <motor_pwm_pulse>
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000014 	.word	0x20000014

08001730 <StartDefaultTask>:
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	2332      	movs	r3, #50	@ 0x32
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	f006 fc9a 	bl	8008074 <osKernelGetTickCount>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	f000 fc20 	bl	8001f8c <HAL_GetTick>
 800174c:	4603      	mov	r3, r0
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <StartDefaultTask+0x34>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f006 fd3c 	bl	80081d0 <osDelayUntil>
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	4413      	add	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	bf00      	nop
 8001762:	e7f1      	b.n	8001748 <StartDefaultTask+0x18>
 8001764:	200007f0 	.word	0x200007f0

08001768 <motor_120_hall_update>:
};
static const uint8_t motor_seq_index[] = {0xFF, 5, 3, 4, 1, 0, 2, 0xFF};

// 120 deg cntrol
void motor_120_hall_update(const MotorParameter *motor)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t compare = (uint32_t)((float)TIM1_ARR * motor->pwm_duty_u);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 8001776:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80019d4 <motor_120_hall_update+0x26c>
 800177a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e172      	b.n	8001a74 <motor_120_hall_update+0x30c>
    {
        // motor_seq_index[motor->exti_hall_curt]
        switch (motor_seq_map[motor_seq_index[motor->exti_hall_curt]][i])
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4b8f      	ldr	r3, [pc, #572]	@ (80019d8 <motor_120_hall_update+0x270>)
 800179a:	5c9b      	ldrb	r3, [r3, r2]
 800179c:	4618      	mov	r0, r3
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	498e      	ldr	r1, [pc, #568]	@ (80019dc <motor_120_hall_update+0x274>)
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4403      	add	r3, r0
 80017a8:	440b      	add	r3, r1
 80017aa:	4413      	add	r3, r2
 80017ac:	f993 3000 	ldrsb.w	r3, [r3]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d073      	beq.n	800189e <motor_120_hall_update+0x136>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 80e2 	bne.w	8001980 <motor_120_hall_update+0x218>
        {
            case HIGH_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], compare);
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	3306      	adds	r3, #6
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <motor_120_hall_update+0x70>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017d6:	e03c      	b.n	8001852 <motor_120_hall_update+0xea>
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	3306      	adds	r3, #6
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d105      	bne.n	80017f4 <motor_120_hall_update+0x8c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80017f2:	e02e      	b.n	8001852 <motor_120_hall_update+0xea>
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	3306      	adds	r3, #6
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d105      	bne.n	8001810 <motor_120_hall_update+0xa8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800180e:	e020      	b.n	8001852 <motor_120_hall_update+0xea>
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	3306      	adds	r3, #6
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d105      	bne.n	800182c <motor_120_hall_update+0xc4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	e012      	b.n	8001852 <motor_120_hall_update+0xea>
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d105      	bne.n	8001848 <motor_120_hall_update+0xe0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	6493      	str	r3, [r2, #72]	@ 0x48
 8001846:	e004      	b.n	8001852 <motor_120_hall_update+0xea>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6998      	ldr	r0, [r3, #24]
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	3306      	adds	r3, #6
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4619      	mov	r1, r3
 8001864:	f004 fb40 	bl	8005ee8 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6998      	ldr	r0, [r3, #24]
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	3306      	adds	r3, #6
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4619      	mov	r1, r3
 800187a:	f005 fc3d 	bl	80070f8 <HAL_TIMEx_PWMN_Stop>
                HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	320a      	adds	r2, #10
 8001884:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	3318      	adds	r3, #24
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	889b      	ldrh	r3, [r3, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	4619      	mov	r1, r3
 8001898:	f002 ffe4 	bl	8004864 <HAL_GPIO_WritePin>
                break;
 800189c:	e0e7      	b.n	8001a6e <motor_120_hall_update+0x306>
            }
            case LOW_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], compare);
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	3306      	adds	r3, #6
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <motor_120_hall_update+0x152>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b8:	e03c      	b.n	8001934 <motor_120_hall_update+0x1cc>
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	3306      	adds	r3, #6
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d105      	bne.n	80018d6 <motor_120_hall_update+0x16e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80018d4:	e02e      	b.n	8001934 <motor_120_hall_update+0x1cc>
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	3306      	adds	r3, #6
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d105      	bne.n	80018f2 <motor_120_hall_update+0x18a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018f0:	e020      	b.n	8001934 <motor_120_hall_update+0x1cc>
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	3306      	adds	r3, #6
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d105      	bne.n	800190e <motor_120_hall_update+0x1a6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	6413      	str	r3, [r2, #64]	@ 0x40
 800190c:	e012      	b.n	8001934 <motor_120_hall_update+0x1cc>
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	3306      	adds	r3, #6
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d105      	bne.n	800192a <motor_120_hall_update+0x1c2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	6493      	str	r3, [r2, #72]	@ 0x48
 8001928:	e004      	b.n	8001934 <motor_120_hall_update+0x1cc>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6998      	ldr	r0, [r3, #24]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	3306      	adds	r3, #6
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	f004 fbcf 	bl	80060e8 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6998      	ldr	r0, [r3, #24]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	3306      	adds	r3, #6
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4619      	mov	r1, r3
 800195c:	f005 fb18 	bl	8006f90 <HAL_TIMEx_PWMN_Start>
                HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_SET);
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	320a      	adds	r2, #10
 8001966:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	3318      	adds	r3, #24
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	4619      	mov	r1, r3
 800197a:	f002 ff73 	bl	8004864 <HAL_GPIO_WritePin>
                break;
 800197e:	e076      	b.n	8001a6e <motor_120_hall_update+0x306>
            }
            default:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], 0);
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	3306      	adds	r3, #6
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <motor_120_hall_update+0x234>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
 800199a:	e042      	b.n	8001a22 <motor_120_hall_update+0x2ba>
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	3306      	adds	r3, #6
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d105      	bne.n	80019b8 <motor_120_hall_update+0x250>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2300      	movs	r3, #0
 80019b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80019b6:	e034      	b.n	8001a22 <motor_120_hall_update+0x2ba>
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	3306      	adds	r3, #6
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d10b      	bne.n	80019e0 <motor_120_hall_update+0x278>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019d2:	e026      	b.n	8001a22 <motor_120_hall_update+0x2ba>
 80019d4:	437a0000 	.word	0x437a0000
 80019d8:	0800b000 	.word	0x0800b000
 80019dc:	0800afec 	.word	0x0800afec
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	3306      	adds	r3, #6
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d105      	bne.n	80019fc <motor_120_hall_update+0x294>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fa:	e012      	b.n	8001a22 <motor_120_hall_update+0x2ba>
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3306      	adds	r3, #6
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d105      	bne.n	8001a18 <motor_120_hall_update+0x2b0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a16:	e004      	b.n	8001a22 <motor_120_hall_update+0x2ba>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6998      	ldr	r0, [r3, #24]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	3306      	adds	r3, #6
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4619      	mov	r1, r3
 8001a34:	f004 fb58 	bl	80060e8 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6998      	ldr	r0, [r3, #24]
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	3306      	adds	r3, #6
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f005 fb55 	bl	80070f8 <HAL_TIMEx_PWMN_Stop>
                HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	320a      	adds	r2, #10
 8001a54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	3318      	adds	r3, #24
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	889b      	ldrh	r3, [r3, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	f002 fefc 	bl	8004864 <HAL_GPIO_WritePin>
                break;
 8001a6c:	bf00      	nop
    for (i = 0; i < 3; i++)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	f67f ae89 	bls.w	800178e <motor_120_hall_update+0x26>
            }
        }
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop

08001a88 <tim_setup>:
#include "motor/ctrl_120.h"
#include "motor/ctrl_foc.h"
#include "analog/adc1/main.h"

static Result tim_setup(const MotorParameter *motor)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    HAL_TIM_Base_Start_IT(motor->const_h.htimx);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f90e 	bl	8005cb8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(motor->const_h.ELE_htimx);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 f8a7 	bl	8005bf4 <HAL_TIM_Base_Start>
    // motor_foc_tim_setup(motor);
    return RESULT_OK(NULL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	605a      	str	r2, [r3, #4]
}
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <motor_hall_exti>:

void motor_hall_exti(MotorParameter *motor)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
    motor->exti_hall_cnt++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    uint8_t hall_last = motor->exti_hall_curt;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001ada:	73bb      	strb	r3, [r7, #14]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	8a12      	ldrh	r2, [r2, #16]
 8001ae6:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <motor_hall_exti+0x36>
 8001aec:	2204      	movs	r2, #4
 8001aee:	e000      	b.n	8001af2 <motor_hall_exti+0x38>
 8001af0:	2200      	movs	r2, #0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	8a49      	ldrh	r1, [r1, #18]
 8001afc:	400b      	ands	r3, r1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <motor_hall_exti+0x4c>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e000      	b.n	8001b08 <motor_hall_exti+0x4e>
 8001b06:	2300      	movs	r3, #0
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68d2      	ldr	r2, [r2, #12]
 8001b10:	6912      	ldr	r2, [r2, #16]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	8a89      	ldrh	r1, [r1, #20]
 8001b16:	400a      	ands	r2, r1
 8001b18:	2a00      	cmp	r2, #0
 8001b1a:	d001      	beq.n	8001b20 <motor_hall_exti+0x66>
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	e000      	b.n	8001b22 <motor_hall_exti+0x68>
 8001b20:	2200      	movs	r2, #0
    uint8_t hall_current =
 8001b22:	4313      	orrs	r3, r2
 8001b24:	737b      	strb	r3, [r7, #13]
    motor->exti_hall_last = hall_last;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7bba      	ldrb	r2, [r7, #14]
 8001b2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    motor->exti_hall_curt = hall_current;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b7a      	ldrb	r2, [r7, #13]
 8001b32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hall_current == 0 || hall_current == 7) 
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <motor_hall_exti+0x88>
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d12e      	bne.n	8001ba0 <motor_hall_exti+0xe6>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e027      	b.n	8001b98 <motor_hall_exti+0xde>
        {
            HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6998      	ldr	r0, [r3, #24]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	3306      	adds	r3, #6
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f004 fac5 	bl	80060e8 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6998      	ldr	r0, [r3, #24]
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	3306      	adds	r3, #6
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f005 fac2 	bl	80070f8 <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	320a      	adds	r2, #10
 8001b7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	3318      	adds	r3, #24
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	889b      	ldrh	r3, [r3, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f002 fe69 	bl	8004864 <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d9d4      	bls.n	8001b48 <motor_hall_exti+0x8e>
        }
        return;
 8001b9e:	e002      	b.n	8001ba6 <motor_hall_exti+0xec>
    }
    motor_120_hall_update(motor);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fde1 	bl	8001768 <motor_120_hall_update>
    // motor_foc_hall_update(motor);
}
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    // motor_foc_pwm_pulse(motor);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <StartMotorTask>:

void StartMotorTask(void *argument)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
    tim_setup(&motor_0);
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <StartMotorTask+0x2c>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5b 	bl	8001a88 <tim_setup>
    motor_hall_exti(&motor_0);
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <StartMotorTask+0x2c>)
 8001bd4:	f7ff ff71 	bl	8001aba <motor_hall_exti>
    motor_0.pi_speed.Ref = 20.0f;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <StartMotorTask+0x2c>)
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <StartMotorTask+0x30>)
 8001bdc:	66da      	str	r2, [r3, #108]	@ 0x6c
    motor_0.pwm_duty_u = 0.5f;
 8001bde:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <StartMotorTask+0x2c>)
 8001be0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001be4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    StopTask();
 8001be8:	f006 faeb 	bl	80081c2 <osThreadExit>
 8001bec:	20000014 	.word	0x20000014
 8001bf0:	41a00000 	.word	0x41a00000

08001bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf4:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bf6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf8:	f7ff f9c0 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	@ (8001c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <LoopForever+0xe>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	@ (8001c40 <LoopForever+0x16>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f009 f8ef 	bl	800ae04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c26:	f7ff f80b 	bl	8000c40 <main>

08001c2a <LoopForever>:

LoopForever:
    b LoopForever
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
  ldr   r0, =_estack
 8001c2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001c38:	0800b044 	.word	0x0800b044
  ldr r2, =_sbss
 8001c3c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001c40:	200023bc 	.word	0x200023bc

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>
	...

08001c48 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <BSP_LED_Init+0x64>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <BSP_LED_Init+0x64>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <BSP_LED_Init+0x64>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb0 <BSP_LED_Init+0x68>)
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	f107 020c 	add.w	r2, r7, #12
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fc69 	bl	8004560 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <BSP_LED_Init+0x68>)
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	2120      	movs	r1, #32
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fde2 	bl	8004864 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	200001a0 	.word	0x200001a0

08001cb4 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <BSP_PB_Init+0xc4>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <BSP_PB_Init+0xc4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <BSP_PB_Init+0xc4>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001cdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	4a21      	ldr	r2, [pc, #132]	@ (8001d7c <BSP_PB_Init+0xc8>)
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fc2c 	bl	8004560 <HAL_GPIO_Init>
 8001d08:	e031      	b.n	8001d6e <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001d0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d0e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <BSP_PB_Init+0xc8>)
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	f107 020c 	add.w	r2, r7, #12
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fc1e 	bl	8004560 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4a15      	ldr	r2, [pc, #84]	@ (8001d80 <BSP_PB_Init+0xcc>)
 8001d2a:	441a      	add	r2, r3
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4915      	ldr	r1, [pc, #84]	@ (8001d84 <BSP_PB_Init+0xd0>)
 8001d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f001 ff1d 	bl	8003b76 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <BSP_PB_Init+0xcc>)
 8001d42:	1898      	adds	r0, r3, r2
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <BSP_PB_Init+0xd4>)
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f001 fef4 	bl	8003b3c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001d54:	2028      	movs	r0, #40	@ 0x28
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <BSP_PB_Init+0xd8>)
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	f001 fc51 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001d66:	2328      	movs	r3, #40	@ 0x28
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fc67 	bl	800363c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	200001a4 	.word	0x200001a4
 8001d80:	200007f4 	.word	0x200007f4
 8001d84:	0800b008 	.word	0x0800b008
 8001d88:	200001ac 	.word	0x200001ac
 8001d8c:	200001b0 	.word	0x200001b0

08001d90 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <BSP_PB_IRQHandler+0x20>)
 8001da0:	4413      	add	r3, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fefc 	bl	8003ba0 <HAL_EXTI_IRQHandler>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200007f4 	.word	0x200007f4

08001db4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d903      	bls.n	8001dea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001de2:	f06f 0301 	mvn.w	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e018      	b.n	8001e1c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2294      	movs	r2, #148	@ 0x94
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <BSP_COM_Init+0x5c>)
 8001df4:	4413      	add	r3, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f852 	bl	8001ea0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2294      	movs	r2, #148	@ 0x94
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <BSP_COM_Init+0x5c>)
 8001e06:	4413      	add	r3, r2
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f80e 	bl	8001e2c <MX_LPUART1_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001e16:	f06f 0303 	mvn.w	r3, #3
 8001e1a:	e000      	b.n	8001e1e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200007fc 	.word	0x200007fc

08001e2c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <MX_LPUART1_Init+0x60>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	220c      	movs	r2, #12
 8001e4a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	895b      	ldrh	r3, [r3, #10]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	891b      	ldrh	r3, [r3, #8]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	899b      	ldrh	r3, [r3, #12]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e78:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f005 fb26 	bl	80074cc <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200001a8 	.word	0x200001a8

08001e90 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff ff8d 	bl	8001db4 <BSP_PB_Callback>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001ea8:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <COM1_MspInit+0x94>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eac:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <COM1_MspInit+0x94>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <COM1_MspInit+0x94>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <COM1_MspInit+0x94>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <COM1_MspInit+0x94>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ecc:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <COM1_MspInit+0x94>)
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001ed8:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <COM1_MspInit+0x94>)
 8001eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001edc:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <COM1_MspInit+0x94>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <COM1_MspInit+0x94>)
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001f00:	230c      	movs	r3, #12
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0e:	f002 fb27 	bl	8004560 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001f12:	2308      	movs	r3, #8
 8001f14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f28:	f002 fb1a 	bl	8004560 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f001 fb55 	bl	80035f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f48:	200f      	movs	r0, #15
 8001f4a:	f7fe ff49 	bl	8000de0 <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	e001      	b.n	8001f5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f5a:	f7fe ff17 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]

}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_IncTick+0x1c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a03      	ldr	r2, [pc, #12]	@ (8001f84 <HAL_IncTick+0x1c>)
 8001f78:	6013      	str	r3, [r2, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	20000890 	.word	0x20000890
 8001f88:	200001b8 	.word	0x200001b8

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000890 	.word	0x20000890

08001fa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3360      	adds	r3, #96	@ 0x60
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <LL_ADC_SetOffset+0x44>)
 800202e:	4013      	ands	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	4313      	orrs	r3, r2
 800203c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	03fff000 	.word	0x03fff000

08002054 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3360      	adds	r3, #96	@ 0x60
 8002062:	461a      	mov	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3360      	adds	r3, #96	@ 0x60
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3360      	adds	r3, #96	@ 0x60
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	431a      	orrs	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3360      	adds	r3, #96	@ 0x60
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	615a      	str	r2, [r3, #20]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800216e:	b480      	push	{r7}
 8002170:	b087      	sub	sp, #28
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3330      	adds	r3, #48	@ 0x30
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	211f      	movs	r1, #31
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 011f 	and.w	r1, r3, #31
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b087      	sub	sp, #28
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3314      	adds	r3, #20
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	0e5b      	lsrs	r3, r3, #25
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0d1b      	lsrs	r3, r3, #20
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2107      	movs	r1, #7
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0d1b      	lsrs	r3, r3, #20
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	431a      	orrs	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	43db      	mvns	r3, r3
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0318 	and.w	r3, r3, #24
 800223e:	4908      	ldr	r1, [pc, #32]	@ (8002260 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002240:	40d9      	lsrs	r1, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	400b      	ands	r3, r1
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	431a      	orrs	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0007ffff 	.word	0x0007ffff

08002264 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 031f 	and.w	r3, r3, #31
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002290:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6093      	str	r3, [r2, #8]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022b8:	d101      	bne.n	80022be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002308:	d101      	bne.n	800230e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800232c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <LL_ADC_IsEnabled+0x18>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_ADC_IsEnabled+0x1a>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800237a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800237e:	f043 0204 	orr.w	r2, r3, #4
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d101      	bne.n	80023aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e167      	b.n	80026ca <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe f931 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff3f 	bl	80022a4 <LL_ADC_IsDeepPowerDownEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff25 	bl	8002280 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff5a 	bl	80022f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff3e 	bl	80022cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002450:	4ba0      	ldr	r3, [pc, #640]	@ (80026d4 <HAL_ADC_Init+0x2f4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	4aa0      	ldr	r2, [pc, #640]	@ (80026d8 <HAL_ADC_Init+0x2f8>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002464:	e002      	b.n	800246c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff3c 	bl	80022f4 <LL_ADC_IsInternalRegulatorEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff75 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8100 	bne.w	80026b8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80fc 	bne.w	80026b8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024c8:	f043 0202 	orr.w	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff35 	bl	8002344 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024e4:	f7ff ff2e 	bl	8002344 <LL_ADC_IsEnabled>
 80024e8:	4604      	mov	r4, r0
 80024ea:	487c      	ldr	r0, [pc, #496]	@ (80026dc <HAL_ADC_Init+0x2fc>)
 80024ec:	f7ff ff2a 	bl	8002344 <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4323      	orrs	r3, r4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4878      	ldr	r0, [pc, #480]	@ (80026e0 <HAL_ADC_Init+0x300>)
 8002500:	f7ff fd50 	bl	8001fa4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7f5b      	ldrb	r3, [r3, #29]
 8002508:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002514:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800251a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002522:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	d106      	bne.n	8002540 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002536:	3b01      	subs	r3, #1
 8002538:	045b      	lsls	r3, r3, #17
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b60      	ldr	r3, [pc, #384]	@ (80026e4 <HAL_ADC_Init+0x304>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	430b      	orrs	r3, r1
 800256e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff14 	bl	80023b8 <LL_ADC_INJ_IsConversionOngoing>
 8002590:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d16d      	bne.n	8002674 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d16a      	bne.n	8002674 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025ba:	f023 0302 	bic.w	r3, r3, #2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6911      	ldr	r1, [r2, #16]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025fe:	e013      	b.n	8002628 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800260e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002620:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002624:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800262e:	2b01      	cmp	r3, #1
 8002630:	d118      	bne.n	8002664 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002654:	430a      	orrs	r2, r1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	e007      	b.n	8002674 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10c      	bne.n	8002696 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f023 010f 	bic.w	r1, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
 8002694:	e007      	b.n	80026a6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020f 	bic.w	r2, r2, #15
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000
 80026d8:	053e2d63 	.word	0x053e2d63
 80026dc:	50000100 	.word	0x50000100
 80026e0:	50000300 	.word	0x50000300
 80026e4:	fff04007 	.word	0xfff04007

080026e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f4:	4851      	ldr	r0, [pc, #324]	@ (800283c <HAL_ADC_Start_DMA+0x154>)
 80026f6:	f7ff fdb5 	bl	8002264 <LL_ADC_GetMultimode>
 80026fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fe46 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 808f 	bne.w	800282c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_ADC_Start_DMA+0x34>
 8002718:	2302      	movs	r3, #2
 800271a:	e08a      	b.n	8002832 <HAL_ADC_Start_DMA+0x14a>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d002      	beq.n	8002736 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b09      	cmp	r3, #9
 8002734:	d173      	bne.n	800281e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fc98 	bl	800306c <ADC_Enable>
 800273c:	4603      	mov	r3, r0
 800273e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d166      	bne.n	8002814 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a38      	ldr	r2, [pc, #224]	@ (8002840 <HAL_ADC_Start_DMA+0x158>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d002      	beq.n	800276a <HAL_ADC_Start_DMA+0x82>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	e001      	b.n	800276e <HAL_ADC_Start_DMA+0x86>
 800276a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4293      	cmp	r3, r2
 8002774:	d002      	beq.n	800277c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	f023 0206 	bic.w	r2, r3, #6
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	661a      	str	r2, [r3, #96]	@ 0x60
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	4a25      	ldr	r2, [pc, #148]	@ (8002844 <HAL_ADC_Start_DMA+0x15c>)
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_ADC_Start_DMA+0x160>)
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	4a23      	ldr	r2, [pc, #140]	@ (800284c <HAL_ADC_Start_DMA+0x164>)
 80027be:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	221c      	movs	r2, #28
 80027c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0210 	orr.w	r2, r2, #16
 80027de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3340      	adds	r3, #64	@ 0x40
 80027fa:	4619      	mov	r1, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f000 ffd2 	bl	80037a8 <HAL_DMA_Start_IT>
 8002804:	4603      	mov	r3, r0
 8002806:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fdac 	bl	800236a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002812:	e00d      	b.n	8002830 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800281c:	e008      	b.n	8002830 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800282a:	e001      	b.n	8002830 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002830:	7dfb      	ldrb	r3, [r7, #23]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	50000300 	.word	0x50000300
 8002840:	50000100 	.word	0x50000100
 8002844:	08003179 	.word	0x08003179
 8002848:	08003251 	.word	0x08003251
 800284c:	0800326d 	.word	0x0800326d

08002850 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0b6      	sub	sp, #216	@ 0xd8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x22>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e3c8      	b.n	8003040 <HAL_ADC_ConfigChannel+0x7b4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fd69 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 83ad 	bne.w	8003022 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f7ff fc4a 	bl	800216e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fd57 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 80028e4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fd63 	bl	80023b8 <LL_ADC_INJ_IsConversionOngoing>
 80028f2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 81d9 	bne.w	8002cb2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 81d4 	bne.w	8002cb2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002912:	d10f      	bne.n	8002934 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	4619      	mov	r1, r3
 8002920:	f7ff fc51 	bl	80021c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fbf8 	bl	8002122 <LL_ADC_SetSamplingTimeCommonConfig>
 8002932:	e00e      	b.n	8002952 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	461a      	mov	r2, r3
 8002942:	f7ff fc40 	bl	80021c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fbe8 	bl	8002122 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d022      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6919      	ldr	r1, [r3, #16]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002984:	f7ff fb42 	bl	800200c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6919      	ldr	r1, [r3, #16]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	461a      	mov	r2, r3
 8002996:	f7ff fb8e 	bl	80020b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x124>
 80029aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ae:	e000      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x126>
 80029b0:	2300      	movs	r3, #0
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff fb9a 	bl	80020ec <LL_ADC_SetOffsetSaturation>
 80029b8:	e17b      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fb47 	bl	8002054 <LL_ADC_GetOffsetChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x15a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fb3c 	bl	8002054 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	e01e      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x198>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fb31 	bl	8002054 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e004      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1b0>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	e018      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x1e2>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e004      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d106      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb00 	bl	8002080 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fae4 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x220>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fad9 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	e01e      	b.n	8002aea <HAL_ADC_ConfigChannel+0x25e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff face 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e004      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x276>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	e018      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x2a8>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fa9d 	bl	8002080 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fa81 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x2e6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2102      	movs	r1, #2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fa76 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	e01e      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x324>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2102      	movs	r1, #2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fa6b 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e004      	b.n	8002bae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x33c>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	e016      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x36a>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002bda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e004      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d106      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2102      	movs	r1, #2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fa3c 	bl	8002080 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fa20 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x3a8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2103      	movs	r1, #3
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fa15 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	f003 021f 	and.w	r2, r3, #31
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x3d8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2103      	movs	r1, #3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fa0a 	bl	8002054 <LL_ADC_GetOffsetChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c4e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e003      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x3f0>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	e011      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x414>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d106      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2103      	movs	r1, #3
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff f9e7 	bl	8002080 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fb44 	bl	8002344 <LL_ADC_IsEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8140 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f7ff faa3 	bl	800221c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4a8f      	ldr	r2, [pc, #572]	@ (8002f18 <HAL_ADC_ConfigChannel+0x68c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f040 8131 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x47e>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2b09      	cmp	r3, #9
 8002d00:	bf94      	ite	ls
 8002d02:	2301      	movls	r3, #1
 8002d04:	2300      	movhi	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e019      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x4b2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d1a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e003      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2b09      	cmp	r3, #9
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d079      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x4d2>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	3301      	adds	r3, #1
 8002d56:	069b      	lsls	r3, r3, #26
 8002d58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d5c:	e015      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x4fe>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d6e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d76:	2320      	movs	r3, #32
 8002d78:	e003      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	069b      	lsls	r3, r3, #26
 8002d86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x51e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	e017      	b.n	8002dda <HAL_ADC_ConfigChannel+0x54e>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e003      	b.n	8002dce <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	ea42 0103 	orr.w	r1, r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x574>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0e9b      	lsrs	r3, r3, #26
 8002df0:	3301      	adds	r3, #1
 8002df2:	f003 021f 	and.w	r2, r3, #31
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	e018      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x5a6>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e003      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e32:	430b      	orrs	r3, r1
 8002e34:	e081      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d107      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x5c6>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	3301      	adds	r3, #1
 8002e4a:	069b      	lsls	r3, r3, #26
 8002e4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e50:	e015      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x5f2>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e003      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	069b      	lsls	r3, r3, #26
 8002e7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x612>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	e017      	b.n	8002ece <HAL_ADC_ConfigChannel+0x642>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
  return result;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e003      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	ea42 0103 	orr.w	r1, r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x66e>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 021f 	and.w	r2, r3, #31
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b1e      	subs	r3, #30
 8002ef2:	051b      	lsls	r3, r3, #20
 8002ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ef8:	e01e      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x6ac>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	613b      	str	r3, [r7, #16]
  return result;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d104      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e006      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x698>
 8002f16:	bf00      	nop
 8002f18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f003 021f 	and.w	r2, r3, #31
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b1e      	subs	r3, #30
 8002f32:	051b      	lsls	r3, r3, #20
 8002f34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7ff f941 	bl	80021c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b3f      	ldr	r3, [pc, #252]	@ (8003048 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d071      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f50:	483e      	ldr	r0, [pc, #248]	@ (800304c <HAL_ADC_ConfigChannel+0x7c0>)
 8002f52:	f7ff f84d 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 8002f56:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003050 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x6e2>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3a      	ldr	r2, [pc, #232]	@ (8003054 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d127      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d121      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f82:	d157      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	482f      	ldr	r0, [pc, #188]	@ (800304c <HAL_ADC_ConfigChannel+0x7c0>)
 8002f90:	f7ff f81b 	bl	8001fca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f94:	4b30      	ldr	r3, [pc, #192]	@ (8003058 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	4a30      	ldr	r2, [pc, #192]	@ (800305c <HAL_ADC_ConfigChannel+0x7d0>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fbc:	e03a      	b.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	@ (8003060 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d113      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	@ (8003064 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02a      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4818      	ldr	r0, [pc, #96]	@ (800304c <HAL_ADC_ConfigChannel+0x7c0>)
 8002fea:	f7fe ffee 	bl	8001fca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fee:	e021      	b.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8003068 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11c      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	@ (8003064 <HAL_ADC_ConfigChannel+0x7d8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d011      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003018:	4619      	mov	r1, r3
 800301a:	480c      	ldr	r0, [pc, #48]	@ (800304c <HAL_ADC_ConfigChannel+0x7c0>)
 800301c:	f7fe ffd5 	bl	8001fca <LL_ADC_SetCommonPathInternalCh>
 8003020:	e008      	b.n	8003034 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800303c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003040:	4618      	mov	r0, r3
 8003042:	37d8      	adds	r7, #216	@ 0xd8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	80080000 	.word	0x80080000
 800304c:	50000300 	.word	0x50000300
 8003050:	c3210000 	.word	0xc3210000
 8003054:	90c00010 	.word	0x90c00010
 8003058:	20000000 	.word	0x20000000
 800305c:	053e2d63 	.word	0x053e2d63
 8003060:	c7520000 	.word	0xc7520000
 8003064:	50000100 	.word	0x50000100
 8003068:	cb840000 	.word	0xcb840000

0800306c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f961 	bl	8002344 <LL_ADC_IsEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d169      	bne.n	800315c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	4b36      	ldr	r3, [pc, #216]	@ (8003168 <ADC_Enable+0xfc>)
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	f043 0210 	orr.w	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e055      	b.n	800315e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff f930 	bl	800231c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030bc:	482b      	ldr	r0, [pc, #172]	@ (800316c <ADC_Enable+0x100>)
 80030be:	f7fe ff97 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 80030c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030cc:	4b28      	ldr	r3, [pc, #160]	@ (8003170 <ADC_Enable+0x104>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	4a28      	ldr	r2, [pc, #160]	@ (8003174 <ADC_Enable+0x108>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030e6:	e002      	b.n	80030ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f9      	bne.n	80030e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030f4:	f7fe ff4a 	bl	8001f8c <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030fa:	e028      	b.n	800314e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f91f 	bl	8002344 <LL_ADC_IsEnabled>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f903 	bl	800231c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003116:	f7fe ff39 	bl	8001f8c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d914      	bls.n	800314e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d00d      	beq.n	800314e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e007      	b.n	800315e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d1cf      	bne.n	80030fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	8000003f 	.word	0x8000003f
 800316c:	50000300 	.word	0x50000300
 8003170:	20000000 	.word	0x20000000
 8003174:	053e2d63 	.word	0x053e2d63

08003178 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d14b      	bne.n	800322a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d021      	beq.n	80031f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe ffc9 	bl	8002148 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d032      	beq.n	8003222 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d12b      	bne.n	8003222 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11f      	bne.n	8003222 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031ee:	e018      	b.n	8003222 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d111      	bne.n	8003222 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fb14 	bl	8002850 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003228:	e00e      	b.n	8003248 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fb1e 	bl	8002878 <HAL_ADC_ErrorCallback>
}
 800323c:	e004      	b.n	8003248 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fb00 	bl	8002864 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff faf0 	bl	8002878 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <LL_ADC_IsEnabled>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <LL_ADC_IsEnabled+0x18>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <LL_ADC_IsEnabled+0x1a>
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d101      	bne.n	80032de <LL_ADC_REG_IsConversionOngoing+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b0a1      	sub	sp, #132	@ 0x84
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003306:	2302      	movs	r3, #2
 8003308:	e08b      	b.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003312:	2300      	movs	r3, #0
 8003314:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003316:	2300      	movs	r3, #0
 8003318:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003322:	d102      	bne.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003324:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	e001      	b.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e06a      	b.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ffb9 	bl	80032c6 <LL_ADC_REG_IsConversionOngoing>
 8003354:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffb3 	bl	80032c6 <LL_ADC_REG_IsConversionOngoing>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d14c      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003368:	2b00      	cmp	r3, #0
 800336a:	d149      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800336c:	4b30      	ldr	r3, [pc, #192]	@ (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800336e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d028      	beq.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800338a:	035b      	lsls	r3, r3, #13
 800338c:	430b      	orrs	r3, r1
 800338e:	431a      	orrs	r2, r3
 8003390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003392:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003394:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003398:	f7ff ff82 	bl	80032a0 <LL_ADC_IsEnabled>
 800339c:	4604      	mov	r4, r0
 800339e:	4823      	ldr	r0, [pc, #140]	@ (800342c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033a0:	f7ff ff7e 	bl	80032a0 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d133      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033b4:	f023 030f 	bic.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	6892      	ldr	r2, [r2, #8]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033c8:	e024      	b.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033da:	f7ff ff61 	bl	80032a0 <LL_ADC_IsEnabled>
 80033de:	4604      	mov	r4, r0
 80033e0:	4812      	ldr	r0, [pc, #72]	@ (800342c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033e2:	f7ff ff5d 	bl	80032a0 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4323      	orrs	r3, r4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033f6:	f023 030f 	bic.w	r3, r3, #15
 80033fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033fe:	e009      	b.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003412:	e000      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800341e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003422:	4618      	mov	r0, r3
 8003424:	3784      	adds	r7, #132	@ 0x84
 8003426:	46bd      	mov	sp, r7
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	bf00      	nop
 800342c:	50000100 	.word	0x50000100
 8003430:	50000300 	.word	0x50000300

08003434 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e023      	b.n	800348e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd f9d0 	bl	8000800 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4907      	ldr	r1, [pc, #28]	@ (8003534 <__NVIC_EnableIRQ+0x38>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	@ (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	@ (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	@ 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff4c 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003616:	f7ff ff63 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 800361a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7ff ffb3 	bl	800358c <NVIC_EncodePriority>
 8003626:	4602      	mov	r2, r0
 8003628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff82 	bl	8003538 <__NVIC_SetPriority>
}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff56 	bl	80034fc <__NVIC_EnableIRQ>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e08d      	b.n	8003786 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	4b47      	ldr	r3, [pc, #284]	@ (8003790 <HAL_DMA_Init+0x138>)
 8003672:	429a      	cmp	r2, r3
 8003674:	d80f      	bhi.n	8003696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	4b45      	ldr	r3, [pc, #276]	@ (8003794 <HAL_DMA_Init+0x13c>)
 800367e:	4413      	add	r3, r2
 8003680:	4a45      	ldr	r2, [pc, #276]	@ (8003798 <HAL_DMA_Init+0x140>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	009a      	lsls	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a42      	ldr	r2, [pc, #264]	@ (800379c <HAL_DMA_Init+0x144>)
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40
 8003694:	e00e      	b.n	80036b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4b40      	ldr	r3, [pc, #256]	@ (80037a0 <HAL_DMA_Init+0x148>)
 800369e:	4413      	add	r3, r2
 80036a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003798 <HAL_DMA_Init+0x140>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	009a      	lsls	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <HAL_DMA_Init+0x14c>)
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f9b6 	bl	8003a78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003714:	d102      	bne.n	800371c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003730:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_DMA_Init+0x104>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d80c      	bhi.n	800375c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9d6 	bl	8003af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e008      	b.n	800376e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40020407 	.word	0x40020407
 8003794:	bffdfff8 	.word	0xbffdfff8
 8003798:	cccccccd 	.word	0xcccccccd
 800379c:	40020000 	.word	0x40020000
 80037a0:	bffdfbf8 	.word	0xbffdfbf8
 80037a4:	40020400 	.word	0x40020400

080037a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_Start_IT+0x20>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e066      	b.n	8003896 <HAL_DMA_Start_IT+0xee>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d155      	bne.n	8003888 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8fb 	bl	80039fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 020e 	orr.w	r2, r2, #14
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e00f      	b.n	8003840 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 020a 	orr.w	r2, r2, #10
 800383e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003874:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e005      	b.n	8003894 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2204      	movs	r2, #4
 80038c0:	409a      	lsls	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d026      	beq.n	8003918 <HAL_DMA_IRQHandler+0x7a>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d021      	beq.n	8003918 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0204 	bic.w	r2, r2, #4
 80038f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	f003 021f 	and.w	r2, r3, #31
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2104      	movs	r1, #4
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	2b00      	cmp	r3, #0
 800390c:	d071      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003916:	e06c      	b.n	80039f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2202      	movs	r2, #2
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d02e      	beq.n	800398a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d029      	beq.n	800398a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020a 	bic.w	r2, r2, #10
 8003952:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	2102      	movs	r1, #2
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d038      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003988:	e033      	b.n	80039f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	2208      	movs	r2, #8
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d02a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d025      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 020e 	bic.w	r2, r2, #14
 80039b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	2101      	movs	r1, #1
 80039c6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
}
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2a:	f003 021f 	and.w	r2, r3, #31
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d108      	bne.n	8003a5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a5a:	e007      	b.n	8003a6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d802      	bhi.n	8003a92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e001      	b.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a94:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b08      	subs	r3, #8
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	009a      	lsls	r2, r3, #2
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	2201      	movs	r2, #1
 8003acc:	409a      	lsls	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40020407 	.word	0x40020407
 8003ae4:	40020800 	.word	0x40020800
 8003ae8:	40020820 	.word	0x40020820
 8003aec:	cccccccd 	.word	0xcccccccd
 8003af0:	40020880 	.word	0x40020880

08003af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a08      	ldr	r2, [pc, #32]	@ (8003b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b16:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2201      	movs	r2, #1
 8003b22:	409a      	lsls	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	1000823f 	.word	0x1000823f
 8003b38:	40020940 	.word	0x40020940

08003b3c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	460b      	mov	r3, r1
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	605a      	str	r2, [r3, #4]
      break;
 8003b5a:	e005      	b.n	8003b68 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
      break;
 8003b66:	bf00      	nop
  }

  return status;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e003      	b.n	8003b92 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <HAL_EXTI_IRQHandler+0x5c>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4798      	blx	r3
    }
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40010414 	.word	0x40010414

08003c00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e147      	b.n	8003ea2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc fe7a 	bl	8000920 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0210 	bic.w	r2, r2, #16
 8003c3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c3c:	f7fe f9a6 	bl	8001f8c <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c42:	e012      	b.n	8003c6a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c44:	f7fe f9a2 	bl	8001f8c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b0a      	cmp	r3, #10
 8003c50:	d90b      	bls.n	8003c6a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e11b      	b.n	8003ea2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d0e5      	beq.n	8003c44 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c88:	f7fe f980 	bl	8001f8c <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c8e:	e012      	b.n	8003cb6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c90:	f7fe f97c 	bl	8001f8c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b0a      	cmp	r3, #10
 8003c9c:	d90b      	bls.n	8003cb6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0f5      	b.n	8003ea2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0e5      	beq.n	8003c90 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0202 	orr.w	r2, r2, #2
 8003cd2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a74      	ldr	r2, [pc, #464]	@ (8003eac <HAL_FDCAN_Init+0x2ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d103      	bne.n	8003ce6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003cde:	4a74      	ldr	r2, [pc, #464]	@ (8003eb0 <HAL_FDCAN_Init+0x2b0>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7c1b      	ldrb	r3, [r3, #16]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cfc:	619a      	str	r2, [r3, #24]
 8003cfe:	e007      	b.n	8003d10 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7c5b      	ldrb	r3, [r3, #17]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d108      	bne.n	8003d2a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d26:	619a      	str	r2, [r3, #24]
 8003d28:	e007      	b.n	8003d3a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d38:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7c9b      	ldrb	r3, [r3, #18]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	e007      	b.n	8003d64 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d62:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003d88:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0210 	bic.w	r2, r2, #16
 8003d98:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d108      	bne.n	8003db4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0204 	orr.w	r2, r2, #4
 8003db0:	619a      	str	r2, [r3, #24]
 8003db2:	e02c      	b.n	8003e0e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d028      	beq.n	8003e0e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d01c      	beq.n	8003dfe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dd2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0210 	orr.w	r2, r2, #16
 8003de2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d110      	bne.n	8003e0e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0220 	orr.w	r2, r2, #32
 8003dfa:	619a      	str	r2, [r3, #24]
 8003dfc:	e007      	b.n	8003e0e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0220 	orr.w	r2, r2, #32
 8003e0c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e1e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e26:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e36:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e38:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e42:	d115      	bne.n	8003e70 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e52:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e5c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e6c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e6e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb14 	bl	80044b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40006400 	.word	0x40006400
 8003eb0:	40006500 	.word	0x40006500

08003eb4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b08b      	sub	sp, #44	@ 0x2c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ecc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003ece:	7efb      	ldrb	r3, [r7, #27]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f040 80e8 	bne.w	80040a6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b40      	cmp	r3, #64	@ 0x40
 8003eda:	d137      	bne.n	8003f4c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0db      	b.n	80040b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f0c:	d10a      	bne.n	8003f24 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1e:	d101      	bne.n	8003f24 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003f20:	2301      	movs	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	e036      	b.n	8003fba <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0a3      	b.n	80040b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f7c:	d10a      	bne.n	8003f94 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8e:	d101      	bne.n	8003f94 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003f90:	2301      	movs	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	0c9b      	lsrs	r3, r3, #18
 8003fd4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e005      	b.n	8003fea <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	3304      	adds	r3, #4
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e1b      	lsrs	r3, r3, #24
 800403e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	0fda      	lsrs	r2, r3, #31
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	3304      	adds	r3, #4
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800405a:	2300      	movs	r3, #0
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	e00a      	b.n	8004076 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	441a      	add	r2, r3
 8004066:	6839      	ldr	r1, [r7, #0]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	440b      	add	r3, r1
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	3301      	adds	r3, #1
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4a11      	ldr	r2, [pc, #68]	@ (80040c0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	461a      	mov	r2, r3
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	4293      	cmp	r3, r2
 8004084:	d3ec      	bcc.n	8004060 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d105      	bne.n	8004098 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004096:	e004      	b.n	80040a2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e006      	b.n	80040b4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040aa:	f043 0208 	orr.w	r2, r3, #8
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	372c      	adds	r7, #44	@ 0x2c
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	0800b00c 	.word	0x0800b00c

080040c4 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040d4:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d16e      	bne.n	80041ba <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e065      	b.n	80041c8 <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e005      	b.n	8004148 <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3304      	adds	r3, #4
 8004164:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 020f 	and.w	r2, r3, #15
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	0e1a      	lsrs	r2, r3, #24
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e006      	b.n	80041c8 <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	f043 0208 	orr.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	@ 0x30
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f0:	4013      	ands	r3, r2
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004208:	4013      	ands	r3, r2
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004220:	4013      	ands	r3, r2
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800422e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004236:	6a3a      	ldr	r2, [r7, #32]
 8004238:	4013      	ands	r3, r2
 800423a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004242:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004246:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	4013      	ands	r3, r2
 8004252:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d006      	beq.n	800428a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2240      	movs	r2, #64	@ 0x40
 8004282:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f901 	bl	800448c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01a      	beq.n	80042cc <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d014      	beq.n	80042cc <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042aa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f8c1 	bl	800444e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80042cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80042da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fd f8fb 	bl	80014d8 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80042e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80042f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd f916 	bl	8001524 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004304:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004306:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fd f977 	bl	80015fc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	0a5b      	lsrs	r3, r3, #9
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	0a5b      	lsrs	r3, r3, #9
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800432e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f882 	bl	800443a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	09db      	lsrs	r3, r3, #7
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	09db      	lsrs	r3, r3, #7
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d013      	beq.n	8004376 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004356:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2280      	movs	r2, #128	@ 0x80
 800436c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fd f8cc 	bl	800150e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	0b5b      	lsrs	r3, r3, #13
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	0b5b      	lsrs	r3, r3, #13
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004396:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f863 	bl	8004464 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	0bdb      	lsrs	r3, r3, #15
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	0bdb      	lsrs	r3, r3, #15
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f859 	bl	8004478 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	0b9b      	lsrs	r3, r3, #14
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	0b9b      	lsrs	r3, r3, #14
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004402:	69f9      	ldr	r1, [r7, #28]
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fd f84b 	bl	80014a0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d009      	beq.n	8004424 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f837 	bl	80044a0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004432:	bf00      	nop
 8004434:	3730      	adds	r7, #48	@ 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80044bc:	4b27      	ldr	r3, [pc, #156]	@ (800455c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80044be:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ce:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	041a      	lsls	r2, r3, #16
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	061a      	lsls	r2, r3, #24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e005      	b.n	8004542 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3f3      	bcc.n	8004536 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	4000a400 	.word	0x4000a400

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800456e:	e15a      	b.n	8004826 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 814c 	beq.w	8004820 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d005      	beq.n	80045a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800459c:	2b02      	cmp	r3, #2
 800459e:	d130      	bne.n	8004602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	2203      	movs	r2, #3
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045d6:	2201      	movs	r2, #1
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0201 	and.w	r2, r3, #1
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b03      	cmp	r3, #3
 800460c:	d017      	beq.n	800463e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	2203      	movs	r2, #3
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d123      	bne.n	8004692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	08da      	lsrs	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3208      	adds	r2, #8
 8004652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	220f      	movs	r2, #15
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	08da      	lsrs	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3208      	adds	r2, #8
 800468c:	6939      	ldr	r1, [r7, #16]
 800468e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0203 	and.w	r2, r3, #3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80a6 	beq.w	8004820 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004844 <HAL_GPIO_Init+0x2e4>)
 80046d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004844 <HAL_GPIO_Init+0x2e4>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6613      	str	r3, [r2, #96]	@ 0x60
 80046e0:	4b58      	ldr	r3, [pc, #352]	@ (8004844 <HAL_GPIO_Init+0x2e4>)
 80046e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ec:	4a56      	ldr	r2, [pc, #344]	@ (8004848 <HAL_GPIO_Init+0x2e8>)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	3302      	adds	r3, #2
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	220f      	movs	r2, #15
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004716:	d01f      	beq.n	8004758 <HAL_GPIO_Init+0x1f8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a4c      	ldr	r2, [pc, #304]	@ (800484c <HAL_GPIO_Init+0x2ec>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d019      	beq.n	8004754 <HAL_GPIO_Init+0x1f4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a4b      	ldr	r2, [pc, #300]	@ (8004850 <HAL_GPIO_Init+0x2f0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <HAL_GPIO_Init+0x1f0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a4a      	ldr	r2, [pc, #296]	@ (8004854 <HAL_GPIO_Init+0x2f4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00d      	beq.n	800474c <HAL_GPIO_Init+0x1ec>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a49      	ldr	r2, [pc, #292]	@ (8004858 <HAL_GPIO_Init+0x2f8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <HAL_GPIO_Init+0x1e8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a48      	ldr	r2, [pc, #288]	@ (800485c <HAL_GPIO_Init+0x2fc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_GPIO_Init+0x1e4>
 8004740:	2305      	movs	r3, #5
 8004742:	e00a      	b.n	800475a <HAL_GPIO_Init+0x1fa>
 8004744:	2306      	movs	r3, #6
 8004746:	e008      	b.n	800475a <HAL_GPIO_Init+0x1fa>
 8004748:	2304      	movs	r3, #4
 800474a:	e006      	b.n	800475a <HAL_GPIO_Init+0x1fa>
 800474c:	2303      	movs	r3, #3
 800474e:	e004      	b.n	800475a <HAL_GPIO_Init+0x1fa>
 8004750:	2302      	movs	r3, #2
 8004752:	e002      	b.n	800475a <HAL_GPIO_Init+0x1fa>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_GPIO_Init+0x1fa>
 8004758:	2300      	movs	r3, #0
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	f002 0203 	and.w	r2, r2, #3
 8004760:	0092      	lsls	r2, r2, #2
 8004762:	4093      	lsls	r3, r2
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800476a:	4937      	ldr	r1, [pc, #220]	@ (8004848 <HAL_GPIO_Init+0x2e8>)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004778:	4b39      	ldr	r3, [pc, #228]	@ (8004860 <HAL_GPIO_Init+0x300>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	43db      	mvns	r3, r3
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800479c:	4a30      	ldr	r2, [pc, #192]	@ (8004860 <HAL_GPIO_Init+0x300>)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <HAL_GPIO_Init+0x300>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047c6:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <HAL_GPIO_Init+0x300>)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047cc:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <HAL_GPIO_Init+0x300>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HAL_GPIO_Init+0x300>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004860 <HAL_GPIO_Init+0x300>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	43db      	mvns	r3, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800481a:	4a11      	ldr	r2, [pc, #68]	@ (8004860 <HAL_GPIO_Init+0x300>)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	3301      	adds	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	f47f ae9d 	bne.w	8004570 <HAL_GPIO_Init+0x10>
  }
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40021000 	.word	0x40021000
 8004848:	40010000 	.word	0x40010000
 800484c:	48000400 	.word	0x48000400
 8004850:	48000800 	.word	0x48000800
 8004854:	48000c00 	.word	0x48000c00
 8004858:	48001000 	.word	0x48001000
 800485c:	48001400 	.word	0x48001400
 8004860:	40010400 	.word	0x40010400

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004880:	e002      	b.n	8004888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800489e:	4b08      	ldr	r3, [pc, #32]	@ (80048c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d006      	beq.n	80048b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048aa:	4a05      	ldr	r2, [pc, #20]	@ (80048c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc ff0c 	bl	80016d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40010400 	.word	0x40010400

080048c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e08d      	b.n	80049f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc f932 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	@ 0x24
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004914:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004924:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e006      	b.n	800494c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800494a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d108      	bne.n	8004966 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	e007      	b.n	8004976 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d138      	bne.n	8004a82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e032      	b.n	8004a84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	@ 0x24
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d139      	bne.n	8004b1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e033      	b.n	8004b1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	@ 0x24
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ae2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d141      	bne.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b36:	4b4b      	ldr	r3, [pc, #300]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b42:	d131      	bne.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b44:	4b47      	ldr	r3, [pc, #284]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b4a:	4a46      	ldr	r2, [pc, #280]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b54:	4b43      	ldr	r3, [pc, #268]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b5c:	4a41      	ldr	r2, [pc, #260]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b64:	4b40      	ldr	r3, [pc, #256]	@ (8004c68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2232      	movs	r2, #50	@ 0x32
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	0c9b      	lsrs	r3, r3, #18
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b7a:	e002      	b.n	8004b82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b82:	4b38      	ldr	r3, [pc, #224]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8e:	d102      	bne.n	8004b96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f2      	bne.n	8004b7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b96:	4b33      	ldr	r3, [pc, #204]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba2:	d158      	bne.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e057      	b.n	8004c58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bae:	4a2d      	ldr	r2, [pc, #180]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bb8:	e04d      	b.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc0:	d141      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bc2:	4b28      	ldr	r3, [pc, #160]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bce:	d131      	bne.n	8004c34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd0:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd6:	4a23      	ldr	r2, [pc, #140]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004be0:	4b20      	ldr	r3, [pc, #128]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004be8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2232      	movs	r2, #50	@ 0x32
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	0c9b      	lsrs	r3, r3, #18
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c06:	e002      	b.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d102      	bne.n	8004c22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f2      	bne.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c22:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2e:	d112      	bne.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e011      	b.n	8004c58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c44:	e007      	b.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c46:	4b07      	ldr	r3, [pc, #28]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c4e:	4a05      	ldr	r2, [pc, #20]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40007000 	.word	0x40007000
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	431bde83 	.word	0x431bde83

08004c70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c7e:	6093      	str	r3, [r2, #8]
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40007000 	.word	0x40007000

08004c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e2fe      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d075      	beq.n	8004d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cae:	4b97      	ldr	r3, [pc, #604]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb8:	4b94      	ldr	r3, [pc, #592]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	d102      	bne.n	8004cce <HAL_RCC_OscConfig+0x3e>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d002      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x44>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d10b      	bne.n	8004cec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	4b8d      	ldr	r3, [pc, #564]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05b      	beq.n	8004d98 <HAL_RCC_OscConfig+0x108>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d157      	bne.n	8004d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e2d9      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCC_OscConfig+0x74>
 8004cf6:	4b85      	ldr	r3, [pc, #532]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a84      	ldr	r2, [pc, #528]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e01d      	b.n	8004d40 <HAL_RCC_OscConfig+0xb0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x98>
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7e      	ldr	r2, [pc, #504]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7b      	ldr	r2, [pc, #492]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e00b      	b.n	8004d40 <HAL_RCC_OscConfig+0xb0>
 8004d28:	4b78      	ldr	r3, [pc, #480]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a77      	ldr	r2, [pc, #476]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	4b75      	ldr	r3, [pc, #468]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a74      	ldr	r2, [pc, #464]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd f920 	bl	8001f8c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fd f91c 	bl	8001f8c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	@ 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e29e      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d62:	4b6a      	ldr	r3, [pc, #424]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0xc0>
 8004d6e:	e014      	b.n	8004d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd f90c 	bl	8001f8c <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fd f908 	bl	8001f8c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	@ 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e28a      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d8a:	4b60      	ldr	r3, [pc, #384]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0xe8>
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d075      	beq.n	8004e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da6:	4b59      	ldr	r3, [pc, #356]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db0:	4b56      	ldr	r3, [pc, #344]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x136>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_OscConfig+0x13c>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d11f      	bne.n	8004e0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_OscConfig+0x154>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e25d      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b49      	ldr	r3, [pc, #292]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	4946      	ldr	r1, [pc, #280]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004df8:	4b45      	ldr	r3, [pc, #276]	@ (8004f10 <HAL_RCC_OscConfig+0x280>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb ffef 	bl	8000de0 <HAL_InitTick>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d043      	beq.n	8004e90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e249      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d023      	beq.n	8004e5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b3d      	ldr	r3, [pc, #244]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3c      	ldr	r2, [pc, #240]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fd f8b4 	bl	8001f8c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fd f8b0 	bl	8001f8c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e232      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e3a:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	4b31      	ldr	r3, [pc, #196]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	492d      	ldr	r1, [pc, #180]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
 8004e5a:	e01a      	b.n	8004e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd f890 	bl	8001f8c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e70:	f7fd f88c 	bl	8001f8c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e20e      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e82:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x1e0>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d041      	beq.n	8004f22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01c      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eac:	4a17      	ldr	r2, [pc, #92]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fd f869 	bl	8001f8c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebe:	f7fd f865 	bl	8001f8c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1e7      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ef      	beq.n	8004ebe <HAL_RCC_OscConfig+0x22e>
 8004ede:	e020      	b.n	8004f22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee6:	4a09      	ldr	r2, [pc, #36]	@ (8004f0c <HAL_RCC_OscConfig+0x27c>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fd f84c 	bl	8001f8c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ef6:	e00d      	b.n	8004f14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7fd f848 	bl	8001f8c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d906      	bls.n	8004f14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1ca      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	200001b4 	.word	0x200001b4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f14:	4b8c      	ldr	r3, [pc, #560]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ea      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a6 	beq.w	800507c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f30:	2300      	movs	r3, #0
 8004f32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f34:	4b84      	ldr	r3, [pc, #528]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_OscConfig+0x2b4>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x2b6>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f56:	4b7c      	ldr	r3, [pc, #496]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f62:	2301      	movs	r3, #1
 8004f64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f66:	4b79      	ldr	r3, [pc, #484]	@ (800514c <HAL_RCC_OscConfig+0x4bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d118      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f72:	4b76      	ldr	r3, [pc, #472]	@ (800514c <HAL_RCC_OscConfig+0x4bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a75      	ldr	r2, [pc, #468]	@ (800514c <HAL_RCC_OscConfig+0x4bc>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7e:	f7fd f805 	bl	8001f8c <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f86:	f7fd f801 	bl	8001f8c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e183      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f98:	4b6c      	ldr	r3, [pc, #432]	@ (800514c <HAL_RCC_OscConfig+0x4bc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d108      	bne.n	8004fbe <HAL_RCC_OscConfig+0x32e>
 8004fac:	4b66      	ldr	r3, [pc, #408]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb2:	4a65      	ldr	r2, [pc, #404]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fbc:	e024      	b.n	8005008 <HAL_RCC_OscConfig+0x378>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d110      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x358>
 8004fc6:	4b60      	ldr	r3, [pc, #384]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fcc:	4a5e      	ldr	r2, [pc, #376]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fce:	f043 0304 	orr.w	r3, r3, #4
 8004fd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fe6:	e00f      	b.n	8005008 <HAL_RCC_OscConfig+0x378>
 8004fe8:	4b57      	ldr	r3, [pc, #348]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fee:	4a56      	ldr	r2, [pc, #344]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ff8:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffe:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc ffbc 	bl	8001f8c <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fc ffb8 	bl	8001f8c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e138      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502e:	4b46      	ldr	r3, [pc, #280]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ed      	beq.n	8005018 <HAL_RCC_OscConfig+0x388>
 800503c:	e015      	b.n	800506a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503e:	f7fc ffa5 	bl	8001f8c <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fc ffa1 	bl	8001f8c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e121      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800505c:	4b3a      	ldr	r3, [pc, #232]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ed      	bne.n	8005046 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800506a:	7ffb      	ldrb	r3, [r7, #31]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d105      	bne.n	800507c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005070:	4b35      	ldr	r3, [pc, #212]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005074:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800507a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d03c      	beq.n	8005102 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01c      	beq.n	80050ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005090:	4b2d      	ldr	r3, [pc, #180]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005096:	4a2c      	ldr	r2, [pc, #176]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc ff74 	bl	8001f8c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a8:	f7fc ff70 	bl	8001f8c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e0f2      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ba:	4b23      	ldr	r3, [pc, #140]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 80050bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ef      	beq.n	80050a8 <HAL_RCC_OscConfig+0x418>
 80050c8:	e01b      	b.n	8005102 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 80050cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050da:	f7fc ff57 	bl	8001f8c <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e2:	f7fc ff53 	bl	8001f8c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0d5      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050f4:	4b14      	ldr	r3, [pc, #80]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ef      	bne.n	80050e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80c9 	beq.w	800529e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800510c:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b0c      	cmp	r3, #12
 8005116:	f000 8083 	beq.w	8005220 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d15e      	bne.n	80051e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a08      	ldr	r2, [pc, #32]	@ (8005148 <HAL_RCC_OscConfig+0x4b8>)
 8005128:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fc ff2d 	bl	8001f8c <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005134:	e00c      	b.n	8005150 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005136:	f7fc ff29 	bl	8001f8c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d905      	bls.n	8005150 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0ab      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005150:	4b55      	ldr	r3, [pc, #340]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ec      	bne.n	8005136 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800515c:	4b52      	ldr	r3, [pc, #328]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	4b52      	ldr	r3, [pc, #328]	@ (80052ac <HAL_RCC_OscConfig+0x61c>)
 8005162:	4013      	ands	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6a11      	ldr	r1, [r2, #32]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800516c:	3a01      	subs	r2, #1
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	4311      	orrs	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005176:	0212      	lsls	r2, r2, #8
 8005178:	4311      	orrs	r1, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800517e:	0852      	lsrs	r2, r2, #1
 8005180:	3a01      	subs	r2, #1
 8005182:	0552      	lsls	r2, r2, #21
 8005184:	4311      	orrs	r1, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800518a:	0852      	lsrs	r2, r2, #1
 800518c:	3a01      	subs	r2, #1
 800518e:	0652      	lsls	r2, r2, #25
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005196:	06d2      	lsls	r2, r2, #27
 8005198:	430a      	orrs	r2, r1
 800519a:	4943      	ldr	r1, [pc, #268]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 800519c:	4313      	orrs	r3, r2
 800519e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b41      	ldr	r3, [pc, #260]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a40      	ldr	r2, [pc, #256]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051ac:	4b3e      	ldr	r3, [pc, #248]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a3d      	ldr	r2, [pc, #244]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fc fee8 	bl	8001f8c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7fc fee4 	bl	8001f8c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e066      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d2:	4b35      	ldr	r3, [pc, #212]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x530>
 80051de:	e05e      	b.n	800529e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e0:	4b31      	ldr	r3, [pc, #196]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a30      	ldr	r2, [pc, #192]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 80051e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fc fece 	bl	8001f8c <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fc feca 	bl	8001f8c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e04c      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005206:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005212:	4b25      	ldr	r3, [pc, #148]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	4924      	ldr	r1, [pc, #144]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 8005218:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <HAL_RCC_OscConfig+0x620>)
 800521a:	4013      	ands	r3, r2
 800521c:	60cb      	str	r3, [r1, #12]
 800521e:	e03e      	b.n	800529e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e039      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800522c:	4b1e      	ldr	r3, [pc, #120]	@ (80052a8 <HAL_RCC_OscConfig+0x618>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	429a      	cmp	r2, r3
 800523e:	d12c      	bne.n	800529a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	3b01      	subs	r3, #1
 800524c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d123      	bne.n	800529a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d11b      	bne.n	800529a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d113      	bne.n	800529a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	3b01      	subs	r3, #1
 8005280:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d109      	bne.n	800529a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	3b01      	subs	r3, #1
 8005294:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	019f800c 	.word	0x019f800c
 80052b0:	feeefffc 	.word	0xfeeefffc

080052b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e11e      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052cc:	4b91      	ldr	r3, [pc, #580]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d910      	bls.n	80052fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b8e      	ldr	r3, [pc, #568]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 020f 	bic.w	r2, r3, #15
 80052e2:	498c      	ldr	r1, [pc, #560]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b8a      	ldr	r3, [pc, #552]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e106      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d073      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d129      	bne.n	8005364 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005310:	4b81      	ldr	r3, [pc, #516]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0f4      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005320:	f000 f9d0 	bl	80056c4 <RCC_GetSysClockFreqFromPLLSource>
 8005324:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4a7c      	ldr	r2, [pc, #496]	@ (800551c <HAL_RCC_ClockConfig+0x268>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d93f      	bls.n	80053ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800532e:	4b7a      	ldr	r3, [pc, #488]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d033      	beq.n	80053ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800534a:	2b00      	cmp	r3, #0
 800534c:	d12f      	bne.n	80053ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800534e:	4b72      	ldr	r3, [pc, #456]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005356:	4a70      	ldr	r2, [pc, #448]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800535e:	2380      	movs	r3, #128	@ 0x80
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e024      	b.n	80053ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d107      	bne.n	800537c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800536c:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0c6      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537c:	4b66      	ldr	r3, [pc, #408]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0be      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800538c:	f000 f8ce 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8005390:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4a61      	ldr	r2, [pc, #388]	@ (800551c <HAL_RCC_ClockConfig+0x268>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d909      	bls.n	80053ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800539a:	4b5f      	ldr	r3, [pc, #380]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80053a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053aa:	2380      	movs	r3, #128	@ 0x80
 80053ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ae:	4b5a      	ldr	r3, [pc, #360]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f023 0203 	bic.w	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4957      	ldr	r1, [pc, #348]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c0:	f7fc fde4 	bl	8001f8c <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c6:	e00a      	b.n	80053de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c8:	f7fc fde0 	bl	8001f8c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e095      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053de:	4b4e      	ldr	r3, [pc, #312]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 020c 	and.w	r2, r3, #12
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1eb      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d023      	beq.n	8005444 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005408:	4b43      	ldr	r3, [pc, #268]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a42      	ldr	r2, [pc, #264]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800540e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005412:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005420:	4b3d      	ldr	r3, [pc, #244]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005428:	4a3b      	ldr	r2, [pc, #236]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800542a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800542e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005430:	4b39      	ldr	r3, [pc, #228]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4936      	ldr	r1, [pc, #216]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
 8005442:	e008      	b.n	8005456 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b80      	cmp	r3, #128	@ 0x80
 8005448:	d105      	bne.n	8005456 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800544a:	4b33      	ldr	r3, [pc, #204]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	4a32      	ldr	r2, [pc, #200]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 8005450:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005454:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005456:	4b2f      	ldr	r3, [pc, #188]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d21d      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005464:	4b2b      	ldr	r3, [pc, #172]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 020f 	bic.w	r2, r3, #15
 800546c:	4929      	ldr	r1, [pc, #164]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005474:	f7fc fd8a 	bl	8001f8c <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547c:	f7fc fd86 	bl	8001f8c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e03b      	b.n	800550a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b20      	ldr	r3, [pc, #128]	@ (8005514 <HAL_RCC_ClockConfig+0x260>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d1ed      	bne.n	800547c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4917      	ldr	r1, [pc, #92]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ca:	4b13      	ldr	r3, [pc, #76]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	490f      	ldr	r1, [pc, #60]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054de:	f000 f825 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <HAL_RCC_ClockConfig+0x264>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490c      	ldr	r1, [pc, #48]	@ (8005520 <HAL_RCC_ClockConfig+0x26c>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <HAL_RCC_ClockConfig+0x270>)
 80054fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <HAL_RCC_ClockConfig+0x274>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fb fc6c 	bl	8000de0 <HAL_InitTick>
 8005508:	4603      	mov	r3, r0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40022000 	.word	0x40022000
 8005518:	40021000 	.word	0x40021000
 800551c:	04c4b400 	.word	0x04c4b400
 8005520:	0800afd4 	.word	0x0800afd4
 8005524:	20000000 	.word	0x20000000
 8005528:	200001b4 	.word	0x200001b4

0800552c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005532:	4b2c      	ldr	r3, [pc, #176]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b04      	cmp	r3, #4
 800553c:	d102      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800553e:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	e047      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005544:	4b27      	ldr	r3, [pc, #156]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 030c 	and.w	r3, r3, #12
 800554c:	2b08      	cmp	r3, #8
 800554e:	d102      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005550:	4b26      	ldr	r3, [pc, #152]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e03e      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005556:	4b23      	ldr	r3, [pc, #140]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b0c      	cmp	r3, #12
 8005560:	d136      	bne.n	80055d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005562:	4b20      	ldr	r3, [pc, #128]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800556c:	4b1d      	ldr	r3, [pc, #116]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	091b      	lsrs	r3, r3, #4
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	3301      	adds	r3, #1
 8005578:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d10c      	bne.n	800559a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005580:	4a1a      	ldr	r2, [pc, #104]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	4a16      	ldr	r2, [pc, #88]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558a:	68d2      	ldr	r2, [r2, #12]
 800558c:	0a12      	lsrs	r2, r2, #8
 800558e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	617b      	str	r3, [r7, #20]
      break;
 8005598:	e00c      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800559a:	4a13      	ldr	r2, [pc, #76]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	4a10      	ldr	r2, [pc, #64]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a4:	68d2      	ldr	r2, [r2, #12]
 80055a6:	0a12      	lsrs	r2, r2, #8
 80055a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]
      break;
 80055b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	0e5b      	lsrs	r3, r3, #25
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	3301      	adds	r3, #1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	e001      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055d4:	693b      	ldr	r3, [r7, #16]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	00f42400 	.word	0x00f42400
 80055ec:	016e3600 	.word	0x016e3600

080055f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f4:	4b03      	ldr	r3, [pc, #12]	@ (8005604 <HAL_RCC_GetHCLKFreq+0x14>)
 80055f6:	681b      	ldr	r3, [r3, #0]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000000 	.word	0x20000000

08005608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800560c:	f7ff fff0 	bl	80055f0 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b06      	ldr	r3, [pc, #24]	@ (800562c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4904      	ldr	r1, [pc, #16]	@ (8005630 <HAL_RCC_GetPCLK1Freq+0x28>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40021000 	.word	0x40021000
 8005630:	0800afe4 	.word	0x0800afe4

08005634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005638:	f7ff ffda 	bl	80055f0 <HAL_RCC_GetHCLKFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	0adb      	lsrs	r3, r3, #11
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	4904      	ldr	r1, [pc, #16]	@ (800565c <HAL_RCC_GetPCLK2Freq+0x28>)
 800564a:	5ccb      	ldrb	r3, [r1, r3]
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021000 	.word	0x40021000
 800565c:	0800afe4 	.word	0x0800afe4

08005660 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	220f      	movs	r2, #15
 800566e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005670:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <HAL_RCC_GetClockConfig+0x5c>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0203 	and.w	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800567c:	4b0f      	ldr	r3, [pc, #60]	@ (80056bc <HAL_RCC_GetClockConfig+0x5c>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <HAL_RCC_GetClockConfig+0x5c>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005694:	4b09      	ldr	r3, [pc, #36]	@ (80056bc <HAL_RCC_GetClockConfig+0x5c>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	08db      	lsrs	r3, r3, #3
 800569a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056a2:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <HAL_RCC_GetClockConfig+0x60>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40022000 	.word	0x40022000

080056c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d10c      	bne.n	8005702 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056e8:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056f2:	68d2      	ldr	r2, [r2, #12]
 80056f4:	0a12      	lsrs	r2, r2, #8
 80056f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	617b      	str	r3, [r7, #20]
    break;
 8005700:	e00c      	b.n	800571c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005702:	4a12      	ldr	r2, [pc, #72]	@ (800574c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	4a0e      	ldr	r2, [pc, #56]	@ (8005744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	0a12      	lsrs	r2, r2, #8
 8005710:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
    break;
 800571a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800571c:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	0e5b      	lsrs	r3, r3, #25
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005736:	687b      	ldr	r3, [r7, #4]
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40021000 	.word	0x40021000
 8005748:	016e3600 	.word	0x016e3600
 800574c:	00f42400 	.word	0x00f42400

08005750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005758:	2300      	movs	r3, #0
 800575a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800575c:	2300      	movs	r3, #0
 800575e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8098 	beq.w	800589e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576e:	2300      	movs	r3, #0
 8005770:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005772:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577e:	4b40      	ldr	r3, [pc, #256]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	4a3f      	ldr	r2, [pc, #252]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005788:	6593      	str	r3, [r2, #88]	@ 0x58
 800578a:	4b3d      	ldr	r3, [pc, #244]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800579a:	4b3a      	ldr	r3, [pc, #232]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a39      	ldr	r2, [pc, #228]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057a6:	f7fc fbf1 	bl	8001f8c <HAL_GetTick>
 80057aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ac:	e009      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ae:	f7fc fbed 	bl	8001f8c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d902      	bls.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	74fb      	strb	r3, [r7, #19]
        break;
 80057c0:	e005      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c2:	4b30      	ldr	r3, [pc, #192]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ef      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057ce:	7cfb      	ldrb	r3, [r7, #19]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d159      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01e      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d019      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057f0:	4b23      	ldr	r3, [pc, #140]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057fc:	4b20      	ldr	r3, [pc, #128]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	4a1f      	ldr	r2, [pc, #124]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800580c:	4b1c      	ldr	r3, [pc, #112]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	4a1b      	ldr	r2, [pc, #108]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800581c:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fc fbad 	bl	8001f8c <HAL_GetTick>
 8005832:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005834:	e00b      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fc fba9 	bl	8001f8c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d902      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	74fb      	strb	r3, [r7, #19]
            break;
 800584c:	e006      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584e:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ec      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800585c:	7cfb      	ldrb	r3, [r7, #19]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005862:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	4903      	ldr	r1, [pc, #12]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005878:	e008      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	74bb      	strb	r3, [r7, #18]
 800587e:	e005      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005880:	40021000 	.word	0x40021000
 8005884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	7cfb      	ldrb	r3, [r7, #19]
 800588a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800588c:	7c7b      	ldrb	r3, [r7, #17]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d105      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005892:	4ba6      	ldr	r3, [pc, #664]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	4aa5      	ldr	r2, [pc, #660]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800589c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058aa:	4ba0      	ldr	r3, [pc, #640]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b0:	f023 0203 	bic.w	r2, r3, #3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	499c      	ldr	r1, [pc, #624]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058cc:	4b97      	ldr	r3, [pc, #604]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f023 020c 	bic.w	r2, r3, #12
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	4994      	ldr	r1, [pc, #592]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ee:	4b8f      	ldr	r3, [pc, #572]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	498b      	ldr	r1, [pc, #556]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005910:	4b86      	ldr	r3, [pc, #536]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005916:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	4983      	ldr	r1, [pc, #524]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005932:	4b7e      	ldr	r3, [pc, #504]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	497a      	ldr	r1, [pc, #488]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005954:	4b75      	ldr	r3, [pc, #468]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	4972      	ldr	r1, [pc, #456]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005976:	4b6d      	ldr	r3, [pc, #436]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	4969      	ldr	r1, [pc, #420]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005998:	4b64      	ldr	r3, [pc, #400]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4961      	ldr	r1, [pc, #388]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ba:	4b5c      	ldr	r3, [pc, #368]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	4958      	ldr	r1, [pc, #352]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059dc:	4b53      	ldr	r3, [pc, #332]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	4950      	ldr	r1, [pc, #320]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fa:	d105      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059fc:	4b4b      	ldr	r3, [pc, #300]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a4a      	ldr	r2, [pc, #296]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d015      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a14:	4b45      	ldr	r3, [pc, #276]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	4942      	ldr	r1, [pc, #264]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a32:	d105      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a34:	4b3d      	ldr	r3, [pc, #244]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4a3c      	ldr	r2, [pc, #240]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a4c:	4b37      	ldr	r3, [pc, #220]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5a:	4934      	ldr	r1, [pc, #208]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a2e      	ldr	r2, [pc, #184]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a84:	4b29      	ldr	r3, [pc, #164]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a92:	4926      	ldr	r1, [pc, #152]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa2:	d105      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa4:	4b21      	ldr	r3, [pc, #132]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d015      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005abc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	4918      	ldr	r1, [pc, #96]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ada:	d105      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005adc:	4b13      	ldr	r3, [pc, #76]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a12      	ldr	r2, [pc, #72]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005af4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b02:	490a      	ldr	r1, [pc, #40]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a04      	ldr	r2, [pc, #16]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e049      	b.n	8005bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f841 	bl	8005bde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fe56 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d001      	beq.n	8005c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e042      	b.n	8005c92 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a21      	ldr	r2, [pc, #132]	@ (8005ca0 <HAL_TIM_Base_Start+0xac>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_TIM_Base_Start+0x5c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c26:	d013      	beq.n	8005c50 <HAL_TIM_Base_Start+0x5c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca4 <HAL_TIM_Base_Start+0xb0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Start+0x5c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca8 <HAL_TIM_Base_Start+0xb4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Start+0x5c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	@ (8005cac <HAL_TIM_Base_Start+0xb8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Start+0x5c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <HAL_TIM_Base_Start+0xbc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d115      	bne.n	8005c7c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4b17      	ldr	r3, [pc, #92]	@ (8005cb4 <HAL_TIM_Base_Start+0xc0>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d015      	beq.n	8005c8e <HAL_TIM_Base_Start+0x9a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c68:	d011      	beq.n	8005c8e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	e008      	b.n	8005c8e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e000      	b.n	8005c90 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	00010007 	.word	0x00010007

08005cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d001      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e04a      	b.n	8005d66 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a21      	ldr	r2, [pc, #132]	@ (8005d74 <HAL_TIM_Base_Start_IT+0xbc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d018      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x6c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfa:	d013      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x6c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00e      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x6c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x6c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1a      	ldr	r2, [pc, #104]	@ (8005d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x6c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a19      	ldr	r2, [pc, #100]	@ (8005d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d115      	bne.n	8005d50 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	4b17      	ldr	r3, [pc, #92]	@ (8005d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d015      	beq.n	8005d62 <HAL_TIM_Base_Start_IT+0xaa>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3c:	d011      	beq.n	8005d62 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0201 	orr.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	e008      	b.n	8005d62 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e000      	b.n	8005d64 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	00010007 	.word	0x00010007

08005d8c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e049      	b.n	8005e32 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fb fa22 	bl	80011fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f000 fd28 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e049      	b.n	8005ee0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fb f9a5 	bl	80011b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f000 fcd1 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <HAL_TIM_PWM_Start+0x24>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e03c      	b.n	8005f86 <HAL_TIM_PWM_Start+0x9e>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d109      	bne.n	8005f26 <HAL_TIM_PWM_Start+0x3e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	e02f      	b.n	8005f86 <HAL_TIM_PWM_Start+0x9e>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d109      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x58>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e022      	b.n	8005f86 <HAL_TIM_PWM_Start+0x9e>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d109      	bne.n	8005f5a <HAL_TIM_PWM_Start+0x72>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e015      	b.n	8005f86 <HAL_TIM_PWM_Start+0x9e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d109      	bne.n	8005f74 <HAL_TIM_PWM_Start+0x8c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e008      	b.n	8005f86 <HAL_TIM_PWM_Start+0x9e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e097      	b.n	80060be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Start+0xb6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f9c:	e023      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xfe>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Start+0xc6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fac:	e01b      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xfe>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Start+0xd6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fbc:	e013      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xfe>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b0c      	cmp	r3, #12
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_PWM_Start+0xe6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fcc:	e00b      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xfe>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_PWM_Start+0xf6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fdc:	e003      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xfe>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 ffa8 	bl	8006f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a33      	ldr	r2, [pc, #204]	@ (80060c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_TIM_PWM_Start+0x13e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a32      	ldr	r2, [pc, #200]	@ (80060cc <HAL_TIM_PWM_Start+0x1e4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIM_PWM_Start+0x13e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a30      	ldr	r2, [pc, #192]	@ (80060d0 <HAL_TIM_PWM_Start+0x1e8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIM_PWM_Start+0x13e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2f      	ldr	r2, [pc, #188]	@ (80060d4 <HAL_TIM_PWM_Start+0x1ec>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIM_PWM_Start+0x13e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2d      	ldr	r2, [pc, #180]	@ (80060d8 <HAL_TIM_PWM_Start+0x1f0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_Start+0x142>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_TIM_PWM_Start+0x144>
 800602a:	2300      	movs	r3, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a20      	ldr	r2, [pc, #128]	@ (80060c8 <HAL_TIM_PWM_Start+0x1e0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_TIM_PWM_Start+0x194>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006052:	d013      	beq.n	800607c <HAL_TIM_PWM_Start+0x194>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a20      	ldr	r2, [pc, #128]	@ (80060dc <HAL_TIM_PWM_Start+0x1f4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_TIM_PWM_Start+0x194>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1f      	ldr	r2, [pc, #124]	@ (80060e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_TIM_PWM_Start+0x194>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <HAL_TIM_PWM_Start+0x1e4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_TIM_PWM_Start+0x194>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <HAL_TIM_PWM_Start+0x1e8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d115      	bne.n	80060a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	4b18      	ldr	r3, [pc, #96]	@ (80060e4 <HAL_TIM_PWM_Start+0x1fc>)
 8006084:	4013      	ands	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b06      	cmp	r3, #6
 800608c:	d015      	beq.n	80060ba <HAL_TIM_PWM_Start+0x1d2>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006094:	d011      	beq.n	80060ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	e008      	b.n	80060ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e000      	b.n	80060bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	00010007 	.word	0x00010007

080060e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2200      	movs	r2, #0
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 ff22 	bl	8006f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a3e      	ldr	r2, [pc, #248]	@ (8006200 <HAL_TIM_PWM_Stop+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_TIM_PWM_Stop+0x4a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3d      	ldr	r2, [pc, #244]	@ (8006204 <HAL_TIM_PWM_Stop+0x11c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_TIM_PWM_Stop+0x4a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a3b      	ldr	r2, [pc, #236]	@ (8006208 <HAL_TIM_PWM_Stop+0x120>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_TIM_PWM_Stop+0x4a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a3a      	ldr	r2, [pc, #232]	@ (800620c <HAL_TIM_PWM_Stop+0x124>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_TIM_PWM_Stop+0x4a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a38      	ldr	r2, [pc, #224]	@ (8006210 <HAL_TIM_PWM_Stop+0x128>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d101      	bne.n	8006136 <HAL_TIM_PWM_Stop+0x4e>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <HAL_TIM_PWM_Stop+0x50>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d017      	beq.n	800616c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10f      	bne.n	800616c <HAL_TIM_PWM_Stop+0x84>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d107      	bne.n	800616c <HAL_TIM_PWM_Stop+0x84>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10f      	bne.n	800619c <HAL_TIM_PWM_Stop+0xb4>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d107      	bne.n	800619c <HAL_TIM_PWM_Stop+0xb4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <HAL_TIM_PWM_Stop+0xc4>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061aa:	e023      	b.n	80061f4 <HAL_TIM_PWM_Stop+0x10c>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d104      	bne.n	80061bc <HAL_TIM_PWM_Stop+0xd4>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ba:	e01b      	b.n	80061f4 <HAL_TIM_PWM_Stop+0x10c>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d104      	bne.n	80061cc <HAL_TIM_PWM_Stop+0xe4>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061ca:	e013      	b.n	80061f4 <HAL_TIM_PWM_Stop+0x10c>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b0c      	cmp	r3, #12
 80061d0:	d104      	bne.n	80061dc <HAL_TIM_PWM_Stop+0xf4>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061da:	e00b      	b.n	80061f4 <HAL_TIM_PWM_Stop+0x10c>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d104      	bne.n	80061ec <HAL_TIM_PWM_Stop+0x104>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ea:	e003      	b.n	80061f4 <HAL_TIM_PWM_Stop+0x10c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800

08006214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d020      	beq.n	8006278 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01b      	beq.n	8006278 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0202 	mvn.w	r2, #2
 8006248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fac0 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fab2 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fac3 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d020      	beq.n	80062c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01b      	beq.n	80062c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0204 	mvn.w	r2, #4
 8006294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fa9a 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 80062b0:	e005      	b.n	80062be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa8c 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa9d 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d020      	beq.n	8006310 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01b      	beq.n	8006310 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0208 	mvn.w	r2, #8
 80062e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2204      	movs	r2, #4
 80062e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa74 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 80062fc:	e005      	b.n	800630a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa66 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fa77 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b00      	cmp	r3, #0
 8006318:	d020      	beq.n	800635c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0210 	mvn.w	r2, #16
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2208      	movs	r2, #8
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa4e 	bl	80067e4 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa40 	bl	80067d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa51 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0201 	mvn.w	r2, #1
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fa fcec 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80063a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f82e 	bl	800740a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f826 	bl	800741e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa0b 	bl	800680c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0220 	mvn.w	r2, #32
 8006412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 ffee 	bl	80073f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fffa 	bl	8007432 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fff2 	bl	8007446 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 ffea 	bl	800745a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80064a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 ffe2 	bl	800746e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e066      	b.n	80065a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b14      	cmp	r3, #20
 80064de:	d857      	bhi.n	8006590 <HAL_TIM_OC_ConfigChannel+0xdc>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	08006591 	.word	0x08006591
 80064f0:	08006591 	.word	0x08006591
 80064f4:	08006591 	.word	0x08006591
 80064f8:	0800654b 	.word	0x0800654b
 80064fc:	08006591 	.word	0x08006591
 8006500:	08006591 	.word	0x08006591
 8006504:	08006591 	.word	0x08006591
 8006508:	08006559 	.word	0x08006559
 800650c:	08006591 	.word	0x08006591
 8006510:	08006591 	.word	0x08006591
 8006514:	08006591 	.word	0x08006591
 8006518:	08006567 	.word	0x08006567
 800651c:	08006591 	.word	0x08006591
 8006520:	08006591 	.word	0x08006591
 8006524:	08006591 	.word	0x08006591
 8006528:	08006575 	.word	0x08006575
 800652c:	08006591 	.word	0x08006591
 8006530:	08006591 	.word	0x08006591
 8006534:	08006591 	.word	0x08006591
 8006538:	08006583 	.word	0x08006583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fa08 	bl	8006958 <TIM_OC1_SetConfig>
      break;
 8006548:	e025      	b.n	8006596 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa91 	bl	8006a78 <TIM_OC2_SetConfig>
      break;
 8006556:	e01e      	b.n	8006596 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fb14 	bl	8006b8c <TIM_OC3_SetConfig>
      break;
 8006564:	e017      	b.n	8006596 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fb95 	bl	8006c9c <TIM_OC4_SetConfig>
      break;
 8006572:	e010      	b.n	8006596 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fc18 	bl	8006db0 <TIM_OC5_SetConfig>
      break;
 8006580:	e009      	b.n	8006596 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fc75 	bl	8006e78 <TIM_OC6_SetConfig>
      break;
 800658e:	e002      	b.n	8006596 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	75fb      	strb	r3, [r7, #23]
      break;
 8006594:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0ff      	b.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b14      	cmp	r3, #20
 80065d2:	f200 80f0 	bhi.w	80067b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006631 	.word	0x08006631
 80065e0:	080067b7 	.word	0x080067b7
 80065e4:	080067b7 	.word	0x080067b7
 80065e8:	080067b7 	.word	0x080067b7
 80065ec:	08006671 	.word	0x08006671
 80065f0:	080067b7 	.word	0x080067b7
 80065f4:	080067b7 	.word	0x080067b7
 80065f8:	080067b7 	.word	0x080067b7
 80065fc:	080066b3 	.word	0x080066b3
 8006600:	080067b7 	.word	0x080067b7
 8006604:	080067b7 	.word	0x080067b7
 8006608:	080067b7 	.word	0x080067b7
 800660c:	080066f3 	.word	0x080066f3
 8006610:	080067b7 	.word	0x080067b7
 8006614:	080067b7 	.word	0x080067b7
 8006618:	080067b7 	.word	0x080067b7
 800661c:	08006735 	.word	0x08006735
 8006620:	080067b7 	.word	0x080067b7
 8006624:	080067b7 	.word	0x080067b7
 8006628:	080067b7 	.word	0x080067b7
 800662c:	08006775 	.word	0x08006775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f98e 	bl	8006958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6999      	ldr	r1, [r3, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	619a      	str	r2, [r3, #24]
      break;
 800666e:	e0a5      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f9fe 	bl	8006a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	619a      	str	r2, [r3, #24]
      break;
 80066b0:	e084      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fa67 	bl	8006b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0208 	orr.w	r2, r2, #8
 80066cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0204 	bic.w	r2, r2, #4
 80066dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69d9      	ldr	r1, [r3, #28]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	61da      	str	r2, [r3, #28]
      break;
 80066f0:	e064      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 facf 	bl	8006c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	021a      	lsls	r2, r3, #8
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	61da      	str	r2, [r3, #28]
      break;
 8006732:	e043      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fb38 	bl	8006db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0208 	orr.w	r2, r2, #8
 800674e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0204 	bic.w	r2, r2, #4
 800675e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006772:	e023      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fb7c 	bl	8006e78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	021a      	lsls	r2, r3, #8
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067b4:	e002      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop

080067d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a42      	ldr	r2, [pc, #264]	@ (800693c <TIM_Base_SetConfig+0x11c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00f      	beq.n	8006858 <TIM_Base_SetConfig+0x38>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683e:	d00b      	beq.n	8006858 <TIM_Base_SetConfig+0x38>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a3f      	ldr	r2, [pc, #252]	@ (8006940 <TIM_Base_SetConfig+0x120>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d007      	beq.n	8006858 <TIM_Base_SetConfig+0x38>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a3e      	ldr	r2, [pc, #248]	@ (8006944 <TIM_Base_SetConfig+0x124>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0x38>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a3d      	ldr	r2, [pc, #244]	@ (8006948 <TIM_Base_SetConfig+0x128>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d108      	bne.n	800686a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a33      	ldr	r2, [pc, #204]	@ (800693c <TIM_Base_SetConfig+0x11c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01b      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d017      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a30      	ldr	r2, [pc, #192]	@ (8006940 <TIM_Base_SetConfig+0x120>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a2f      	ldr	r2, [pc, #188]	@ (8006944 <TIM_Base_SetConfig+0x124>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a2e      	ldr	r2, [pc, #184]	@ (8006948 <TIM_Base_SetConfig+0x128>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2d      	ldr	r2, [pc, #180]	@ (800694c <TIM_Base_SetConfig+0x12c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2c      	ldr	r2, [pc, #176]	@ (8006950 <TIM_Base_SetConfig+0x130>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_Base_SetConfig+0x8a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006954 <TIM_Base_SetConfig+0x134>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d108      	bne.n	80068bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a16      	ldr	r2, [pc, #88]	@ (800693c <TIM_Base_SetConfig+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0xe8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a17      	ldr	r2, [pc, #92]	@ (8006948 <TIM_Base_SetConfig+0x128>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0xe8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a16      	ldr	r2, [pc, #88]	@ (800694c <TIM_Base_SetConfig+0x12c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0xe8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <TIM_Base_SetConfig+0x130>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0xe8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a14      	ldr	r2, [pc, #80]	@ (8006954 <TIM_Base_SetConfig+0x134>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d105      	bne.n	800692e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	611a      	str	r2, [r3, #16]
  }
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40013400 	.word	0x40013400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f023 0201 	bic.w	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 0302 	bic.w	r3, r3, #2
 80069a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006a64 <TIM_OC1_SetConfig+0x10c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00f      	beq.n	80069d8 <TIM_OC1_SetConfig+0x80>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a2b      	ldr	r2, [pc, #172]	@ (8006a68 <TIM_OC1_SetConfig+0x110>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00b      	beq.n	80069d8 <TIM_OC1_SetConfig+0x80>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a6c <TIM_OC1_SetConfig+0x114>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_OC1_SetConfig+0x80>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a29      	ldr	r2, [pc, #164]	@ (8006a70 <TIM_OC1_SetConfig+0x118>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC1_SetConfig+0x80>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a28      	ldr	r2, [pc, #160]	@ (8006a74 <TIM_OC1_SetConfig+0x11c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10c      	bne.n	80069f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0308 	bic.w	r3, r3, #8
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f023 0304 	bic.w	r3, r3, #4
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a64 <TIM_OC1_SetConfig+0x10c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_OC1_SetConfig+0xc2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <TIM_OC1_SetConfig+0x110>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_OC1_SetConfig+0xc2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a19      	ldr	r2, [pc, #100]	@ (8006a6c <TIM_OC1_SetConfig+0x114>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_OC1_SetConfig+0xc2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <TIM_OC1_SetConfig+0x118>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC1_SetConfig+0xc2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a17      	ldr	r2, [pc, #92]	@ (8006a74 <TIM_OC1_SetConfig+0x11c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d111      	bne.n	8006a3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40012c00 	.word	0x40012c00
 8006a68:	40013400 	.word	0x40013400
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800

08006a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f023 0210 	bic.w	r2, r3, #16
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 0320 	bic.w	r3, r3, #32
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a28      	ldr	r2, [pc, #160]	@ (8006b78 <TIM_OC2_SetConfig+0x100>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x6c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a27      	ldr	r2, [pc, #156]	@ (8006b7c <TIM_OC2_SetConfig+0x104>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10d      	bne.n	8006b00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1d      	ldr	r2, [pc, #116]	@ (8006b78 <TIM_OC2_SetConfig+0x100>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00f      	beq.n	8006b28 <TIM_OC2_SetConfig+0xb0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <TIM_OC2_SetConfig+0x104>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00b      	beq.n	8006b28 <TIM_OC2_SetConfig+0xb0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a1b      	ldr	r2, [pc, #108]	@ (8006b80 <TIM_OC2_SetConfig+0x108>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d007      	beq.n	8006b28 <TIM_OC2_SetConfig+0xb0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b84 <TIM_OC2_SetConfig+0x10c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_OC2_SetConfig+0xb0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <TIM_OC2_SetConfig+0x110>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d113      	bne.n	8006b50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40012c00 	.word	0x40012c00
 8006b7c:	40013400 	.word	0x40013400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800

08006b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a27      	ldr	r2, [pc, #156]	@ (8006c88 <TIM_OC3_SetConfig+0xfc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_OC3_SetConfig+0x6a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	@ (8006c8c <TIM_OC3_SetConfig+0x100>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d10d      	bne.n	8006c12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <TIM_OC3_SetConfig+0xfc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00f      	beq.n	8006c3a <TIM_OC3_SetConfig+0xae>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c8c <TIM_OC3_SetConfig+0x100>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00b      	beq.n	8006c3a <TIM_OC3_SetConfig+0xae>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1a      	ldr	r2, [pc, #104]	@ (8006c90 <TIM_OC3_SetConfig+0x104>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <TIM_OC3_SetConfig+0xae>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a19      	ldr	r2, [pc, #100]	@ (8006c94 <TIM_OC3_SetConfig+0x108>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC3_SetConfig+0xae>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a18      	ldr	r2, [pc, #96]	@ (8006c98 <TIM_OC3_SetConfig+0x10c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d113      	bne.n	8006c62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800

08006c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	031b      	lsls	r3, r3, #12
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a28      	ldr	r2, [pc, #160]	@ (8006d9c <TIM_OC4_SetConfig+0x100>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC4_SetConfig+0x6c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a27      	ldr	r2, [pc, #156]	@ (8006da0 <TIM_OC4_SetConfig+0x104>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10d      	bne.n	8006d24 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a1d      	ldr	r2, [pc, #116]	@ (8006d9c <TIM_OC4_SetConfig+0x100>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00f      	beq.n	8006d4c <TIM_OC4_SetConfig+0xb0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006da0 <TIM_OC4_SetConfig+0x104>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC4_SetConfig+0xb0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a1b      	ldr	r2, [pc, #108]	@ (8006da4 <TIM_OC4_SetConfig+0x108>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC4_SetConfig+0xb0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006da8 <TIM_OC4_SetConfig+0x10c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC4_SetConfig+0xb0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a19      	ldr	r2, [pc, #100]	@ (8006dac <TIM_OC4_SetConfig+0x110>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d113      	bne.n	8006d74 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	019b      	lsls	r3, r3, #6
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40013400 	.word	0x40013400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800

08006db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006df4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a17      	ldr	r2, [pc, #92]	@ (8006e64 <TIM_OC5_SetConfig+0xb4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00f      	beq.n	8006e2a <TIM_OC5_SetConfig+0x7a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a16      	ldr	r2, [pc, #88]	@ (8006e68 <TIM_OC5_SetConfig+0xb8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00b      	beq.n	8006e2a <TIM_OC5_SetConfig+0x7a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a15      	ldr	r2, [pc, #84]	@ (8006e6c <TIM_OC5_SetConfig+0xbc>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d007      	beq.n	8006e2a <TIM_OC5_SetConfig+0x7a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a14      	ldr	r2, [pc, #80]	@ (8006e70 <TIM_OC5_SetConfig+0xc0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d003      	beq.n	8006e2a <TIM_OC5_SetConfig+0x7a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a13      	ldr	r2, [pc, #76]	@ (8006e74 <TIM_OC5_SetConfig+0xc4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d109      	bne.n	8006e3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	621a      	str	r2, [r3, #32]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40012c00 	.word	0x40012c00
 8006e68:	40013400 	.word	0x40013400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800

08006e78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	051b      	lsls	r3, r3, #20
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a18      	ldr	r2, [pc, #96]	@ (8006f30 <TIM_OC6_SetConfig+0xb8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00f      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x7c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a17      	ldr	r2, [pc, #92]	@ (8006f34 <TIM_OC6_SetConfig+0xbc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00b      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x7c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a16      	ldr	r2, [pc, #88]	@ (8006f38 <TIM_OC6_SetConfig+0xc0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d007      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x7c>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a15      	ldr	r2, [pc, #84]	@ (8006f3c <TIM_OC6_SetConfig+0xc4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x7c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <TIM_OC6_SetConfig+0xc8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d109      	bne.n	8006f08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	029b      	lsls	r3, r3, #10
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40012c00 	.word	0x40012c00
 8006f34:	40013400 	.word	0x40013400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800

08006f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2201      	movs	r2, #1
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1a      	ldr	r2, [r3, #32]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	43db      	mvns	r3, r3
 8006f66:	401a      	ands	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1a      	ldr	r2, [r3, #32]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <HAL_TIMEx_PWMN_Start+0x24>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e022      	b.n	8006ffa <HAL_TIMEx_PWMN_Start+0x6a>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d109      	bne.n	8006fce <HAL_TIMEx_PWMN_Start+0x3e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e015      	b.n	8006ffa <HAL_TIMEx_PWMN_Start+0x6a>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d109      	bne.n	8006fe8 <HAL_TIMEx_PWMN_Start+0x58>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	e008      	b.n	8006ffa <HAL_TIMEx_PWMN_Start+0x6a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e069      	b.n	80070d6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <HAL_TIMEx_PWMN_Start+0x82>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007010:	e013      	b.n	800703a <HAL_TIMEx_PWMN_Start+0xaa>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b04      	cmp	r3, #4
 8007016:	d104      	bne.n	8007022 <HAL_TIMEx_PWMN_Start+0x92>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007020:	e00b      	b.n	800703a <HAL_TIMEx_PWMN_Start+0xaa>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d104      	bne.n	8007032 <HAL_TIMEx_PWMN_Start+0xa2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007030:	e003      	b.n	800703a <HAL_TIMEx_PWMN_Start+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2204      	movs	r2, #4
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fa1d 	bl	8007482 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007056:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a20      	ldr	r2, [pc, #128]	@ (80070e0 <HAL_TIMEx_PWMN_Start+0x150>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_TIMEx_PWMN_Start+0x104>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706a:	d013      	beq.n	8007094 <HAL_TIMEx_PWMN_Start+0x104>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1c      	ldr	r2, [pc, #112]	@ (80070e4 <HAL_TIMEx_PWMN_Start+0x154>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_TIMEx_PWMN_Start+0x104>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1b      	ldr	r2, [pc, #108]	@ (80070e8 <HAL_TIMEx_PWMN_Start+0x158>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_TIMEx_PWMN_Start+0x104>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a19      	ldr	r2, [pc, #100]	@ (80070ec <HAL_TIMEx_PWMN_Start+0x15c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIMEx_PWMN_Start+0x104>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a18      	ldr	r2, [pc, #96]	@ (80070f0 <HAL_TIMEx_PWMN_Start+0x160>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d115      	bne.n	80070c0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	4b16      	ldr	r3, [pc, #88]	@ (80070f4 <HAL_TIMEx_PWMN_Start+0x164>)
 800709c:	4013      	ands	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d015      	beq.n	80070d2 <HAL_TIMEx_PWMN_Start+0x142>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ac:	d011      	beq.n	80070d2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070be:	e008      	b.n	80070d2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e000      	b.n	80070d4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	00010007 	.word	0x00010007

080070f8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f9b9 	bl	8007482 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	f241 1311 	movw	r3, #4369	@ 0x1111
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10f      	bne.n	8007140 <HAL_TIMEx_PWMN_Stop+0x48>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	f244 4344 	movw	r3, #17476	@ 0x4444
 800712a:	4013      	ands	r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_TIMEx_PWMN_Stop+0x48>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800713e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	f241 1311 	movw	r3, #4369	@ 0x1111
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10f      	bne.n	8007170 <HAL_TIMEx_PWMN_Stop+0x78>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	f244 4344 	movw	r3, #17476	@ 0x4444
 800715a:	4013      	ands	r3, r2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d107      	bne.n	8007170 <HAL_TIMEx_PWMN_Stop+0x78>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <HAL_TIMEx_PWMN_Stop+0x88>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800717e:	e013      	b.n	80071a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d104      	bne.n	8007190 <HAL_TIMEx_PWMN_Stop+0x98>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800718e:	e00b      	b.n	80071a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b08      	cmp	r3, #8
 8007194:	d104      	bne.n	80071a0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800719e:	e003      	b.n	80071a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e065      	b.n	8007298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2c      	ldr	r2, [pc, #176]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2b      	ldr	r2, [pc, #172]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d108      	bne.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1b      	ldr	r2, [pc, #108]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007242:	d013      	beq.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a18      	ldr	r2, [pc, #96]	@ (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a12      	ldr	r2, [pc, #72]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a13      	ldr	r2, [pc, #76]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d10c      	bne.n	8007286 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	4313      	orrs	r3, r2
 800727c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40013400 	.word	0x40013400
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40014000 	.word	0x40014000

080072b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e073      	b.n	80073bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a19      	ldr	r2, [pc, #100]	@ (80073c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d11c      	bne.n	80073aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	051b      	lsls	r3, r3, #20
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40013400 	.word	0x40013400

080073d0 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80073e6:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007482:	b480      	push	{r7}
 8007484:	b087      	sub	sp, #28
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	2204      	movs	r2, #4
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	43db      	mvns	r3, r3
 80074a4:	401a      	ands	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1a      	ldr	r2, [r3, #32]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	431a      	orrs	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e042      	b.n	8007564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f83b 	bl	800756c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	@ 0x24
 80074fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0201 	bic.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fafe 	bl	8007b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f82f 	bl	8007580 <UART_SetConfig>
 8007522:	4603      	mov	r3, r0
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e01b      	b.n	8007564 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800753a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800754a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fb7d 	bl	8007c5c <UART_CheckIdleState>
 8007562:	4603      	mov	r3, r0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007584:	b08c      	sub	sp, #48	@ 0x30
 8007586:	af00      	add	r7, sp, #0
 8007588:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	431a      	orrs	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	431a      	orrs	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4bab      	ldr	r3, [pc, #684]	@ (800785c <UART_SetConfig+0x2dc>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4aa0      	ldr	r2, [pc, #640]	@ (8007860 <UART_SetConfig+0x2e0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e8:	4313      	orrs	r3, r2
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80075f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007600:	430b      	orrs	r3, r1
 8007602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	f023 010f 	bic.w	r1, r3, #15
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a91      	ldr	r2, [pc, #580]	@ (8007864 <UART_SetConfig+0x2e4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d125      	bne.n	8007670 <UART_SetConfig+0xf0>
 8007624:	4b90      	ldr	r3, [pc, #576]	@ (8007868 <UART_SetConfig+0x2e8>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	2b03      	cmp	r3, #3
 8007630:	d81a      	bhi.n	8007668 <UART_SetConfig+0xe8>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <UART_SetConfig+0xb8>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007649 	.word	0x08007649
 800763c:	08007659 	.word	0x08007659
 8007640:	08007651 	.word	0x08007651
 8007644:	08007661 	.word	0x08007661
 8007648:	2301      	movs	r3, #1
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764e:	e0d6      	b.n	80077fe <UART_SetConfig+0x27e>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007656:	e0d2      	b.n	80077fe <UART_SetConfig+0x27e>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e0ce      	b.n	80077fe <UART_SetConfig+0x27e>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e0ca      	b.n	80077fe <UART_SetConfig+0x27e>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e0c6      	b.n	80077fe <UART_SetConfig+0x27e>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7d      	ldr	r2, [pc, #500]	@ (800786c <UART_SetConfig+0x2ec>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d138      	bne.n	80076ec <UART_SetConfig+0x16c>
 800767a:	4b7b      	ldr	r3, [pc, #492]	@ (8007868 <UART_SetConfig+0x2e8>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b0c      	cmp	r3, #12
 8007686:	d82d      	bhi.n	80076e4 <UART_SetConfig+0x164>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x110>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076e5 	.word	0x080076e5
 8007698:	080076e5 	.word	0x080076e5
 800769c:	080076e5 	.word	0x080076e5
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	080076e5 	.word	0x080076e5
 80076a8:	080076e5 	.word	0x080076e5
 80076ac:	080076e5 	.word	0x080076e5
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076dd 	.word	0x080076dd
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ca:	e098      	b.n	80077fe <UART_SetConfig+0x27e>
 80076cc:	2302      	movs	r3, #2
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d2:	e094      	b.n	80077fe <UART_SetConfig+0x27e>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076da:	e090      	b.n	80077fe <UART_SetConfig+0x27e>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e2:	e08c      	b.n	80077fe <UART_SetConfig+0x27e>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ea:	e088      	b.n	80077fe <UART_SetConfig+0x27e>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5f      	ldr	r2, [pc, #380]	@ (8007870 <UART_SetConfig+0x2f0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d125      	bne.n	8007742 <UART_SetConfig+0x1c2>
 80076f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007868 <UART_SetConfig+0x2e8>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007700:	2b30      	cmp	r3, #48	@ 0x30
 8007702:	d016      	beq.n	8007732 <UART_SetConfig+0x1b2>
 8007704:	2b30      	cmp	r3, #48	@ 0x30
 8007706:	d818      	bhi.n	800773a <UART_SetConfig+0x1ba>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d00a      	beq.n	8007722 <UART_SetConfig+0x1a2>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d814      	bhi.n	800773a <UART_SetConfig+0x1ba>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <UART_SetConfig+0x19a>
 8007714:	2b10      	cmp	r3, #16
 8007716:	d008      	beq.n	800772a <UART_SetConfig+0x1aa>
 8007718:	e00f      	b.n	800773a <UART_SetConfig+0x1ba>
 800771a:	2300      	movs	r3, #0
 800771c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007720:	e06d      	b.n	80077fe <UART_SetConfig+0x27e>
 8007722:	2302      	movs	r3, #2
 8007724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007728:	e069      	b.n	80077fe <UART_SetConfig+0x27e>
 800772a:	2304      	movs	r3, #4
 800772c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007730:	e065      	b.n	80077fe <UART_SetConfig+0x27e>
 8007732:	2308      	movs	r3, #8
 8007734:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007738:	e061      	b.n	80077fe <UART_SetConfig+0x27e>
 800773a:	2310      	movs	r3, #16
 800773c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007740:	e05d      	b.n	80077fe <UART_SetConfig+0x27e>
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4b      	ldr	r2, [pc, #300]	@ (8007874 <UART_SetConfig+0x2f4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d125      	bne.n	8007798 <UART_SetConfig+0x218>
 800774c:	4b46      	ldr	r3, [pc, #280]	@ (8007868 <UART_SetConfig+0x2e8>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007752:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007756:	2bc0      	cmp	r3, #192	@ 0xc0
 8007758:	d016      	beq.n	8007788 <UART_SetConfig+0x208>
 800775a:	2bc0      	cmp	r3, #192	@ 0xc0
 800775c:	d818      	bhi.n	8007790 <UART_SetConfig+0x210>
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	d00a      	beq.n	8007778 <UART_SetConfig+0x1f8>
 8007762:	2b80      	cmp	r3, #128	@ 0x80
 8007764:	d814      	bhi.n	8007790 <UART_SetConfig+0x210>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <UART_SetConfig+0x1f0>
 800776a:	2b40      	cmp	r3, #64	@ 0x40
 800776c:	d008      	beq.n	8007780 <UART_SetConfig+0x200>
 800776e:	e00f      	b.n	8007790 <UART_SetConfig+0x210>
 8007770:	2300      	movs	r3, #0
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007776:	e042      	b.n	80077fe <UART_SetConfig+0x27e>
 8007778:	2302      	movs	r3, #2
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777e:	e03e      	b.n	80077fe <UART_SetConfig+0x27e>
 8007780:	2304      	movs	r3, #4
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007786:	e03a      	b.n	80077fe <UART_SetConfig+0x27e>
 8007788:	2308      	movs	r3, #8
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778e:	e036      	b.n	80077fe <UART_SetConfig+0x27e>
 8007790:	2310      	movs	r3, #16
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007796:	e032      	b.n	80077fe <UART_SetConfig+0x27e>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a30      	ldr	r2, [pc, #192]	@ (8007860 <UART_SetConfig+0x2e0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d12a      	bne.n	80077f8 <UART_SetConfig+0x278>
 80077a2:	4b31      	ldr	r3, [pc, #196]	@ (8007868 <UART_SetConfig+0x2e8>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077b0:	d01a      	beq.n	80077e8 <UART_SetConfig+0x268>
 80077b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077b6:	d81b      	bhi.n	80077f0 <UART_SetConfig+0x270>
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077bc:	d00c      	beq.n	80077d8 <UART_SetConfig+0x258>
 80077be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c2:	d815      	bhi.n	80077f0 <UART_SetConfig+0x270>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <UART_SetConfig+0x250>
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077cc:	d008      	beq.n	80077e0 <UART_SetConfig+0x260>
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x270>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d6:	e012      	b.n	80077fe <UART_SetConfig+0x27e>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077de:	e00e      	b.n	80077fe <UART_SetConfig+0x27e>
 80077e0:	2304      	movs	r3, #4
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e6:	e00a      	b.n	80077fe <UART_SetConfig+0x27e>
 80077e8:	2308      	movs	r3, #8
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ee:	e006      	b.n	80077fe <UART_SetConfig+0x27e>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f6:	e002      	b.n	80077fe <UART_SetConfig+0x27e>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a17      	ldr	r2, [pc, #92]	@ (8007860 <UART_SetConfig+0x2e0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	f040 80a8 	bne.w	800795a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800780a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800780e:	2b08      	cmp	r3, #8
 8007810:	d834      	bhi.n	800787c <UART_SetConfig+0x2fc>
 8007812:	a201      	add	r2, pc, #4	@ (adr r2, 8007818 <UART_SetConfig+0x298>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800783d 	.word	0x0800783d
 800781c:	0800787d 	.word	0x0800787d
 8007820:	08007845 	.word	0x08007845
 8007824:	0800787d 	.word	0x0800787d
 8007828:	0800784b 	.word	0x0800784b
 800782c:	0800787d 	.word	0x0800787d
 8007830:	0800787d 	.word	0x0800787d
 8007834:	0800787d 	.word	0x0800787d
 8007838:	08007853 	.word	0x08007853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783c:	f7fd fee4 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8007840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007842:	e021      	b.n	8007888 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007844:	4b0c      	ldr	r3, [pc, #48]	@ (8007878 <UART_SetConfig+0x2f8>)
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007848:	e01e      	b.n	8007888 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784a:	f7fd fe6f 	bl	800552c <HAL_RCC_GetSysClockFreq>
 800784e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007850:	e01a      	b.n	8007888 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007858:	e016      	b.n	8007888 <UART_SetConfig+0x308>
 800785a:	bf00      	nop
 800785c:	cfff69f3 	.word	0xcfff69f3
 8007860:	40008000 	.word	0x40008000
 8007864:	40013800 	.word	0x40013800
 8007868:	40021000 	.word	0x40021000
 800786c:	40004400 	.word	0x40004400
 8007870:	40004800 	.word	0x40004800
 8007874:	40004c00 	.word	0x40004c00
 8007878:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007886:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 812a 	beq.w	8007ae4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	4a9e      	ldr	r2, [pc, #632]	@ (8007b10 <UART_SetConfig+0x590>)
 8007896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789a:	461a      	mov	r2, r3
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	4413      	add	r3, r2
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d305      	bcc.n	80078c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d903      	bls.n	80078c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078c6:	e10d      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	60fa      	str	r2, [r7, #12]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	4a8e      	ldr	r2, [pc, #568]	@ (8007b10 <UART_SetConfig+0x590>)
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2200      	movs	r2, #0
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078ea:	f7f8 fc99 	bl	8000220 <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	020b      	lsls	r3, r1, #8
 8007900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007904:	0202      	lsls	r2, r0, #8
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	6849      	ldr	r1, [r1, #4]
 800790a:	0849      	lsrs	r1, r1, #1
 800790c:	2000      	movs	r0, #0
 800790e:	460c      	mov	r4, r1
 8007910:	4605      	mov	r5, r0
 8007912:	eb12 0804 	adds.w	r8, r2, r4
 8007916:	eb43 0905 	adc.w	r9, r3, r5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	469a      	mov	sl, r3
 8007922:	4693      	mov	fp, r2
 8007924:	4652      	mov	r2, sl
 8007926:	465b      	mov	r3, fp
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7f8 fc78 	bl	8000220 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800793e:	d308      	bcc.n	8007952 <UART_SetConfig+0x3d2>
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007946:	d204      	bcs.n	8007952 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	e0c8      	b.n	8007ae4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007958:	e0c4      	b.n	8007ae4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007962:	d167      	bne.n	8007a34 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007964:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007968:	2b08      	cmp	r3, #8
 800796a:	d828      	bhi.n	80079be <UART_SetConfig+0x43e>
 800796c:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <UART_SetConfig+0x3f4>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007999 	.word	0x08007999
 8007978:	080079a1 	.word	0x080079a1
 800797c:	080079a9 	.word	0x080079a9
 8007980:	080079bf 	.word	0x080079bf
 8007984:	080079af 	.word	0x080079af
 8007988:	080079bf 	.word	0x080079bf
 800798c:	080079bf 	.word	0x080079bf
 8007990:	080079bf 	.word	0x080079bf
 8007994:	080079b7 	.word	0x080079b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fd fe36 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 800799c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800799e:	e014      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fd fe48 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 80079a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079a6:	e010      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b14 <UART_SetConfig+0x594>)
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079ac:	e00d      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ae:	f7fd fdbd 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80079b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079b4:	e009      	b.n	80079ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079bc:	e005      	b.n	80079ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8089 	beq.w	8007ae4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b10 <UART_SetConfig+0x590>)
 80079d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079dc:	461a      	mov	r2, r3
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e4:	005a      	lsls	r2, r3, #1
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	441a      	add	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d916      	bls.n	8007a2c <UART_SetConfig+0x4ac>
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a04:	d212      	bcs.n	8007a2c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f023 030f 	bic.w	r3, r3, #15
 8007a0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	8bfb      	ldrh	r3, [r7, #30]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	8bfa      	ldrh	r2, [r7, #30]
 8007a28:	60da      	str	r2, [r3, #12]
 8007a2a:	e05b      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a32:	e057      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d828      	bhi.n	8007a8e <UART_SetConfig+0x50e>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <UART_SetConfig+0x4c4>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a71 	.word	0x08007a71
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	08007a8f 	.word	0x08007a8f
 8007a54:	08007a7f 	.word	0x08007a7f
 8007a58:	08007a8f 	.word	0x08007a8f
 8007a5c:	08007a8f 	.word	0x08007a8f
 8007a60:	08007a8f 	.word	0x08007a8f
 8007a64:	08007a87 	.word	0x08007a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a68:	f7fd fdce 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8007a6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a6e:	e014      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a70:	f7fd fde0 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 8007a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a76:	e010      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a78:	4b26      	ldr	r3, [pc, #152]	@ (8007b14 <UART_SetConfig+0x594>)
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a7c:	e00d      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7e:	f7fd fd55 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8007a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a84:	e009      	b.n	8007a9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a8c:	e005      	b.n	8007a9a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a98:	bf00      	nop
    }

    if (pclk != 0U)
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d021      	beq.n	8007ae4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b10 <UART_SetConfig+0x590>)
 8007aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	441a      	add	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d909      	bls.n	8007ade <UART_SetConfig+0x55e>
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad0:	d205      	bcs.n	8007ade <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60da      	str	r2, [r3, #12]
 8007adc:	e002      	b.n	8007ae4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3730      	adds	r7, #48	@ 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b0e:	bf00      	nop
 8007b10:	0800b01c 	.word	0x0800b01c
 8007b14:	00f42400 	.word	0x00f42400

08007b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01a      	beq.n	8007c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c16:	d10a      	bne.n	8007c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b098      	sub	sp, #96	@ 0x60
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c6c:	f7fa f98e 	bl	8001f8c <HAL_GetTick>
 8007c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d12f      	bne.n	8007ce0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f88e 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d022      	beq.n	8007ce0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e6      	bne.n	8007c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e063      	b.n	8007da8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d149      	bne.n	8007d82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f857 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d03c      	beq.n	8007d82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	623b      	str	r3, [r7, #32]
   return(result);
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d5a:	61fa      	str	r2, [r7, #28]
 8007d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	617b      	str	r3, [r7, #20]
   return(result);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e012      	b.n	8007da8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3758      	adds	r7, #88	@ 0x58
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc0:	e04f      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d04b      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dca:	f7fa f8df 	bl	8001f8c <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e04e      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d037      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b80      	cmp	r3, #128	@ 0x80
 8007df6:	d034      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b40      	cmp	r3, #64	@ 0x40
 8007dfc:	d031      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d110      	bne.n	8007e2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2208      	movs	r2, #8
 8007e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f838 	bl	8007e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e029      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e3c:	d111      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f81e 	bl	8007e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e00f      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69da      	ldr	r2, [r3, #28]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	bf0c      	ite	eq
 8007e72:	2301      	moveq	r3, #1
 8007e74:	2300      	movne	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d0a0      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b095      	sub	sp, #84	@ 0x54
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e3      	bne.n	8007ec4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d118      	bne.n	8007f36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f023 0310 	bic.w	r3, r3, #16
 8007f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6979      	ldr	r1, [r7, #20]
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e6      	bne.n	8007f04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f4a:	bf00      	nop
 8007f4c:	3754      	adds	r7, #84	@ 0x54
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <__NVIC_SetPriority>:
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	db0a      	blt.n	8007f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	490c      	ldr	r1, [pc, #48]	@ (8007fa4 <__NVIC_SetPriority+0x4c>)
 8007f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f76:	0112      	lsls	r2, r2, #4
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f80:	e00a      	b.n	8007f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	4908      	ldr	r1, [pc, #32]	@ (8007fa8 <__NVIC_SetPriority+0x50>)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	3b04      	subs	r3, #4
 8007f90:	0112      	lsls	r2, r2, #4
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	440b      	add	r3, r1
 8007f96:	761a      	strb	r2, [r3, #24]
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	e000e100 	.word	0xe000e100
 8007fa8:	e000ed00 	.word	0xe000ed00

08007fac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fb0:	4b05      	ldr	r3, [pc, #20]	@ (8007fc8 <SysTick_Handler+0x1c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fb4:	f001 fe44 	bl	8009c40 <xTaskGetSchedulerState>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d001      	beq.n	8007fc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fbe:	f002 fc3b 	bl	800a838 <xPortSysTickHandler>
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	e000e010 	.word	0xe000e010

08007fcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	f06f 0004 	mvn.w	r0, #4
 8007fd6:	f7ff ffbf 	bl	8007f58 <__NVIC_SetPriority>
#endif
}
 8007fda:	bf00      	nop
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fe6:	f3ef 8305 	mrs	r3, IPSR
 8007fea:	603b      	str	r3, [r7, #0]
  return(result);
 8007fec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ff2:	f06f 0305 	mvn.w	r3, #5
 8007ff6:	607b      	str	r3, [r7, #4]
 8007ff8:	e00c      	b.n	8008014 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <osKernelInitialize+0x44>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d105      	bne.n	800800e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008002:	4b08      	ldr	r3, [pc, #32]	@ (8008024 <osKernelInitialize+0x44>)
 8008004:	2201      	movs	r2, #1
 8008006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008008:	2300      	movs	r3, #0
 800800a:	607b      	str	r3, [r7, #4]
 800800c:	e002      	b.n	8008014 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800800e:	f04f 33ff 	mov.w	r3, #4294967295
 8008012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008014:	687b      	ldr	r3, [r7, #4]
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000894 	.word	0x20000894

08008028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800802e:	f3ef 8305 	mrs	r3, IPSR
 8008032:	603b      	str	r3, [r7, #0]
  return(result);
 8008034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <osKernelStart+0x1a>
    stat = osErrorISR;
 800803a:	f06f 0305 	mvn.w	r3, #5
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	e010      	b.n	8008064 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008042:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <osKernelStart+0x48>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d109      	bne.n	800805e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800804a:	f7ff ffbf 	bl	8007fcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800804e:	4b08      	ldr	r3, [pc, #32]	@ (8008070 <osKernelStart+0x48>)
 8008050:	2202      	movs	r2, #2
 8008052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008054:	f001 f97e 	bl	8009354 <vTaskStartScheduler>
      stat = osOK;
 8008058:	2300      	movs	r3, #0
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	e002      	b.n	8008064 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800805e:	f04f 33ff 	mov.w	r3, #4294967295
 8008062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008064:	687b      	ldr	r3, [r7, #4]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000894 	.word	0x20000894

08008074 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800807a:	f3ef 8305 	mrs	r3, IPSR
 800807e:	603b      	str	r3, [r7, #0]
  return(result);
 8008080:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008086:	f001 fa91 	bl	80095ac <xTaskGetTickCountFromISR>
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	e002      	b.n	8008094 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800808e:	f001 fa7d 	bl	800958c <xTaskGetTickCount>
 8008092:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008094:	687b      	ldr	r3, [r7, #4]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800809e:	b580      	push	{r7, lr}
 80080a0:	b08e      	sub	sp, #56	@ 0x38
 80080a2:	af04      	add	r7, sp, #16
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ae:	f3ef 8305 	mrs	r3, IPSR
 80080b2:	617b      	str	r3, [r7, #20]
  return(result);
 80080b4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d17e      	bne.n	80081b8 <osThreadNew+0x11a>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d07b      	beq.n	80081b8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080c0:	2380      	movs	r3, #128	@ 0x80
 80080c2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080c4:	2318      	movs	r3, #24
 80080c6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295
 80080d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d045      	beq.n	8008164 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <osThreadNew+0x48>
        name = attr->name;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <osThreadNew+0x6e>
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	2b38      	cmp	r3, #56	@ 0x38
 80080fe:	d805      	bhi.n	800810c <osThreadNew+0x6e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <osThreadNew+0x72>
        return (NULL);
 800810c:	2300      	movs	r3, #0
 800810e:	e054      	b.n	80081ba <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	089b      	lsrs	r3, r3, #2
 800811e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00e      	beq.n	8008146 <osThreadNew+0xa8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2ba7      	cmp	r3, #167	@ 0xa7
 800812e:	d90a      	bls.n	8008146 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <osThreadNew+0xa8>
        mem = 1;
 8008140:	2301      	movs	r3, #1
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	e010      	b.n	8008168 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10c      	bne.n	8008168 <osThreadNew+0xca>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <osThreadNew+0xca>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <osThreadNew+0xca>
          mem = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	e001      	b.n	8008168 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d110      	bne.n	8008190 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008176:	9202      	str	r2, [sp, #8]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6a3a      	ldr	r2, [r7, #32]
 8008182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fe33 	bl	8008df0 <xTaskCreateStatic>
 800818a:	4603      	mov	r3, r0
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	e013      	b.n	80081b8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d110      	bne.n	80081b8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	b29a      	uxth	r2, r3
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fe81 	bl	8008eb0 <xTaskCreate>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <osThreadNew+0x11a>
            hTask = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081b8:	693b      	ldr	r3, [r7, #16]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3728      	adds	r7, #40	@ 0x28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80081c2:	b580      	push	{r7, lr}
 80081c4:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80081c6:	2000      	movs	r0, #0
 80081c8:	f000 ffd0 	bl	800916c <vTaskDelete>
#endif
  for (;;);
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <osThreadExit+0xa>

080081d0 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d8:	f3ef 8305 	mrs	r3, IPSR
 80081dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80081de:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <osDelayUntil+0x1c>
    stat = osErrorISR;
 80081e4:	f06f 0305 	mvn.w	r3, #5
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e019      	b.n	8008220 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80081f0:	f001 f9cc 	bl	800958c <xTaskGetTickCount>
 80081f4:	4603      	mov	r3, r0
 80081f6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <osDelayUntil+0x4a>
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db06      	blt.n	800821a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	6939      	ldr	r1, [r7, #16]
 8008212:	4618      	mov	r0, r3
 8008214:	f001 f81e 	bl	8009254 <vTaskDelayUntil>
 8008218:	e002      	b.n	8008220 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800821a:	f06f 0303 	mvn.w	r3, #3
 800821e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008220:	697b      	ldr	r3, [r7, #20]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4a07      	ldr	r2, [pc, #28]	@ (8008258 <vApplicationGetIdleTaskMemory+0x2c>)
 800823c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4a06      	ldr	r2, [pc, #24]	@ (800825c <vApplicationGetIdleTaskMemory+0x30>)
 8008242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2280      	movs	r2, #128	@ 0x80
 8008248:	601a      	str	r2, [r3, #0]
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20000898 	.word	0x20000898
 800825c:	20000940 	.word	0x20000940

08008260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a07      	ldr	r2, [pc, #28]	@ (800828c <vApplicationGetTimerTaskMemory+0x2c>)
 8008270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4a06      	ldr	r2, [pc, #24]	@ (8008290 <vApplicationGetTimerTaskMemory+0x30>)
 8008276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	20000b40 	.word	0x20000b40
 8008290:	20000be8 	.word	0x20000be8

08008294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f103 0208 	add.w	r2, r3, #8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f103 0208 	add.w	r2, r3, #8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f103 0208 	add.w	r2, r3, #8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d103      	bne.n	8008356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	e00c      	b.n	8008370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3308      	adds	r3, #8
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e002      	b.n	8008364 <vListInsert+0x2e>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	429a      	cmp	r2, r3
 800836e:	d2f6      	bcs.n	800835e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6892      	ldr	r2, [r2, #8]
 80083be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6852      	ldr	r2, [r2, #4]
 80083c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d103      	bne.n	80083dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	1e5a      	subs	r2, r3, #1
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008428:	f002 f976 	bl	800a718 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008434:	68f9      	ldr	r1, [r7, #12]
 8008436:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	441a      	add	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008458:	3b01      	subs	r3, #1
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	441a      	add	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	22ff      	movs	r2, #255	@ 0xff
 800846c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	22ff      	movs	r2, #255	@ 0xff
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d114      	bne.n	80084a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01a      	beq.n	80084bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3310      	adds	r3, #16
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fa12 	bl	80098b4 <xTaskRemoveFromEventList>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d012      	beq.n	80084bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <xQueueGenericReset+0xd0>)
 8008498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	e009      	b.n	80084bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3310      	adds	r3, #16
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff fef1 	bl	8008294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3324      	adds	r3, #36	@ 0x24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7ff feec 	bl	8008294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084bc:	f002 f95e 	bl	800a77c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084c0:	2301      	movs	r3, #1
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	e000ed04 	.word	0xe000ed04

080084d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08e      	sub	sp, #56	@ 0x38
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10b      	bne.n	80084fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084f6:	bf00      	nop
 80084f8:	bf00      	nop
 80084fa:	e7fd      	b.n	80084f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10b      	bne.n	800851a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	e7fd      	b.n	8008516 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <xQueueGenericCreateStatic+0x56>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <xQueueGenericCreateStatic+0x5a>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <xQueueGenericCreateStatic+0x5c>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10b      	bne.n	8008548 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	623b      	str	r3, [r7, #32]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d102      	bne.n	8008554 <xQueueGenericCreateStatic+0x84>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <xQueueGenericCreateStatic+0x88>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <xQueueGenericCreateStatic+0x8a>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10b      	bne.n	8008576 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61fb      	str	r3, [r7, #28]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008576:	2350      	movs	r3, #80	@ 0x50
 8008578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b50      	cmp	r3, #80	@ 0x50
 800857e:	d00b      	beq.n	8008598 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	61bb      	str	r3, [r7, #24]
}
 8008592:	bf00      	nop
 8008594:	bf00      	nop
 8008596:	e7fd      	b.n	8008594 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008598:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00d      	beq.n	80085c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80085b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	4613      	mov	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 f805 	bl	80085ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3730      	adds	r7, #48	@ 0x30
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d103      	bne.n	80085e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	e002      	b.n	80085ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085f8:	2101      	movs	r1, #1
 80085fa:	69b8      	ldr	r0, [r7, #24]
 80085fc:	f7ff fefe 	bl	80083fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08e      	sub	sp, #56	@ 0x38
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800861e:	2300      	movs	r3, #0
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <xQueueGenericSend+0x34>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	e7fd      	b.n	8008640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <xQueueGenericSend+0x42>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <xQueueGenericSend+0x46>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueGenericSend+0x48>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10b      	bne.n	8008674 <xQueueGenericSend+0x64>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d103      	bne.n	8008682 <xQueueGenericSend+0x72>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <xQueueGenericSend+0x76>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <xQueueGenericSend+0x78>
 8008686:	2300      	movs	r3, #0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <xQueueGenericSend+0x94>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	623b      	str	r3, [r7, #32]
}
 800869e:	bf00      	nop
 80086a0:	bf00      	nop
 80086a2:	e7fd      	b.n	80086a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086a4:	f001 facc 	bl	8009c40 <xTaskGetSchedulerState>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <xQueueGenericSend+0xa4>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <xQueueGenericSend+0xa8>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <xQueueGenericSend+0xaa>
 80086b8:	2300      	movs	r3, #0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fb      	str	r3, [r7, #28]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086d6:	f002 f81f 	bl	800a718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d302      	bcc.n	80086ec <xQueueGenericSend+0xdc>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d129      	bne.n	8008740 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086f2:	f000 fa0f 	bl	8008b14 <prvCopyDataToQueue>
 80086f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008702:	3324      	adds	r3, #36	@ 0x24
 8008704:	4618      	mov	r0, r3
 8008706:	f001 f8d5 	bl	80098b4 <xTaskRemoveFromEventList>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d013      	beq.n	8008738 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008710:	4b3f      	ldr	r3, [pc, #252]	@ (8008810 <xQueueGenericSend+0x200>)
 8008712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	e00a      	b.n	8008738 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008728:	4b39      	ldr	r3, [pc, #228]	@ (8008810 <xQueueGenericSend+0x200>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008738:	f002 f820 	bl	800a77c <vPortExitCritical>
				return pdPASS;
 800873c:	2301      	movs	r3, #1
 800873e:	e063      	b.n	8008808 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008746:	f002 f819 	bl	800a77c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800874a:	2300      	movs	r3, #0
 800874c:	e05c      	b.n	8008808 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800874e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008754:	f107 0314 	add.w	r3, r7, #20
 8008758:	4618      	mov	r0, r3
 800875a:	f001 f90f 	bl	800997c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800875e:	2301      	movs	r3, #1
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008762:	f002 f80b 	bl	800a77c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008766:	f000 fe65 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800876a:	f001 ffd5 	bl	800a718 <vPortEnterCritical>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008774:	b25b      	sxtb	r3, r3
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d103      	bne.n	8008784 <xQueueGenericSend+0x174>
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800878a:	b25b      	sxtb	r3, r3
 800878c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008790:	d103      	bne.n	800879a <xQueueGenericSend+0x18a>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800879a:	f001 ffef 	bl	800a77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800879e:	1d3a      	adds	r2, r7, #4
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 f8fe 	bl	80099a8 <xTaskCheckForTimeOut>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d124      	bne.n	80087fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087b4:	f000 faa6 	bl	8008d04 <prvIsQueueFull>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d018      	beq.n	80087f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	3310      	adds	r3, #16
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 f822 	bl	8009810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ce:	f000 fa31 	bl	8008c34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087d2:	f000 fe3d 	bl	8009450 <xTaskResumeAll>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f47f af7c 	bne.w	80086d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80087de:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <xQueueGenericSend+0x200>)
 80087e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	e772      	b.n	80086d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087f2:	f000 fa1f 	bl	8008c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087f6:	f000 fe2b 	bl	8009450 <xTaskResumeAll>
 80087fa:	e76c      	b.n	80086d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087fe:	f000 fa19 	bl	8008c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008802:	f000 fe25 	bl	8009450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008808:	4618      	mov	r0, r3
 800880a:	3738      	adds	r7, #56	@ 0x38
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b090      	sub	sp, #64	@ 0x40
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10b      	bne.n	8008844 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <xQueueGenericSendFromISR+0x3e>
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <xQueueGenericSendFromISR+0x42>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <xQueueGenericSendFromISR+0x44>
 8008856:	2300      	movs	r3, #0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10b      	bne.n	8008874 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	e7fd      	b.n	8008870 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d103      	bne.n	8008882 <xQueueGenericSendFromISR+0x6e>
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <xQueueGenericSendFromISR+0x72>
 8008882:	2301      	movs	r3, #1
 8008884:	e000      	b.n	8008888 <xQueueGenericSendFromISR+0x74>
 8008886:	2300      	movs	r3, #0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	623b      	str	r3, [r7, #32]
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088a4:	f002 f818 	bl	800a8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088a8:	f3ef 8211 	mrs	r2, BASEPRI
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61fa      	str	r2, [r7, #28]
 80088be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d302      	bcc.n	80088d6 <xQueueGenericSendFromISR+0xc2>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d12f      	bne.n	8008936 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80088ec:	f000 f912 	bl	8008b14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d112      	bne.n	8008920 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d016      	beq.n	8008930 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008904:	3324      	adds	r3, #36	@ 0x24
 8008906:	4618      	mov	r0, r3
 8008908:	f000 ffd4 	bl	80098b4 <xTaskRemoveFromEventList>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00e      	beq.n	8008930 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e007      	b.n	8008930 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008920:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008924:	3301      	adds	r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	b25a      	sxtb	r2, r3
 800892a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008930:	2301      	movs	r3, #1
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008934:	e001      	b.n	800893a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800893a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008944:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008948:	4618      	mov	r0, r3
 800894a:	3740      	adds	r7, #64	@ 0x40
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08c      	sub	sp, #48	@ 0x30
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <xQueueReceive+0x32>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	623b      	str	r3, [r7, #32]
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	e7fd      	b.n	800897e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <xQueueReceive+0x40>
 8008988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <xQueueReceive+0x44>
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <xQueueReceive+0x46>
 8008994:	2300      	movs	r3, #0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10b      	bne.n	80089b2 <xQueueReceive+0x62>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	61fb      	str	r3, [r7, #28]
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	e7fd      	b.n	80089ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089b2:	f001 f945 	bl	8009c40 <xTaskGetSchedulerState>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <xQueueReceive+0x72>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <xQueueReceive+0x76>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueReceive+0x78>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <xQueueReceive+0x94>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	61bb      	str	r3, [r7, #24]
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	e7fd      	b.n	80089e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089e4:	f001 fe98 	bl	800a718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d01f      	beq.n	8008a34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089f4:	68b9      	ldr	r1, [r7, #8]
 80089f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089f8:	f000 f8f6 	bl	8008be8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fe:	1e5a      	subs	r2, r3, #1
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00f      	beq.n	8008a2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	3310      	adds	r3, #16
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 ff4f 	bl	80098b4 <xTaskRemoveFromEventList>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d007      	beq.n	8008a2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b10 <xQueueReceive+0x1c0>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a2c:	f001 fea6 	bl	800a77c <vPortExitCritical>
				return pdPASS;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e069      	b.n	8008b08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a3a:	f001 fe9f 	bl	800a77c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e062      	b.n	8008b08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d106      	bne.n	8008a56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a48:	f107 0310 	add.w	r3, r7, #16
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 ff95 	bl	800997c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a56:	f001 fe91 	bl	800a77c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a5a:	f000 fceb 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a5e:	f001 fe5b 	bl	800a718 <vPortEnterCritical>
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a68:	b25b      	sxtb	r3, r3
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d103      	bne.n	8008a78 <xQueueReceive+0x128>
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a84:	d103      	bne.n	8008a8e <xQueueReceive+0x13e>
 8008a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a8e:	f001 fe75 	bl	800a77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a92:	1d3a      	adds	r2, r7, #4
 8008a94:	f107 0310 	add.w	r3, r7, #16
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 ff84 	bl	80099a8 <xTaskCheckForTimeOut>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d123      	bne.n	8008aee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aa8:	f000 f916 	bl	8008cd8 <prvIsQueueEmpty>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d017      	beq.n	8008ae2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	3324      	adds	r3, #36	@ 0x24
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fea8 	bl	8009810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ac2:	f000 f8b7 	bl	8008c34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ac6:	f000 fcc3 	bl	8009450 <xTaskResumeAll>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d189      	bne.n	80089e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8008b10 <xQueueReceive+0x1c0>)
 8008ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	e780      	b.n	80089e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ae4:	f000 f8a6 	bl	8008c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ae8:	f000 fcb2 	bl	8009450 <xTaskResumeAll>
 8008aec:	e77a      	b.n	80089e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af0:	f000 f8a0 	bl	8008c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af4:	f000 fcac 	bl	8009450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008afa:	f000 f8ed 	bl	8008cd8 <prvIsQueueEmpty>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f43f af6f 	beq.w	80089e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3730      	adds	r7, #48	@ 0x30
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10d      	bne.n	8008b4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d14d      	bne.n	8008bd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f89c 	bl	8009c7c <xTaskPriorityDisinherit>
 8008b44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	e043      	b.n	8008bd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d119      	bne.n	8008b88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6858      	ldr	r0, [r3, #4]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	f002 f976 	bl	800ae50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d32b      	bcc.n	8008bd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	605a      	str	r2, [r3, #4]
 8008b86:	e026      	b.n	8008bd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	68d8      	ldr	r0, [r3, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b90:	461a      	mov	r2, r3
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	f002 f95c 	bl	800ae50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba0:	425b      	negs	r3, r3
 8008ba2:	441a      	add	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d207      	bcs.n	8008bc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbc:	425b      	negs	r3, r3
 8008bbe:	441a      	add	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d105      	bne.n	8008bd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008bde:	697b      	ldr	r3, [r7, #20]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d018      	beq.n	8008c2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c02:	441a      	add	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d303      	bcc.n	8008c1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68d9      	ldr	r1, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c24:	461a      	mov	r2, r3
 8008c26:	6838      	ldr	r0, [r7, #0]
 8008c28:	f002 f912 	bl	800ae50 <memcpy>
	}
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c3c:	f001 fd6c 	bl	800a718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c48:	e011      	b.n	8008c6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d012      	beq.n	8008c78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3324      	adds	r3, #36	@ 0x24
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fe2c 	bl	80098b4 <xTaskRemoveFromEventList>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c62:	f000 ff05 	bl	8009a70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	dce9      	bgt.n	8008c4a <prvUnlockQueue+0x16>
 8008c76:	e000      	b.n	8008c7a <prvUnlockQueue+0x46>
					break;
 8008c78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	22ff      	movs	r2, #255	@ 0xff
 8008c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c82:	f001 fd7b 	bl	800a77c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c86:	f001 fd47 	bl	800a718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c92:	e011      	b.n	8008cb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d012      	beq.n	8008cc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3310      	adds	r3, #16
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fe07 	bl	80098b4 <xTaskRemoveFromEventList>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cac:	f000 fee0 	bl	8009a70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dce9      	bgt.n	8008c94 <prvUnlockQueue+0x60>
 8008cc0:	e000      	b.n	8008cc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	22ff      	movs	r2, #255	@ 0xff
 8008cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008ccc:	f001 fd56 	bl	800a77c <vPortExitCritical>
}
 8008cd0:	bf00      	nop
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ce0:	f001 fd1a 	bl	800a718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d102      	bne.n	8008cf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e001      	b.n	8008cf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cf6:	f001 fd41 	bl	800a77c <vPortExitCritical>

	return xReturn;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d0c:	f001 fd04 	bl	800a718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d102      	bne.n	8008d22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e001      	b.n	8008d26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d26:	f001 fd29 	bl	800a77c <vPortExitCritical>

	return xReturn;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e014      	b.n	8008d6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d44:	4a0f      	ldr	r2, [pc, #60]	@ (8008d84 <vQueueAddToRegistry+0x50>)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10b      	bne.n	8008d68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d50:	490c      	ldr	r1, [pc, #48]	@ (8008d84 <vQueueAddToRegistry+0x50>)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d84 <vQueueAddToRegistry+0x50>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d66:	e006      	b.n	8008d76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b07      	cmp	r3, #7
 8008d72:	d9e7      	bls.n	8008d44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000fe8 	.word	0x20000fe8

08008d88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d98:	f001 fcbe 	bl	800a718 <vPortEnterCritical>
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008da2:	b25b      	sxtb	r3, r3
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d103      	bne.n	8008db2 <vQueueWaitForMessageRestricted+0x2a>
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008db8:	b25b      	sxtb	r3, r3
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbe:	d103      	bne.n	8008dc8 <vQueueWaitForMessageRestricted+0x40>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dc8:	f001 fcd8 	bl	800a77c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3324      	adds	r3, #36	@ 0x24
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fd3d 	bl	800985c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008de2:	6978      	ldr	r0, [r7, #20]
 8008de4:	f7ff ff26 	bl	8008c34 <prvUnlockQueue>
	}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	@ 0x38
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10b      	bne.n	8008e1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	623b      	str	r3, [r7, #32]
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	e7fd      	b.n	8008e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10b      	bne.n	8008e3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	61fb      	str	r3, [r7, #28]
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	e7fd      	b.n	8008e36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e3a:	23a8      	movs	r3, #168	@ 0xa8
 8008e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2ba8      	cmp	r3, #168	@ 0xa8
 8008e42:	d00b      	beq.n	8008e5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	61bb      	str	r3, [r7, #24]
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	e7fd      	b.n	8008e58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01e      	beq.n	8008ea2 <xTaskCreateStatic+0xb2>
 8008e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01b      	beq.n	8008ea2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9303      	str	r3, [sp, #12]
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	9302      	str	r3, [sp, #8]
 8008e84:	f107 0314 	add.w	r3, r7, #20
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f851 	bl	8008f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e9c:	f000 f8f6 	bl	800908c <prvAddNewTaskToReadyList>
 8008ea0:	e001      	b.n	8008ea6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ea6:	697b      	ldr	r3, [r7, #20]
	}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3728      	adds	r7, #40	@ 0x28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08c      	sub	sp, #48	@ 0x30
 8008eb4:	af04      	add	r7, sp, #16
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 fd49 	bl	800a95c <pvPortMalloc>
 8008eca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00e      	beq.n	8008ef0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ed2:	20a8      	movs	r0, #168	@ 0xa8
 8008ed4:	f001 fd42 	bl	800a95c <pvPortMalloc>
 8008ed8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ee6:	e005      	b.n	8008ef4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ee8:	6978      	ldr	r0, [r7, #20]
 8008eea:	f001 fe05 	bl	800aaf8 <vPortFree>
 8008eee:	e001      	b.n	8008ef4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f02:	88fa      	ldrh	r2, [r7, #6]
 8008f04:	2300      	movs	r3, #0
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	9302      	str	r3, [sp, #8]
 8008f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f80f 	bl	8008f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f1e:	69f8      	ldr	r0, [r7, #28]
 8008f20:	f000 f8b4 	bl	800908c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f24:	2301      	movs	r3, #1
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	e002      	b.n	8008f30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f30:	69bb      	ldr	r3, [r7, #24]
	}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	461a      	mov	r2, r3
 8008f54:	21a5      	movs	r1, #165	@ 0xa5
 8008f56:	f001 feef 	bl	800ad38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f64:	3b01      	subs	r3, #1
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f023 0307 	bic.w	r3, r3, #7
 8008f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	617b      	str	r3, [r7, #20]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01f      	beq.n	8008fdc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	e012      	b.n	8008fc8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	7819      	ldrb	r1, [r3, #0]
 8008faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	4413      	add	r3, r2
 8008fb0:	3334      	adds	r3, #52	@ 0x34
 8008fb2:	460a      	mov	r2, r1
 8008fb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4413      	add	r3, r2
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61fb      	str	r3, [r7, #28]
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	2b0f      	cmp	r3, #15
 8008fcc:	d9e9      	bls.n	8008fa2 <prvInitialiseNewTask+0x66>
 8008fce:	e000      	b.n	8008fd2 <prvInitialiseNewTask+0x96>
			{
				break;
 8008fd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fda:	e003      	b.n	8008fe4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	2b37      	cmp	r3, #55	@ 0x37
 8008fe8:	d901      	bls.n	8008fee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fea:	2337      	movs	r3, #55	@ 0x37
 8008fec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff f965 	bl	80082d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	3318      	adds	r3, #24
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff f960 	bl	80082d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009018:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009028:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	2200      	movs	r2, #0
 800902e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	2200      	movs	r2, #0
 8009036:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	3354      	adds	r3, #84	@ 0x54
 800903e:	224c      	movs	r2, #76	@ 0x4c
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f001 fe78 	bl	800ad38 <memset>
 8009048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904a:	4a0d      	ldr	r2, [pc, #52]	@ (8009080 <prvInitialiseNewTask+0x144>)
 800904c:	659a      	str	r2, [r3, #88]	@ 0x58
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	4a0c      	ldr	r2, [pc, #48]	@ (8009084 <prvInitialiseNewTask+0x148>)
 8009052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	4a0c      	ldr	r2, [pc, #48]	@ (8009088 <prvInitialiseNewTask+0x14c>)
 8009058:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	68f9      	ldr	r1, [r7, #12]
 800905e:	69b8      	ldr	r0, [r7, #24]
 8009060:	f001 fa2a 	bl	800a4b8 <pxPortInitialiseStack>
 8009064:	4602      	mov	r2, r0
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009076:	bf00      	nop
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	2000227c 	.word	0x2000227c
 8009084:	200022e4 	.word	0x200022e4
 8009088:	2000234c 	.word	0x2000234c

0800908c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009094:	f001 fb40 	bl	800a718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009098:	4b2d      	ldr	r3, [pc, #180]	@ (8009150 <prvAddNewTaskToReadyList+0xc4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	4a2c      	ldr	r2, [pc, #176]	@ (8009150 <prvAddNewTaskToReadyList+0xc4>)
 80090a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009154 <prvAddNewTaskToReadyList+0xc8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d109      	bne.n	80090be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009154 <prvAddNewTaskToReadyList+0xc8>)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090b0:	4b27      	ldr	r3, [pc, #156]	@ (8009150 <prvAddNewTaskToReadyList+0xc4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d110      	bne.n	80090da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090b8:	f000 fcfe 	bl	8009ab8 <prvInitialiseTaskLists>
 80090bc:	e00d      	b.n	80090da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090be:	4b26      	ldr	r3, [pc, #152]	@ (8009158 <prvAddNewTaskToReadyList+0xcc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d109      	bne.n	80090da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090c6:	4b23      	ldr	r3, [pc, #140]	@ (8009154 <prvAddNewTaskToReadyList+0xc8>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d802      	bhi.n	80090da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009154 <prvAddNewTaskToReadyList+0xc8>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090da:	4b20      	ldr	r3, [pc, #128]	@ (800915c <prvAddNewTaskToReadyList+0xd0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3301      	adds	r3, #1
 80090e0:	4a1e      	ldr	r2, [pc, #120]	@ (800915c <prvAddNewTaskToReadyList+0xd0>)
 80090e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090e4:	4b1d      	ldr	r3, [pc, #116]	@ (800915c <prvAddNewTaskToReadyList+0xd0>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009160 <prvAddNewTaskToReadyList+0xd4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d903      	bls.n	8009100 <prvAddNewTaskToReadyList+0x74>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fc:	4a18      	ldr	r2, [pc, #96]	@ (8009160 <prvAddNewTaskToReadyList+0xd4>)
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4a15      	ldr	r2, [pc, #84]	@ (8009164 <prvAddNewTaskToReadyList+0xd8>)
 800910e:	441a      	add	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7ff f8e9 	bl	80082ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800911c:	f001 fb2e 	bl	800a77c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009120:	4b0d      	ldr	r3, [pc, #52]	@ (8009158 <prvAddNewTaskToReadyList+0xcc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00e      	beq.n	8009146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009128:	4b0a      	ldr	r3, [pc, #40]	@ (8009154 <prvAddNewTaskToReadyList+0xc8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	429a      	cmp	r2, r3
 8009134:	d207      	bcs.n	8009146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009136:	4b0c      	ldr	r3, [pc, #48]	@ (8009168 <prvAddNewTaskToReadyList+0xdc>)
 8009138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	200014fc 	.word	0x200014fc
 8009154:	20001028 	.word	0x20001028
 8009158:	20001508 	.word	0x20001508
 800915c:	20001518 	.word	0x20001518
 8009160:	20001504 	.word	0x20001504
 8009164:	2000102c 	.word	0x2000102c
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009174:	f001 fad0 	bl	800a718 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d102      	bne.n	8009184 <vTaskDelete+0x18>
 800917e:	4b2d      	ldr	r3, [pc, #180]	@ (8009234 <vTaskDelete+0xc8>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	e000      	b.n	8009186 <vTaskDelete+0x1a>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3304      	adds	r3, #4
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff f90b 	bl	80083a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3318      	adds	r3, #24
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff f902 	bl	80083a8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80091a4:	4b24      	ldr	r3, [pc, #144]	@ (8009238 <vTaskDelete+0xcc>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	4a23      	ldr	r2, [pc, #140]	@ (8009238 <vTaskDelete+0xcc>)
 80091ac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80091ae:	4b21      	ldr	r3, [pc, #132]	@ (8009234 <vTaskDelete+0xc8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d10b      	bne.n	80091d0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	481f      	ldr	r0, [pc, #124]	@ (800923c <vTaskDelete+0xd0>)
 80091c0:	f7ff f895 	bl	80082ee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80091c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009240 <vTaskDelete+0xd4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3301      	adds	r3, #1
 80091ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009240 <vTaskDelete+0xd4>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e009      	b.n	80091e4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80091d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009244 <vTaskDelete+0xd8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009244 <vTaskDelete+0xd8>)
 80091d8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 fcda 	bl	8009b94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80091e0:	f000 fd0e 	bl	8009c00 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80091e4:	f001 faca 	bl	800a77c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80091e8:	4b17      	ldr	r3, [pc, #92]	@ (8009248 <vTaskDelete+0xdc>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01c      	beq.n	800922a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80091f0:	4b10      	ldr	r3, [pc, #64]	@ (8009234 <vTaskDelete+0xc8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d117      	bne.n	800922a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80091fa:	4b14      	ldr	r3, [pc, #80]	@ (800924c <vTaskDelete+0xe0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <vTaskDelete+0xae>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60bb      	str	r3, [r7, #8]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <vTaskDelete+0xe4>)
 800921c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20001028 	.word	0x20001028
 8009238:	20001518 	.word	0x20001518
 800923c:	200014d0 	.word	0x200014d0
 8009240:	200014e4 	.word	0x200014e4
 8009244:	200014fc 	.word	0x200014fc
 8009248:	20001508 	.word	0x20001508
 800924c:	20001524 	.word	0x20001524
 8009250:	e000ed04 	.word	0xe000ed04

08009254 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	@ 0x28
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10b      	bne.n	8009280 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	617b      	str	r3, [r7, #20]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <vTaskDelayUntil+0x4a>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	613b      	str	r3, [r7, #16]
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	e7fd      	b.n	800929a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800929e:	4b2a      	ldr	r3, [pc, #168]	@ (8009348 <vTaskDelayUntil+0xf4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <vTaskDelayUntil+0x6a>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60fb      	str	r3, [r7, #12]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80092be:	f000 f8b9 	bl	8009434 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80092c2:	4b22      	ldr	r3, [pc, #136]	@ (800934c <vTaskDelayUntil+0xf8>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	4413      	add	r3, r2
 80092d0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6a3a      	ldr	r2, [r7, #32]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d20b      	bcs.n	80092f4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d211      	bcs.n	800930a <vTaskDelayUntil+0xb6>
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d90d      	bls.n	800930a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80092ee:	2301      	movs	r3, #1
 80092f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80092f2:	e00a      	b.n	800930a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d303      	bcc.n	8009306 <vTaskDelayUntil+0xb2>
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	429a      	cmp	r2, r3
 8009304:	d901      	bls.n	800930a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009306:	2301      	movs	r3, #1
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fd1c 	bl	8009d5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009324:	f000 f894 	bl	8009450 <xTaskResumeAll>
 8009328:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d107      	bne.n	8009340 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8009330:	4b07      	ldr	r3, [pc, #28]	@ (8009350 <vTaskDelayUntil+0xfc>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009340:	bf00      	nop
 8009342:	3728      	adds	r7, #40	@ 0x28
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20001524 	.word	0x20001524
 800934c:	20001500 	.word	0x20001500
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08a      	sub	sp, #40	@ 0x28
 8009358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800935e:	2300      	movs	r3, #0
 8009360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009362:	463a      	mov	r2, r7
 8009364:	1d39      	adds	r1, r7, #4
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe ff5e 	bl	800822c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	9202      	str	r2, [sp, #8]
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	2300      	movs	r3, #0
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	2300      	movs	r3, #0
 8009380:	460a      	mov	r2, r1
 8009382:	4924      	ldr	r1, [pc, #144]	@ (8009414 <vTaskStartScheduler+0xc0>)
 8009384:	4824      	ldr	r0, [pc, #144]	@ (8009418 <vTaskStartScheduler+0xc4>)
 8009386:	f7ff fd33 	bl	8008df0 <xTaskCreateStatic>
 800938a:	4603      	mov	r3, r0
 800938c:	4a23      	ldr	r2, [pc, #140]	@ (800941c <vTaskStartScheduler+0xc8>)
 800938e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009390:	4b22      	ldr	r3, [pc, #136]	@ (800941c <vTaskStartScheduler+0xc8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e001      	b.n	80093a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d102      	bne.n	80093ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093a8:	f000 fd2c 	bl	8009e04 <xTimerCreateTimerTask>
 80093ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d11b      	bne.n	80093ec <vTaskStartScheduler+0x98>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	613b      	str	r3, [r7, #16]
}
 80093c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093c8:	4b15      	ldr	r3, [pc, #84]	@ (8009420 <vTaskStartScheduler+0xcc>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3354      	adds	r3, #84	@ 0x54
 80093ce:	4a15      	ldr	r2, [pc, #84]	@ (8009424 <vTaskStartScheduler+0xd0>)
 80093d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093d2:	4b15      	ldr	r3, [pc, #84]	@ (8009428 <vTaskStartScheduler+0xd4>)
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093da:	4b14      	ldr	r3, [pc, #80]	@ (800942c <vTaskStartScheduler+0xd8>)
 80093dc:	2201      	movs	r2, #1
 80093de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093e0:	4b13      	ldr	r3, [pc, #76]	@ (8009430 <vTaskStartScheduler+0xdc>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093e6:	f001 f8f3 	bl	800a5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093ea:	e00f      	b.n	800940c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d10b      	bne.n	800940c <vTaskStartScheduler+0xb8>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	60fb      	str	r3, [r7, #12]
}
 8009406:	bf00      	nop
 8009408:	bf00      	nop
 800940a:	e7fd      	b.n	8009408 <vTaskStartScheduler+0xb4>
}
 800940c:	bf00      	nop
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	0800af50 	.word	0x0800af50
 8009418:	08009a89 	.word	0x08009a89
 800941c:	20001520 	.word	0x20001520
 8009420:	20001028 	.word	0x20001028
 8009424:	200001c0 	.word	0x200001c0
 8009428:	2000151c 	.word	0x2000151c
 800942c:	20001508 	.word	0x20001508
 8009430:	20001500 	.word	0x20001500

08009434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009438:	4b04      	ldr	r3, [pc, #16]	@ (800944c <vTaskSuspendAll+0x18>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	4a03      	ldr	r2, [pc, #12]	@ (800944c <vTaskSuspendAll+0x18>)
 8009440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009442:	bf00      	nop
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20001524 	.word	0x20001524

08009450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800945e:	4b42      	ldr	r3, [pc, #264]	@ (8009568 <xTaskResumeAll+0x118>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <xTaskResumeAll+0x2e>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	603b      	str	r3, [r7, #0]
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	e7fd      	b.n	800947a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800947e:	f001 f94b 	bl	800a718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009482:	4b39      	ldr	r3, [pc, #228]	@ (8009568 <xTaskResumeAll+0x118>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3b01      	subs	r3, #1
 8009488:	4a37      	ldr	r2, [pc, #220]	@ (8009568 <xTaskResumeAll+0x118>)
 800948a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800948c:	4b36      	ldr	r3, [pc, #216]	@ (8009568 <xTaskResumeAll+0x118>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d162      	bne.n	800955a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009494:	4b35      	ldr	r3, [pc, #212]	@ (800956c <xTaskResumeAll+0x11c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d05e      	beq.n	800955a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800949c:	e02f      	b.n	80094fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949e:	4b34      	ldr	r3, [pc, #208]	@ (8009570 <xTaskResumeAll+0x120>)
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3318      	adds	r3, #24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe ff7c 	bl	80083a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe ff77 	bl	80083a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094be:	4b2d      	ldr	r3, [pc, #180]	@ (8009574 <xTaskResumeAll+0x124>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d903      	bls.n	80094ce <xTaskResumeAll+0x7e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009574 <xTaskResumeAll+0x124>)
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4a27      	ldr	r2, [pc, #156]	@ (8009578 <xTaskResumeAll+0x128>)
 80094dc:	441a      	add	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fe ff02 	bl	80082ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ee:	4b23      	ldr	r3, [pc, #140]	@ (800957c <xTaskResumeAll+0x12c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d302      	bcc.n	80094fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80094f8:	4b21      	ldr	r3, [pc, #132]	@ (8009580 <xTaskResumeAll+0x130>)
 80094fa:	2201      	movs	r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009570 <xTaskResumeAll+0x120>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1cb      	bne.n	800949e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800950c:	f000 fb78 	bl	8009c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009510:	4b1c      	ldr	r3, [pc, #112]	@ (8009584 <xTaskResumeAll+0x134>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d010      	beq.n	800953e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800951c:	f000 f858 	bl	80095d0 <xTaskIncrementTick>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009526:	4b16      	ldr	r3, [pc, #88]	@ (8009580 <xTaskResumeAll+0x130>)
 8009528:	2201      	movs	r2, #1
 800952a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3b01      	subs	r3, #1
 8009530:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f1      	bne.n	800951c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009538:	4b12      	ldr	r3, [pc, #72]	@ (8009584 <xTaskResumeAll+0x134>)
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800953e:	4b10      	ldr	r3, [pc, #64]	@ (8009580 <xTaskResumeAll+0x130>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009546:	2301      	movs	r3, #1
 8009548:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800954a:	4b0f      	ldr	r3, [pc, #60]	@ (8009588 <xTaskResumeAll+0x138>)
 800954c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800955a:	f001 f90f 	bl	800a77c <vPortExitCritical>

	return xAlreadyYielded;
 800955e:	68bb      	ldr	r3, [r7, #8]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20001524 	.word	0x20001524
 800956c:	200014fc 	.word	0x200014fc
 8009570:	200014bc 	.word	0x200014bc
 8009574:	20001504 	.word	0x20001504
 8009578:	2000102c 	.word	0x2000102c
 800957c:	20001028 	.word	0x20001028
 8009580:	20001510 	.word	0x20001510
 8009584:	2000150c 	.word	0x2000150c
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009592:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <xTaskGetTickCount+0x1c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009598:	687b      	ldr	r3, [r7, #4]
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	20001500 	.word	0x20001500

080095ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095b2:	f001 f991 	bl	800a8d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80095ba:	4b04      	ldr	r3, [pc, #16]	@ (80095cc <xTaskGetTickCountFromISR+0x20>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095c0:	683b      	ldr	r3, [r7, #0]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20001500 	.word	0x20001500

080095d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095da:	4b4f      	ldr	r3, [pc, #316]	@ (8009718 <xTaskIncrementTick+0x148>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 8090 	bne.w	8009704 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095e4:	4b4d      	ldr	r3, [pc, #308]	@ (800971c <xTaskIncrementTick+0x14c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095ec:	4a4b      	ldr	r2, [pc, #300]	@ (800971c <xTaskIncrementTick+0x14c>)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d121      	bne.n	800963c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80095f8:	4b49      	ldr	r3, [pc, #292]	@ (8009720 <xTaskIncrementTick+0x150>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00b      	beq.n	800961a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	603b      	str	r3, [r7, #0]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <xTaskIncrementTick+0x46>
 800961a:	4b41      	ldr	r3, [pc, #260]	@ (8009720 <xTaskIncrementTick+0x150>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	4b40      	ldr	r3, [pc, #256]	@ (8009724 <xTaskIncrementTick+0x154>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a3e      	ldr	r2, [pc, #248]	@ (8009720 <xTaskIncrementTick+0x150>)
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	4a3e      	ldr	r2, [pc, #248]	@ (8009724 <xTaskIncrementTick+0x154>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	4b3e      	ldr	r3, [pc, #248]	@ (8009728 <xTaskIncrementTick+0x158>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	4a3c      	ldr	r2, [pc, #240]	@ (8009728 <xTaskIncrementTick+0x158>)
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	f000 fae2 	bl	8009c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800963c:	4b3b      	ldr	r3, [pc, #236]	@ (800972c <xTaskIncrementTick+0x15c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d349      	bcc.n	80096da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009646:	4b36      	ldr	r3, [pc, #216]	@ (8009720 <xTaskIncrementTick+0x150>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009650:	4b36      	ldr	r3, [pc, #216]	@ (800972c <xTaskIncrementTick+0x15c>)
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	601a      	str	r2, [r3, #0]
					break;
 8009658:	e03f      	b.n	80096da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800965a:	4b31      	ldr	r3, [pc, #196]	@ (8009720 <xTaskIncrementTick+0x150>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d203      	bcs.n	800967a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009672:	4a2e      	ldr	r2, [pc, #184]	@ (800972c <xTaskIncrementTick+0x15c>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009678:	e02f      	b.n	80096da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	3304      	adds	r3, #4
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fe92 	bl	80083a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	3318      	adds	r3, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fe89 	bl	80083a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800969a:	4b25      	ldr	r3, [pc, #148]	@ (8009730 <xTaskIncrementTick+0x160>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d903      	bls.n	80096aa <xTaskIncrementTick+0xda>
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a6:	4a22      	ldr	r2, [pc, #136]	@ (8009730 <xTaskIncrementTick+0x160>)
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009734 <xTaskIncrementTick+0x164>)
 80096b8:	441a      	add	r2, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	3304      	adds	r3, #4
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7fe fe14 	bl	80082ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009738 <xTaskIncrementTick+0x168>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d3b8      	bcc.n	8009646 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096d8:	e7b5      	b.n	8009646 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096da:	4b17      	ldr	r3, [pc, #92]	@ (8009738 <xTaskIncrementTick+0x168>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e0:	4914      	ldr	r1, [pc, #80]	@ (8009734 <xTaskIncrementTick+0x164>)
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d901      	bls.n	80096f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80096f2:	2301      	movs	r3, #1
 80096f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096f6:	4b11      	ldr	r3, [pc, #68]	@ (800973c <xTaskIncrementTick+0x16c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80096fe:	2301      	movs	r3, #1
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	e004      	b.n	800970e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009704:	4b0e      	ldr	r3, [pc, #56]	@ (8009740 <xTaskIncrementTick+0x170>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	4a0d      	ldr	r2, [pc, #52]	@ (8009740 <xTaskIncrementTick+0x170>)
 800970c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800970e:	697b      	ldr	r3, [r7, #20]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20001524 	.word	0x20001524
 800971c:	20001500 	.word	0x20001500
 8009720:	200014b4 	.word	0x200014b4
 8009724:	200014b8 	.word	0x200014b8
 8009728:	20001514 	.word	0x20001514
 800972c:	2000151c 	.word	0x2000151c
 8009730:	20001504 	.word	0x20001504
 8009734:	2000102c 	.word	0x2000102c
 8009738:	20001028 	.word	0x20001028
 800973c:	20001510 	.word	0x20001510
 8009740:	2000150c 	.word	0x2000150c

08009744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800974a:	4b2b      	ldr	r3, [pc, #172]	@ (80097f8 <vTaskSwitchContext+0xb4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009752:	4b2a      	ldr	r3, [pc, #168]	@ (80097fc <vTaskSwitchContext+0xb8>)
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009758:	e047      	b.n	80097ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800975a:	4b28      	ldr	r3, [pc, #160]	@ (80097fc <vTaskSwitchContext+0xb8>)
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009760:	4b27      	ldr	r3, [pc, #156]	@ (8009800 <vTaskSwitchContext+0xbc>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	e011      	b.n	800978c <vTaskSwitchContext+0x48>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <vTaskSwitchContext+0x42>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	607b      	str	r3, [r7, #4]
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <vTaskSwitchContext+0x3e>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3b01      	subs	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	491d      	ldr	r1, [pc, #116]	@ (8009804 <vTaskSwitchContext+0xc0>)
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	440b      	add	r3, r1
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0e3      	beq.n	8009768 <vTaskSwitchContext+0x24>
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4a16      	ldr	r2, [pc, #88]	@ (8009804 <vTaskSwitchContext+0xc0>)
 80097ac:	4413      	add	r3, r2
 80097ae:	60bb      	str	r3, [r7, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	3308      	adds	r3, #8
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d104      	bne.n	80097d0 <vTaskSwitchContext+0x8c>
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009808 <vTaskSwitchContext+0xc4>)
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	4a09      	ldr	r2, [pc, #36]	@ (8009800 <vTaskSwitchContext+0xbc>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097e0:	4b09      	ldr	r3, [pc, #36]	@ (8009808 <vTaskSwitchContext+0xc4>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3354      	adds	r3, #84	@ 0x54
 80097e6:	4a09      	ldr	r2, [pc, #36]	@ (800980c <vTaskSwitchContext+0xc8>)
 80097e8:	6013      	str	r3, [r2, #0]
}
 80097ea:	bf00      	nop
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	20001524 	.word	0x20001524
 80097fc:	20001510 	.word	0x20001510
 8009800:	20001504 	.word	0x20001504
 8009804:	2000102c 	.word	0x2000102c
 8009808:	20001028 	.word	0x20001028
 800980c:	200001c0 	.word	0x200001c0

08009810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009838:	4b07      	ldr	r3, [pc, #28]	@ (8009858 <vTaskPlaceOnEventList+0x48>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3318      	adds	r3, #24
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7fe fd78 	bl	8008336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009846:	2101      	movs	r1, #1
 8009848:	6838      	ldr	r0, [r7, #0]
 800984a:	f000 fa87 	bl	8009d5c <prvAddCurrentTaskToDelayedList>
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001028 	.word	0x20001028

0800985c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	617b      	str	r3, [r7, #20]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009886:	4b0a      	ldr	r3, [pc, #40]	@ (80098b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3318      	adds	r3, #24
 800988c:	4619      	mov	r1, r3
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7fe fd2d 	bl	80082ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800989a:	f04f 33ff 	mov.w	r3, #4294967295
 800989e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	68b8      	ldr	r0, [r7, #8]
 80098a4:	f000 fa5a 	bl	8009d5c <prvAddCurrentTaskToDelayedList>
	}
 80098a8:	bf00      	nop
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20001028 	.word	0x20001028

080098b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10b      	bne.n	80098e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	60fb      	str	r3, [r7, #12]
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	e7fd      	b.n	80098de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3318      	adds	r3, #24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fd5e 	bl	80083a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009964 <xTaskRemoveFromEventList+0xb0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d11d      	bne.n	8009930 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe fd55 	bl	80083a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009902:	4b19      	ldr	r3, [pc, #100]	@ (8009968 <xTaskRemoveFromEventList+0xb4>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <xTaskRemoveFromEventList+0x5e>
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a16      	ldr	r2, [pc, #88]	@ (8009968 <xTaskRemoveFromEventList+0xb4>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4a13      	ldr	r2, [pc, #76]	@ (800996c <xTaskRemoveFromEventList+0xb8>)
 8009920:	441a      	add	r2, r3
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fe fce0 	bl	80082ee <vListInsertEnd>
 800992e:	e005      	b.n	800993c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	3318      	adds	r3, #24
 8009934:	4619      	mov	r1, r3
 8009936:	480e      	ldr	r0, [pc, #56]	@ (8009970 <xTaskRemoveFromEventList+0xbc>)
 8009938:	f7fe fcd9 	bl	80082ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009940:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <xTaskRemoveFromEventList+0xc0>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	429a      	cmp	r2, r3
 8009948:	d905      	bls.n	8009956 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800994e:	4b0a      	ldr	r3, [pc, #40]	@ (8009978 <xTaskRemoveFromEventList+0xc4>)
 8009950:	2201      	movs	r2, #1
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e001      	b.n	800995a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800995a:	697b      	ldr	r3, [r7, #20]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20001524 	.word	0x20001524
 8009968:	20001504 	.word	0x20001504
 800996c:	2000102c 	.word	0x2000102c
 8009970:	200014bc 	.word	0x200014bc
 8009974:	20001028 	.word	0x20001028
 8009978:	20001510 	.word	0x20001510

0800997c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009984:	4b06      	ldr	r3, [pc, #24]	@ (80099a0 <vTaskInternalSetTimeOutState+0x24>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800998c:	4b05      	ldr	r3, [pc, #20]	@ (80099a4 <vTaskInternalSetTimeOutState+0x28>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	20001514 	.word	0x20001514
 80099a4:	20001500 	.word	0x20001500

080099a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10b      	bne.n	80099d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	613b      	str	r3, [r7, #16]
}
 80099ca:	bf00      	nop
 80099cc:	bf00      	nop
 80099ce:	e7fd      	b.n	80099cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60fb      	str	r3, [r7, #12]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80099ee:	f000 fe93 	bl	800a718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a68 <xTaskCheckForTimeOut+0xc0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0a:	d102      	bne.n	8009a12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e023      	b.n	8009a5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	4b15      	ldr	r3, [pc, #84]	@ (8009a6c <xTaskCheckForTimeOut+0xc4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d007      	beq.n	8009a2e <xTaskCheckForTimeOut+0x86>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d302      	bcc.n	8009a2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	e015      	b.n	8009a5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d20b      	bcs.n	8009a50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff ff99 	bl	800997c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e004      	b.n	8009a5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a5a:	f000 fe8f 	bl	800a77c <vPortExitCritical>

	return xReturn;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3720      	adds	r7, #32
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20001500 	.word	0x20001500
 8009a6c:	20001514 	.word	0x20001514

08009a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a74:	4b03      	ldr	r3, [pc, #12]	@ (8009a84 <vTaskMissedYield+0x14>)
 8009a76:	2201      	movs	r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
}
 8009a7a:	bf00      	nop
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	20001510 	.word	0x20001510

08009a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a90:	f000 f852 	bl	8009b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a94:	4b06      	ldr	r3, [pc, #24]	@ (8009ab0 <prvIdleTask+0x28>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d9f9      	bls.n	8009a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a9c:	4b05      	ldr	r3, [pc, #20]	@ (8009ab4 <prvIdleTask+0x2c>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009aac:	e7f0      	b.n	8009a90 <prvIdleTask+0x8>
 8009aae:	bf00      	nop
 8009ab0:	2000102c 	.word	0x2000102c
 8009ab4:	e000ed04 	.word	0xe000ed04

08009ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009abe:	2300      	movs	r3, #0
 8009ac0:	607b      	str	r3, [r7, #4]
 8009ac2:	e00c      	b.n	8009ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4a12      	ldr	r2, [pc, #72]	@ (8009b18 <prvInitialiseTaskLists+0x60>)
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fbde 	bl	8008294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3301      	adds	r3, #1
 8009adc:	607b      	str	r3, [r7, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b37      	cmp	r3, #55	@ 0x37
 8009ae2:	d9ef      	bls.n	8009ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ae4:	480d      	ldr	r0, [pc, #52]	@ (8009b1c <prvInitialiseTaskLists+0x64>)
 8009ae6:	f7fe fbd5 	bl	8008294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009aea:	480d      	ldr	r0, [pc, #52]	@ (8009b20 <prvInitialiseTaskLists+0x68>)
 8009aec:	f7fe fbd2 	bl	8008294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009af0:	480c      	ldr	r0, [pc, #48]	@ (8009b24 <prvInitialiseTaskLists+0x6c>)
 8009af2:	f7fe fbcf 	bl	8008294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009af6:	480c      	ldr	r0, [pc, #48]	@ (8009b28 <prvInitialiseTaskLists+0x70>)
 8009af8:	f7fe fbcc 	bl	8008294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009afc:	480b      	ldr	r0, [pc, #44]	@ (8009b2c <prvInitialiseTaskLists+0x74>)
 8009afe:	f7fe fbc9 	bl	8008294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b02:	4b0b      	ldr	r3, [pc, #44]	@ (8009b30 <prvInitialiseTaskLists+0x78>)
 8009b04:	4a05      	ldr	r2, [pc, #20]	@ (8009b1c <prvInitialiseTaskLists+0x64>)
 8009b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <prvInitialiseTaskLists+0x7c>)
 8009b0a:	4a05      	ldr	r2, [pc, #20]	@ (8009b20 <prvInitialiseTaskLists+0x68>)
 8009b0c:	601a      	str	r2, [r3, #0]
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	2000102c 	.word	0x2000102c
 8009b1c:	2000148c 	.word	0x2000148c
 8009b20:	200014a0 	.word	0x200014a0
 8009b24:	200014bc 	.word	0x200014bc
 8009b28:	200014d0 	.word	0x200014d0
 8009b2c:	200014e8 	.word	0x200014e8
 8009b30:	200014b4 	.word	0x200014b4
 8009b34:	200014b8 	.word	0x200014b8

08009b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b3e:	e019      	b.n	8009b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b40:	f000 fdea 	bl	800a718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b44:	4b10      	ldr	r3, [pc, #64]	@ (8009b88 <prvCheckTasksWaitingTermination+0x50>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe fc29 	bl	80083a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b56:	4b0d      	ldr	r3, [pc, #52]	@ (8009b8c <prvCheckTasksWaitingTermination+0x54>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8009b8c <prvCheckTasksWaitingTermination+0x54>)
 8009b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	@ (8009b90 <prvCheckTasksWaitingTermination+0x58>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	4a0a      	ldr	r2, [pc, #40]	@ (8009b90 <prvCheckTasksWaitingTermination+0x58>)
 8009b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b6a:	f000 fe07 	bl	800a77c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f810 	bl	8009b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b74:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <prvCheckTasksWaitingTermination+0x58>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e1      	bne.n	8009b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200014d0 	.word	0x200014d0
 8009b8c:	200014fc 	.word	0x200014fc
 8009b90:	200014e4 	.word	0x200014e4

08009b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3354      	adds	r3, #84	@ 0x54
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 f8d1 	bl	800ad48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d108      	bne.n	8009bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 ff9f 	bl	800aaf8 <vPortFree>
				vPortFree( pxTCB );
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 ff9c 	bl	800aaf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bc0:	e019      	b.n	8009bf6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d103      	bne.n	8009bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 ff93 	bl	800aaf8 <vPortFree>
	}
 8009bd2:	e010      	b.n	8009bf6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d00b      	beq.n	8009bf6 <prvDeleteTCB+0x62>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	60fb      	str	r3, [r7, #12]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <prvDeleteTCB+0x5e>
	}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c06:	4b0c      	ldr	r3, [pc, #48]	@ (8009c38 <prvResetNextTaskUnblockTime+0x38>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d104      	bne.n	8009c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c10:	4b0a      	ldr	r3, [pc, #40]	@ (8009c3c <prvResetNextTaskUnblockTime+0x3c>)
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c18:	e008      	b.n	8009c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1a:	4b07      	ldr	r3, [pc, #28]	@ (8009c38 <prvResetNextTaskUnblockTime+0x38>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	4a04      	ldr	r2, [pc, #16]	@ (8009c3c <prvResetNextTaskUnblockTime+0x3c>)
 8009c2a:	6013      	str	r3, [r2, #0]
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	200014b4 	.word	0x200014b4
 8009c3c:	2000151c 	.word	0x2000151c

08009c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c46:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <xTaskGetSchedulerState+0x34>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	e008      	b.n	8009c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c54:	4b08      	ldr	r3, [pc, #32]	@ (8009c78 <xTaskGetSchedulerState+0x38>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	e001      	b.n	8009c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c62:	2300      	movs	r3, #0
 8009c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c66:	687b      	ldr	r3, [r7, #4]
	}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	20001508 	.word	0x20001508
 8009c78:	20001524 	.word	0x20001524

08009c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d058      	beq.n	8009d44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c92:	4b2f      	ldr	r3, [pc, #188]	@ (8009d50 <xTaskPriorityDisinherit+0xd4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d00b      	beq.n	8009cb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	60fb      	str	r3, [r7, #12]
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	e7fd      	b.n	8009cb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10b      	bne.n	8009cd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	60bb      	str	r3, [r7, #8]
}
 8009cce:	bf00      	nop
 8009cd0:	bf00      	nop
 8009cd2:	e7fd      	b.n	8009cd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cd8:	1e5a      	subs	r2, r3, #1
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d02c      	beq.n	8009d44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d128      	bne.n	8009d44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fb56 	bl	80083a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d14:	4b0f      	ldr	r3, [pc, #60]	@ (8009d54 <xTaskPriorityDisinherit+0xd8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d903      	bls.n	8009d24 <xTaskPriorityDisinherit+0xa8>
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d20:	4a0c      	ldr	r2, [pc, #48]	@ (8009d54 <xTaskPriorityDisinherit+0xd8>)
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4a09      	ldr	r2, [pc, #36]	@ (8009d58 <xTaskPriorityDisinherit+0xdc>)
 8009d32:	441a      	add	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f7fe fad7 	bl	80082ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d40:	2301      	movs	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d44:	697b      	ldr	r3, [r7, #20]
	}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20001028 	.word	0x20001028
 8009d54:	20001504 	.word	0x20001504
 8009d58:	2000102c 	.word	0x2000102c

08009d5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d66:	4b21      	ldr	r3, [pc, #132]	@ (8009dec <prvAddCurrentTaskToDelayedList+0x90>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d6c:	4b20      	ldr	r3, [pc, #128]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3304      	adds	r3, #4
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fb18 	bl	80083a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7e:	d10a      	bne.n	8009d96 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d86:	4b1a      	ldr	r3, [pc, #104]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4819      	ldr	r0, [pc, #100]	@ (8009df4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d90:	f7fe faad 	bl	80082ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d94:	e026      	b.n	8009de4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d9e:	4b14      	ldr	r3, [pc, #80]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d209      	bcs.n	8009dc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dae:	4b12      	ldr	r3, [pc, #72]	@ (8009df8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	f7fe fabb 	bl	8008336 <vListInsert>
}
 8009dc0:	e010      	b.n	8009de4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7fe fab1 	bl	8008336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d202      	bcs.n	8009de4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dde:	4a08      	ldr	r2, [pc, #32]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	6013      	str	r3, [r2, #0]
}
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20001500 	.word	0x20001500
 8009df0:	20001028 	.word	0x20001028
 8009df4:	200014e8 	.word	0x200014e8
 8009df8:	200014b8 	.word	0x200014b8
 8009dfc:	200014b4 	.word	0x200014b4
 8009e00:	2000151c 	.word	0x2000151c

08009e04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	@ 0x28
 8009e08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e0e:	f000 fb13 	bl	800a438 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e12:	4b1d      	ldr	r3, [pc, #116]	@ (8009e88 <xTimerCreateTimerTask+0x84>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d021      	beq.n	8009e5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e22:	1d3a      	adds	r2, r7, #4
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe fa17 	bl	8008260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	9202      	str	r2, [sp, #8]
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	2300      	movs	r3, #0
 8009e42:	460a      	mov	r2, r1
 8009e44:	4911      	ldr	r1, [pc, #68]	@ (8009e8c <xTimerCreateTimerTask+0x88>)
 8009e46:	4812      	ldr	r0, [pc, #72]	@ (8009e90 <xTimerCreateTimerTask+0x8c>)
 8009e48:	f7fe ffd2 	bl	8008df0 <xTaskCreateStatic>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4a11      	ldr	r2, [pc, #68]	@ (8009e94 <xTimerCreateTimerTask+0x90>)
 8009e50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e52:	4b10      	ldr	r3, [pc, #64]	@ (8009e94 <xTimerCreateTimerTask+0x90>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10b      	bne.n	8009e7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	613b      	str	r3, [r7, #16]
}
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	e7fd      	b.n	8009e78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e7c:	697b      	ldr	r3, [r7, #20]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20001558 	.word	0x20001558
 8009e8c:	0800af58 	.word	0x0800af58
 8009e90:	08009fd1 	.word	0x08009fd1
 8009e94:	2000155c 	.word	0x2000155c

08009e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08a      	sub	sp, #40	@ 0x28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10b      	bne.n	8009ec8 <xTimerGenericCommand+0x30>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	623b      	str	r3, [r7, #32]
}
 8009ec2:	bf00      	nop
 8009ec4:	bf00      	nop
 8009ec6:	e7fd      	b.n	8009ec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ec8:	4b19      	ldr	r3, [pc, #100]	@ (8009f30 <xTimerGenericCommand+0x98>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d02a      	beq.n	8009f26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	dc18      	bgt.n	8009f14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ee2:	f7ff fead 	bl	8009c40 <xTaskGetSchedulerState>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d109      	bne.n	8009f00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009eec:	4b10      	ldr	r3, [pc, #64]	@ (8009f30 <xTimerGenericCommand+0x98>)
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	f107 0110 	add.w	r1, r7, #16
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef8:	f7fe fb8a 	bl	8008610 <xQueueGenericSend>
 8009efc:	6278      	str	r0, [r7, #36]	@ 0x24
 8009efe:	e012      	b.n	8009f26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f00:	4b0b      	ldr	r3, [pc, #44]	@ (8009f30 <xTimerGenericCommand+0x98>)
 8009f02:	6818      	ldr	r0, [r3, #0]
 8009f04:	f107 0110 	add.w	r1, r7, #16
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f7fe fb80 	bl	8008610 <xQueueGenericSend>
 8009f10:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f12:	e008      	b.n	8009f26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f14:	4b06      	ldr	r3, [pc, #24]	@ (8009f30 <xTimerGenericCommand+0x98>)
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	f107 0110 	add.w	r1, r7, #16
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	f7fe fc78 	bl	8008814 <xQueueGenericSendFromISR>
 8009f24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3728      	adds	r7, #40	@ 0x28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20001558 	.word	0x20001558

08009f34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af02      	add	r7, sp, #8
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3e:	4b23      	ldr	r3, [pc, #140]	@ (8009fcc <prvProcessExpiredTimer+0x98>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fa2b 	bl	80083a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d023      	beq.n	8009fa8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	699a      	ldr	r2, [r3, #24]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	18d1      	adds	r1, r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	6978      	ldr	r0, [r7, #20]
 8009f6e:	f000 f8d5 	bl	800a11c <prvInsertTimerInActiveList>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d020      	beq.n	8009fba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f78:	2300      	movs	r3, #0
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	2100      	movs	r1, #0
 8009f82:	6978      	ldr	r0, [r7, #20]
 8009f84:	f7ff ff88 	bl	8009e98 <xTimerGenericCommand>
 8009f88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d114      	bne.n	8009fba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60fb      	str	r3, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	bf00      	nop
 8009fa6:	e7fd      	b.n	8009fa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fae:	f023 0301 	bic.w	r3, r3, #1
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	6978      	ldr	r0, [r7, #20]
 8009fc0:	4798      	blx	r3
}
 8009fc2:	bf00      	nop
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20001550 	.word	0x20001550

08009fd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fd8:	f107 0308 	add.w	r3, r7, #8
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f859 	bl	800a094 <prvGetNextExpireTime>
 8009fe2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f805 	bl	8009ff8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fee:	f000 f8d7 	bl	800a1a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ff2:	bf00      	nop
 8009ff4:	e7f0      	b.n	8009fd8 <prvTimerTask+0x8>
	...

08009ff8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a002:	f7ff fa17 	bl	8009434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f866 	bl	800a0dc <prvSampleTimeNow>
 800a010:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d130      	bne.n	800a07a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <prvProcessTimerOrBlockTask+0x3c>
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	429a      	cmp	r2, r3
 800a024:	d806      	bhi.n	800a034 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a026:	f7ff fa13 	bl	8009450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff ff81 	bl	8009f34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a032:	e024      	b.n	800a07e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d008      	beq.n	800a04c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a03a:	4b13      	ldr	r3, [pc, #76]	@ (800a088 <prvProcessTimerOrBlockTask+0x90>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <prvProcessTimerOrBlockTask+0x50>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <prvProcessTimerOrBlockTask+0x52>
 800a048:	2300      	movs	r3, #0
 800a04a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a04c:	4b0f      	ldr	r3, [pc, #60]	@ (800a08c <prvProcessTimerOrBlockTask+0x94>)
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	f7fe fe95 	bl	8008d88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a05e:	f7ff f9f7 	bl	8009450 <xTaskResumeAll>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a068:	4b09      	ldr	r3, [pc, #36]	@ (800a090 <prvProcessTimerOrBlockTask+0x98>)
 800a06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	f3bf 8f6f 	isb	sy
}
 800a078:	e001      	b.n	800a07e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a07a:	f7ff f9e9 	bl	8009450 <xTaskResumeAll>
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20001554 	.word	0x20001554
 800a08c:	20001558 	.word	0x20001558
 800a090:	e000ed04 	.word	0xe000ed04

0800a094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a09c:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d8 <prvGetNextExpireTime+0x44>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <prvGetNextExpireTime+0x16>
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	e000      	b.n	800a0ac <prvGetNextExpireTime+0x18>
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d105      	bne.n	800a0c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0b8:	4b07      	ldr	r3, [pc, #28]	@ (800a0d8 <prvGetNextExpireTime+0x44>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	60fb      	str	r3, [r7, #12]
 800a0c2:	e001      	b.n	800a0c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20001550 	.word	0x20001550

0800a0dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0e4:	f7ff fa52 	bl	800958c <xTaskGetTickCount>
 800a0e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a118 <prvSampleTimeNow+0x3c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d205      	bcs.n	800a100 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0f4:	f000 f93a 	bl	800a36c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	e002      	b.n	800a106 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a106:	4a04      	ldr	r2, [pc, #16]	@ (800a118 <prvSampleTimeNow+0x3c>)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a10c:	68fb      	ldr	r3, [r7, #12]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20001560 	.word	0x20001560

0800a11c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d812      	bhi.n	800a168 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	1ad2      	subs	r2, r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d302      	bcc.n	800a156 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a150:	2301      	movs	r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	e01b      	b.n	800a18e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a156:	4b10      	ldr	r3, [pc, #64]	@ (800a198 <prvInsertTimerInActiveList+0x7c>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fe f8e8 	bl	8008336 <vListInsert>
 800a166:	e012      	b.n	800a18e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d206      	bcs.n	800a17e <prvInsertTimerInActiveList+0x62>
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d302      	bcc.n	800a17e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a178:	2301      	movs	r3, #1
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	e007      	b.n	800a18e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a17e:	4b07      	ldr	r3, [pc, #28]	@ (800a19c <prvInsertTimerInActiveList+0x80>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3304      	adds	r3, #4
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f7fe f8d4 	bl	8008336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a18e:	697b      	ldr	r3, [r7, #20]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20001554 	.word	0x20001554
 800a19c:	20001550 	.word	0x20001550

0800a1a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08e      	sub	sp, #56	@ 0x38
 800a1a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1a6:	e0ce      	b.n	800a346 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	da19      	bge.n	800a1e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1ae:	1d3b      	adds	r3, r7, #4
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10b      	bne.n	800a1d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	61fb      	str	r3, [r7, #28]
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	e7fd      	b.n	800a1ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1d8:	6850      	ldr	r0, [r2, #4]
 800a1da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1dc:	6892      	ldr	r2, [r2, #8]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f2c0 80ae 	blt.w	800a346 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d004      	beq.n	800a200 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe f8d4 	bl	80083a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a200:	463b      	mov	r3, r7
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff ff6a 	bl	800a0dc <prvSampleTimeNow>
 800a208:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b09      	cmp	r3, #9
 800a20e:	f200 8097 	bhi.w	800a340 <prvProcessReceivedCommands+0x1a0>
 800a212:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <prvProcessReceivedCommands+0x78>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a241 	.word	0x0800a241
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a2b7 	.word	0x0800a2b7
 800a228:	0800a2cb 	.word	0x0800a2cb
 800a22c:	0800a317 	.word	0x0800a317
 800a230:	0800a241 	.word	0x0800a241
 800a234:	0800a241 	.word	0x0800a241
 800a238:	0800a2b7 	.word	0x0800a2b7
 800a23c:	0800a2cb 	.word	0x0800a2cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	18d1      	adds	r1, r2, r3
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a25e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a260:	f7ff ff5c 	bl	800a11c <prvInsertTimerInActiveList>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d06c      	beq.n	800a344 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a270:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d061      	beq.n	800a344 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	441a      	add	r2, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a292:	f7ff fe01 	bl	8009e98 <xTimerGenericCommand>
 800a296:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d152      	bne.n	800a344 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	61bb      	str	r3, [r7, #24]
}
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	e7fd      	b.n	800a2b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2bc:	f023 0301 	bic.w	r3, r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2c8:	e03d      	b.n	800a346 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2d0:	f043 0301 	orr.w	r3, r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10b      	bne.n	800a302 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	617b      	str	r3, [r7, #20]
}
 800a2fc:	bf00      	nop
 800a2fe:	bf00      	nop
 800a300:	e7fd      	b.n	800a2fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	18d1      	adds	r1, r2, r3
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a30e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a310:	f7ff ff04 	bl	800a11c <prvInsertTimerInActiveList>
					break;
 800a314:	e017      	b.n	800a346 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d103      	bne.n	800a32c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a326:	f000 fbe7 	bl	800aaf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a32a:	e00c      	b.n	800a346 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a332:	f023 0301 	bic.w	r3, r3, #1
 800a336:	b2da      	uxtb	r2, r3
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a33e:	e002      	b.n	800a346 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a340:	bf00      	nop
 800a342:	e000      	b.n	800a346 <prvProcessReceivedCommands+0x1a6>
					break;
 800a344:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a346:	4b08      	ldr	r3, [pc, #32]	@ (800a368 <prvProcessReceivedCommands+0x1c8>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	1d39      	adds	r1, r7, #4
 800a34c:	2200      	movs	r2, #0
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe fafe 	bl	8008950 <xQueueReceive>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	f47f af26 	bne.w	800a1a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	3730      	adds	r7, #48	@ 0x30
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20001558 	.word	0x20001558

0800a36c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a372:	e049      	b.n	800a408 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a374:	4b2e      	ldr	r3, [pc, #184]	@ (800a430 <prvSwitchTimerLists+0xc4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37e:	4b2c      	ldr	r3, [pc, #176]	@ (800a430 <prvSwitchTimerLists+0xc4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe f80b 	bl	80083a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d02f      	beq.n	800a408 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d90e      	bls.n	800a3d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a430 <prvSwitchTimerLists+0xc4>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	f7fd ffb0 	bl	8008336 <vListInsert>
 800a3d6:	e017      	b.n	800a408 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7ff fd58 	bl	8009e98 <xTimerGenericCommand>
 800a3e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	603b      	str	r3, [r7, #0]
}
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	e7fd      	b.n	800a404 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a408:	4b09      	ldr	r3, [pc, #36]	@ (800a430 <prvSwitchTimerLists+0xc4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1b0      	bne.n	800a374 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a412:	4b07      	ldr	r3, [pc, #28]	@ (800a430 <prvSwitchTimerLists+0xc4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a418:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <prvSwitchTimerLists+0xc8>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a04      	ldr	r2, [pc, #16]	@ (800a430 <prvSwitchTimerLists+0xc4>)
 800a41e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a420:	4a04      	ldr	r2, [pc, #16]	@ (800a434 <prvSwitchTimerLists+0xc8>)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	6013      	str	r3, [r2, #0]
}
 800a426:	bf00      	nop
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20001550 	.word	0x20001550
 800a434:	20001554 	.word	0x20001554

0800a438 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a43e:	f000 f96b 	bl	800a718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a442:	4b15      	ldr	r3, [pc, #84]	@ (800a498 <prvCheckForValidListAndQueue+0x60>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d120      	bne.n	800a48c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a44a:	4814      	ldr	r0, [pc, #80]	@ (800a49c <prvCheckForValidListAndQueue+0x64>)
 800a44c:	f7fd ff22 	bl	8008294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a450:	4813      	ldr	r0, [pc, #76]	@ (800a4a0 <prvCheckForValidListAndQueue+0x68>)
 800a452:	f7fd ff1f 	bl	8008294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a456:	4b13      	ldr	r3, [pc, #76]	@ (800a4a4 <prvCheckForValidListAndQueue+0x6c>)
 800a458:	4a10      	ldr	r2, [pc, #64]	@ (800a49c <prvCheckForValidListAndQueue+0x64>)
 800a45a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a45c:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <prvCheckForValidListAndQueue+0x70>)
 800a45e:	4a10      	ldr	r2, [pc, #64]	@ (800a4a0 <prvCheckForValidListAndQueue+0x68>)
 800a460:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a462:	2300      	movs	r3, #0
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	4b11      	ldr	r3, [pc, #68]	@ (800a4ac <prvCheckForValidListAndQueue+0x74>)
 800a468:	4a11      	ldr	r2, [pc, #68]	@ (800a4b0 <prvCheckForValidListAndQueue+0x78>)
 800a46a:	2110      	movs	r1, #16
 800a46c:	200a      	movs	r0, #10
 800a46e:	f7fe f82f 	bl	80084d0 <xQueueGenericCreateStatic>
 800a472:	4603      	mov	r3, r0
 800a474:	4a08      	ldr	r2, [pc, #32]	@ (800a498 <prvCheckForValidListAndQueue+0x60>)
 800a476:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a478:	4b07      	ldr	r3, [pc, #28]	@ (800a498 <prvCheckForValidListAndQueue+0x60>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a480:	4b05      	ldr	r3, [pc, #20]	@ (800a498 <prvCheckForValidListAndQueue+0x60>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	490b      	ldr	r1, [pc, #44]	@ (800a4b4 <prvCheckForValidListAndQueue+0x7c>)
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fc54 	bl	8008d34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a48c:	f000 f976 	bl	800a77c <vPortExitCritical>
}
 800a490:	bf00      	nop
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20001558 	.word	0x20001558
 800a49c:	20001528 	.word	0x20001528
 800a4a0:	2000153c 	.word	0x2000153c
 800a4a4:	20001550 	.word	0x20001550
 800a4a8:	20001554 	.word	0x20001554
 800a4ac:	20001604 	.word	0x20001604
 800a4b0:	20001564 	.word	0x20001564
 800a4b4:	0800af60 	.word	0x0800af60

0800a4b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3b04      	subs	r3, #4
 800a4c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f023 0201 	bic.w	r2, r3, #1
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3b04      	subs	r3, #4
 800a4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a51c <pxPortInitialiseStack+0x64>)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3b14      	subs	r3, #20
 800a4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3b04      	subs	r3, #4
 800a4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f06f 0202 	mvn.w	r2, #2
 800a506:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3b20      	subs	r3, #32
 800a50c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a50e:	68fb      	ldr	r3, [r7, #12]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	0800a521 	.word	0x0800a521

0800a520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a52a:	4b13      	ldr	r3, [pc, #76]	@ (800a578 <prvTaskExitError+0x58>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d00b      	beq.n	800a54c <prvTaskExitError+0x2c>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	60fb      	str	r3, [r7, #12]
}
 800a546:	bf00      	nop
 800a548:	bf00      	nop
 800a54a:	e7fd      	b.n	800a548 <prvTaskExitError+0x28>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	60bb      	str	r3, [r7, #8]
}
 800a55e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a560:	bf00      	nop
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0fc      	beq.n	800a562 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	200001bc 	.word	0x200001bc
 800a57c:	00000000 	.word	0x00000000

0800a580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a580:	4b07      	ldr	r3, [pc, #28]	@ (800a5a0 <pxCurrentTCBConst2>)
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	6808      	ldr	r0, [r1, #0]
 800a586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58a:	f380 8809 	msr	PSP, r0
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f04f 0000 	mov.w	r0, #0
 800a596:	f380 8811 	msr	BASEPRI, r0
 800a59a:	4770      	bx	lr
 800a59c:	f3af 8000 	nop.w

0800a5a0 <pxCurrentTCBConst2>:
 800a5a0:	20001028 	.word	0x20001028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5a8:	4808      	ldr	r0, [pc, #32]	@ (800a5cc <prvPortStartFirstTask+0x24>)
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	6800      	ldr	r0, [r0, #0]
 800a5ae:	f380 8808 	msr	MSP, r0
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f380 8814 	msr	CONTROL, r0
 800a5ba:	b662      	cpsie	i
 800a5bc:	b661      	cpsie	f
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	df00      	svc	0
 800a5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5ca:	bf00      	nop
 800a5cc:	e000ed08 	.word	0xe000ed08

0800a5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5d6:	4b47      	ldr	r3, [pc, #284]	@ (800a6f4 <xPortStartScheduler+0x124>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a47      	ldr	r2, [pc, #284]	@ (800a6f8 <xPortStartScheduler+0x128>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10b      	bne.n	800a5f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	60fb      	str	r3, [r7, #12]
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f4 <xPortStartScheduler+0x124>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a6fc <xPortStartScheduler+0x12c>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d10b      	bne.n	800a61a <xPortStartScheduler+0x4a>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	613b      	str	r3, [r7, #16]
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	e7fd      	b.n	800a616 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a61a:	4b39      	ldr	r3, [pc, #228]	@ (800a700 <xPortStartScheduler+0x130>)
 800a61c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	22ff      	movs	r2, #255	@ 0xff
 800a62a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	4b31      	ldr	r3, [pc, #196]	@ (800a704 <xPortStartScheduler+0x134>)
 800a640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a642:	4b31      	ldr	r3, [pc, #196]	@ (800a708 <xPortStartScheduler+0x138>)
 800a644:	2207      	movs	r2, #7
 800a646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a648:	e009      	b.n	800a65e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a64a:	4b2f      	ldr	r3, [pc, #188]	@ (800a708 <xPortStartScheduler+0x138>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	4a2d      	ldr	r2, [pc, #180]	@ (800a708 <xPortStartScheduler+0x138>)
 800a652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a666:	2b80      	cmp	r3, #128	@ 0x80
 800a668:	d0ef      	beq.n	800a64a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a66a:	4b27      	ldr	r3, [pc, #156]	@ (800a708 <xPortStartScheduler+0x138>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1c3 0307 	rsb	r3, r3, #7
 800a672:	2b04      	cmp	r3, #4
 800a674:	d00b      	beq.n	800a68e <xPortStartScheduler+0xbe>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60bb      	str	r3, [r7, #8]
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	e7fd      	b.n	800a68a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a68e:	4b1e      	ldr	r3, [pc, #120]	@ (800a708 <xPortStartScheduler+0x138>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	021b      	lsls	r3, r3, #8
 800a694:	4a1c      	ldr	r2, [pc, #112]	@ (800a708 <xPortStartScheduler+0x138>)
 800a696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a698:	4b1b      	ldr	r3, [pc, #108]	@ (800a708 <xPortStartScheduler+0x138>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6a0:	4a19      	ldr	r2, [pc, #100]	@ (800a708 <xPortStartScheduler+0x138>)
 800a6a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6ac:	4b17      	ldr	r3, [pc, #92]	@ (800a70c <xPortStartScheduler+0x13c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a16      	ldr	r2, [pc, #88]	@ (800a70c <xPortStartScheduler+0x13c>)
 800a6b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6b8:	4b14      	ldr	r3, [pc, #80]	@ (800a70c <xPortStartScheduler+0x13c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a13      	ldr	r2, [pc, #76]	@ (800a70c <xPortStartScheduler+0x13c>)
 800a6be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6c4:	f000 f8da 	bl	800a87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6c8:	4b11      	ldr	r3, [pc, #68]	@ (800a710 <xPortStartScheduler+0x140>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6ce:	f000 f8f9 	bl	800a8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6d2:	4b10      	ldr	r3, [pc, #64]	@ (800a714 <xPortStartScheduler+0x144>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a714 <xPortStartScheduler+0x144>)
 800a6d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6de:	f7ff ff63 	bl	800a5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6e2:	f7ff f82f 	bl	8009744 <vTaskSwitchContext>
	prvTaskExitError();
 800a6e6:	f7ff ff1b 	bl	800a520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	e000ed00 	.word	0xe000ed00
 800a6f8:	410fc271 	.word	0x410fc271
 800a6fc:	410fc270 	.word	0x410fc270
 800a700:	e000e400 	.word	0xe000e400
 800a704:	20001654 	.word	0x20001654
 800a708:	20001658 	.word	0x20001658
 800a70c:	e000ed20 	.word	0xe000ed20
 800a710:	200001bc 	.word	0x200001bc
 800a714:	e000ef34 	.word	0xe000ef34

0800a718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a732:	4b10      	ldr	r3, [pc, #64]	@ (800a774 <vPortEnterCritical+0x5c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	4a0e      	ldr	r2, [pc, #56]	@ (800a774 <vPortEnterCritical+0x5c>)
 800a73a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a73c:	4b0d      	ldr	r3, [pc, #52]	@ (800a774 <vPortEnterCritical+0x5c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d110      	bne.n	800a766 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a744:	4b0c      	ldr	r3, [pc, #48]	@ (800a778 <vPortEnterCritical+0x60>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <vPortEnterCritical+0x4e>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	603b      	str	r3, [r7, #0]
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	e7fd      	b.n	800a762 <vPortEnterCritical+0x4a>
	}
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	200001bc 	.word	0x200001bc
 800a778:	e000ed04 	.word	0xe000ed04

0800a77c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a782:	4b12      	ldr	r3, [pc, #72]	@ (800a7cc <vPortExitCritical+0x50>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <vPortExitCritical+0x26>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	607b      	str	r3, [r7, #4]
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	e7fd      	b.n	800a79e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7cc <vPortExitCritical+0x50>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	4a08      	ldr	r2, [pc, #32]	@ (800a7cc <vPortExitCritical+0x50>)
 800a7aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7ac:	4b07      	ldr	r3, [pc, #28]	@ (800a7cc <vPortExitCritical+0x50>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d105      	bne.n	800a7c0 <vPortExitCritical+0x44>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f383 8811 	msr	BASEPRI, r3
}
 800a7be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	200001bc 	.word	0x200001bc

0800a7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7d0:	f3ef 8009 	mrs	r0, PSP
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4b15      	ldr	r3, [pc, #84]	@ (800a830 <pxCurrentTCBConst>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	f01e 0f10 	tst.w	lr, #16
 800a7e0:	bf08      	it	eq
 800a7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ea:	6010      	str	r0, [r2, #0]
 800a7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7f4:	f380 8811 	msr	BASEPRI, r0
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f7fe ffa0 	bl	8009744 <vTaskSwitchContext>
 800a804:	f04f 0000 	mov.w	r0, #0
 800a808:	f380 8811 	msr	BASEPRI, r0
 800a80c:	bc09      	pop	{r0, r3}
 800a80e:	6819      	ldr	r1, [r3, #0]
 800a810:	6808      	ldr	r0, [r1, #0]
 800a812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a816:	f01e 0f10 	tst.w	lr, #16
 800a81a:	bf08      	it	eq
 800a81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a820:	f380 8809 	msr	PSP, r0
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst>:
 800a830:	20001028 	.word	0x20001028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop

0800a838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a852:	f7fe febd 	bl	80095d0 <xTaskIncrementTick>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a85c:	4b06      	ldr	r3, [pc, #24]	@ (800a878 <xPortSysTickHandler+0x40>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	2300      	movs	r3, #0
 800a866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	f383 8811 	msr	BASEPRI, r3
}
 800a86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a880:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b0 <vPortSetupTimerInterrupt+0x34>)
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a886:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b4 <vPortSetupTimerInterrupt+0x38>)
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a88c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b8 <vPortSetupTimerInterrupt+0x3c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a0a      	ldr	r2, [pc, #40]	@ (800a8bc <vPortSetupTimerInterrupt+0x40>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	099b      	lsrs	r3, r3, #6
 800a898:	4a09      	ldr	r2, [pc, #36]	@ (800a8c0 <vPortSetupTimerInterrupt+0x44>)
 800a89a:	3b01      	subs	r3, #1
 800a89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a89e:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <vPortSetupTimerInterrupt+0x34>)
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	e000e010 	.word	0xe000e010
 800a8b4:	e000e018 	.word	0xe000e018
 800a8b8:	20000000 	.word	0x20000000
 800a8bc:	10624dd3 	.word	0x10624dd3
 800a8c0:	e000e014 	.word	0xe000e014

0800a8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8d4 <vPortEnableVFP+0x10>
 800a8c8:	6801      	ldr	r1, [r0, #0]
 800a8ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8ce:	6001      	str	r1, [r0, #0]
 800a8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8d2:	bf00      	nop
 800a8d4:	e000ed88 	.word	0xe000ed88

0800a8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8de:	f3ef 8305 	mrs	r3, IPSR
 800a8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b0f      	cmp	r3, #15
 800a8e8:	d915      	bls.n	800a916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8ea:	4a18      	ldr	r2, [pc, #96]	@ (800a94c <vPortValidateInterruptPriority+0x74>)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8f4:	4b16      	ldr	r3, [pc, #88]	@ (800a950 <vPortValidateInterruptPriority+0x78>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	7afa      	ldrb	r2, [r7, #11]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d20b      	bcs.n	800a916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	607b      	str	r3, [r7, #4]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a916:	4b0f      	ldr	r3, [pc, #60]	@ (800a954 <vPortValidateInterruptPriority+0x7c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a91e:	4b0e      	ldr	r3, [pc, #56]	@ (800a958 <vPortValidateInterruptPriority+0x80>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d90b      	bls.n	800a93e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	603b      	str	r3, [r7, #0]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <vPortValidateInterruptPriority+0x62>
	}
 800a93e:	bf00      	nop
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	e000e3f0 	.word	0xe000e3f0
 800a950:	20001654 	.word	0x20001654
 800a954:	e000ed0c 	.word	0xe000ed0c
 800a958:	20001658 	.word	0x20001658

0800a95c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08a      	sub	sp, #40	@ 0x28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a968:	f7fe fd64 	bl	8009434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a96c:	4b5c      	ldr	r3, [pc, #368]	@ (800aae0 <pvPortMalloc+0x184>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a974:	f000 f924 	bl	800abc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a978:	4b5a      	ldr	r3, [pc, #360]	@ (800aae4 <pvPortMalloc+0x188>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4013      	ands	r3, r2
 800a980:	2b00      	cmp	r3, #0
 800a982:	f040 8095 	bne.w	800aab0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01e      	beq.n	800a9ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a98c:	2208      	movs	r2, #8
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d015      	beq.n	800a9ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f023 0307 	bic.w	r3, r3, #7
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <pvPortMalloc+0x6e>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	617b      	str	r3, [r7, #20]
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	e7fd      	b.n	800a9c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d06f      	beq.n	800aab0 <pvPortMalloc+0x154>
 800a9d0:	4b45      	ldr	r3, [pc, #276]	@ (800aae8 <pvPortMalloc+0x18c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d86a      	bhi.n	800aab0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9da:	4b44      	ldr	r3, [pc, #272]	@ (800aaec <pvPortMalloc+0x190>)
 800a9dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9de:	4b43      	ldr	r3, [pc, #268]	@ (800aaec <pvPortMalloc+0x190>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9e4:	e004      	b.n	800a9f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d903      	bls.n	800aa02 <pvPortMalloc+0xa6>
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1f1      	bne.n	800a9e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa02:	4b37      	ldr	r3, [pc, #220]	@ (800aae0 <pvPortMalloc+0x184>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d051      	beq.n	800aab0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2208      	movs	r2, #8
 800aa12:	4413      	add	r3, r2
 800aa14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	1ad2      	subs	r2, r2, r3
 800aa26:	2308      	movs	r3, #8
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d920      	bls.n	800aa70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4413      	add	r3, r2
 800aa34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	f003 0307 	and.w	r3, r3, #7
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <pvPortMalloc+0xfc>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	613b      	str	r3, [r7, #16]
}
 800aa52:	bf00      	nop
 800aa54:	bf00      	nop
 800aa56:	e7fd      	b.n	800aa54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa6a:	69b8      	ldr	r0, [r7, #24]
 800aa6c:	f000 f90a 	bl	800ac84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa70:	4b1d      	ldr	r3, [pc, #116]	@ (800aae8 <pvPortMalloc+0x18c>)
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	4a1b      	ldr	r2, [pc, #108]	@ (800aae8 <pvPortMalloc+0x18c>)
 800aa7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa7e:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <pvPortMalloc+0x18c>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf0 <pvPortMalloc+0x194>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d203      	bcs.n	800aa92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa8a:	4b17      	ldr	r3, [pc, #92]	@ (800aae8 <pvPortMalloc+0x18c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a18      	ldr	r2, [pc, #96]	@ (800aaf0 <pvPortMalloc+0x194>)
 800aa90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	4b13      	ldr	r3, [pc, #76]	@ (800aae4 <pvPortMalloc+0x188>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aaa6:	4b13      	ldr	r3, [pc, #76]	@ (800aaf4 <pvPortMalloc+0x198>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	4a11      	ldr	r2, [pc, #68]	@ (800aaf4 <pvPortMalloc+0x198>)
 800aaae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aab0:	f7fe fcce 	bl	8009450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <pvPortMalloc+0x17a>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	60fb      	str	r3, [r7, #12]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <pvPortMalloc+0x176>
	return pvReturn;
 800aad6:	69fb      	ldr	r3, [r7, #28]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3728      	adds	r7, #40	@ 0x28
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20002264 	.word	0x20002264
 800aae4:	20002278 	.word	0x20002278
 800aae8:	20002268 	.word	0x20002268
 800aaec:	2000225c 	.word	0x2000225c
 800aaf0:	2000226c 	.word	0x2000226c
 800aaf4:	20002270 	.word	0x20002270

0800aaf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d04f      	beq.n	800abaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab0a:	2308      	movs	r3, #8
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	4413      	add	r3, r2
 800ab12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	4b25      	ldr	r3, [pc, #148]	@ (800abb4 <vPortFree+0xbc>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4013      	ands	r3, r2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10b      	bne.n	800ab3e <vPortFree+0x46>
	__asm volatile
 800ab26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	60fb      	str	r3, [r7, #12]
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	e7fd      	b.n	800ab3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <vPortFree+0x66>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	60bb      	str	r3, [r7, #8]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	4b14      	ldr	r3, [pc, #80]	@ (800abb4 <vPortFree+0xbc>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4013      	ands	r3, r2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d01e      	beq.n	800abaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11a      	bne.n	800abaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	4b0e      	ldr	r3, [pc, #56]	@ (800abb4 <vPortFree+0xbc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	43db      	mvns	r3, r3
 800ab7e:	401a      	ands	r2, r3
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab84:	f7fe fc56 	bl	8009434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	@ (800abb8 <vPortFree+0xc0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4413      	add	r3, r2
 800ab92:	4a09      	ldr	r2, [pc, #36]	@ (800abb8 <vPortFree+0xc0>)
 800ab94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab96:	6938      	ldr	r0, [r7, #16]
 800ab98:	f000 f874 	bl	800ac84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab9c:	4b07      	ldr	r3, [pc, #28]	@ (800abbc <vPortFree+0xc4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3301      	adds	r3, #1
 800aba2:	4a06      	ldr	r2, [pc, #24]	@ (800abbc <vPortFree+0xc4>)
 800aba4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aba6:	f7fe fc53 	bl	8009450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abaa:	bf00      	nop
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20002278 	.word	0x20002278
 800abb8:	20002268 	.word	0x20002268
 800abbc:	20002274 	.word	0x20002274

0800abc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800abca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abcc:	4b27      	ldr	r3, [pc, #156]	@ (800ac6c <prvHeapInit+0xac>)
 800abce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00c      	beq.n	800abf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3307      	adds	r3, #7
 800abde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f023 0307 	bic.w	r3, r3, #7
 800abe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	4a1f      	ldr	r2, [pc, #124]	@ (800ac6c <prvHeapInit+0xac>)
 800abf0:	4413      	add	r3, r2
 800abf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac70 <prvHeapInit+0xb0>)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abfe:	4b1c      	ldr	r3, [pc, #112]	@ (800ac70 <prvHeapInit+0xb0>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	4413      	add	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	1a9b      	subs	r3, r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4a15      	ldr	r2, [pc, #84]	@ (800ac74 <prvHeapInit+0xb4>)
 800ac20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac22:	4b14      	ldr	r3, [pc, #80]	@ (800ac74 <prvHeapInit+0xb4>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2200      	movs	r2, #0
 800ac28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac2a:	4b12      	ldr	r3, [pc, #72]	@ (800ac74 <prvHeapInit+0xb4>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	1ad2      	subs	r2, r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac40:	4b0c      	ldr	r3, [pc, #48]	@ (800ac74 <prvHeapInit+0xb4>)
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac78 <prvHeapInit+0xb8>)
 800ac4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4a09      	ldr	r2, [pc, #36]	@ (800ac7c <prvHeapInit+0xbc>)
 800ac56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac58:	4b09      	ldr	r3, [pc, #36]	@ (800ac80 <prvHeapInit+0xc0>)
 800ac5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac5e:	601a      	str	r2, [r3, #0]
}
 800ac60:	bf00      	nop
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	2000165c 	.word	0x2000165c
 800ac70:	2000225c 	.word	0x2000225c
 800ac74:	20002264 	.word	0x20002264
 800ac78:	2000226c 	.word	0x2000226c
 800ac7c:	20002268 	.word	0x20002268
 800ac80:	20002278 	.word	0x20002278

0800ac84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac8c:	4b28      	ldr	r3, [pc, #160]	@ (800ad30 <prvInsertBlockIntoFreeList+0xac>)
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	e002      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x14>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d8f7      	bhi.n	800ac92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d108      	bne.n	800acc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	441a      	add	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	441a      	add	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d118      	bne.n	800ad0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	4b15      	ldr	r3, [pc, #84]	@ (800ad34 <prvInsertBlockIntoFreeList+0xb0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d00d      	beq.n	800ad02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	441a      	add	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	e008      	b.n	800ad14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad02:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <prvInsertBlockIntoFreeList+0xb0>)
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	e003      	b.n	800ad14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d002      	beq.n	800ad22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad22:	bf00      	nop
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	2000225c 	.word	0x2000225c
 800ad34:	20002264 	.word	0x20002264

0800ad38 <memset>:
 800ad38:	4402      	add	r2, r0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d100      	bne.n	800ad42 <memset+0xa>
 800ad40:	4770      	bx	lr
 800ad42:	f803 1b01 	strb.w	r1, [r3], #1
 800ad46:	e7f9      	b.n	800ad3c <memset+0x4>

0800ad48 <_reclaim_reent>:
 800ad48:	4b2d      	ldr	r3, [pc, #180]	@ (800ae00 <_reclaim_reent+0xb8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4283      	cmp	r3, r0
 800ad4e:	b570      	push	{r4, r5, r6, lr}
 800ad50:	4604      	mov	r4, r0
 800ad52:	d053      	beq.n	800adfc <_reclaim_reent+0xb4>
 800ad54:	69c3      	ldr	r3, [r0, #28]
 800ad56:	b31b      	cbz	r3, 800ada0 <_reclaim_reent+0x58>
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	b163      	cbz	r3, 800ad76 <_reclaim_reent+0x2e>
 800ad5c:	2500      	movs	r5, #0
 800ad5e:	69e3      	ldr	r3, [r4, #28]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	5959      	ldr	r1, [r3, r5]
 800ad64:	b9b1      	cbnz	r1, 800ad94 <_reclaim_reent+0x4c>
 800ad66:	3504      	adds	r5, #4
 800ad68:	2d80      	cmp	r5, #128	@ 0x80
 800ad6a:	d1f8      	bne.n	800ad5e <_reclaim_reent+0x16>
 800ad6c:	69e3      	ldr	r3, [r4, #28]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	68d9      	ldr	r1, [r3, #12]
 800ad72:	f000 f87b 	bl	800ae6c <_free_r>
 800ad76:	69e3      	ldr	r3, [r4, #28]
 800ad78:	6819      	ldr	r1, [r3, #0]
 800ad7a:	b111      	cbz	r1, 800ad82 <_reclaim_reent+0x3a>
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 f875 	bl	800ae6c <_free_r>
 800ad82:	69e3      	ldr	r3, [r4, #28]
 800ad84:	689d      	ldr	r5, [r3, #8]
 800ad86:	b15d      	cbz	r5, 800ada0 <_reclaim_reent+0x58>
 800ad88:	4629      	mov	r1, r5
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	682d      	ldr	r5, [r5, #0]
 800ad8e:	f000 f86d 	bl	800ae6c <_free_r>
 800ad92:	e7f8      	b.n	800ad86 <_reclaim_reent+0x3e>
 800ad94:	680e      	ldr	r6, [r1, #0]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 f868 	bl	800ae6c <_free_r>
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	e7e1      	b.n	800ad64 <_reclaim_reent+0x1c>
 800ada0:	6961      	ldr	r1, [r4, #20]
 800ada2:	b111      	cbz	r1, 800adaa <_reclaim_reent+0x62>
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 f861 	bl	800ae6c <_free_r>
 800adaa:	69e1      	ldr	r1, [r4, #28]
 800adac:	b111      	cbz	r1, 800adb4 <_reclaim_reent+0x6c>
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f85c 	bl	800ae6c <_free_r>
 800adb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800adb6:	b111      	cbz	r1, 800adbe <_reclaim_reent+0x76>
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f857 	bl	800ae6c <_free_r>
 800adbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adc0:	b111      	cbz	r1, 800adc8 <_reclaim_reent+0x80>
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 f852 	bl	800ae6c <_free_r>
 800adc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800adca:	b111      	cbz	r1, 800add2 <_reclaim_reent+0x8a>
 800adcc:	4620      	mov	r0, r4
 800adce:	f000 f84d 	bl	800ae6c <_free_r>
 800add2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800add4:	b111      	cbz	r1, 800addc <_reclaim_reent+0x94>
 800add6:	4620      	mov	r0, r4
 800add8:	f000 f848 	bl	800ae6c <_free_r>
 800addc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800adde:	b111      	cbz	r1, 800ade6 <_reclaim_reent+0x9e>
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 f843 	bl	800ae6c <_free_r>
 800ade6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ade8:	b111      	cbz	r1, 800adf0 <_reclaim_reent+0xa8>
 800adea:	4620      	mov	r0, r4
 800adec:	f000 f83e 	bl	800ae6c <_free_r>
 800adf0:	6a23      	ldr	r3, [r4, #32]
 800adf2:	b11b      	cbz	r3, 800adfc <_reclaim_reent+0xb4>
 800adf4:	4620      	mov	r0, r4
 800adf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adfa:	4718      	bx	r3
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
 800adfe:	bf00      	nop
 800ae00:	200001c0 	.word	0x200001c0

0800ae04 <__libc_init_array>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4d0d      	ldr	r5, [pc, #52]	@ (800ae3c <__libc_init_array+0x38>)
 800ae08:	4c0d      	ldr	r4, [pc, #52]	@ (800ae40 <__libc_init_array+0x3c>)
 800ae0a:	1b64      	subs	r4, r4, r5
 800ae0c:	10a4      	asrs	r4, r4, #2
 800ae0e:	2600      	movs	r6, #0
 800ae10:	42a6      	cmp	r6, r4
 800ae12:	d109      	bne.n	800ae28 <__libc_init_array+0x24>
 800ae14:	4d0b      	ldr	r5, [pc, #44]	@ (800ae44 <__libc_init_array+0x40>)
 800ae16:	4c0c      	ldr	r4, [pc, #48]	@ (800ae48 <__libc_init_array+0x44>)
 800ae18:	f000 f87e 	bl	800af18 <_init>
 800ae1c:	1b64      	subs	r4, r4, r5
 800ae1e:	10a4      	asrs	r4, r4, #2
 800ae20:	2600      	movs	r6, #0
 800ae22:	42a6      	cmp	r6, r4
 800ae24:	d105      	bne.n	800ae32 <__libc_init_array+0x2e>
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2c:	4798      	blx	r3
 800ae2e:	3601      	adds	r6, #1
 800ae30:	e7ee      	b.n	800ae10 <__libc_init_array+0xc>
 800ae32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae36:	4798      	blx	r3
 800ae38:	3601      	adds	r6, #1
 800ae3a:	e7f2      	b.n	800ae22 <__libc_init_array+0x1e>
 800ae3c:	0800b03c 	.word	0x0800b03c
 800ae40:	0800b03c 	.word	0x0800b03c
 800ae44:	0800b03c 	.word	0x0800b03c
 800ae48:	0800b040 	.word	0x0800b040

0800ae4c <__retarget_lock_acquire_recursive>:
 800ae4c:	4770      	bx	lr

0800ae4e <__retarget_lock_release_recursive>:
 800ae4e:	4770      	bx	lr

0800ae50 <memcpy>:
 800ae50:	440a      	add	r2, r1
 800ae52:	4291      	cmp	r1, r2
 800ae54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae58:	d100      	bne.n	800ae5c <memcpy+0xc>
 800ae5a:	4770      	bx	lr
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae66:	4291      	cmp	r1, r2
 800ae68:	d1f9      	bne.n	800ae5e <memcpy+0xe>
 800ae6a:	bd10      	pop	{r4, pc}

0800ae6c <_free_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4605      	mov	r5, r0
 800ae70:	2900      	cmp	r1, #0
 800ae72:	d041      	beq.n	800aef8 <_free_r+0x8c>
 800ae74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae78:	1f0c      	subs	r4, r1, #4
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	bfb8      	it	lt
 800ae7e:	18e4      	addlt	r4, r4, r3
 800ae80:	f000 f83e 	bl	800af00 <__malloc_lock>
 800ae84:	4a1d      	ldr	r2, [pc, #116]	@ (800aefc <_free_r+0x90>)
 800ae86:	6813      	ldr	r3, [r2, #0]
 800ae88:	b933      	cbnz	r3, 800ae98 <_free_r+0x2c>
 800ae8a:	6063      	str	r3, [r4, #4]
 800ae8c:	6014      	str	r4, [r2, #0]
 800ae8e:	4628      	mov	r0, r5
 800ae90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae94:	f000 b83a 	b.w	800af0c <__malloc_unlock>
 800ae98:	42a3      	cmp	r3, r4
 800ae9a:	d908      	bls.n	800aeae <_free_r+0x42>
 800ae9c:	6820      	ldr	r0, [r4, #0]
 800ae9e:	1821      	adds	r1, r4, r0
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf01      	itttt	eq
 800aea4:	6819      	ldreq	r1, [r3, #0]
 800aea6:	685b      	ldreq	r3, [r3, #4]
 800aea8:	1809      	addeq	r1, r1, r0
 800aeaa:	6021      	streq	r1, [r4, #0]
 800aeac:	e7ed      	b.n	800ae8a <_free_r+0x1e>
 800aeae:	461a      	mov	r2, r3
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	b10b      	cbz	r3, 800aeb8 <_free_r+0x4c>
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	d9fa      	bls.n	800aeae <_free_r+0x42>
 800aeb8:	6811      	ldr	r1, [r2, #0]
 800aeba:	1850      	adds	r0, r2, r1
 800aebc:	42a0      	cmp	r0, r4
 800aebe:	d10b      	bne.n	800aed8 <_free_r+0x6c>
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	4401      	add	r1, r0
 800aec4:	1850      	adds	r0, r2, r1
 800aec6:	4283      	cmp	r3, r0
 800aec8:	6011      	str	r1, [r2, #0]
 800aeca:	d1e0      	bne.n	800ae8e <_free_r+0x22>
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	6053      	str	r3, [r2, #4]
 800aed2:	4408      	add	r0, r1
 800aed4:	6010      	str	r0, [r2, #0]
 800aed6:	e7da      	b.n	800ae8e <_free_r+0x22>
 800aed8:	d902      	bls.n	800aee0 <_free_r+0x74>
 800aeda:	230c      	movs	r3, #12
 800aedc:	602b      	str	r3, [r5, #0]
 800aede:	e7d6      	b.n	800ae8e <_free_r+0x22>
 800aee0:	6820      	ldr	r0, [r4, #0]
 800aee2:	1821      	adds	r1, r4, r0
 800aee4:	428b      	cmp	r3, r1
 800aee6:	bf04      	itt	eq
 800aee8:	6819      	ldreq	r1, [r3, #0]
 800aeea:	685b      	ldreq	r3, [r3, #4]
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	bf04      	itt	eq
 800aef0:	1809      	addeq	r1, r1, r0
 800aef2:	6021      	streq	r1, [r4, #0]
 800aef4:	6054      	str	r4, [r2, #4]
 800aef6:	e7ca      	b.n	800ae8e <_free_r+0x22>
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop
 800aefc:	200023b8 	.word	0x200023b8

0800af00 <__malloc_lock>:
 800af00:	4801      	ldr	r0, [pc, #4]	@ (800af08 <__malloc_lock+0x8>)
 800af02:	f7ff bfa3 	b.w	800ae4c <__retarget_lock_acquire_recursive>
 800af06:	bf00      	nop
 800af08:	200023b4 	.word	0x200023b4

0800af0c <__malloc_unlock>:
 800af0c:	4801      	ldr	r0, [pc, #4]	@ (800af14 <__malloc_unlock+0x8>)
 800af0e:	f7ff bf9e 	b.w	800ae4e <__retarget_lock_release_recursive>
 800af12:	bf00      	nop
 800af14:	200023b4 	.word	0x200023b4

0800af18 <_init>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	bf00      	nop
 800af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1e:	bc08      	pop	{r3}
 800af20:	469e      	mov	lr, r3
 800af22:	4770      	bx	lr

0800af24 <_fini>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr
